{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img_resize_tool.py","path":"img_resize_tool.py","modified":1,"renderable":0},{"_id":"source/tool_img_resize.py","path":"tool_img_resize.py","modified":1,"renderable":0},{"_id":"source/tool_img_rename.py","path":"tool_img_rename.py","modified":1,"renderable":0},{"_id":"source/photos/empty.png","path":"photos/empty.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.16f007.css","path":"main.16f007.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.16f007.js","path":"main.16f007.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.4ab092.css","path":"main.4ab092.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.4ab092.js","path":"main.4ab092.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.6efad3.js","path":"main.6efad3.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.e817a4.js","path":"main.e817a4.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.6efad3.css","path":"main.6efad3.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.2088df.js","path":"slider.2088df.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.e817a4.css","path":"main.e817a4.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.dd5d96.js","path":"slider.dd5d96.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.4bdabd.js","path":"mobile.4bdabd.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.7ddca9.css","path":"main.7ddca9.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.ec0eac.js","path":"mobile.ec0eac.js","modified":1,"renderable":1},{"_id":"source/slides/index/coreXY.html","path":"slides/index/coreXY.html","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY.md","path":"slides/index/coreXY.md","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.adcbdb.woff","path":"fonts/iconfont.adcbdb.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.583fff.svg","path":"fonts/iconfont.583fff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.c7aae9.eot","path":"fonts/iconfont.c7aae9.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.7f94da.js","path":"slider.7f94da.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.7ddca9.js","path":"main.7ddca9.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.e26e17.ttf","path":"fonts/iconfont.e26e17.ttf","modified":1,"renderable":1},{"_id":"source/slides/index/coreXY/幻灯片9.PNG","path":"slides/index/coreXY/幻灯片9.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片4.PNG","path":"slides/index/coreXY/幻灯片4.PNG","modified":1,"renderable":0},{"_id":"themes/yilia/source/img/avatar-1.png","path":"img/avatar-1.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.9e1dfd.js","path":"mobile.9e1dfd.js","modified":1,"renderable":1},{"_id":"source/slides/index/coreXY/幻灯片7.PNG","path":"slides/index/coreXY/幻灯片7.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片5.PNG","path":"slides/index/coreXY/幻灯片5.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片10.PNG","path":"slides/index/coreXY/幻灯片10.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片6.PNG","path":"slides/index/coreXY/幻灯片6.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片2.PNG","path":"slides/index/coreXY/幻灯片2.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片8.PNG","path":"slides/index/coreXY/幻灯片8.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片1.PNG","path":"slides/index/coreXY/幻灯片1.PNG","modified":1,"renderable":0},{"_id":"source/slides/index/coreXY/幻灯片3.PNG","path":"slides/index/coreXY/幻灯片3.PNG","modified":1,"renderable":0},{"_id":"source/cloc","path":"cloc","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"5750e603156cf5339d580683f658f21559cb63a6","modified":1578251604412},{"_id":"source/img_resize_tool.py","hash":"fcbc05ca4138bacdbf8c83ca99683c53f1a5931f","modified":1578251605281},{"_id":"source/tool_img_resize.py","hash":"fcbc05ca4138bacdbf8c83ca99683c53f1a5931f","modified":1578251605300},{"_id":"source/tool_img_rename.py","hash":"ad77dd054c16cc78cad06b956ab87b8664a60b70","modified":1578251605297},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1578251605479},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1578251605480},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1578251605487},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1578251605482},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1578251605483},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1578251605489},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1578251605719},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1578251605485},{"_id":"source/photos/lazyload.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578251605295},{"_id":"themes/yilia/_config.yml","hash":"75b3eddda06a65db0d295822d81921cfbd28f725","modified":1579678410406},{"_id":"source/_posts/AI通关超级马里奥.md","hash":"6065697f63d851bcd16827142c1f80aaa303d8cd","modified":1578251604413},{"_id":"source/_posts/Arduino和一些好玩的.md","hash":"4ad9c8b94f5bf20e7825ceaa24d5dc86ed9d3f85","modified":1578251604415},{"_id":"source/_posts/Brainfuck与2020的新年仪式感.md","hash":"d288f36191c0018acb29c1b867cc2988753bfbf1","modified":1578251604417},{"_id":"source/_posts/C#学习笔记.md","hash":"579f7d41c7070ef126e742614f5d4652fa8646e8","modified":1578251604419},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他.md","hash":"04bdbc7aa1f2244594ac2b21c428f4b15ce057cd","modified":1578251604421},{"_id":"source/_posts/Flask学习笔记.md","hash":"95840cfe855a2ed7b3be8c96d90bc8d7d12ffdaf","modified":1578251604467},{"_id":"source/_posts/Hexo：Hello Hexo.md","hash":"91df174a5ffd43b6e2ff7a7910dfbd9f48547489","modified":1582638513390},{"_id":"source/_posts/Hexo：yilia主题下使用LaTex添加公式.md","hash":"2403376046bc75ae8f0a4076b6a0c12941282a78","modified":1578251604476},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标.md","hash":"56267ef5846c5b0dbd5f8d557fe2430a1fd292f0","modified":1578251604478},{"_id":"source/_posts/Hexo：yilia主题下添加live2d看板动画.md","hash":"81e0690b04ecfc8553eec926f8d3abea9f5c9fed","modified":1578251604493},{"_id":"source/_posts/Hexo：yilia主题下添加相册功能.md","hash":"7ef4d28d5d1330e202146a0c669a5bd8d2a8da32","modified":1579081808407},{"_id":"source/_posts/Hexo：使用dev分支管理站点源文件，多地同步.md","hash":"0077eb690c6fb135e150672fb46e58045a5c8899","modified":1578251604503},{"_id":"source/_posts/Hikey970使用记录.md","hash":"ffe4e756a1b88a2b91da5f586a9adcdc40533889","modified":1578251604505},{"_id":"source/_posts/Hikey970使用记录一：ubuntu16-04下烧写lebian系统.md","hash":"c0f99cb59d7a0b59fd760d0001077d0d2f275f30","modified":1578251604512},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装.md","hash":"c94a5941c97190efaaf231cd9fbafddc8ee8f11d","modified":1578251604513},{"_id":"source/_posts/Hikey970使用记录五：安装测试dlib19.md","hash":"341900213cb90a4d5942e606672b12d16d2f68df","modified":1578251604531},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0.md","hash":"eefe80e178dcdb196f2afb5dac97a441f8fcc0b1","modified":1578251604523},{"_id":"source/_posts/Jetson-Nano-使用记录.md","hash":"ef01ed0106f6e2c13184813cc02868a1878d5497","modified":1578251604537},{"_id":"source/_posts/Hikey970使用记录四：python加载运行OpenCL.md","hash":"4ff535ee10575e2cffdc0ac0f15c7bfed40567d8","modified":1578251604532},{"_id":"source/_posts/OpenCV学习笔记.md","hash":"9d042f02775c7fcfda536132c88fdcd059bfc354","modified":1578251604541},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索.md","hash":"529b64152da869a28a7c25cb0ef1d51b9ad58c82","modified":1578251604542},{"_id":"source/_posts/OpenCV学习笔记二：图像处理.md","hash":"770e25e5caf8845c8c84053066fb91cf3e262b32","modified":1578251604585},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别.md","hash":"6253e32780cc84aab31c3d44a776ce7d912786ad","modified":1578251604603},{"_id":"source/_posts/Pixar-Lamp.md","hash":"ac974a86ecd9a4d1a6ebc89463d3c4758cac82cd","modified":1578251604617},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别.md","hash":"6e729bb598baeae065af23c1044dd198c5f9ade8","modified":1578251604637},{"_id":"source/_posts/Pixar-Lamp三：目标检测.md","hash":"ecd43ac88ecfa6211be6332a985c101d1c1f7339","modified":1578251604635},{"_id":"source/_posts/RL学习笔记.md","hash":"24a21b396035982272c0b2761c5499667ba2a6c3","modified":1578251604661},{"_id":"source/_posts/Scikit-Learn学习笔记.md","hash":"dc271ec33747da7c507b92505009f68d02b43036","modified":1578251604663},{"_id":"source/_posts/TensorFlow-手写数字识别.md","hash":"f2803cd3acf8835c8ebdec02c3bab73e8b64707a","modified":1578251604672},{"_id":"source/_posts/git常用命令速查.md","hash":"fa9e50553f6351afeef622eaadef090f779f4abd","modified":1582735190290},{"_id":"source/_posts/Ubuntu-16-04-python3-5-编译caffe.md","hash":"949bb680acf46ca8b5cca8149b9cfd48e723c98e","modified":1578251604674},{"_id":"source/_posts/golang学习笔记.md","hash":"a9a12cef06738c6ddcc07a02e26f350b674e988f","modified":1578251604681},{"_id":"source/_posts/keras版本yolov3使用和训练.md","hash":"f661ad73385d331c5c0da09d82d3a6d1f0cd622f","modified":1578251604683},{"_id":"source/_posts/leapmotion使用记录.md","hash":"bdaad1d65694fbb406e5a4bdb68cc13bb62e4066","modified":1578251604685},{"_id":"source/_posts/loomo多服务机器人开发.md","hash":"26160185e592226235fb9eeac0a17552498e03f9","modified":1578251604701},{"_id":"source/_posts/pyecharts数据可视化.md","hash":"182e63ababe44b4e66d98a82a2cfadc006ecae23","modified":1578251604709},{"_id":"source/_posts/selenium自动化测试.md","hash":"0fffccc43703986c82522360713def70f5dfb470","modified":1578251604719},{"_id":"source/_posts/unity学习笔记.md","hash":"6318757122cdbdff8d24b7d891296d488a671ce7","modified":1578251604729},{"_id":"source/_posts/web学习笔记.md","hash":"6d7c2cee3f0656ef9ae31e027286fd7b750c0b0a","modified":1578251604731},{"_id":"source/_posts/tkinter学习笔记.md","hash":"1a1fed83f7886c876be6587c0bda35bd60ea2b24","modified":1578251604723},{"_id":"source/_posts/人生苦短，我用python.md","hash":"fe102833fec8fb812316e5ddba2e7bd31d2e5aeb","modified":1578251604740},{"_id":"source/_posts/win10-python37-安装dlib19-17.md","hash":"5faa2b0fc75281a5d847335d7dface6c8abe2a96","modified":1578251604732},{"_id":"source/_posts/作业检查机器人.md","hash":"c964e04283a9fd54b3dfd9dd92341536bf2b5b7f","modified":1578251604742},{"_id":"source/_posts/使用VSCode编写LaTeX.md","hash":"416112a6dd7e042d14f2e15ae9ce2099dd080940","modified":1578251604752},{"_id":"source/_posts/使用dlib的imglab工具制作训练集与测试.md","hash":"9c86dee15e1774fe7dc862112369d15b6c56e200","modified":1578251604758},{"_id":"source/_posts/使用labelImg制作数据集.md","hash":"7ce2dfdd3d6496cbb48ff1334d3b8f3be32cc873","modified":1578251604767},{"_id":"source/_posts/元胞自动机.md","hash":"af0647f8c93c33657b26267b5eb087a6dee47897","modified":1578251604768},{"_id":"source/_posts/天猫精灵，开灯.md","hash":"f76b607f16bb254ccc80118311c21804080db25a","modified":1578251604774},{"_id":"source/_posts/天猫精灵：绑定贝壳物联设备.md","hash":"2d43342bca0fa337e5fe2ec839aed60322e36409","modified":1578251604782},{"_id":"source/_posts/奥比中光ORBBEC-3D体感摄像头.md","hash":"29f506020239b7c33373c9c1fb267837c300da6d","modified":1578251604785},{"_id":"source/_posts/好玩的：日常.md","hash":"b3224524ef4efd373b61174f5733cbd05db90a97","modified":1582808846880},{"_id":"source/_posts/好玩的-基于视觉控制的无传感器机械臂.md","hash":"27466ab946ccf51bc28d033bef93379172b816d2","modified":1578251604808},{"_id":"source/_posts/晚安.md","hash":"1d2eef04b80aba62fc6cd3d1641806fe5e9c08e9","modified":1578251604817},{"_id":"source/_posts/打磨工具的日常.md","hash":"b65fa4c2318ed5a09a9f3b609119860be73df1bc","modified":1578251604815},{"_id":"source/_posts/树莓派 制作复古游戏机.md","hash":"d7b3b48e3c0179d8e53ca966d691ae9e6e580ab3","modified":1578251604895},{"_id":"source/_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3.md","hash":"a2ed9e5956add2dbdc3863437d068cfac054327d","modified":1578251604896},{"_id":"source/_posts/桌面冰球机器人.md","hash":"a3cde456c14cb14d65a572f6a40167d01fbf158b","modified":1578251604904},{"_id":"source/_posts/眼动追踪推荐眼镜.md","hash":"30add80b75887ed4988469a3c3ae6c04f76435be","modified":1578251604918},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇.md","hash":"9dbfdeba28ec5bc3c524cd3b1a3af02b8f861683","modified":1578251604941},{"_id":"source/_posts/眼动追踪推荐眼镜二：软件篇.md","hash":"6cb635cbb895feddf2f83bfe9fa8bfc6ce8005e7","modified":1578251604959},{"_id":"source/_posts/空间博弈与matplotlib绘制gif动图.md","hash":"e0cd2e42a05006261d71d65e5f1d408a02f8ed7f","modified":1578251604961},{"_id":"source/_posts/空间博弈演化.md","hash":"91f09f1bf6731f394ad02999123a66f80dc000b0","modified":1578251604998},{"_id":"source/_posts/简单手势分类器.md","hash":"582405d51c82330450725eece8baf3ec5f1a91a8","modified":1578251605013},{"_id":"source/_posts/象棋残局机器人.md","hash":"3196f951b8ea3803b905d5f7b54e9e5b9b884975","modified":1578251605022},{"_id":"source/_posts/知识产权制造备注.md","hash":"d498b37fc48d2617fcbb7a57d811985ce09e59bb","modified":1583164276989},{"_id":"source/_posts/象棋残局机器人一：摄像头标定.md","hash":"d7f82766e77f1d6827f2d5952fcfa8ecf786f8d6","modified":1578251605083},{"_id":"source/_posts/象棋残局机器人三：分类模型retrain.md","hash":"ee3348d309f15b54350e8b5ac9132ef9cd5249ac","modified":1578251605095},{"_id":"source/_posts/象棋残局机器人二：透射变换.md","hash":"c3e6d8d0992435f2b82c773ddd7e59fa87c82e48","modified":1578251605105},{"_id":"source/_posts/象棋残局机器人五：象棋棋子分类模型.md","hash":"b327ee4a38bd60185c20a744ed9b3a23e593fbe4","modified":1578251605109},{"_id":"source/_posts/象棋残局机器人六：robowork竞赛机械臂项目.md","hash":"221c6680b630e301d7e370a1d13523a2e16681a7","modified":1578251605116},{"_id":"source/_posts/象棋残局机器人四：策略.md","hash":"0114575c7941227a28b096a6f36f2be2b152a5af","modified":1578251605118},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制.md","hash":"f1bfd69ad4d4c071c3692be59c7d060b04f0815a","modified":1578251605121},{"_id":"source/_posts/门禁Django学习笔记.md","hash":"ce4d8704cf90054b6761d881690fb51bb99fa2ca","modified":1578251605151},{"_id":"source/_posts/门禁python多进程练习.md","hash":"519c9c7c88b850835704d0f9c7066132d483e96d","modified":1578251605152},{"_id":"source/_posts/门禁ubuntu配置-hadow-ocks-又可以刷脸开门了.md","hash":"1f8350f7254ddfd959ce7285aedfad4802b30d2a","modified":1578251605154},{"_id":"source/_posts/门禁人脸检测和识别.md","hash":"e450ce126d8d50821ca4616c47afdcc1d67734c4","modified":1578251605156},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图.md","hash":"ea0075bd4b7084c51215f143049ab13d18716c09","modified":1578251605176},{"_id":"source/_posts/门禁人脸检测和识别二：人脸关键点检测.md","hash":"2032722472186bda9dc8cd6ec9f0e912308f7edd","modified":1578251605188},{"_id":"source/_posts/门禁行人检测和识别.md","hash":"733680d92dc18359f579e3dcece252b365edae27","modified":1578251605196},{"_id":"source/_posts/门禁人脸检测和识别四：keras人脸表情分类.md","hash":"29f9407417564c67d20d707e4f71a5c8f36b2977","modified":1578251605190},{"_id":"source/_posts/门禁行人检测和识别二：Flask实时视频流服务器.md","hash":"77f12aff0b6990647b62996f11257227dca79cf5","modified":1578251605198},{"_id":"source/_posts/门禁行人检测和识别五：ipv6环境下的docker部署.md","hash":"bc6acd33be046b1994bc0b9a4c54d756baea97d5","modified":1578251605199},{"_id":"source/_posts/随笔_VR的日常体验记录.md","hash":"9aac19296832c85c0eb3229d9a97a83d8114e827","modified":1580997067440},{"_id":"source/_posts/随笔_读书笔记：未来简史.md","hash":"70990e3a89b7d530dd7e0eeff09277f0c5521327","modified":1578251605207},{"_id":"source/_posts/随笔_switch.md","hash":"f8f9f4365e0b8bfb6218052f48329b7111bb240b","modified":1581684174360},{"_id":"source/_posts/随笔_日常练琴.md","hash":"bcbbcea659a7cd81cbf8a577d719cb43d7105a3c","modified":1580533943195},{"_id":"source/_posts/随笔_那些年，我们一起去比赛.md","hash":"39093bd6bdfe4bb44f3188a5dd80bb8504d346ee","modified":1581180162298},{"_id":"source/photos/empty.png","hash":"e88177c88f6b7219a3474da7d210965a6dbb57d7","modified":1578251605283},{"_id":"source/slides/index.md","hash":"d2c0eaf11ad17dedb9f9cfee2a2f3520e111f8b8","modified":1579081808420},{"_id":"source/photos/ins.css","hash":"2ba8d33e612ceec5224d3ef2f9809b86dc2a66e7","modified":1578251605290},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1578251605493},{"_id":"source/photos/index.ejs","hash":"5284b765387f670076693b314f2c92244aaf7df3","modified":1578251605286},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1578251605492},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1578251605494},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1578251605493},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1578251605496},{"_id":"source/photos/ins.js","hash":"ef7659786a5ef7cec9fed1c0889f54c2a1940ff1","modified":1578251605292},{"_id":"source/photos/ins.json","hash":"e5169dfd4522c101ff60aa1819771c2e9007c658","modified":1578743735568},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1578251605495},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1578251605497},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1578251605544},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1578251605545},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1578251605546},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1578251605549},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1578251605550},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1578251605551},{"_id":"themes/yilia/source/main.16f007.css","hash":"2cf3f728df0046ab2b4b48b9d5a0ebe165c386cd","modified":1578251605682},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1578251605548},{"_id":"themes/yilia/source/main.16f007.js","hash":"35ae30233f37686d74f6d30d256e0f3a417b17dd","modified":1578251605684},{"_id":"themes/yilia/source/main.4ab092.css","hash":"7dff1bed102af3237cd4cd722661730d6d473cd4","modified":1578251605686},{"_id":"themes/yilia/source/main.4ab092.js","hash":"d826e484d48bd06e25c636d4ac8d8438bc051ec7","modified":1578251605688},{"_id":"themes/yilia/source/main.6efad3.js","hash":"725364e30188efacd7dc776e4903d25dd751fe7b","modified":1578251605692},{"_id":"themes/yilia/source/main.e817a4.js","hash":"46078d8271029fd56c2a7879acfacbd86aed36d4","modified":1578251605701},{"_id":"themes/yilia/source/main.6efad3.css","hash":"2cf3f728df0046ab2b4b48b9d5a0ebe165c386cd","modified":1578251605690},{"_id":"themes/yilia/source/slider.2088df.js","hash":"de104e212d3323bfbde678e0317ce606b5bdd300","modified":1578251605713},{"_id":"themes/yilia/source/main.e817a4.css","hash":"2cf3f728df0046ab2b4b48b9d5a0ebe165c386cd","modified":1578251605699},{"_id":"themes/yilia/source/slider.dd5d96.js","hash":"6f77098db108774737f9ddebccb77617b1ad9e19","modified":1578251605718},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1578251605553},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1578251605649},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578251605539},{"_id":"themes/yilia/source/mobile.4bdabd.js","hash":"3f693b917e991e395801b22d6a89a9173be5732b","modified":1578251605703},{"_id":"themes/yilia/source/main.7ddca9.css","hash":"d6e0233d17370e01ebd2a0dd8e4724fd1f2c07eb","modified":1578251605694},{"_id":"themes/yilia/source/mobile.ec0eac.js","hash":"f92db3cb1d7b22272b2193c2ed149cc2726db6c3","modified":1578251605711},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/01.jpg","hash":"e74d801194ae1d8a7f742b1100c7941ee0472fa3","modified":1578251604428},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/04.jpg","hash":"9193fd0f0bd0ca765ecdf0414f660c8e97584419","modified":1578251604435},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/06.jpg","hash":"a8007562b9bf8c521d98a26208f1a5c286a01625","modified":1578251604441},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/05.jpg","hash":"bb4e70195c68d2c20a2bdef3f139875d69d4722e","modified":1578251604438},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/08.jpg","hash":"91d1bc553c6a0bc4d135a21c894fdb5b113dbf46","modified":1578251604449},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/09.jpg","hash":"8ea6bc4526895cb14de783493eeb0d8f802a3c3a","modified":1578251604452},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/10.jpg","hash":"d6c0f82ef44ecd06d082ac5c4fdf110da429267a","modified":1578251604455},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/12.jpg","hash":"d0126b7c29b498174a535bba0d040e3c9470b053","modified":1578251604461},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/13.jpg","hash":"35fbbbb8362d8898f3ac25906602292c5daa91f7","modified":1578251604464},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/14.jpg","hash":"aa88fec7b947e1187492e1148705eee57f0f470b","modified":1578251604465},{"_id":"source/_posts/Hexo：Hello Hexo/001.png","hash":"95f9f458e2a13f44f47c1f4b0ef312a18ff93513","modified":1578251604474},{"_id":"source/_posts/Hexo：Hello Hexo/000.png","hash":"f97b31602db70f71fb67b7f4def858a1e49b73ba","modified":1578251604472},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/03.png","hash":"a061ade10c8fa69d26a7483d8756f7d2e4f4db14","modified":1578251604490},{"_id":"source/_posts/Hexo：yilia主题下添加相册功能/0.png","hash":"2aaf3eada5c3bf7ebc3d704eb88223372d0044d8","modified":1578251604501},{"_id":"source/_posts/Hikey970使用记录/01.png","hash":"c234791f1f742a65034a82189797252ac96af156","modified":1578251604510},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/01.png","hash":"7e5314a03c74db15275086e1c13e5e7028f2098b","modified":1578251604515},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/02.png","hash":"7ac3bb89ea653ade2274a55c2df1d840e612925c","modified":1578251604516},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/04.png","hash":"abe85cacc69856c16f0dde15260a8a1e93acf8e3","modified":1578251604520},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/03.png","hash":"7ac3bb89ea653ade2274a55c2df1d840e612925c","modified":1578251604518},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/02.png","hash":"80bd21e079b45ab858392b32db5f4cc9033e80f3","modified":1578251604527},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/04.png","hash":"009f3589b63238bced9cfdf0ba06ae4a7f8961bb","modified":1578251604529},{"_id":"source/_posts/Hikey970使用记录四：python加载运行OpenCL/001.png","hash":"47eacba12e82d7f96d6a08af56b236fa3c753247","modified":1578251604535},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/05.png","hash":"901c6cdf2df9d6eeb33764075fb8f173de2c2aca","modified":1578251604521},{"_id":"source/_posts/Jetson-Nano-使用记录/001.png","hash":"518664af6d7f8de158242d105c49cd81e9d04a0b","modified":1578251604539},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/FAST_samples.png","hash":"fb4b5ba9198de9f15c3f53a55b3b8ebeec4625a6","modified":1578251604547},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_11_0.png","hash":"1f7fd7671a8b7684944a70e126cad69d5947f5d9","modified":1578251604550},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_3_2.png","hash":"56fb48ccacf28ed66952e3807992e415c120f7bd","modified":1578251604573},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_5_0.png","hash":"355fbdeabc595dd19c8120949c111315dbfb4fea","modified":1578251604576},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/sift_local_extrema.jpg","hash":"de7bbf05c2e0f0c2a3632870fee22c3c97ea2d29","modified":1578251604583},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_10_0.png","hash":"9e22eec352a63f34069909b937114ef4b83aef01","modified":1578251604589},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_12_0.png","hash":"b9f35435353c9104206d15f9e1fc0080d9f577da","modified":1578251604591},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_15_0.png","hash":"c04ee8ba457033a91752d943d8ebbeefdbdc4997","modified":1578251604593},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_4_0.png","hash":"940533f012c8c253da0aeb90842789735387b3fd","modified":1578251604598},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_6_0.png","hash":"63d04ed2f545819d2fc5f07ce688c2d51456d4c8","modified":1578251604600},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_17_0.png","hash":"cc054900ef529158daa01096f78133cbea8fc373","modified":1578251604596},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_8_0.png","hash":"9e22eec352a63f34069909b937114ef4b83aef01","modified":1578251604601},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/hog02.jpg","hash":"afa2d3a91de70c4665662f7878022db8a8bfd048","modified":1578251604610},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/output_5_1.png","hash":"1599adad9ed3c8a86b22d8bd8ec2b6a8c58a4031","modified":1578251604615},{"_id":"source/_posts/Pixar-Lamp/001.jpg","hash":"ff73857dfe4b15be6493ee9cc5d851a454614890","modified":1578251604619},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/01.jpg","hash":"e53be51c1dcddcedc9acdcce62fe5ddb1ff27b62","modified":1578251604640},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/02.jpg","hash":"57e1ae197f197b185c13ea1d01c7ffe686bc794c","modified":1578251604642},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_0_1.png","hash":"4b402f3d5b0b489e1fdb59d604e5b449329155bf","modified":1578251604644},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_0_3.png","hash":"90edad5e696c63ad1aeabad716bcf86fc99fe3ea","modified":1578251604646},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_0_5.png","hash":"17ce0b8481369a900ca349e737cf11d55cf04c6e","modified":1578251604647},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_10_1.png","hash":"48aef7f59934bc197b3a4088587b89c3500e81f3","modified":1578251604649},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_12_1.png","hash":"5a5c6104e402d42cfc0bcaac57e09d123703cb3f","modified":1578251604651},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_12_2.png","hash":"49d2f6407ec4ead91615ce4cb137cc116a03995a","modified":1578251604653},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_13_0.png","hash":"a6e561cf1526a4b746b3bc8983299081b17b37f3","modified":1578251604654},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_33_0.png","hash":"b3945eef9828d73c16dc48b9276234812e33c4cc","modified":1578251604656},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_3_1.png","hash":"00c40205c21f32d92f62fae1064e0a73d154cc2b","modified":1578251604657},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_5_1.png","hash":"6e3ac80286e4ca65871bd4409fd05a83d91f6087","modified":1578251604659},{"_id":"source/_posts/leapmotion使用记录/002.png","hash":"7a4175fb88ab723e3c52be48aa8daca67b2e5426","modified":1578251604695},{"_id":"source/_posts/leapmotion使用记录/001.png","hash":"c4b74040ea225762b93bf2d49adb3331a9f3dcaf","modified":1578251604693},{"_id":"source/_posts/pyecharts数据可视化/bar.png","hash":"c4397bc20f64d9720e46925f52fae09e1d6d1302","modified":1578251604712},{"_id":"source/_posts/pyecharts数据可视化/line.png","hash":"0fb53b2c21b577285bc8c0a9b8de73def3debfba","modified":1578251604713},{"_id":"source/_posts/pyecharts数据可视化/pie.png","hash":"470f48e49d82b20936439643a5e29eb615be5597","modified":1578251604715},{"_id":"source/_posts/selenium自动化测试/001.png","hash":"b6c232e1db16f2bc811080e30167301082668dda","modified":1578251604721},{"_id":"source/_posts/win10-python37-安装dlib19-17/00.png","hash":"0c824c22feeb3d5710d1108e33e4444f280bcd06","modified":1578251604734},{"_id":"source/_posts/win10-python37-安装dlib19-17/02.png","hash":"83e53428614ea50c0903fceaab6a58b4f87b90a0","modified":1578251604738},{"_id":"source/_posts/作业检查机器人/000.jpg","hash":"3b5d75ac6526ac25894c1a714e180c48bfc07477","modified":1578251604744},{"_id":"source/_posts/使用VSCode编写LaTeX/00.png","hash":"5ddff5f7c02c682fe5b085b1f385b04d0dfebfb7","modified":1578251604755},{"_id":"source/_posts/使用VSCode编写LaTeX/01.png","hash":"f38bd75d9e92bc2f029f9a3f2d4208820f4c8bea","modified":1578251604757},{"_id":"source/_posts/元胞自动机/01.png","hash":"2ea614b564d3c3168cee22682cd9dd7d621d39db","modified":1578251604771},{"_id":"source/_posts/元胞自动机/02.png","hash":"207c42b756631d3916e9ea7b29598e6f6f1bdb8d","modified":1578251604773},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/00.png","hash":"5add9fe0c516920c80f22d2bf5f23e6463282101","modified":1578251604944},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/03.png","hash":"145088d457606fa1f1fe5e7258b02440e1537bc9","modified":1578251604950},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/04.png","hash":"621fca207c19846917fe43a20f3430270cd6766e","modified":1578251604952},{"_id":"source/_posts/空间博弈与matplotlib绘制gif动图/01.png","hash":"d1c699bbef87d9b3297a7d2366520c2d26785b35","modified":1578251604963},{"_id":"source/_posts/空间博弈演化/03.png","hash":"7c1502d0d6c28d7d1e0b567a2286b66fe0071192","modified":1578251605008},{"_id":"source/_posts/空间博弈演化/04.png","hash":"7245285f52d7b81fc75a1f871f01e6434a1cea85","modified":1578251605009},{"_id":"source/_posts/空间博弈演化/05.png","hash":"944a8ad5d1a71aa5c83e9c1e199d4b1b501c5074","modified":1578251605011},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/02.png","hash":"001cb4505954bfa389c28811b320a9f5fe21d2d3","modified":1578251605148},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/03.png","hash":"716c846d5c3850b9a80a5fcf6460e47102eae7f5","modified":1578251605150},{"_id":"source/_posts/象棋残局机器人四：策略/001.png","hash":"c77e354f7c15e46d93a789d87364937c778083bc","modified":1578251605120},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/01.png","hash":"0a6f0c650abab62bc6584427792526438cfe0883","modified":1578251605147},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/P_Trangle.png","hash":"ff6611e104f982244bff6509a839e7ab1539cf3d","modified":1578251605179},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/Trangle.png","hash":"b3cc5c8346fa34f4a63037ecfe2b14f01294286e","modified":1578251605181},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/output_4_0.png","hash":"81ff22ed5dfff551180b84ac68d277d0a2b29bf1","modified":1578251605186},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1578251605501},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1578251605506},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1578251605499},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1578251605503},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"a06e7474577b60b3aa6847535441ea6564151439","modified":1578251605509},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1578251605511},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1578251605512},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1578251605508},{"_id":"source/slides/index/coreXY.html","hash":"1c121cbdc0dfc72287e3b0e9ae84fddd1070d072","modified":1579081808422},{"_id":"source/slides/index/coreXY.md","hash":"f3a86cf9d163de43ed9ff84322f81f848f4bba27","modified":1579081808424},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1578251605516},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1578251605513},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1578251605514},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"add4e0f64c2d55917773c17b38b76b09b337871b","modified":1578251605505},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1578251605517},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1578251605543},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1578251605519},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1578251605654},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1578251605652},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1578251605541},{"_id":"themes/yilia/source/fonts/iconfont.adcbdb.woff","hash":"ad8487251c1ed87e7b18753a415b4064438213a3","modified":1578251605662},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1578251605664},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1578251605656},{"_id":"themes/yilia/source/fonts/iconfont.583fff.svg","hash":"12a7c721862f8d3d067e0544de73fe29bc6158c5","modified":1578251605659},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1578251605669},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1578251605660},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1578251605677},{"_id":"themes/yilia/source/fonts/iconfont.c7aae9.eot","hash":"6c3e72cbab99552c818d29631a2c1e7ee22a6b6a","modified":1578251605666},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"6adc58081d5053c1a1757c940ed3912bbbfe49b4","modified":1578251605675},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1578251605679},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1578251605558},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1578251605557},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1578251605555},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1578251605561},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1578251605562},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1578251605560},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1578251605567},{"_id":"themes/yilia/source-src/css/article.scss","hash":"f8ba2495f242fb079c119baf5b8a6e73d9d3801e","modified":1578251605564},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1578251605566},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1578251605680},{"_id":"themes/yilia/source/img/favicon.png","hash":"37e487f5b0d19dfa9bd1e6c2a2014f02d9e4406e","modified":1578251605678},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1578251605591},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1578251605589},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"72aeb26a68a834629a45c45a80482b8dfa10833b","modified":1578251605579},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1578251605592},{"_id":"themes/yilia/source/slider.7f94da.js","hash":"5895d8e92013e3ea1b9d6c9c1cc2f30203cea032","modified":1578251605716},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1578251605603},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1578251605601},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1578251605594},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1578251605609},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1578251605607},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1578251605605},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1578251605611},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1578251605614},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1578251605613},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a197e24931654449aa0ee873cc9f974535726e56","modified":1578251605616},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1578251605624},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1578251605621},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1578251605618},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1578251605629},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1578251605631},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1578251605633},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1578251605636},{"_id":"themes/yilia/source-src/js/main.js","hash":"67d17a20cfd0da210281725af6de0765504cdf2f","modified":1578251605638},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1578251605634},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1578251605640},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1578251605641},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1578251605645},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1578251605626},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/00.jpg","hash":"dc88e11eb7381c99c68ee4c8ed9f9e329c5c060a","modified":1578251604425},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/02.jpg","hash":"5e61f307ae24e1c4164b78ae37cc282423da78b8","modified":1578251604430},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/03.jpg","hash":"65a0e5fce6f045a7f50bc8596e0d6d6c8d1ac2b7","modified":1578251604432},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/11.jpg","hash":"794097952326df5d576207922a2e5d2c59435581","modified":1578251604458},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1578251605643},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/00.png","hash":"2b9a3a4202b0b8d13fbf3016ba4765ddbdab2458","modified":1578251604482},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/01.png","hash":"0b21f18c30e838eca4bb7e2dfba8b44e6ef588e0","modified":1578251604484},{"_id":"source/_posts/Hikey970使用记录/00.png","hash":"9b087e758f4c95a9aecd0f67b9ce8d6c1eeabdb6","modified":1578251604508},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/01.png","hash":"dcd2479451cc27a10576e335e13907a44a818f66","modified":1578251604525},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/03.png","hash":"c560714c834a534e24f8d2b95aa5ff386e38eb28","modified":1578251604528},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/DOG Pyramid.jpg","hash":"f53d4585af600d9a5da0adbda75504af3d509552","modified":1578251604545},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_16_0.png","hash":"e3d8a3208d79e971ccb82decde5ed8095c3694a2","modified":1578251604557},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_7_1.png","hash":"6b4032e90d76706f7418ec3d5b56946b623c5392","modified":1578251604579},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1578251605646},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/hog01.jpg","hash":"e33929d7053e091469aeb40f9806d02f6796bb18","modified":1578251604608},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1578251605648},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/Histograms of Oriented Gradients for Human Detection.png","hash":"fb7c74d552c33d4a59651e87b8458ca1684d5e16","modified":1578251604606},{"_id":"source/_posts/leapmotion使用记录/003.png","hash":"507e32fc56728c6561109c9f7669abbb6453aeec","modified":1578251604697},{"_id":"source/_posts/leapmotion使用记录/Leap Motion JavaScript Sample.png","hash":"e7372559f17d18cee7e602981a6aa52c5164c801","modified":1578251604700},{"_id":"source/_posts/win10-python37-安装dlib19-17/01.png","hash":"23f7bc39f3692193a0dfa7f1d7d0c24cb56b8294","modified":1578251604737},{"_id":"source/_posts/pyecharts数据可视化/wordcloud.png","hash":"e99a6954eb15672281d92183b84f99255a89a1b1","modified":1578251604717},{"_id":"source/_posts/天猫精灵，开灯/1.png","hash":"cb869e09faacb5bdddf05e3cf1fe8d3974a168b8","modified":1578251604777},{"_id":"source/_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3/01.png","hash":"bc31d28c66270fca84a8022ef19600006d9c765e","modified":1578251604899},{"_id":"source/_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3/02.png","hash":"65ecf9260630ed39dfdf98b5e50a30854cc0871e","modified":1578251604900},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/02.png","hash":"240acca901fddb6b7d2e7dcf45228bc2daa886e6","modified":1578251604949},{"_id":"source/_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3/03.png","hash":"456021205e7579b54418b1046f88255c10618687","modified":1578251604902},{"_id":"source/_posts/简单手势分类器/01.png","hash":"e2476fb0d7ee4ab4af4f541f35e6ce1c3e0f6a5c","modified":1578251605015},{"_id":"source/_posts/象棋残局机器人二：透射变换/001.jpg","hash":"8a33b44169bf9a2533de8e47b162ab41e7092fa9","modified":1578251605107},{"_id":"themes/yilia/source/main.7ddca9.js","hash":"e0da8381ea4a3718ce3513e8dcbd834d59974cf4","modified":1578251605697},{"_id":"themes/yilia/source/fonts/iconfont.e26e17.ttf","hash":"7f510c341c370d1372825d85a1d3f2737cb365d8","modified":1578251605668},{"_id":"source/_posts/天猫精灵，开灯/2.png","hash":"a5477bd6d0ef8c44a412b4d0714592af503a27fb","modified":1578251604780},{"_id":"source/_posts/奥比中光ORBBEC-3D体感摄像头/000.png","hash":"b52466b0a24f1d54abe9aed2edce3969396cd9eb","modified":1578251604793},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/05.png","hash":"d14b02306b99dcb9c9386d4b0f0d0454d08542bb","modified":1578251604955},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/06.png","hash":"eded21f96e1fa591ec4c3eac3069a8ba7cb0aa52","modified":1578251604958},{"_id":"source/_posts/空间博弈与matplotlib绘制gif动图/02.gif","hash":"9beb83cd218398e4bfab65e39e96276e6a45fcdc","modified":1578251604966},{"_id":"source/_posts/象棋残局机器人/02.png","hash":"778fcfce5200408042514beab51a8a5c84f4c86c","modified":1578251605030},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1578251605525},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1578251605523},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1578251605521},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1578251605527},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1578251605530},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1578251605528},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1578251605534},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1578251605531},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1578251605533},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"6c3e72cbab99552c818d29631a2c1e7ee22a6b6a","modified":1578251605582},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1578251605536},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"ad8487251c1ed87e7b18753a415b4064438213a3","modified":1578251605587},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"7f510c341c370d1372825d85a1d3f2737cb365d8","modified":1578251605585},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"12a7c721862f8d3d067e0544de73fe29bc6158c5","modified":1578251605584},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1578251605572},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1578251605570},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1578251605577},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1578251605597},{"_id":"source/slides/index/coreXY/幻灯片9.PNG","hash":"81356dc9d5d76ac30b831e31e75c93f84fbc828e","modified":1579081808481},{"_id":"source/_posts/Hexo：yilia主题下添加live2d看板动画/01.png","hash":"18c435b8946c3600cb90cc09c51d911ca8b20cb9","modified":1578251604497},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_9_0.png","hash":"a1be4aa9d6f54935b1fc146a18776705ecd5a2d3","modified":1578251604582},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1578251605598},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1578251605600},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/01.jpg","hash":"15d68e59cb0d8a22132f8dac1f46d75122505e52","modified":1578251604947},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"181e88b6aac01221c6085a6ecfb059034c090429","modified":1578251605538},{"_id":"source/_posts/象棋残局机器人一：摄像头标定/001.jpg","hash":"8d6b4557e149dab52075bacfc4a506a40dd3de67","modified":1578251605087},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1578251605574},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1578251605576},{"_id":"source/_posts/门禁人脸检测和识别四：keras人脸表情分类/model.png","hash":"179b9fe3d1b0c07ee5fa89c859933e0bfe80e627","modified":1578251605194},{"_id":"source/_posts/随笔_日常练琴/0.png","hash":"00fe13adc919dc6a46503de41623842b475bfb85","modified":1579081808413},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/02.png","hash":"0c84f811476daebf9498626bc279d6068bc9eec3","modified":1578251604488},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_13_0.png","hash":"8908b1fcc29a9e737f487c326412af55b8f64b3f","modified":1578251604554},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_2_0.png","hash":"2891fd9f9cbeab349e62cd6df7a25267aaea08fb","modified":1578251604571},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/output_4_0.png","hash":"eb5ac6f01c03d4700f6b4a626b5b83cce49fb17c","modified":1578251604613},{"_id":"source/_posts/Ubuntu-16-04-python3-5-编译caffe/001.jpg","hash":"dd87314600573b6a50af141d72cf23683e22121b","modified":1578251604678},{"_id":"source/slides/index/coreXY/幻灯片4.PNG","hash":"197f15b4e008139520161b0dea955f0a7db1bfe5","modified":1579081808454},{"_id":"themes/yilia/source/img/avatar-1.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1578251605672},{"_id":"source/_posts/奥比中光ORBBEC-3D体感摄像头/001.png","hash":"e6809656446c1698831563c0b36418ad673e0fcd","modified":1578251604798},{"_id":"source/_posts/象棋残局机器人一：摄像头标定/002.png","hash":"98fbc1fd416bbf63997859b20c743461c4b85d10","modified":1578251605091},{"_id":"themes/yilia/source/mobile.9e1dfd.js","hash":"3e69255e1edb227ed34fa8645beef4a587eea996","modified":1578251605709},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/07.jpg","hash":"066d59dd064e6711e980f6656be9a534dc0d778b","modified":1578251604447},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_17_0.png","hash":"dff181a113824c53d4518df4025bce3ded386731","modified":1578251604560},{"_id":"source/_posts/tkinter学习笔记/color.png","hash":"fa5ea684f8e40b865b26b0570aed9b1f77c23476","modified":1578251604727},{"_id":"source/_posts/使用dlib的imglab工具制作训练集与测试/00.png","hash":"8c33376b03154d244c125659846faf53fe4da232","modified":1578251604762},{"_id":"source/_posts/象棋残局机器人五：象棋棋子分类模型/001.jpg","hash":"7b5cba8f52fa147dc605d544c118d0ba97ea89b0","modified":1578251605114},{"_id":"source/_posts/作业检查机器人/001.png","hash":"a9b3b3c94acfcbe16ed186fe21f68f17d34a6653","modified":1578251604747},{"_id":"source/_posts/使用dlib的imglab工具制作训练集与测试/01.png","hash":"3a745397976a382218978aaf29178bd9203f74d3","modified":1578251604765},{"_id":"source/_posts/象棋残局机器人一：摄像头标定/003.png","hash":"b1d83610933a20115f195762ae33d35b2c9b0e4c","modified":1578251605093},{"_id":"source/_posts/象棋残局机器人三：分类模型retrain/002.png","hash":"6e8ec8165732fbbb935cadb8c7d7f3d54b278268","modified":1578251605103},{"_id":"source/_posts/leapmotion使用记录/000.png","hash":"f4ed986f6342cca4dda674ac1eaa00285726ad88","modified":1578251604691},{"_id":"source/_posts/loomo多服务机器人开发/设计思路-201905.png","hash":"366254dcca1877af1cb2b32cd8fded961dd6055b","modified":1578251604707},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/opencv-delaunay-vornoi-subdiv-example.png","hash":"beb1b61d8bfda5b652bfffe3f9ccee261c7fbb2f","modified":1578251605184},{"_id":"source/_posts/象棋残局机器人三：分类模型retrain/001.png","hash":"0f83b488878e6b7e531c32589fc203efecbb2800","modified":1578251605100},{"_id":"source/_posts/象棋残局机器人/01.png","hash":"2bce6e7b18f9d9b6aaa51ffc330ed6ce1c159b2f","modified":1578251605027},{"_id":"source/_posts/Pixar-Lamp/设计思路.png","hash":"e8b5b06807fe39599f8cb147f066f9acf82a80f1","modified":1578251604633},{"_id":"source/_posts/作业检查机器人/002.png","hash":"632c559847a1e07fcd3de5b5e2c5b3300cbee354","modified":1578251604750},{"_id":"source/_posts/简单手势分类器/02.png","hash":"40f67510cc5d8f6ae6d9b6843ea34ad25a8b9b83","modified":1578251605020},{"_id":"source/slides/index/coreXY/幻灯片7.PNG","hash":"6a8cbc1f15ca6b0d91735e9f12c30009563d4e1c","modified":1579081808473},{"_id":"source/slides/index/coreXY/幻灯片5.PNG","hash":"4847d6861128fba6af490d11e1de175f687ed03d","modified":1579081808461},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_18_0.png","hash":"a13c9e30a4b51e98dcef6d5ee647c876001eb4d7","modified":1578251604567},{"_id":"source/slides/index/coreXY/幻灯片10.PNG","hash":"12b328234d9a8d67865d77209b53ac4e2fffb368","modified":1579081808436},{"_id":"source/slides/index/coreXY/幻灯片6.PNG","hash":"01031996b1b1330be2af7c02fb47b3d59a26187e","modified":1579081808468},{"_id":"source/_posts/Scikit-Learn学习笔记/machine_learning_map.png","hash":"ea8361d8304d169ecefc073c17c6ecf4567dd0a0","modified":1578251604670},{"_id":"source/slides/index/coreXY/幻灯片2.PNG","hash":"5a35d76d323590a7b780fa08e115c7b43b98d049","modified":1579081808443},{"_id":"source/slides/index/coreXY/幻灯片8.PNG","hash":"18925902b41159588e2b8624ab37ecad5ea85800","modified":1579081808479},{"_id":"source/_posts/眼动追踪推荐眼镜/detect.gif","hash":"4850f0b3488392e5e6afc826cf2de8198bda2183","modified":1578251604939},{"_id":"source/_posts/Pixar-Lamp/设计思路-201905.png","hash":"00eeec1e93894f71b7fa20ce07aed2a66bc6561b","modified":1578251604627},{"_id":"source/slides/index/coreXY/幻灯片1.PNG","hash":"b78727d620a76aedef9ded32452c340ea65aac61","modified":1579081808430},{"_id":"source/_posts/空间博弈演化/02.png","hash":"caa7c9d3e86028721a4cb043c1cc13f3b0ef8664","modified":1578251605006},{"_id":"source/slides/index/coreXY/幻灯片3.PNG","hash":"4139e1fbe1073968c3c2c51a7bae006c2447e18a","modified":1579081808451},{"_id":"source/_posts/眼动追踪推荐眼镜/00.png","hash":"90a01da69e0533ac4ea884b69f70a621e0b6a663","modified":1578251604930},{"_id":"source/_posts/桌面冰球机器人/001.gif","hash":"35355a3613efaa40cae5d38f901df25c4ce00ee5","modified":1578251604916},{"_id":"source/_posts/象棋残局机器人/demo2.gif","hash":"108d3b958f4b607d0c78b5014d72af8a0de157ac","modified":1578251605060},{"_id":"source/_posts/象棋残局机器人/demo1.gif","hash":"70ceb50cefc07f5292fbf2373a167d48f573cdb3","modified":1578251605046},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/00.gif","hash":"0b811cdcc9f260351b8a686bbc3f3eb9a2e31814","modified":1578251605144},{"_id":"source/_posts/门禁人脸检测和识别/demo.gif","hash":"370d15448ab481ace650d98c16a163cacdee9a0e","modified":1578251605173},{"_id":"source/_posts/空间博弈与matplotlib绘制gif动图/03.gif","hash":"9c80254d2c3e4ff91677e2169d21cc796053fd3b","modified":1578251604996},{"_id":"source/_posts/象棋残局机器人/demo3.gif","hash":"be104fb9a69c8565a924b852973a3827ce79b6c0","modified":1578251605081},{"_id":"source/cloc","hash":"9d72d90de0f4d32bcabeac2d76cb75c7d1c199ee","modified":1578251605278},{"_id":"source/_posts/晚安/001.png","hash":"875de1887bddaf871f14a9325d7c780d72606437","modified":1578251604892},{"_id":"public/photos/lazyload.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583164288584},{"_id":"public/photos/ins.json","hash":"9be52aaedd910c1823e5a3487b58872cc1fa6812","modified":1583164288845},{"_id":"public/photos/ins.css","hash":"8c20f68a514bb8ff9a04207cf2f7d245710973c9","modified":1583164288849},{"_id":"public/photos/ins.js","hash":"3561b126a98e359997f1e1f23e987088a55e9ec8","modified":1583164288855},{"_id":"public/content.json","hash":"97f87e848e719f7c8258fed2e74dc58e7b75f8e8","modified":1583164291587},{"_id":"public/slides/index.html","hash":"0b8464462e19e5ffb9fc6e8d4bc563672d2f1227","modified":1583164292671},{"_id":"public/photos/index.html","hash":"ba94b91bd8b620851f7b09575f0ebee640f6b420","modified":1583164292738},{"_id":"public/2020/01/05/Hexo：yilia主题下添加相册功能/index.html","hash":"cebf6feb8feec2f4c2ef625a7eeeabd0d0350417","modified":1583164292739},{"_id":"public/2020/01/01/Hexo：yilia主题下添加live2d看板动画/index.html","hash":"43a3e51ec635f31906c32fe3712b9e6740dced81","modified":1583164292852},{"_id":"public/2019/11/26/selenium自动化测试/index.html","hash":"15d16c03a618f2083940886f1c6fe0206c6596d3","modified":1583164294778},{"_id":"public/2019/12/03/门禁Django学习笔记/index.html","hash":"3a153b91dbc97035c00a1f5b575990a67935152f","modified":1583164294857},{"_id":"public/2019/11/12/元胞自动机/index.html","hash":"276601093b84ad98c733bd802a65b43b7ec19b91","modified":1583164294857},{"_id":"public/2019/12/31/Brainfuck与2020的新年仪式感/index.html","hash":"2a28902228fc716d41ffa9eae7268138a85dd466","modified":1583164294908},{"_id":"public/2019/11/12/空间博弈演化/index.html","hash":"4046f040061b7814bc1371f5dcf5991bc1ceb310","modified":1583164294908},{"_id":"public/2019/11/10/pyecharts数据可视化/index.html","hash":"34bff1c7eda39f5b9a23bd798cabea1c873cf816","modified":1583164294908},{"_id":"public/2019/11/11/空间博弈与matplotlib绘制gif动图/index.html","hash":"f1b2e78e7314a06e0b77caa56c3ddd4a9743850a","modified":1583164294908},{"_id":"public/2019/11/07/C#学习笔记/index.html","hash":"ced0c9971be3da5bc96b0f2248e985fb32b3d824","modified":1583164294908},{"_id":"public/2019/11/01/unity学习笔记/index.html","hash":"7cdcd236bb0276ce9b2c6c3e79c2264a378f9311","modified":1583164294908},{"_id":"public/2019/10/26/web学习笔记/index.html","hash":"8dd3139f73f588620c00fad4706f13012e03ea0f","modified":1583164294908},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/index.html","hash":"0e0c2d28ef550a6e5bccf5ec48f48579fbe58bb3","modified":1583164294908},{"_id":"public/2019/09/24/眼动追踪推荐眼镜二：软件篇/index.html","hash":"67b0bd110a03734263674e94ccac602efa02f8e4","modified":1583164294909},{"_id":"public/2019/09/19/眼动追踪推荐眼镜/index.html","hash":"8af8919d4c5470e96178842360d68e5918598a5c","modified":1583164294909},{"_id":"public/2019/10/09/使用labelImg制作数据集/index.html","hash":"fc3edec17dbb58ec266262c5577759adcacbdcc8","modified":1583164294909},{"_id":"public/2019/09/04/leapmotion使用记录/index.html","hash":"e92b8ee7ef485fea0fcc267ec757fb3086d2640b","modified":1583164294909},{"_id":"public/2019/08/20/git常用命令速查/index.html","hash":"4784227f6654e5afd63a577c4503dba2715b213c","modified":1583164294909},{"_id":"public/2019/09/16/门禁行人检测和识别五：ipv6环境下的docker部署/index.html","hash":"129f984694ccd561e1b61a78a44172e82264fa98","modified":1583164294909},{"_id":"public/2019/08/19/Hikey970使用记录五：安装测试dlib19/index.html","hash":"ca7054cacf18a264c7ad22c4536611a3df217a51","modified":1583164294909},{"_id":"public/2019/08/13/奥比中光ORBBEC-3D体感摄像头/index.html","hash":"caf769cac5e051041a19face2982bec615be19dc","modified":1583164294909},{"_id":"public/2019/08/14/keras版本yolov3使用和训练/index.html","hash":"355af327e47e9508ec82fe5b968002da10bcf78e","modified":1583164294909},{"_id":"public/2019/08/09/Ubuntu-16-04-python3-5-编译caffe/index.html","hash":"0b0d8b302d114bcb78d56d5b4c95bd62816f76d3","modified":1583164294910},{"_id":"public/2019/08/11/Pixar-Lamp三：目标检测/index.html","hash":"a783fbd719f978953562af4dbda247b16cd40eed","modified":1583164294910},{"_id":"public/2019/08/02/晚安/index.html","hash":"8c22bfef7c93b9032b67b35541977d11de73e370","modified":1583164294910},{"_id":"public/2019/08/05/Arduino和一些好玩的/index.html","hash":"cbbe611821bd6b5e6991de40fd148f38646062b1","modified":1583164294910},{"_id":"public/2019/08/04/树莓派 制作复古游戏机/index.html","hash":"c6a277f1133216239d21cd449b7b1fe99b6fd86d","modified":1583164294910},{"_id":"public/2019/07/27/门禁行人检测和识别二：Flask实时视频流服务器/index.html","hash":"a5e119cfd5d95880178fdff4b2a22529e762a839","modified":1583164294910},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/index.html","hash":"ba2d373ec4f8745da5b1a659a412e701efaf2ff6","modified":1583164294910},{"_id":"public/2019/07/23/门禁行人检测和识别/index.html","hash":"52de98d2ec04782a55281d0bc313cbcc47423028","modified":1583164294910},{"_id":"public/2019/07/23/Flask学习笔记/index.html","hash":"1c620c1a69bf22b74048f536d9caa2b60a691916","modified":1583164294910},{"_id":"public/2019/07/11/使用VSCode编写LaTeX/index.html","hash":"e8a55f539be020615c3418f0db2a1b582e5bd9a4","modified":1583164294911},{"_id":"public/2019/07/11/门禁人脸检测和识别四：keras人脸表情分类/index.html","hash":"e5aa8266f3b37501e355feff5072866dfaca6e26","modified":1583164294911},{"_id":"public/2019/07/12/门禁Arduino下位机通信与舵机控制/index.html","hash":"fa3d92b2baad7bad395da2149344c8e26da5e728","modified":1583164294911},{"_id":"public/2019/07/09/好玩的：日常/index.html","hash":"8b262540fc9ad4dbf59093419914791e5631d87e","modified":1583164294911},{"_id":"public/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/index.html","hash":"42156ad1e29376fcffd7d2c0aa74e7aef81afc78","modified":1583164294911},{"_id":"public/2019/07/06/使用dlib的imglab工具制作训练集与测试/index.html","hash":"23a3ac55da1fe69432783a628f63faa4a3047309","modified":1583164294911},{"_id":"public/2019/07/06/win10-python37-安装dlib19-17/index.html","hash":"060b1f71f561cd891281f5baf6cb680422f020e6","modified":1583164294911},{"_id":"public/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/index.html","hash":"dc6aeb025947cd96b5d015bf4a9a87e0f19ca966","modified":1583164294912},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/index.html","hash":"50555125a1ba1db65e9bb1d5309ac2e925ee6ff1","modified":1583164294912},{"_id":"public/2019/06/28/门禁人脸检测和识别二：人脸关键点检测/index.html","hash":"62ac50d5cbe5d06c0d75cff98d310a6ac2f02c32","modified":1583164294912},{"_id":"public/2019/06/25/门禁人脸检测和识别/index.html","hash":"bbf4b72092ac768aa24dab5d8e1b0e251a74b380","modified":1583164294912},{"_id":"public/2019/06/25/golang学习笔记/index.html","hash":"7d3e51d66ca0b98d6004ddc95e3011a5ddc740d2","modified":1583164294912},{"_id":"public/2019/06/23/OpenCV学习笔记四：目标检测与识别/index.html","hash":"c390ce04aa6c33a1ff1042eb6842c1842f28f699","modified":1583164294912},{"_id":"public/2019/06/16/好玩的-基于视觉控制的无传感器机械臂/index.html","hash":"16b2fe42de1433b234b630779b7f9a8a0e98e862","modified":1583164294912},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/index.html","hash":"f918fcd4594a994b90787ee2e0d4e5b73ca11ac6","modified":1583164294912},{"_id":"public/2019/06/22/Hexo：yilia主题下使用LaTex添加公式/index.html","hash":"1cfb06183fba47f54e8fd9ae8793c316b6cfb94f","modified":1583164294912},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/index.html","hash":"2dc2d118ed39ac8016cbb4255722d140ab28ea7c","modified":1583164294912},{"_id":"public/2019/06/16/Hexo：使用dev分支管理站点源文件，多地同步/index.html","hash":"fb250da5b28fda86e032adf22014965dc46c7bda","modified":1583164294913},{"_id":"public/2019/06/10/作业检查机器人/index.html","hash":"854e4f0fa0ae6aef0d41585966d9ccc8a942d24a","modified":1583164294913},{"_id":"public/2019/06/08/Hikey970使用记录四：python加载运行OpenCL/index.html","hash":"944dab43b65f52320a475107cb645bee0a58201f","modified":1583164294913},{"_id":"public/2019/06/07/桌面冰球机器人/index.html","hash":"f6806a2e5dbf6965f386d883b5c09b962e942b95","modified":1583164294913},{"_id":"public/2019/06/14/OpenCV学习笔记/index.html","hash":"5aacb8eb2c3d608f311a845538f9f1436278577c","modified":1583164294913},{"_id":"public/2019/06/05/象棋残局机器人五：象棋棋子分类模型/index.html","hash":"40f95dcb717159c05b45fd6e6663cb81a0ecff73","modified":1583164294914},{"_id":"public/2019/06/05/象棋残局机器人六：robowork竞赛机械臂项目/index.html","hash":"b2d320949b89cf192694ed09fdc7704024f35219","modified":1583164294914},{"_id":"public/2019/06/04/象棋残局机器人四：策略/index.html","hash":"a9bf3e49164b3b9efdf81122de744e7f7cc07ae8","modified":1583164294914},{"_id":"public/2019/05/29/象棋残局机器人三：分类模型retrain/index.html","hash":"94fa7c9b59e7172ad93052dd283d6a4899fed09a","modified":1583164294914},{"_id":"public/2019/05/26/loomo多服务机器人开发/index.html","hash":"81cf91abb7875f64901864bef9ca6198f77fef4b","modified":1583164294914},{"_id":"public/2019/05/25/象棋残局机器人二：透射变换/index.html","hash":"3c9707af5cbe17d490b128d6f8c15121b37caa99","modified":1583164294914},{"_id":"public/2019/05/25/象棋残局机器人一：摄像头标定/index.html","hash":"96884fdfb581129769f98f4ee6c9418ca9394ed5","modified":1583164294914},{"_id":"public/2019/05/22/RL学习笔记/index.html","hash":"d94df16decd1621e71825ad4848e9f4ded3429c8","modified":1583164294914},{"_id":"public/2019/05/22/AI通关超级马里奥/index.html","hash":"b1f0246e7c53eb627d54e566e4796888361dd436","modified":1583164294914},{"_id":"public/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/index.html","hash":"a47228ed345f0c04ca21d242b4813b81b01a4158","modified":1583164294914},{"_id":"public/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/index.html","hash":"1c771639ed56e1ba9b1b1cb1d952d5c2b0d299db","modified":1583164294915},{"_id":"public/2019/05/18/Jetson-Nano-使用记录/index.html","hash":"0080df261a9333e961883b37c23c8d9acc720729","modified":1583164294915},{"_id":"public/2019/05/22/Hikey970使用记录一：ubuntu16-04下烧写lebian系统/index.html","hash":"e7efa8efaa050a4ccefa19d63cdda57d02d2354d","modified":1583164294915},{"_id":"public/2019/05/16/人生苦短，我用python/index.html","hash":"d00442678ad62e5cc49ca7615960ad024d3dadf4","modified":1583164294915},{"_id":"public/2019/05/16/门禁python多进程练习/index.html","hash":"d0a0721a2a3c3461aabf1996dab8ce80363d7ae9","modified":1583164294915},{"_id":"public/2019/05/14/Pixar-Lamp/index.html","hash":"adba9e1fd87d0848e0065ea255c4eb59ef930f9d","modified":1583164294915},{"_id":"public/2019/05/11/tkinter学习笔记/index.html","hash":"d6617b79a077e169312408a9306ec7fb6a66b64d","modified":1583164294915},{"_id":"public/2019/05/12/Hikey970使用记录/index.html","hash":"4b3ce3706acbd8ea473304d755718851cff04855","modified":1583164294915},{"_id":"public/2019/05/05/象棋残局机器人/index.html","hash":"d43bb70ade87a3222bebc9b56e9a422411732f16","modified":1583164294915},{"_id":"public/2019/05/02/Scikit-Learn学习笔记/index.html","hash":"148a2846468735b3b8b2fc66caffb3cb662a43ad","modified":1583164294915},{"_id":"public/2019/04/28/天猫精灵：绑定贝壳物联设备/index.html","hash":"298186dd8b32f9e6d5213c1bd5715eb265a483db","modified":1583164294916},{"_id":"public/2019/04/27/门禁ubuntu配置-hadow-ocks-又可以刷脸开门了/index.html","hash":"86a7c0058d99f8c2a055fe0ed332677995abcad2","modified":1583164294916},{"_id":"public/2019/04/24/简单手势分类器/index.html","hash":"50cc670880e61733fcb76c2dd8fa288d7e0dbb80","modified":1583164294916},{"_id":"public/2019/04/26/TensorFlow-手写数字识别/index.html","hash":"5aad68d5cb767e95d3dc9cbfab94b540ec7718ca","modified":1583164294916},{"_id":"public/2019/04/26/打磨工具的日常/index.html","hash":"70a27f46ad92bf68768f78e03f200096d856ebd9","modified":1583164294916},{"_id":"public/2019/04/20/天猫精灵，开灯/index.html","hash":"2851eebf9fcc731d10fa3b1e4ebc47e5ee9b8c51","modified":1583164294916},{"_id":"public/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/index.html","hash":"44e5f27318007602d54cfb00150a6016e16d6859","modified":1583164294916},{"_id":"public/2019/04/19/Hexo：Hello Hexo/index.html","hash":"569797d5e741ee239c0bfb6a022d4019cdb9d0d4","modified":1583164294916},{"_id":"public/2019/01/01/随笔_VR的日常体验记录/index.html","hash":"647f7541caf3b2a5a1431462817fd408ebeb694e","modified":1583164294916},{"_id":"public/2019/01/01/随笔_读书笔记：未来简史/index.html","hash":"3681052cfcc90409d6a9b8b2da7dabf8986e980e","modified":1583164294916},{"_id":"public/2019/01/01/随笔_switch/index.html","hash":"795791d7212c34880132eeda2295f285763eafef","modified":1583164294917},{"_id":"public/2019/01/01/随笔_日常练琴/index.html","hash":"2e7c8430752d3ef303773066d1bf17ccbb11ba14","modified":1583164294917},{"_id":"public/2019/01/01/随笔_那些年，我们一起去比赛/index.html","hash":"1102a0466ed5bccd72445a53b3fbd6fb56501f4e","modified":1583164294917},{"_id":"public/index.html","hash":"001b55cb1443908646c9d0e8c0a055afc06abc87","modified":1583164294917},{"_id":"public/page/2/index.html","hash":"2649ac49526d2b8df0a42ed777f0d7d69c86be19","modified":1583164294917},{"_id":"public/page/3/index.html","hash":"e83f867f32ca5c5f77fbe76553c66f347171fb13","modified":1583164294917},{"_id":"public/page/4/index.html","hash":"41bb4828a6b35e51b0380cf6d3956c4dcfbe553e","modified":1583164294917},{"_id":"public/page/5/index.html","hash":"14b629cb7e403447de652affade741098a9ee36e","modified":1583164294917},{"_id":"public/page/6/index.html","hash":"368b407f44691b57e7204040f100293e59bda79e","modified":1583164294918},{"_id":"public/page/7/index.html","hash":"25338f5a0fe7407f4f092fc940990abe9e0e6651","modified":1583164294918},{"_id":"public/page/8/index.html","hash":"cafa66670e44e38b68bf3aff07208101c67bcc17","modified":1583164294918},{"_id":"public/page/9/index.html","hash":"b4e658d0f05cd5a6b797cd688f2ae6ac06b7526d","modified":1583164294918},{"_id":"public/archives/index.html","hash":"f5de34550666269f5119d12d7578a81daf7c9fea","modified":1583164294918},{"_id":"public/archives/page/3/index.html","hash":"eadc9e5c9651eceb33a8d612acc1364571461db5","modified":1583164294918},{"_id":"public/archives/page/5/index.html","hash":"792f9c9b6050c0e0482c7ed534ac7bb80ac15d56","modified":1583164294918},{"_id":"public/archives/page/2/index.html","hash":"19588ce9e0e4ef00be77997de737631d33aa170a","modified":1583164294918},{"_id":"public/archives/page/4/index.html","hash":"7f2def4302d16e76d9b80fdb9e814fb5ad461db9","modified":1583164294918},{"_id":"public/archives/page/6/index.html","hash":"7a1728dc284fdd2c96c90e0f0db343544ec2c6d8","modified":1583164294919},{"_id":"public/archives/page/7/index.html","hash":"bb1c4e1d6992d4e4cb61dc0f81dc3999b7e9b7bc","modified":1583164294919},{"_id":"public/2020/03/02/知识产权制造备注/index.html","hash":"8c38b7d76fa06cd215170cdc8df9735242cb6e38","modified":1583164294959},{"_id":"public/archives/page/8/index.html","hash":"1723d632d9689589139634f4561f418a4eb670e2","modified":1583164294959},{"_id":"public/archives/2019/index.html","hash":"283e4254ff9ad09bbb6db39ab19dee99fdfb9849","modified":1583164294959},{"_id":"public/archives/page/9/index.html","hash":"21da4d2015f310f1895ddd4d9a7ead6bc32e9019","modified":1583164294993},{"_id":"public/archives/2019/page/2/index.html","hash":"d680c35417e63c11b7b16843b1a41b18f8dfa1a0","modified":1583164294997},{"_id":"public/archives/2019/page/3/index.html","hash":"d0b9d10f773bcc94f8944274f4982f8d4138bfd2","modified":1583164294998},{"_id":"public/archives/2019/page/4/index.html","hash":"e8784deeadf45d199775da953469e5e01d21b77d","modified":1583164294998},{"_id":"public/archives/2019/page/5/index.html","hash":"443ba035e2a768c3af3b8e25ecb57e5e7f1dff1a","modified":1583164294999},{"_id":"public/archives/2019/page/6/index.html","hash":"fd15c3b3ff8cdebb844993aa86914371f6380741","modified":1583164294999},{"_id":"public/archives/2019/01/index.html","hash":"1c53c404c72396899b5d5fd8c0144c0bd39f9ee7","modified":1583164294999},{"_id":"public/archives/2019/page/7/index.html","hash":"cb9a0b25518c0c8a00732eb4ce5c44ceffafa5cd","modified":1583164294999},{"_id":"public/archives/2019/page/8/index.html","hash":"d80819f0f69a3157eb3ef54d0816ba5378e5bafd","modified":1583164295000},{"_id":"public/archives/2019/04/index.html","hash":"5662555dca50bff63d64b513f999c7560eb4cb35","modified":1583164295000},{"_id":"public/archives/2019/05/index.html","hash":"087a5e5597d73b4a4869014b9d98497247172f60","modified":1583164295000},{"_id":"public/archives/2019/page/9/index.html","hash":"56ef5ffbb1c3a4693c2d2e2f9dea2ac105d51dac","modified":1583164295000},{"_id":"public/archives/2019/06/page/2/index.html","hash":"fac93b7a8ba5d1223487e8d5afb27a52c8fca38c","modified":1583164295000},{"_id":"public/archives/2019/05/page/2/index.html","hash":"bdbbf892f505950ebe61987b1b4c24149f93d580","modified":1583164295000},{"_id":"public/archives/2019/07/index.html","hash":"f670ac21fbf836bdc1638a9e6f8cda9b5b737c99","modified":1583164295000},{"_id":"public/archives/2019/06/index.html","hash":"2e7a0a495d5b29c384ed251de891b3ab118701fd","modified":1583164295000},{"_id":"public/archives/2019/07/page/2/index.html","hash":"7f471e4dfd167ad5e7c0beb098cdc6862c8d1c08","modified":1583164295000},{"_id":"public/archives/2019/08/index.html","hash":"7754b21a56ba77731a9c752f6e7f89e0f06dc54d","modified":1583164295000},{"_id":"public/archives/2019/10/index.html","hash":"178b695c49f6d3bd207d88124d5953ce7ecf5ab5","modified":1583164295001},{"_id":"public/archives/2019/09/index.html","hash":"61ba3f079199d97a729816d0c9aac8a0519904cf","modified":1583164295001},{"_id":"public/archives/2020/index.html","hash":"a9e0e5ce8484b719d289c7afeada687ba7fc93a8","modified":1583164295001},{"_id":"public/archives/2020/01/index.html","hash":"c4f67595e04033069773289925efc22f88d84910","modified":1583164295001},{"_id":"public/archives/2019/12/index.html","hash":"2f3044d667c5577b59f026b2230312af6b01e2ad","modified":1583164295001},{"_id":"public/archives/2019/11/index.html","hash":"b060c18636c943457e92aee60d34972ac4b161d3","modified":1583164295001},{"_id":"public/tags/lua/index.html","hash":"a24e295c97060bd97ee95be311387e23af3f56e1","modified":1583164295001},{"_id":"public/tags/neat/index.html","hash":"b6b2c9d4062cc745d41916f7a9c908e125e3744b","modified":1583164295001},{"_id":"public/tags/Mario/index.html","hash":"28ed7892bfa7915065061b8136f76b559b052bbe","modified":1583164295001},{"_id":"public/tags/Arduino/index.html","hash":"46868009f318fe7ba319fc2dde35b20d37d12c5f","modified":1583164295001},{"_id":"public/tags/brainfuck/index.html","hash":"31109cc0c6415d5a1f95958445416919885c88f7","modified":1583164295001},{"_id":"public/tags/3D打印/index.html","hash":"e957cb5691e6b7c1cf138f7e1736806a7ccddcfa","modified":1583164295001},{"_id":"public/tags/flask/index.html","hash":"162f3da28055cff339b740c324089b9b8b03bd23","modified":1583164295002},{"_id":"public/tags/吉他/index.html","hash":"18c14ac345c46ea8d734b9ad5960e6f54b708e0d","modified":1583164295002},{"_id":"public/tags/hexo/index.html","hash":"d4db7f177eb164ebfa83297b0c18595f37084302","modified":1583164295002},{"_id":"public/tags/Hikey970/index.html","hash":"4118d02c4d18b9fa7fa85a207a897ca1b3412fbf","modified":1583164295002},{"_id":"public/tags/opencv/index.html","hash":"5fd732abc53fb4413033c0d1c86219f42da1a52c","modified":1583164295002},{"_id":"public/tags/opencv/page/2/index.html","hash":"f38135fed5b8980688aa74a6d9b487aee80dec66","modified":1583164295002},{"_id":"public/tags/python/index.html","hash":"f75d14140faef63850dcd249869748b58f43f1be","modified":1583164295002},{"_id":"public/tags/pyopencl/index.html","hash":"fc404cc7fd30eaa325884050083ec65079123ab0","modified":1583164295002},{"_id":"public/tags/tensorflow/index.html","hash":"424fae95a5782fb4e0a9938663b1b51b05bd714d","modified":1583164295002},{"_id":"public/tags/import/index.html","hash":"1308dc5d6ea6298ea535464540896797ff07268d","modified":1583164295002},{"_id":"public/tags/sklearn/index.html","hash":"7faef0b720b5407d8ccebb8d30444321189df79c","modified":1583164295002},{"_id":"public/tags/RL/index.html","hash":"607c18a003d109c4012e0d23aebab4029bbafa23","modified":1583164295002},{"_id":"public/tags/go/index.html","hash":"612ee800959bb842add1456a6a7beef77bf1f7a2","modified":1583164295003},{"_id":"public/tags/git/index.html","hash":"8fc28c79b695a81dac13f98c819ac7020aeac9e5","modified":1583164295003},{"_id":"public/tags/leapmotion/index.html","hash":"b62c2e1f12db54810d518a24f93bab3f1a369604","modified":1583164295003},{"_id":"public/tags/js/index.html","hash":"58bc544936618830d627c04515c7518bff6374cf","modified":1583164295003},{"_id":"public/tags/loomo/index.html","hash":"f9e920c43ed6784db789a99918fd1847e9982a5a","modified":1583164295003},{"_id":"public/tags/box2d/index.html","hash":"3a24a6bfd06681ee84cc039d78c94644282104c9","modified":1583164295003},{"_id":"public/tags/Android/index.html","hash":"ca961bb28adb16eb60b0bccc081926f07a6133ef","modified":1583164295003},{"_id":"public/tags/机械手/index.html","hash":"9a220841fd376fff731897c9d16c7c3e2c657e81","modified":1583164295003},{"_id":"public/tags/web/index.html","hash":"f0532f42632dd43b0f7f26216dba70b518174d4c","modified":1583164295003},{"_id":"public/tags/tkinter/index.html","hash":"c7a9e7cdd7a7508d3023a49f6c318ef74d8a2556","modified":1583164295003},{"_id":"public/tags/dlib/index.html","hash":"7560db02ac8bd4dd2b44420c47465212201bbf72","modified":1583164295004},{"_id":"public/tags/Latex/index.html","hash":"b337f2cf65862ca70972aeef546968f5ea980da5","modified":1583164295004},{"_id":"public/tags/数模/index.html","hash":"5a815b1bed2a8ab317b0783a4fd5db1ed8eaf804","modified":1583164295004},{"_id":"public/tags/天猫精灵/index.html","hash":"b146b4152aa98660023303f49307be3d0bb73660","modified":1583164295004},{"_id":"public/tags/arduino/index.html","hash":"b3cdbd14a93d264e7419616e817718951e463e5f","modified":1583164295004},{"_id":"public/tags/esp8266/index.html","hash":"38684b79bae8a2d3c77a9a90b7b3225d745280fd","modified":1583164295004},{"_id":"public/tags/today-is-a-happy-day/index.html","hash":"15a5a2694d9f8e174fac1ccc5e465526560dbd15","modified":1583164295004},{"_id":"public/tags/raspberry/index.html","hash":"6e04e314fe3aa6cfea9532142f7b9f2fd3f8d3ae","modified":1583164295004},{"_id":"public/tags/alphazero/index.html","hash":"33d624b75b1f539da4457f3f65c2f1e91331d145","modified":1583164295004},{"_id":"public/tags/AlphaZero/index.html","hash":"58ea048eb392ff86d00b18e7b7dc976692f6b484","modified":1583164295004},{"_id":"public/tags/tf/index.html","hash":"abfb8e7f8e7c8c846e6d612fa7764ce65432d870","modified":1583164295005},{"_id":"public/tags/Flask/index.html","hash":"012af09445e89ea10e940f1f50eb33ead6c3b5fe","modified":1583164295005},{"_id":"public/tags/迁移学习/index.html","hash":"2e713eefc4fef7591dc8f7d9a88cb4b1dc9cd958","modified":1583164295005},{"_id":"public/tags/keras/index.html","hash":"ce26df0358cf47aa6c7485ffdc36ff54124edcbe","modified":1583164295005},{"_id":"public/tags/随笔/index.html","hash":"bc174976f6f027de9511e6ba20123837068bba0f","modified":1583164295005},{"_id":"public/tags/docker/index.html","hash":"8139fbdc3e790f26f6c8137d2097c1495d976e59","modified":1583164295005},{"_id":"public/tags/yolo/index.html","hash":"f11a21b99c4bcbc98046baad82471c8c837d1883","modified":1583164295005},{"_id":"public/tags/jupyter-notebook/index.html","hash":"abef77c3843dce686a62d7ac27c8c8ba4076599a","modified":1583164295005},{"_id":"public/tags/mysql/index.html","hash":"f1a847705ab26698164b67c372aa55fb24b1a369","modified":1583164295005},{"_id":"public/tags/php/index.html","hash":"b2dc955b7993f7c3c3a3fcea52e2c66b09e576f7","modified":1583164295005},{"_id":"public/archives/2020/03/index.html","hash":"234252cfb56b81043191a72d4f2e2303a88d056d","modified":1583164295029},{"_id":"public/CNAME","hash":"5750e603156cf5339d580683f658f21559cb63a6","modified":1583164295029},{"_id":"public/img_resize_tool.py","hash":"fcbc05ca4138bacdbf8c83ca99683c53f1a5931f","modified":1583164295029},{"_id":"public/tool_img_rename.py","hash":"ad77dd054c16cc78cad06b956ab87b8664a60b70","modified":1583164295029},{"_id":"public/tool_img_resize.py","hash":"fcbc05ca4138bacdbf8c83ca99683c53f1a5931f","modified":1583164295029},{"_id":"public/photos/empty.png","hash":"e88177c88f6b7219a3474da7d210965a6dbb57d7","modified":1583164295030},{"_id":"public/slides/index/coreXY.md","hash":"f3a86cf9d163de43ed9ff84322f81f848f4bba27","modified":1583164295030},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1583164295030},{"_id":"public/slides/index/coreXY.html","hash":"1c121cbdc0dfc72287e3b0e9ae84fddd1070d072","modified":1583164295030},{"_id":"public/fonts/iconfont.adcbdb.woff","hash":"ad8487251c1ed87e7b18753a415b4064438213a3","modified":1583164295030},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1583164295030},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1583164295030},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1583164295030},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1583164295030},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1583164295030},{"_id":"public/fonts/iconfont.583fff.svg","hash":"12a7c721862f8d3d067e0544de73fe29bc6158c5","modified":1583164295030},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1583164295030},{"_id":"public/fonts/iconfont.c7aae9.eot","hash":"6c3e72cbab99552c818d29631a2c1e7ee22a6b6a","modified":1583164295030},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1583164295030},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1583164295030},{"_id":"public/img/avatar.jpg","hash":"6adc58081d5053c1a1757c940ed3912bbbfe49b4","modified":1583164295030},{"_id":"public/img/favicon.png","hash":"37e487f5b0d19dfa9bd1e6c2a2014f02d9e4406e","modified":1583164295030},{"_id":"public/fonts/iconfont.e26e17.ttf","hash":"7f510c341c370d1372825d85a1d3f2737cb365d8","modified":1583164295031},{"_id":"public/slides/index/coreXY/幻灯片9.PNG","hash":"81356dc9d5d76ac30b831e31e75c93f84fbc828e","modified":1583164295031},{"_id":"public/2020/01/05/Hexo：yilia主题下添加相册功能/0.png","hash":"2aaf3eada5c3bf7ebc3d704eb88223372d0044d8","modified":1583164295031},{"_id":"public/2019/05/18/Jetson-Nano-使用记录/001.png","hash":"518664af6d7f8de158242d105c49cd81e9d04a0b","modified":1583164295031},{"_id":"public/2019/06/08/Hikey970使用记录四：python加载运行OpenCL/001.png","hash":"47eacba12e82d7f96d6a08af56b236fa3c753247","modified":1583164295031},{"_id":"public/2019/11/26/selenium自动化测试/001.png","hash":"b6c232e1db16f2bc811080e30167301082668dda","modified":1583164295031},{"_id":"public/2019/04/19/Hexo：Hello Hexo/001.png","hash":"95f9f458e2a13f44f47c1f4b0ef312a18ff93513","modified":1583164295031},{"_id":"public/2019/04/19/Hexo：Hello Hexo/000.png","hash":"f97b31602db70f71fb67b7f4def858a1e49b73ba","modified":1583164295031},{"_id":"public/2019/05/12/Hikey970使用记录/01.png","hash":"c234791f1f742a65034a82189797252ac96af156","modified":1583164295031},{"_id":"public/2019/07/11/使用VSCode编写LaTeX/00.png","hash":"5ddff5f7c02c682fe5b085b1f385b04d0dfebfb7","modified":1583164295031},{"_id":"public/2019/11/12/元胞自动机/01.png","hash":"2ea614b564d3c3168cee22682cd9dd7d621d39db","modified":1583164295031},{"_id":"public/2019/07/11/使用VSCode编写LaTeX/01.png","hash":"f38bd75d9e92bc2f029f9a3f2d4208820f4c8bea","modified":1583164295031},{"_id":"public/2019/11/12/元胞自动机/02.png","hash":"207c42b756631d3916e9ea7b29598e6f6f1bdb8d","modified":1583164295031},{"_id":"public/2019/06/10/作业检查机器人/000.jpg","hash":"3b5d75ac6526ac25894c1a714e180c48bfc07477","modified":1583164295031},{"_id":"public/2019/05/14/Pixar-Lamp/001.jpg","hash":"ff73857dfe4b15be6493ee9cc5d851a454614890","modified":1583164295031},{"_id":"public/2019/07/06/win10-python37-安装dlib19-17/00.png","hash":"0c824c22feeb3d5710d1108e33e4444f280bcd06","modified":1583164295031},{"_id":"public/2019/07/06/win10-python37-安装dlib19-17/02.png","hash":"83e53428614ea50c0903fceaab6a58b4f87b90a0","modified":1583164295032},{"_id":"public/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/03.png","hash":"a061ade10c8fa69d26a7483d8756f7d2e4f4db14","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/02.png","hash":"80bd21e079b45ab858392b32db5f4cc9033e80f3","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/01.png","hash":"dcd2479451cc27a10576e335e13907a44a818f66","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/04.png","hash":"009f3589b63238bced9cfdf0ba06ae4a7f8961bb","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/01.png","hash":"7e5314a03c74db15275086e1c13e5e7028f2098b","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/02.png","hash":"7ac3bb89ea653ade2274a55c2df1d840e612925c","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/05.png","hash":"901c6cdf2df9d6eeb33764075fb8f173de2c2aca","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/03.png","hash":"7ac3bb89ea653ade2274a55c2df1d840e612925c","modified":1583164295032},{"_id":"public/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/04.png","hash":"abe85cacc69856c16f0dde15260a8a1e93acf8e3","modified":1583164295032},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/00.png","hash":"5add9fe0c516920c80f22d2bf5f23e6463282101","modified":1583164295032},{"_id":"public/2019/09/04/leapmotion使用记录/001.png","hash":"c4b74040ea225762b93bf2d49adb3331a9f3dcaf","modified":1583164295032},{"_id":"public/2019/09/04/leapmotion使用记录/002.png","hash":"7a4175fb88ab723e3c52be48aa8daca67b2e5426","modified":1583164295033},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/03.png","hash":"145088d457606fa1f1fe5e7258b02440e1537bc9","modified":1583164295033},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/04.png","hash":"621fca207c19846917fe43a20f3430270cd6766e","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/01.jpg","hash":"e74d801194ae1d8a7f742b1100c7941ee0472fa3","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/04.jpg","hash":"9193fd0f0bd0ca765ecdf0414f660c8e97584419","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/05.jpg","hash":"bb4e70195c68d2c20a2bdef3f139875d69d4722e","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/06.jpg","hash":"a8007562b9bf8c521d98a26208f1a5c286a01625","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/08.jpg","hash":"91d1bc553c6a0bc4d135a21c894fdb5b113dbf46","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/09.jpg","hash":"8ea6bc4526895cb14de783493eeb0d8f802a3c3a","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/10.jpg","hash":"d6c0f82ef44ecd06d082ac5c4fdf110da429267a","modified":1583164295033},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/12.jpg","hash":"d0126b7c29b498174a535bba0d040e3c9470b053","modified":1583164295034},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/14.jpg","hash":"aa88fec7b947e1187492e1148705eee57f0f470b","modified":1583164295034},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/13.jpg","hash":"35fbbbb8362d8898f3ac25906602292c5daa91f7","modified":1583164295034},{"_id":"public/2019/06/04/象棋残局机器人四：策略/001.png","hash":"c77e354f7c15e46d93a789d87364937c778083bc","modified":1583164295034},{"_id":"public/2019/04/24/简单手势分类器/01.png","hash":"e2476fb0d7ee4ab4af4f541f35e6ce1c3e0f6a5c","modified":1583164295034},{"_id":"public/2019/07/12/门禁Arduino下位机通信与舵机控制/01.png","hash":"0a6f0c650abab62bc6584427792526438cfe0883","modified":1583164295034},{"_id":"public/2019/07/12/门禁Arduino下位机通信与舵机控制/02.png","hash":"001cb4505954bfa389c28811b320a9f5fe21d2d3","modified":1583164295034},{"_id":"public/2019/07/12/门禁Arduino下位机通信与舵机控制/03.png","hash":"716c846d5c3850b9a80a5fcf6460e47102eae7f5","modified":1583164295034},{"_id":"public/2019/06/23/OpenCV学习笔记四：目标检测与识别/hog01.jpg","hash":"e33929d7053e091469aeb40f9806d02f6796bb18","modified":1583164295034},{"_id":"public/2019/06/23/OpenCV学习笔记四：目标检测与识别/hog02.jpg","hash":"afa2d3a91de70c4665662f7878022db8a8bfd048","modified":1583164295034},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/output_10_0.png","hash":"9e22eec352a63f34069909b937114ef4b83aef01","modified":1583164295034},{"_id":"public/2019/06/23/OpenCV学习笔记四：目标检测与识别/output_5_1.png","hash":"1599adad9ed3c8a86b22d8bd8ec2b6a8c58a4031","modified":1583164295034},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/output_12_0.png","hash":"b9f35435353c9104206d15f9e1fc0080d9f577da","modified":1583164295034},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/output_15_0.png","hash":"c04ee8ba457033a91752d943d8ebbeefdbdc4997","modified":1583164295034},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/output_17_0.png","hash":"cc054900ef529158daa01096f78133cbea8fc373","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/01.jpg","hash":"e53be51c1dcddcedc9acdcce62fe5ddb1ff27b62","modified":1583164295035},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/output_6_0.png","hash":"63d04ed2f545819d2fc5f07ce688c2d51456d4c8","modified":1583164295035},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/output_4_0.png","hash":"940533f012c8c253da0aeb90842789735387b3fd","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/02.jpg","hash":"57e1ae197f197b185c13ea1d01c7ffe686bc794c","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_0_1.png","hash":"4b402f3d5b0b489e1fdb59d604e5b449329155bf","modified":1583164295035},{"_id":"public/2019/06/22/OpenCV学习笔记二：图像处理/output_8_0.png","hash":"9e22eec352a63f34069909b937114ef4b83aef01","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_0_3.png","hash":"90edad5e696c63ad1aeabad716bcf86fc99fe3ea","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_10_1.png","hash":"48aef7f59934bc197b3a4088587b89c3500e81f3","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_0_5.png","hash":"17ce0b8481369a900ca349e737cf11d55cf04c6e","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_12_1.png","hash":"5a5c6104e402d42cfc0bcaac57e09d123703cb3f","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_13_0.png","hash":"a6e561cf1526a4b746b3bc8983299081b17b37f3","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_12_2.png","hash":"49d2f6407ec4ead91615ce4cb137cc116a03995a","modified":1583164295035},{"_id":"public/2019/11/11/空间博弈与matplotlib绘制gif动图/01.png","hash":"d1c699bbef87d9b3297a7d2366520c2d26785b35","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_33_0.png","hash":"b3945eef9828d73c16dc48b9276234812e33c4cc","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_5_1.png","hash":"6e3ac80286e4ca65871bd4409fd05a83d91f6087","modified":1583164295035},{"_id":"public/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_3_1.png","hash":"00c40205c21f32d92f62fae1064e0a73d154cc2b","modified":1583164295035},{"_id":"public/2019/11/12/空间博弈演化/05.png","hash":"944a8ad5d1a71aa5c83e9c1e199d4b1b501c5074","modified":1583164295035},{"_id":"public/2019/11/12/空间博弈演化/04.png","hash":"7245285f52d7b81fc75a1f871f01e6434a1cea85","modified":1583164295035},{"_id":"public/2019/11/12/空间博弈演化/03.png","hash":"7c1502d0d6c28d7d1e0b567a2286b66fe0071192","modified":1583164295035},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/DOG Pyramid.jpg","hash":"f53d4585af600d9a5da0adbda75504af3d509552","modified":1583164295036},{"_id":"public/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/P_Trangle.png","hash":"ff6611e104f982244bff6509a839e7ab1539cf3d","modified":1583164295036},{"_id":"public/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/Trangle.png","hash":"b3cc5c8346fa34f4a63037ecfe2b14f01294286e","modified":1583164295036},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/FAST_samples.png","hash":"fb4b5ba9198de9f15c3f53a55b3b8ebeec4625a6","modified":1583164295036},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_11_0.png","hash":"1f7fd7671a8b7684944a70e126cad69d5947f5d9","modified":1583164295036},{"_id":"public/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/output_4_0.png","hash":"81ff22ed5dfff551180b84ac68d277d0a2b29bf1","modified":1583164295036},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_3_2.png","hash":"56fb48ccacf28ed66952e3807992e415c120f7bd","modified":1583164295036},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_5_0.png","hash":"355fbdeabc595dd19c8120949c111315dbfb4fea","modified":1583164295036},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/sift_local_extrema.jpg","hash":"de7bbf05c2e0f0c2a3632870fee22c3c97ea2d29","modified":1583164295036},{"_id":"public/2019/11/10/pyecharts数据可视化/bar.png","hash":"c4397bc20f64d9720e46925f52fae09e1d6d1302","modified":1583164295036},{"_id":"public/2019/11/10/pyecharts数据可视化/line.png","hash":"0fb53b2c21b577285bc8c0a9b8de73def3debfba","modified":1583164295036},{"_id":"public/2019/11/10/pyecharts数据可视化/pie.png","hash":"470f48e49d82b20936439643a5e29eb615be5597","modified":1583164295036},{"_id":"public/2019/11/10/pyecharts数据可视化/wordcloud.png","hash":"e99a6954eb15672281d92183b84f99255a89a1b1","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1583164295036},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1583164295037},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1583164295037},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1583164295037},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1583164295037},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1583164295037},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1583164295037},{"_id":"public/assets/css/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1583164295037},{"_id":"public/2019/05/12/Hikey970使用记录/00.png","hash":"9b087e758f4c95a9aecd0f67b9ce8d6c1eeabdb6","modified":1583164295054},{"_id":"public/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/01.png","hash":"bc31d28c66270fca84a8022ef19600006d9c765e","modified":1583164295054},{"_id":"public/2019/07/06/win10-python37-安装dlib19-17/01.png","hash":"23f7bc39f3692193a0dfa7f1d7d0c24cb56b8294","modified":1583164295054},{"_id":"public/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/02.png","hash":"65ecf9260630ed39dfdf98b5e50a30854cc0871e","modified":1583164295055},{"_id":"public/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/00.png","hash":"2b9a3a4202b0b8d13fbf3016ba4765ddbdab2458","modified":1583164295055},{"_id":"public/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/03.png","hash":"456021205e7579b54418b1046f88255c10618687","modified":1583164295055},{"_id":"public/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/01.png","hash":"0b21f18c30e838eca4bb7e2dfba8b44e6ef588e0","modified":1583164295055},{"_id":"public/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/03.png","hash":"c560714c834a534e24f8d2b95aa5ff386e38eb28","modified":1583164295055},{"_id":"public/2019/09/04/leapmotion使用记录/003.png","hash":"507e32fc56728c6561109c9f7669abbb6453aeec","modified":1583164295056},{"_id":"public/2019/09/04/leapmotion使用记录/Leap Motion JavaScript Sample.png","hash":"e7372559f17d18cee7e602981a6aa52c5164c801","modified":1583164295056},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/02.png","hash":"240acca901fddb6b7d2e7dcf45228bc2daa886e6","modified":1583164295056},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/02.jpg","hash":"5e61f307ae24e1c4164b78ae37cc282423da78b8","modified":1583164295056},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/00.jpg","hash":"dc88e11eb7381c99c68ee4c8ed9f9e329c5c060a","modified":1583164295057},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/03.jpg","hash":"65a0e5fce6f045a7f50bc8596e0d6d6c8d1ac2b7","modified":1583164295057},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/11.jpg","hash":"794097952326df5d576207922a2e5d2c59435581","modified":1583164295057},{"_id":"public/2019/05/25/象棋残局机器人二：透射变换/001.jpg","hash":"8a33b44169bf9a2533de8e47b162ab41e7092fa9","modified":1583164295057},{"_id":"public/2019/04/20/天猫精灵，开灯/1.png","hash":"cb869e09faacb5bdddf05e3cf1fe8d3974a168b8","modified":1583164295057},{"_id":"public/2019/06/23/OpenCV学习笔记四：目标检测与识别/Histograms of Oriented Gradients for Human Detection.png","hash":"fb7c74d552c33d4a59651e87b8458ca1684d5e16","modified":1583164295057},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_16_0.png","hash":"e3d8a3208d79e971ccb82decde5ed8095c3694a2","modified":1583164295057},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_7_1.png","hash":"6b4032e90d76706f7418ec3d5b56946b623c5392","modified":1583164295057},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1583164295058},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1583164295058},{"_id":"public/assets/js/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1583164295058},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1583164295058},{"_id":"public/slides/index/coreXY/幻灯片4.PNG","hash":"197f15b4e008139520161b0dea955f0a7db1bfe5","modified":1583164295111},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/01.jpg","hash":"15d68e59cb0d8a22132f8dac1f46d75122505e52","modified":1583164295111},{"_id":"public/2020/01/01/Hexo：yilia主题下添加live2d看板动画/01.png","hash":"18c435b8946c3600cb90cc09c51d911ca8b20cb9","modified":1583164295112},{"_id":"public/2019/05/25/象棋残局机器人一：摄像头标定/001.jpg","hash":"8d6b4557e149dab52075bacfc4a506a40dd3de67","modified":1583164295112},{"_id":"public/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/02.png","hash":"0c84f811476daebf9498626bc279d6068bc9eec3","modified":1583164295112},{"_id":"public/2019/08/13/奥比中光ORBBEC-3D体感摄像头/000.png","hash":"b52466b0a24f1d54abe9aed2edce3969396cd9eb","modified":1583164295113},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/06.png","hash":"eded21f96e1fa591ec4c3eac3069a8ba7cb0aa52","modified":1583164295113},{"_id":"public/2019/09/24/眼动追踪推荐眼镜一：硬件篇/05.png","hash":"d14b02306b99dcb9c9386d4b0f0d0454d08542bb","modified":1583164295113},{"_id":"public/2019/05/05/象棋残局机器人/02.png","hash":"778fcfce5200408042514beab51a8a5c84f4c86c","modified":1583164295114},{"_id":"public/2019/11/11/空间博弈与matplotlib绘制gif动图/02.gif","hash":"9beb83cd218398e4bfab65e39e96276e6a45fcdc","modified":1583164295114},{"_id":"public/2019/01/01/随笔_日常练琴/0.png","hash":"00fe13adc919dc6a46503de41623842b475bfb85","modified":1583164295140},{"_id":"public/2019/07/11/门禁人脸检测和识别四：keras人脸表情分类/model.png","hash":"179b9fe3d1b0c07ee5fa89c859933e0bfe80e627","modified":1583164295140},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_13_0.png","hash":"8908b1fcc29a9e737f487c326412af55b8f64b3f","modified":1583164295140},{"_id":"public/2019/08/09/Ubuntu-16-04-python3-5-编译caffe/001.jpg","hash":"dd87314600573b6a50af141d72cf23683e22121b","modified":1583164295141},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1583164295141},{"_id":"public/img/avatar-1.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1583164295157},{"_id":"public/2019/04/20/天猫精灵，开灯/2.png","hash":"a5477bd6d0ef8c44a412b4d0714592af503a27fb","modified":1583164295157},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_17_0.png","hash":"dff181a113824c53d4518df4025bce3ded386731","modified":1583164295157},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_9_0.png","hash":"a1be4aa9d6f54935b1fc146a18776705ecd5a2d3","modified":1583164295157},{"_id":"public/2019/06/23/OpenCV学习笔记四：目标检测与识别/output_4_0.png","hash":"eb5ac6f01c03d4700f6b4a626b5b83cce49fb17c","modified":1583164295240},{"_id":"public/2019/08/13/奥比中光ORBBEC-3D体感摄像头/001.png","hash":"e6809656446c1698831563c0b36418ad673e0fcd","modified":1583164295256},{"_id":"public/2019/05/25/象棋残局机器人一：摄像头标定/002.png","hash":"98fbc1fd416bbf63997859b20c743461c4b85d10","modified":1583164295256},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_2_0.png","hash":"2891fd9f9cbeab349e62cd6df7a25267aaea08fb","modified":1583164295267},{"_id":"public/2019/05/11/tkinter学习笔记/color.png","hash":"fa5ea684f8e40b865b26b0570aed9b1f77c23476","modified":1583164295269},{"_id":"public/2019/06/10/作业检查机器人/001.png","hash":"a9b3b3c94acfcbe16ed186fe21f68f17d34a6653","modified":1583164295270},{"_id":"public/2019/06/05/象棋残局机器人五：象棋棋子分类模型/001.jpg","hash":"7b5cba8f52fa147dc605d544c118d0ba97ea89b0","modified":1583164295270},{"_id":"public/main.16f007.css","hash":"2cf3f728df0046ab2b4b48b9d5a0ebe165c386cd","modified":1583164295279},{"_id":"public/main.e817a4.css","hash":"2cf3f728df0046ab2b4b48b9d5a0ebe165c386cd","modified":1583164295279},{"_id":"public/main.6efad3.css","hash":"2cf3f728df0046ab2b4b48b9d5a0ebe165c386cd","modified":1583164295281},{"_id":"public/slider.dd5d96.js","hash":"3bfb2ffbf9483281a7b0e847ef3cb80d5b4402c6","modified":1583164295281},{"_id":"public/slider.2088df.js","hash":"a2c0ef3818cc74c2277e31522549ac1e72cb3f7e","modified":1583164295281},{"_id":"public/2019/07/06/使用dlib的imglab工具制作训练集与测试/00.png","hash":"8c33376b03154d244c125659846faf53fe4da232","modified":1583164295281},{"_id":"public/2019/07/06/使用dlib的imglab工具制作训练集与测试/01.png","hash":"3a745397976a382218978aaf29178bd9203f74d3","modified":1583164295282},{"_id":"public/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/07.jpg","hash":"066d59dd064e6711e980f6656be9a534dc0d778b","modified":1583164295282},{"_id":"public/2019/05/29/象棋残局机器人三：分类模型retrain/002.png","hash":"6e8ec8165732fbbb935cadb8c7d7f3d54b278268","modified":1583164295282},{"_id":"public/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/opencv-delaunay-vornoi-subdiv-example.png","hash":"beb1b61d8bfda5b652bfffe3f9ccee261c7fbb2f","modified":1583164295283},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1583164295283},{"_id":"public/main.4ab092.css","hash":"11c29eddc9aa13d299cad00daef7b3ed3998ab77","modified":1583164295287},{"_id":"public/main.16f007.js","hash":"32b69bc36de5f5be4ab96d2f5f7f6071ca199904","modified":1583164295287},{"_id":"public/main.4ab092.js","hash":"e0d7674f3c8e1bcfa3d66ce62364b1c44fa064bd","modified":1583164295287},{"_id":"public/main.e817a4.js","hash":"b4b823df01291af8a48354d14d08560e8d5e1f77","modified":1583164295287},{"_id":"public/main.6efad3.js","hash":"b27f62fb661cdbfd6a7c6caf15eb56e60160e4c0","modified":1583164295287},{"_id":"public/slides/index/coreXY/幻灯片10.PNG","hash":"12b328234d9a8d67865d77209b53ac4e2fffb368","modified":1583164295288},{"_id":"public/slides/index/coreXY/幻灯片8.PNG","hash":"18925902b41159588e2b8624ab37ecad5ea85800","modified":1583164295288},{"_id":"public/2019/09/04/leapmotion使用记录/000.png","hash":"f4ed986f6342cca4dda674ac1eaa00285726ad88","modified":1583164295288},{"_id":"public/2019/05/29/象棋残局机器人三：分类模型retrain/001.png","hash":"0f83b488878e6b7e531c32589fc203efecbb2800","modified":1583164295288},{"_id":"public/2019/05/25/象棋残局机器人一：摄像头标定/003.png","hash":"b1d83610933a20115f195762ae33d35b2c9b0e4c","modified":1583164295289},{"_id":"public/slides/index/coreXY/幻灯片2.PNG","hash":"5a35d76d323590a7b780fa08e115c7b43b98d049","modified":1583164295294},{"_id":"public/2019/04/24/简单手势分类器/02.png","hash":"40f67510cc5d8f6ae6d9b6843ea34ad25a8b9b83","modified":1583164295297},{"_id":"public/2019/05/05/象棋残局机器人/01.png","hash":"2bce6e7b18f9d9b6aaa51ffc330ed6ce1c159b2f","modified":1583164295297},{"_id":"public/main.7ddca9.css","hash":"72706abf235eb64769e9da34452d5bbed624ad9f","modified":1583164295303},{"_id":"public/slides/index/coreXY/幻灯片5.PNG","hash":"4847d6861128fba6af490d11e1de175f687ed03d","modified":1583164295303},{"_id":"public/2019/05/26/loomo多服务机器人开发/设计思路-201905.png","hash":"366254dcca1877af1cb2b32cd8fded961dd6055b","modified":1583164295303},{"_id":"public/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_18_0.png","hash":"a13c9e30a4b51e98dcef6d5ee647c876001eb4d7","modified":1583164295303},{"_id":"public/slides/index/coreXY/幻灯片7.PNG","hash":"6a8cbc1f15ca6b0d91735e9f12c30009563d4e1c","modified":1583164295310},{"_id":"public/2019/05/14/Pixar-Lamp/设计思路.png","hash":"e8b5b06807fe39599f8cb147f066f9acf82a80f1","modified":1583164295310},{"_id":"public/slides/index/coreXY/幻灯片6.PNG","hash":"01031996b1b1330be2af7c02fb47b3d59a26187e","modified":1583164295320},{"_id":"public/slides/index/coreXY/幻灯片1.PNG","hash":"b78727d620a76aedef9ded32452c340ea65aac61","modified":1583164295320},{"_id":"public/2019/06/10/作业检查机器人/002.png","hash":"632c559847a1e07fcd3de5b5e2c5b3300cbee354","modified":1583164295321},{"_id":"public/2019/05/14/Pixar-Lamp/设计思路-201905.png","hash":"00eeec1e93894f71b7fa20ce07aed2a66bc6561b","modified":1583164295343},{"_id":"public/mobile.4bdabd.js","hash":"0f9eaf79b4b3431f314ce6b0364db1b82aae02fd","modified":1583164295352},{"_id":"public/mobile.ec0eac.js","hash":"b7420025194c8d4368a50b30b6b8753e8fd9a4d7","modified":1583164295353},{"_id":"public/2019/05/02/Scikit-Learn学习笔记/machine_learning_map.png","hash":"ea8361d8304d169ecefc073c17c6ecf4567dd0a0","modified":1583164295353},{"_id":"public/slides/index/coreXY/幻灯片3.PNG","hash":"4139e1fbe1073968c3c2c51a7bae006c2447e18a","modified":1583164295353},{"_id":"public/2019/09/19/眼动追踪推荐眼镜/detect.gif","hash":"4850f0b3488392e5e6afc826cf2de8198bda2183","modified":1583164295353},{"_id":"public/2019/11/12/空间博弈演化/02.png","hash":"caa7c9d3e86028721a4cb043c1cc13f3b0ef8664","modified":1583164295358},{"_id":"public/2019/09/19/眼动追踪推荐眼镜/00.png","hash":"90a01da69e0533ac4ea884b69f70a621e0b6a663","modified":1583164295370},{"_id":"public/2019/06/07/桌面冰球机器人/001.gif","hash":"35355a3613efaa40cae5d38f901df25c4ce00ee5","modified":1583164295382},{"_id":"public/slider.7f94da.js","hash":"d608b9f6c4b0e63800923452b75d9bb21ad29ebc","modified":1583164295388},{"_id":"public/main.7ddca9.js","hash":"079f4755665f419c400a24a17164505ef3cdbd5a","modified":1583164295388},{"_id":"public/2019/05/05/象棋残局机器人/demo2.gif","hash":"108d3b958f4b607d0c78b5014d72af8a0de157ac","modified":1583164295412},{"_id":"public/mobile.9e1dfd.js","hash":"919bb6932f7bbc4186f10f0975cbca41ed751da6","modified":1583164295421},{"_id":"public/2019/11/11/空间博弈与matplotlib绘制gif动图/03.gif","hash":"9c80254d2c3e4ff91677e2169d21cc796053fd3b","modified":1583164295423},{"_id":"public/2019/05/05/象棋残局机器人/demo3.gif","hash":"be104fb9a69c8565a924b852973a3827ce79b6c0","modified":1583164295427},{"_id":"public/2019/05/05/象棋残局机器人/demo1.gif","hash":"70ceb50cefc07f5292fbf2373a167d48f573cdb3","modified":1583164295433},{"_id":"public/2019/07/12/门禁Arduino下位机通信与舵机控制/00.gif","hash":"0b811cdcc9f260351b8a686bbc3f3eb9a2e31814","modified":1583164295438},{"_id":"public/2019/06/25/门禁人脸检测和识别/demo.gif","hash":"370d15448ab481ace650d98c16a163cacdee9a0e","modified":1583164295442},{"_id":"public/cloc","hash":"9d72d90de0f4d32bcabeac2d76cb75c7d1c199ee","modified":1583164295476},{"_id":"public/2019/08/02/晚安/001.png","hash":"875de1887bddaf871f14a9325d7c780d72606437","modified":1583164295561}],"Category":[],"Data":[],"Page":[{"_content":"","source":"photos/lazyload.min.js","raw":"","date":"2020-01-15T10:21:07.571Z","updated":"2020-01-05T19:13:25.295Z","path":"photos/lazyload.min.js","layout":"false","title":"","comments":1,"_id":"ck7an506b00004cvjg4v446om","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","source":"photos/ins.css","raw":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","date":"2020-01-15T10:21:07.559Z","updated":"2020-01-05T19:13:25.290Z","path":"photos/ins.css","layout":"false","title":"","comments":1,"_id":"ck7an508w004a4cvj3orfhpet","content":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","site":{"data":{}},"excerpt":"","more":"#post-instagram{\n\tpadding: 30px;\n}\n#post-instagram .article-entry{\n\tpadding-right: 0;\n}\n.instagram{\n\tposition: relative;\n\tmin-height: 500px;\n}\n.instagram img {\n\twidth: 100%;\n}\n.instagram .year {\n\tfont-size: 16px;\n}\n.instagram .open-ins{\n\tpadding: 10px 0;\n\tcolor: #cdcdcd;\n}\n.instagram .open-ins:hover{\n\tcolor: #657b83;\n}\n.instagram .year{\n\tdisplay: inline;\n}\n.instagram .thumb {\n\twidth: 25%;\n\theight: 0;\n\tpadding-bottom: 25%;\n\tposition: relative;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tbackground: #ededed;\n}\n.instagram .thumb a {\n\tposition: relative;\n}\n.instagram .album h1 em{\n\tfont-style: normal;\n\tfont-size: 14px;\n\tmargin-left: 10px;\n}\n.instagram .album ul{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tclear: both;\n\twidth: 100%;\n\ttext-align: left;\n}\n.instagram .album li{\n\tlist-style: none;\n\tdisplay: inline-block;\n\tbox-sizing: border-box;\n\tpadding: 0 5px;\n\tmargin-bottom: -10px;\n\theight: 0;\n\twidth: 25%;\n\tposition: relative;\n\tpadding-bottom: 25%;\n}\n.instagram .album li:before{\n\tdisplay: none;\n}\n.instagram .album div.img-box{\n\tposition: absolute;\n\twidth: 90%;\n\theight: 90%;\n\t-webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\t-moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n\tbox-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);\n}\n.instagram .album div.img-box img{\n\twidth: 100%;\n\theight: 100%;\n    position: absolute;\n    z-index: 2;\n}\n.instagram .album div.img-box .img-bg{\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0px;\n\twidth: 100%;\n\tmargin: -5px;\n\tpadding: 5px;\n\t-webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\tbox-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1);\n\t-webkit-transition: all 0.15s ease-out 0.1s;\n\t-moz-transition: all 0.15s ease-out 0.1s;\n\t-o-transition: all 0.15s ease-out 0.1s;\n\ttransition: all 0.15s ease-out 0.1s;\n\topacity: 0.2;\n\tcursor: pointer;\n\tdisplay: block;\n\tz-index: 3;\n}\n.instagram .album div.img-box .icon {\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -7px;\n    margin-top: -7px;\n    color: #999;\n    z-index: 1;\n}\n.instagram .album div.img-box .img-bg:hover{\n\topacity: 0;\n}\n.photos-btn-wrap {\n\tborder-bottom: 1px solid #e5e5e5;\n\tmargin-bottom: 20px;\n}\n.photos-btn {\n\tfont-size: 16px;\n\tcolor: #333;\n\tmargin-bottom: -4px;\n\tpadding: 5px 8px 3px;\n}\n.photos-btn.active {\n\tcolor: #08c;\n\tborder: 1px solid #e5e5e5;\n\tborder-bottom: 5px solid #fff;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}"},{"layout":"post","slug":"photos","title":"相册","noDate":"true","comments":0,"_content":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n  <a class=\"photos-btn active\" href=\"javascript:void(0)\">Photos</a>\n\t<a class=\"photos-btn\" href=\"#\">待续</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"#\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","source":"photos/index.ejs","raw":"---\nlayout: post\nslug: \"photos\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: \"false\"\n---\n<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n  <a class=\"photos-btn active\" href=\"javascript:void(0)\">Photos</a>\n\t<a class=\"photos-btn\" href=\"#\">待续</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"#\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","date":"2020-01-15T10:21:07.556Z","updated":"2020-01-05T19:13:25.286Z","path":"photos/index.html","_id":"ck7an508y004c4cvjui9a2gqu","content":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n  <a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">Photos</a>\n\t<a class=\"photos-btn\" href=\"#\">待续</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"#\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","site":{"data":{}},"excerpt":"","more":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<div class=\"photos-btn-wrap\">\n  <a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">Photos</a>\n\t<a class=\"photos-btn\" href=\"#\">待续</a>\n\t<!-- <a class=\"photos-btn\" target=\"_blank\" href=\"http://litten.me/gallery/\">摄影</a> -->\n</div>\n<div class=\"instagram itemscope\">\n\t<a href=\"#\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a>\n</div>\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n"},{"title":"slides","date":"2020-01-11T17:34:04.000Z","_content":"\n<style>\ntable th:first-of-type {\n    width: 1cm;\n}\ntable th:nth-of-type(2) {\n    width: 5cm;\n}\n</style>\n\n\n|NO.|Links|\n|:-:|:-:|\n|1|[test1](https://binjun.xyz/slides/index/test.html)|\n|2|[CoreXY 3D Printer](https://binjun.xyz/slides/index/coreXY.html)|\n","source":"slides/index.md","raw":"---\ntitle: slides\ndate: 2020-01-12 01:34:04\n---\n\n<style>\ntable th:first-of-type {\n    width: 1cm;\n}\ntable th:nth-of-type(2) {\n    width: 5cm;\n}\n</style>\n\n\n|NO.|Links|\n|:-:|:-:|\n|1|[test1](https://binjun.xyz/slides/index/test.html)|\n|2|[CoreXY 3D Printer](https://binjun.xyz/slides/index/coreXY.html)|\n","updated":"2020-01-15T09:50:08.420Z","path":"slides/index.html","comments":1,"layout":"page","_id":"ck7an5091004e4cvj4hswbxgv","content":"<style>\ntable th:first-of-type {\n    width: 1cm;\n}\ntable th:nth-of-type(2) {\n    width: 5cm;\n}\n</style>\n\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">NO.</th>\n<th style=\"text-align:center\">Links</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"https://binjun.xyz/slides/index/test.html\">test1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"https://binjun.xyz/slides/index/coreXY.html\">CoreXY 3D Printer</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<style>\ntable th:first-of-type {\n    width: 1cm;\n}\ntable th:nth-of-type(2) {\n    width: 5cm;\n}\n</style>\n\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">NO.</th>\n<th style=\"text-align:center\">Links</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"https://binjun.xyz/slides/index/test.html\">test1</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"https://binjun.xyz/slides/index/coreXY.html\">CoreXY 3D Printer</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"_content":"{\"list\": [{\"date\": \"2020-01\", \"arr\": {\"year\": 2020, \"month\": 1, \"link\": [\"2020-01-10_\\u6ed1\\u96ea.jpg\"], \"text\": [\"\\u6ed1\\u96ea\"], \"type\": [\"image\"]}}, {\"date\": \"2019-09\", \"arr\": {\"year\": 2019, \"month\": 9, \"link\": [\"2019-09-23_\\u7075\\u7738.jpg\", \"2019-09-30_\\u5927L.jpg\"], \"text\": [\"\\u7075\\u7738\", \"\\u5927L\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2019-07\", \"arr\": {\"year\": 2019, \"month\": 7, \"link\": [\"2019-07-15_\\u4e0e\\u5f081.jpg\", \"2019-07-15_\\u4e0e\\u5f082.jpg\"], \"text\": [\"\\u4e0e\\u5f081\", \"\\u4e0e\\u5f082\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2018-12\", \"arr\": {\"year\": 2018, \"month\": 12, \"link\": [\"2018-12-01_\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2018-10\", \"arr\": {\"year\": 2018, \"month\": 10, \"link\": [\"2018-10-01_\\u5149\\u7acb\\u65b9.jpg\", \"2018-10-01_\\u5899\\u7ed8.jpg\", \"2018-10-19_\\u56db\\u5ddd1.jpg\"], \"text\": [\"\\u5149\\u7acb\\u65b9\", \"\\u5899\\u7ed8\", \"\\u56db\\u5ddd1\"], \"type\": [\"image\", \"image\", \"image\"]}}, {\"date\": \"2018-04\", \"arr\": {\"year\": 2018, \"month\": 4, \"link\": [\"2018-04-23_\\u89e3\\u9b54\\u65b9\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u89e3\\u9b54\\u65b9\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2018-03\", \"arr\": {\"year\": 2018, \"month\": 3, \"link\": [\"2018-03-31_\\u53f0\\u706f.jpg\"], \"text\": [\"\\u53f0\\u706f\"], \"type\": [\"image\"]}}, {\"date\": \"2017-09\", \"arr\": {\"year\": 2017, \"month\": 9, \"link\": [\"2017-09-30_3D\\u5de5\\u574a.jpg\"], \"text\": [\"3D\\u5de5\\u574a\"], \"type\": [\"image\"]}}, {\"date\": \"2017-07\", \"arr\": {\"year\": 2017, \"month\": 7, \"link\": [\"2017-07-09_\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2017-05\", \"arr\": {\"year\": 2017, \"month\": 5, \"link\": [\"2017-05-19_3D.jpg\"], \"text\": [\"3D\"], \"type\": [\"image\"]}}, {\"date\": \"2017-03\", \"arr\": {\"year\": 2017, \"month\": 3, \"link\": [\"2017-03-23_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5317\\u7406.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u534e\\u5357\\u7406\\u5de5.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u91cd\\u5927.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u534e\\u5357\\u7406\\u5de5.jpg\"], \"text\": [\"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5317\\u7406\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u534e\\u5357\\u7406\\u5de5\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u91cd\\u5927\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u534e\\u5357\\u7406\\u5de5\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2017-01\", \"arr\": {\"year\": 2017, \"month\": 1, \"link\": [\"2017-01-13_\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba.jpg\", \"2017-01-17_\\u7eb8\\u4e0a\\u6253\\u5370\\u673a.jpg\"], \"text\": [\"\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba\", \"\\u7eb8\\u4e0a\\u6253\\u5370\\u673a\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2016-10\", \"arr\": {\"year\": 2016, \"month\": 10, \"link\": [\"2016-10-07_\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2016-08\", \"arr\": {\"year\": 2016, \"month\": 8, \"link\": [\"2016-08-20_3D.jpg\", \"2016-08-20_3Drose.jpg\", \"2016-08-20_3D\\u5de5\\u574a1\\u7535\\u5409\\u4ed6.jpg\", \"2016-08-20_3D\\u5de5\\u574a2\\u7535\\u5409\\u4ed6.jpg\", \"2016-08-20_\\u5e7f\\u544a\\u670d.jpg\", \"2016-08-21_3Dchess.jpg\", \"2016-08-22_\\u673a\\u68b0\\u624b.jpg\"], \"text\": [\"3D\", \"3Drose\", \"3D\\u5de5\\u574a1\\u7535\\u5409\\u4ed6\", \"3D\\u5de5\\u574a2\\u7535\\u5409\\u4ed6\", \"\\u5e7f\\u544a\\u670d\", \"3Dchess\", \"\\u673a\\u68b0\\u624b\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2016-07\", \"arr\": {\"year\": 2016, \"month\": 7, \"link\": [\"2016-07-05_\\u5c0f\\u8d31\\u949f.jpg\"], \"text\": [\"\\u5c0f\\u8d31\\u949f\"], \"type\": [\"image\"]}}, {\"date\": \"2016-06\", \"arr\": {\"year\": 2016, \"month\": 6, \"link\": [\"2016-06-01_3D\\u5de5\\u574a0\\u5e76\\u8054\\u81c21.jpg\", \"2016-06-01_3D\\u5de5\\u574a0\\u6728\\u6846.jpg\", \"2016-06-01_3D\\u5de5\\u574a0\\u9f99\\u95e8.jpg\", \"2016-06-01_3D\\u5de5\\u574a3\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a4\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a5\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a5\\u6df7\\u8272.jpg\", \"2016-06-01_3D\\u5de5\\u574a6\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a7xyz.jpg\", \"2016-06-01_3D\\u5de5\\u574a7\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a8\\u53cc\\u5c42\\u5e76\\u8054\\u81c2.jpg\"], \"text\": [\"3D\\u5de5\\u574a0\\u5e76\\u8054\\u81c21\", \"3D\\u5de5\\u574a0\\u6728\\u6846\", \"3D\\u5de5\\u574a0\\u9f99\\u95e8\", \"3D\\u5de5\\u574a3\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a4\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a5\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a5\\u6df7\\u8272\", \"3D\\u5de5\\u574a6\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a7xyz\", \"3D\\u5de5\\u574a7\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a8\\u53cc\\u5c42\\u5e76\\u8054\\u81c2\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2016-05\", \"arr\": {\"year\": 2016, \"month\": 5, \"link\": [\"2016-05-01_3D\\u5de5\\u574a0DLP1.jpg\", \"2016-05-01_3D\\u5de5\\u574a0DLP2.jpg\", \"2016-05-24_3DDLP.jpg\"], \"text\": [\"3D\\u5de5\\u574a0DLP1\", \"3D\\u5de5\\u574a0DLP2\", \"3DDLP\"], \"type\": [\"image\", \"image\", \"image\"]}}, {\"date\": \"2016-04\", \"arr\": {\"year\": 2016, \"month\": 4, \"link\": [\"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c11.jpg\", \"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c12.jpg\", \"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c13.jpg\", \"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c19.jpg\"], \"text\": [\"3D\\u5de5\\u574a9\\u5c55\\u54c11\", \"3D\\u5de5\\u574a9\\u5c55\\u54c12\", \"3D\\u5de5\\u574a9\\u5c55\\u54c13\", \"3D\\u5de5\\u574a9\\u5c55\\u54c19\"], \"type\": [\"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2015-9-\", \"arr\": {\"year\": 2015, \"month\": 9, \"link\": [\"2015-9-20_\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2015-12\", \"arr\": {\"year\": 2015, \"month\": 12, \"link\": [\"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u540c\\u6d4e.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u5317\\u7406\\u5de5.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b3.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b4\\u91cd\\u5927.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b5\\u897f\\u4ea4.JPG\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b6\\u540c\\u6d4e.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b7\\u5927\\u5de5.JPG\"], \"text\": [\"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u540c\\u6d4e\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u5317\\u7406\\u5de5\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b3\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b4\\u91cd\\u5927\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b5\\u897f\\u4ea4\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b6\\u540c\\u6d4e\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b7\\u5927\\u5de5\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2015-10\", \"arr\": {\"year\": 2015, \"month\": 10, \"link\": [\"2015-10-02_\\u786c\\u5e01\\u5206\\u62e3\\u673a.jpg\", \"2015-10-04_\\u6f02\\u79fb\\u677f.jpg\"], \"text\": [\"\\u786c\\u5e01\\u5206\\u62e3\\u673a\", \"\\u6f02\\u79fb\\u677f\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2015-04\", \"arr\": {\"year\": 2015, \"month\": 4, \"link\": [\"2015-04-30_\\u5f00\\u5173.jpg\"], \"text\": [\"\\u5f00\\u5173\"], \"type\": [\"image\"]}}, {\"date\": \"2015-01\", \"arr\": {\"year\": 2015, \"month\": 1, \"link\": [\"2015-01-21_3D\\u6253\\u5370\\u5e76\\u8054\\u81c2.jpg\"], \"text\": [\"3D\\u6253\\u5370\\u5e76\\u8054\\u81c2\"], \"type\": [\"image\"]}}, {\"date\": \"2014-11\", \"arr\": {\"year\": 2014, \"month\": 11, \"link\": [\"2014-11-03_3D\\u6253\\u53701.JPG\", \"2014-11-03_3D\\u6253\\u53702.JPG\", \"2014-11-30_\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1.jpg\", \"2014-11-30_\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5.jpg\", \"2014-11-30_\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2.jpg\"], \"text\": [\"3D\\u6253\\u53701\", \"3D\\u6253\\u53702\", \"\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\", \"\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5\", \"\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2014-10\", \"arr\": {\"year\": 2014, \"month\": 10, \"link\": [\"2014-10-01_\\u5149\\u96d52.jpg\", \"2014-10-31_\\u5149\\u96d53.jpg\"], \"text\": [\"\\u5149\\u96d52\", \"\\u5149\\u96d53\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2014-07\", \"arr\": {\"year\": 2014, \"month\": 7, \"link\": [\"2014-07-04_\\u5149\\u96d51.jpg\"], \"text\": [\"\\u5149\\u96d51\"], \"type\": [\"image\"]}}, {\"date\": \"2014-04\", \"arr\": {\"year\": 2014, \"month\": 4, \"link\": [\"2014-04-20_C51.jpg\"], \"text\": [\"C51\"], \"type\": [\"image\"]}}]}","source":"photos/ins.json","raw":"{\"list\": [{\"date\": \"2020-01\", \"arr\": {\"year\": 2020, \"month\": 1, \"link\": [\"2020-01-10_\\u6ed1\\u96ea.jpg\"], \"text\": [\"\\u6ed1\\u96ea\"], \"type\": [\"image\"]}}, {\"date\": \"2019-09\", \"arr\": {\"year\": 2019, \"month\": 9, \"link\": [\"2019-09-23_\\u7075\\u7738.jpg\", \"2019-09-30_\\u5927L.jpg\"], \"text\": [\"\\u7075\\u7738\", \"\\u5927L\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2019-07\", \"arr\": {\"year\": 2019, \"month\": 7, \"link\": [\"2019-07-15_\\u4e0e\\u5f081.jpg\", \"2019-07-15_\\u4e0e\\u5f082.jpg\"], \"text\": [\"\\u4e0e\\u5f081\", \"\\u4e0e\\u5f082\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2018-12\", \"arr\": {\"year\": 2018, \"month\": 12, \"link\": [\"2018-12-01_\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2018-10\", \"arr\": {\"year\": 2018, \"month\": 10, \"link\": [\"2018-10-01_\\u5149\\u7acb\\u65b9.jpg\", \"2018-10-01_\\u5899\\u7ed8.jpg\", \"2018-10-19_\\u56db\\u5ddd1.jpg\"], \"text\": [\"\\u5149\\u7acb\\u65b9\", \"\\u5899\\u7ed8\", \"\\u56db\\u5ddd1\"], \"type\": [\"image\", \"image\", \"image\"]}}, {\"date\": \"2018-04\", \"arr\": {\"year\": 2018, \"month\": 4, \"link\": [\"2018-04-23_\\u89e3\\u9b54\\u65b9\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u89e3\\u9b54\\u65b9\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2018-03\", \"arr\": {\"year\": 2018, \"month\": 3, \"link\": [\"2018-03-31_\\u53f0\\u706f.jpg\"], \"text\": [\"\\u53f0\\u706f\"], \"type\": [\"image\"]}}, {\"date\": \"2017-09\", \"arr\": {\"year\": 2017, \"month\": 9, \"link\": [\"2017-09-30_3D\\u5de5\\u574a.jpg\"], \"text\": [\"3D\\u5de5\\u574a\"], \"type\": [\"image\"]}}, {\"date\": \"2017-07\", \"arr\": {\"year\": 2017, \"month\": 7, \"link\": [\"2017-07-09_\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2017-05\", \"arr\": {\"year\": 2017, \"month\": 5, \"link\": [\"2017-05-19_3D.jpg\"], \"text\": [\"3D\"], \"type\": [\"image\"]}}, {\"date\": \"2017-03\", \"arr\": {\"year\": 2017, \"month\": 3, \"link\": [\"2017-03-23_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5317\\u7406.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u534e\\u5357\\u7406\\u5de5.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u91cd\\u5927.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2.jpg\", \"2017-03-26_\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u534e\\u5357\\u7406\\u5de5.jpg\"], \"text\": [\"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5317\\u7406\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u534e\\u5357\\u7406\\u5de5\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u91cd\\u5927\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\", \"\\u7b2c\\u4e09\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u534e\\u5357\\u7406\\u5de5\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2017-01\", \"arr\": {\"year\": 2017, \"month\": 1, \"link\": [\"2017-01-13_\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba.jpg\", \"2017-01-17_\\u7eb8\\u4e0a\\u6253\\u5370\\u673a.jpg\"], \"text\": [\"\\u73bb\\u7483\\u5e55\\u5899\\u6e05\\u6d17\\u673a\\u5668\\u4eba\", \"\\u7eb8\\u4e0a\\u6253\\u5370\\u673a\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2016-10\", \"arr\": {\"year\": 2016, \"month\": 10, \"link\": [\"2016-10-07_\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2016-08\", \"arr\": {\"year\": 2016, \"month\": 8, \"link\": [\"2016-08-20_3D.jpg\", \"2016-08-20_3Drose.jpg\", \"2016-08-20_3D\\u5de5\\u574a1\\u7535\\u5409\\u4ed6.jpg\", \"2016-08-20_3D\\u5de5\\u574a2\\u7535\\u5409\\u4ed6.jpg\", \"2016-08-20_\\u5e7f\\u544a\\u670d.jpg\", \"2016-08-21_3Dchess.jpg\", \"2016-08-22_\\u673a\\u68b0\\u624b.jpg\"], \"text\": [\"3D\", \"3Drose\", \"3D\\u5de5\\u574a1\\u7535\\u5409\\u4ed6\", \"3D\\u5de5\\u574a2\\u7535\\u5409\\u4ed6\", \"\\u5e7f\\u544a\\u670d\", \"3Dchess\", \"\\u673a\\u68b0\\u624b\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2016-07\", \"arr\": {\"year\": 2016, \"month\": 7, \"link\": [\"2016-07-05_\\u5c0f\\u8d31\\u949f.jpg\"], \"text\": [\"\\u5c0f\\u8d31\\u949f\"], \"type\": [\"image\"]}}, {\"date\": \"2016-06\", \"arr\": {\"year\": 2016, \"month\": 6, \"link\": [\"2016-06-01_3D\\u5de5\\u574a0\\u5e76\\u8054\\u81c21.jpg\", \"2016-06-01_3D\\u5de5\\u574a0\\u6728\\u6846.jpg\", \"2016-06-01_3D\\u5de5\\u574a0\\u9f99\\u95e8.jpg\", \"2016-06-01_3D\\u5de5\\u574a3\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a4\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a5\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a5\\u6df7\\u8272.jpg\", \"2016-06-01_3D\\u5de5\\u574a6\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a7xyz.jpg\", \"2016-06-01_3D\\u5de5\\u574a7\\u5e76\\u8054\\u81c2.jpg\", \"2016-06-01_3D\\u5de5\\u574a8\\u53cc\\u5c42\\u5e76\\u8054\\u81c2.jpg\"], \"text\": [\"3D\\u5de5\\u574a0\\u5e76\\u8054\\u81c21\", \"3D\\u5de5\\u574a0\\u6728\\u6846\", \"3D\\u5de5\\u574a0\\u9f99\\u95e8\", \"3D\\u5de5\\u574a3\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a4\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a5\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a5\\u6df7\\u8272\", \"3D\\u5de5\\u574a6\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a7xyz\", \"3D\\u5de5\\u574a7\\u5e76\\u8054\\u81c2\", \"3D\\u5de5\\u574a8\\u53cc\\u5c42\\u5e76\\u8054\\u81c2\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2016-05\", \"arr\": {\"year\": 2016, \"month\": 5, \"link\": [\"2016-05-01_3D\\u5de5\\u574a0DLP1.jpg\", \"2016-05-01_3D\\u5de5\\u574a0DLP2.jpg\", \"2016-05-24_3DDLP.jpg\"], \"text\": [\"3D\\u5de5\\u574a0DLP1\", \"3D\\u5de5\\u574a0DLP2\", \"3DDLP\"], \"type\": [\"image\", \"image\", \"image\"]}}, {\"date\": \"2016-04\", \"arr\": {\"year\": 2016, \"month\": 4, \"link\": [\"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c11.jpg\", \"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c12.jpg\", \"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c13.jpg\", \"2016-04-04_3D\\u5de5\\u574a9\\u5c55\\u54c19.jpg\"], \"text\": [\"3D\\u5de5\\u574a9\\u5c55\\u54c11\", \"3D\\u5de5\\u574a9\\u5c55\\u54c12\", \"3D\\u5de5\\u574a9\\u5c55\\u54c13\", \"3D\\u5de5\\u574a9\\u5c55\\u54c19\"], \"type\": [\"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2015-9-\", \"arr\": {\"year\": 2015, \"month\": 9, \"link\": [\"2015-9-20_\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba.jpg\"], \"text\": [\"\\u5c0f\\u6d3e\\u673a\\u5668\\u4eba\"], \"type\": [\"image\"]}}, {\"date\": \"2015-12\", \"arr\": {\"year\": 2015, \"month\": 12, \"link\": [\"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u540c\\u6d4e.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u5317\\u7406\\u5de5.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b3.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b4\\u91cd\\u5927.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b5\\u897f\\u4ea4.JPG\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b6\\u540c\\u6d4e.jpg\", \"2015-12-24_\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b7\\u5927\\u5de5.JPG\"], \"text\": [\"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u540c\\u6d4e\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\\u5317\\u7406\\u5de5\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b3\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b4\\u91cd\\u5927\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b5\\u897f\\u4ea4\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b6\\u540c\\u6d4e\", \"\\u7b2c\\u4e8c\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b7\\u5927\\u5de5\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2015-10\", \"arr\": {\"year\": 2015, \"month\": 10, \"link\": [\"2015-10-02_\\u786c\\u5e01\\u5206\\u62e3\\u673a.jpg\", \"2015-10-04_\\u6f02\\u79fb\\u677f.jpg\"], \"text\": [\"\\u786c\\u5e01\\u5206\\u62e3\\u673a\", \"\\u6f02\\u79fb\\u677f\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2015-04\", \"arr\": {\"year\": 2015, \"month\": 4, \"link\": [\"2015-04-30_\\u5f00\\u5173.jpg\"], \"text\": [\"\\u5f00\\u5173\"], \"type\": [\"image\"]}}, {\"date\": \"2015-01\", \"arr\": {\"year\": 2015, \"month\": 1, \"link\": [\"2015-01-21_3D\\u6253\\u5370\\u5e76\\u8054\\u81c2.jpg\"], \"text\": [\"3D\\u6253\\u5370\\u5e76\\u8054\\u81c2\"], \"type\": [\"image\"]}}, {\"date\": \"2014-11\", \"arr\": {\"year\": 2014, \"month\": 11, \"link\": [\"2014-11-03_3D\\u6253\\u53701.JPG\", \"2014-11-03_3D\\u6253\\u53702.JPG\", \"2014-11-30_\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1.jpg\", \"2014-11-30_\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5.jpg\", \"2014-11-30_\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2.jpg\"], \"text\": [\"3D\\u6253\\u53701\", \"3D\\u6253\\u53702\", \"\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\", \"\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b1\\u5927\\u5de5\", \"\\u9996\\u5c4a3D\\u6253\\u5370\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b2\"], \"type\": [\"image\", \"image\", \"image\", \"image\", \"image\"]}}, {\"date\": \"2014-10\", \"arr\": {\"year\": 2014, \"month\": 10, \"link\": [\"2014-10-01_\\u5149\\u96d52.jpg\", \"2014-10-31_\\u5149\\u96d53.jpg\"], \"text\": [\"\\u5149\\u96d52\", \"\\u5149\\u96d53\"], \"type\": [\"image\", \"image\"]}}, {\"date\": \"2014-07\", \"arr\": {\"year\": 2014, \"month\": 7, \"link\": [\"2014-07-04_\\u5149\\u96d51.jpg\"], \"text\": [\"\\u5149\\u96d51\"], \"type\": [\"image\"]}}, {\"date\": \"2014-04\", \"arr\": {\"year\": 2014, \"month\": 4, \"link\": [\"2014-04-20_C51.jpg\"], \"text\": [\"C51\"], \"type\": [\"image\"]}}]}","date":"2020-01-15T10:21:07.567Z","updated":"2020-01-11T11:55:35.568Z","path":"photos/ins.json","layout":"false","title":"","comments":1,"_id":"ck7an50bj006h4cvjh0aoltdi","content":"{\"list\":[{\"date\":\"2020-01\",\"arr\":{\"year\":2020,\"month\":1,\"link\":[\"2020-01-10_滑雪.jpg\"],\"text\":[\"滑雪\"],\"type\":[\"image\"]}},{\"date\":\"2019-09\",\"arr\":{\"year\":2019,\"month\":9,\"link\":[\"2019-09-23_灵眸.jpg\",\"2019-09-30_大L.jpg\"],\"text\":[\"灵眸\",\"大L\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2019-07\",\"arr\":{\"year\":2019,\"month\":7,\"link\":[\"2019-07-15_与弈1.jpg\",\"2019-07-15_与弈2.jpg\"],\"text\":[\"与弈1\",\"与弈2\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2018-12\",\"arr\":{\"year\":2018,\"month\":12,\"link\":[\"2018-12-01_小派机器人.jpg\"],\"text\":[\"小派机器人\"],\"type\":[\"image\"]}},{\"date\":\"2018-10\",\"arr\":{\"year\":2018,\"month\":10,\"link\":[\"2018-10-01_光立方.jpg\",\"2018-10-01_墙绘.jpg\",\"2018-10-19_四川1.jpg\"],\"text\":[\"光立方\",\"墙绘\",\"四川1\"],\"type\":[\"image\",\"image\",\"image\"]}},{\"date\":\"2018-04\",\"arr\":{\"year\":2018,\"month\":4,\"link\":[\"2018-04-23_解魔方机器人.jpg\"],\"text\":[\"解魔方机器人\"],\"type\":[\"image\"]}},{\"date\":\"2018-03\",\"arr\":{\"year\":2018,\"month\":3,\"link\":[\"2018-03-31_台灯.jpg\"],\"text\":[\"台灯\"],\"type\":[\"image\"]}},{\"date\":\"2017-09\",\"arr\":{\"year\":2017,\"month\":9,\"link\":[\"2017-09-30_3D工坊.jpg\"],\"text\":[\"3D工坊\"],\"type\":[\"image\"]}},{\"date\":\"2017-07\",\"arr\":{\"year\":2017,\"month\":7,\"link\":[\"2017-07-09_玻璃幕墙清洗机器人.jpg\"],\"text\":[\"玻璃幕墙清洗机器人\"],\"type\":[\"image\"]}},{\"date\":\"2017-05\",\"arr\":{\"year\":2017,\"month\":5,\"link\":[\"2017-05-19_3D.jpg\"],\"text\":[\"3D\"],\"type\":[\"image\"]}},{\"date\":\"2017-03\",\"arr\":{\"year\":2017,\"month\":3,\"link\":[\"2017-03-23_第三届3D打印设计邀请赛1大工.jpg\",\"2017-03-26_第三届3D打印设计邀请赛1北理.jpg\",\"2017-03-26_第三届3D打印设计邀请赛1华南理工.jpg\",\"2017-03-26_第三届3D打印设计邀请赛1重大.jpg\",\"2017-03-26_第三届3D打印设计邀请赛2.jpg\",\"2017-03-26_第三届3D打印设计邀请赛2华南理工.jpg\"],\"text\":[\"第三届3D打印设计邀请赛1大工\",\"第三届3D打印设计邀请赛1北理\",\"第三届3D打印设计邀请赛1华南理工\",\"第三届3D打印设计邀请赛1重大\",\"第三届3D打印设计邀请赛2\",\"第三届3D打印设计邀请赛2华南理工\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2017-01\",\"arr\":{\"year\":2017,\"month\":1,\"link\":[\"2017-01-13_玻璃幕墙清洗机器人.jpg\",\"2017-01-17_纸上打印机.jpg\"],\"text\":[\"玻璃幕墙清洗机器人\",\"纸上打印机\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2016-10\",\"arr\":{\"year\":2016,\"month\":10,\"link\":[\"2016-10-07_小派机器人.jpg\"],\"text\":[\"小派机器人\"],\"type\":[\"image\"]}},{\"date\":\"2016-08\",\"arr\":{\"year\":2016,\"month\":8,\"link\":[\"2016-08-20_3D.jpg\",\"2016-08-20_3Drose.jpg\",\"2016-08-20_3D工坊1电吉他.jpg\",\"2016-08-20_3D工坊2电吉他.jpg\",\"2016-08-20_广告服.jpg\",\"2016-08-21_3Dchess.jpg\",\"2016-08-22_机械手.jpg\"],\"text\":[\"3D\",\"3Drose\",\"3D工坊1电吉他\",\"3D工坊2电吉他\",\"广告服\",\"3Dchess\",\"机械手\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2016-07\",\"arr\":{\"year\":2016,\"month\":7,\"link\":[\"2016-07-05_小贱钟.jpg\"],\"text\":[\"小贱钟\"],\"type\":[\"image\"]}},{\"date\":\"2016-06\",\"arr\":{\"year\":2016,\"month\":6,\"link\":[\"2016-06-01_3D工坊0并联臂1.jpg\",\"2016-06-01_3D工坊0木框.jpg\",\"2016-06-01_3D工坊0龙门.jpg\",\"2016-06-01_3D工坊3并联臂.jpg\",\"2016-06-01_3D工坊4并联臂.jpg\",\"2016-06-01_3D工坊5并联臂.jpg\",\"2016-06-01_3D工坊5混色.jpg\",\"2016-06-01_3D工坊6并联臂.jpg\",\"2016-06-01_3D工坊7xyz.jpg\",\"2016-06-01_3D工坊7并联臂.jpg\",\"2016-06-01_3D工坊8双层并联臂.jpg\"],\"text\":[\"3D工坊0并联臂1\",\"3D工坊0木框\",\"3D工坊0龙门\",\"3D工坊3并联臂\",\"3D工坊4并联臂\",\"3D工坊5并联臂\",\"3D工坊5混色\",\"3D工坊6并联臂\",\"3D工坊7xyz\",\"3D工坊7并联臂\",\"3D工坊8双层并联臂\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2016-05\",\"arr\":{\"year\":2016,\"month\":5,\"link\":[\"2016-05-01_3D工坊0DLP1.jpg\",\"2016-05-01_3D工坊0DLP2.jpg\",\"2016-05-24_3DDLP.jpg\"],\"text\":[\"3D工坊0DLP1\",\"3D工坊0DLP2\",\"3DDLP\"],\"type\":[\"image\",\"image\",\"image\"]}},{\"date\":\"2016-04\",\"arr\":{\"year\":2016,\"month\":4,\"link\":[\"2016-04-04_3D工坊9展品1.jpg\",\"2016-04-04_3D工坊9展品2.jpg\",\"2016-04-04_3D工坊9展品3.jpg\",\"2016-04-04_3D工坊9展品9.jpg\"],\"text\":[\"3D工坊9展品1\",\"3D工坊9展品2\",\"3D工坊9展品3\",\"3D工坊9展品9\"],\"type\":[\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2015-9-\",\"arr\":{\"year\":2015,\"month\":9,\"link\":[\"2015-9-20_小派机器人.jpg\"],\"text\":[\"小派机器人\"],\"type\":[\"image\"]}},{\"date\":\"2015-12\",\"arr\":{\"year\":2015,\"month\":12,\"link\":[\"2015-12-24_第二届3D打印设计邀请赛1同济.jpg\",\"2015-12-24_第二届3D打印设计邀请赛2北理工.jpg\",\"2015-12-24_第二届3D打印设计邀请赛3.jpg\",\"2015-12-24_第二届3D打印设计邀请赛4重大.jpg\",\"2015-12-24_第二届3D打印设计邀请赛5西交.JPG\",\"2015-12-24_第二届3D打印设计邀请赛6同济.jpg\",\"2015-12-24_第二届3D打印设计邀请赛7大工.JPG\"],\"text\":[\"第二届3D打印设计邀请赛1同济\",\"第二届3D打印设计邀请赛2北理工\",\"第二届3D打印设计邀请赛3\",\"第二届3D打印设计邀请赛4重大\",\"第二届3D打印设计邀请赛5西交\",\"第二届3D打印设计邀请赛6同济\",\"第二届3D打印设计邀请赛7大工\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2015-10\",\"arr\":{\"year\":2015,\"month\":10,\"link\":[\"2015-10-02_硬币分拣机.jpg\",\"2015-10-04_漂移板.jpg\"],\"text\":[\"硬币分拣机\",\"漂移板\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2015-04\",\"arr\":{\"year\":2015,\"month\":4,\"link\":[\"2015-04-30_开关.jpg\"],\"text\":[\"开关\"],\"type\":[\"image\"]}},{\"date\":\"2015-01\",\"arr\":{\"year\":2015,\"month\":1,\"link\":[\"2015-01-21_3D打印并联臂.jpg\"],\"text\":[\"3D打印并联臂\"],\"type\":[\"image\"]}},{\"date\":\"2014-11\",\"arr\":{\"year\":2014,\"month\":11,\"link\":[\"2014-11-03_3D打印1.JPG\",\"2014-11-03_3D打印2.JPG\",\"2014-11-30_首届3D打印设计邀请赛1.jpg\",\"2014-11-30_首届3D打印设计邀请赛1大工.jpg\",\"2014-11-30_首届3D打印设计邀请赛2.jpg\"],\"text\":[\"3D打印1\",\"3D打印2\",\"首届3D打印设计邀请赛1\",\"首届3D打印设计邀请赛1大工\",\"首届3D打印设计邀请赛2\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2014-10\",\"arr\":{\"year\":2014,\"month\":10,\"link\":[\"2014-10-01_光雕2.jpg\",\"2014-10-31_光雕3.jpg\"],\"text\":[\"光雕2\",\"光雕3\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2014-07\",\"arr\":{\"year\":2014,\"month\":7,\"link\":[\"2014-07-04_光雕1.jpg\"],\"text\":[\"光雕1\"],\"type\":[\"image\"]}},{\"date\":\"2014-04\",\"arr\":{\"year\":2014,\"month\":4,\"link\":[\"2014-04-20_C51.jpg\"],\"text\":[\"C51\"],\"type\":[\"image\"]}}]}","site":{"data":{}},"excerpt":"","more":"{\"list\":[{\"date\":\"2020-01\",\"arr\":{\"year\":2020,\"month\":1,\"link\":[\"2020-01-10_滑雪.jpg\"],\"text\":[\"滑雪\"],\"type\":[\"image\"]}},{\"date\":\"2019-09\",\"arr\":{\"year\":2019,\"month\":9,\"link\":[\"2019-09-23_灵眸.jpg\",\"2019-09-30_大L.jpg\"],\"text\":[\"灵眸\",\"大L\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2019-07\",\"arr\":{\"year\":2019,\"month\":7,\"link\":[\"2019-07-15_与弈1.jpg\",\"2019-07-15_与弈2.jpg\"],\"text\":[\"与弈1\",\"与弈2\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2018-12\",\"arr\":{\"year\":2018,\"month\":12,\"link\":[\"2018-12-01_小派机器人.jpg\"],\"text\":[\"小派机器人\"],\"type\":[\"image\"]}},{\"date\":\"2018-10\",\"arr\":{\"year\":2018,\"month\":10,\"link\":[\"2018-10-01_光立方.jpg\",\"2018-10-01_墙绘.jpg\",\"2018-10-19_四川1.jpg\"],\"text\":[\"光立方\",\"墙绘\",\"四川1\"],\"type\":[\"image\",\"image\",\"image\"]}},{\"date\":\"2018-04\",\"arr\":{\"year\":2018,\"month\":4,\"link\":[\"2018-04-23_解魔方机器人.jpg\"],\"text\":[\"解魔方机器人\"],\"type\":[\"image\"]}},{\"date\":\"2018-03\",\"arr\":{\"year\":2018,\"month\":3,\"link\":[\"2018-03-31_台灯.jpg\"],\"text\":[\"台灯\"],\"type\":[\"image\"]}},{\"date\":\"2017-09\",\"arr\":{\"year\":2017,\"month\":9,\"link\":[\"2017-09-30_3D工坊.jpg\"],\"text\":[\"3D工坊\"],\"type\":[\"image\"]}},{\"date\":\"2017-07\",\"arr\":{\"year\":2017,\"month\":7,\"link\":[\"2017-07-09_玻璃幕墙清洗机器人.jpg\"],\"text\":[\"玻璃幕墙清洗机器人\"],\"type\":[\"image\"]}},{\"date\":\"2017-05\",\"arr\":{\"year\":2017,\"month\":5,\"link\":[\"2017-05-19_3D.jpg\"],\"text\":[\"3D\"],\"type\":[\"image\"]}},{\"date\":\"2017-03\",\"arr\":{\"year\":2017,\"month\":3,\"link\":[\"2017-03-23_第三届3D打印设计邀请赛1大工.jpg\",\"2017-03-26_第三届3D打印设计邀请赛1北理.jpg\",\"2017-03-26_第三届3D打印设计邀请赛1华南理工.jpg\",\"2017-03-26_第三届3D打印设计邀请赛1重大.jpg\",\"2017-03-26_第三届3D打印设计邀请赛2.jpg\",\"2017-03-26_第三届3D打印设计邀请赛2华南理工.jpg\"],\"text\":[\"第三届3D打印设计邀请赛1大工\",\"第三届3D打印设计邀请赛1北理\",\"第三届3D打印设计邀请赛1华南理工\",\"第三届3D打印设计邀请赛1重大\",\"第三届3D打印设计邀请赛2\",\"第三届3D打印设计邀请赛2华南理工\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2017-01\",\"arr\":{\"year\":2017,\"month\":1,\"link\":[\"2017-01-13_玻璃幕墙清洗机器人.jpg\",\"2017-01-17_纸上打印机.jpg\"],\"text\":[\"玻璃幕墙清洗机器人\",\"纸上打印机\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2016-10\",\"arr\":{\"year\":2016,\"month\":10,\"link\":[\"2016-10-07_小派机器人.jpg\"],\"text\":[\"小派机器人\"],\"type\":[\"image\"]}},{\"date\":\"2016-08\",\"arr\":{\"year\":2016,\"month\":8,\"link\":[\"2016-08-20_3D.jpg\",\"2016-08-20_3Drose.jpg\",\"2016-08-20_3D工坊1电吉他.jpg\",\"2016-08-20_3D工坊2电吉他.jpg\",\"2016-08-20_广告服.jpg\",\"2016-08-21_3Dchess.jpg\",\"2016-08-22_机械手.jpg\"],\"text\":[\"3D\",\"3Drose\",\"3D工坊1电吉他\",\"3D工坊2电吉他\",\"广告服\",\"3Dchess\",\"机械手\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2016-07\",\"arr\":{\"year\":2016,\"month\":7,\"link\":[\"2016-07-05_小贱钟.jpg\"],\"text\":[\"小贱钟\"],\"type\":[\"image\"]}},{\"date\":\"2016-06\",\"arr\":{\"year\":2016,\"month\":6,\"link\":[\"2016-06-01_3D工坊0并联臂1.jpg\",\"2016-06-01_3D工坊0木框.jpg\",\"2016-06-01_3D工坊0龙门.jpg\",\"2016-06-01_3D工坊3并联臂.jpg\",\"2016-06-01_3D工坊4并联臂.jpg\",\"2016-06-01_3D工坊5并联臂.jpg\",\"2016-06-01_3D工坊5混色.jpg\",\"2016-06-01_3D工坊6并联臂.jpg\",\"2016-06-01_3D工坊7xyz.jpg\",\"2016-06-01_3D工坊7并联臂.jpg\",\"2016-06-01_3D工坊8双层并联臂.jpg\"],\"text\":[\"3D工坊0并联臂1\",\"3D工坊0木框\",\"3D工坊0龙门\",\"3D工坊3并联臂\",\"3D工坊4并联臂\",\"3D工坊5并联臂\",\"3D工坊5混色\",\"3D工坊6并联臂\",\"3D工坊7xyz\",\"3D工坊7并联臂\",\"3D工坊8双层并联臂\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2016-05\",\"arr\":{\"year\":2016,\"month\":5,\"link\":[\"2016-05-01_3D工坊0DLP1.jpg\",\"2016-05-01_3D工坊0DLP2.jpg\",\"2016-05-24_3DDLP.jpg\"],\"text\":[\"3D工坊0DLP1\",\"3D工坊0DLP2\",\"3DDLP\"],\"type\":[\"image\",\"image\",\"image\"]}},{\"date\":\"2016-04\",\"arr\":{\"year\":2016,\"month\":4,\"link\":[\"2016-04-04_3D工坊9展品1.jpg\",\"2016-04-04_3D工坊9展品2.jpg\",\"2016-04-04_3D工坊9展品3.jpg\",\"2016-04-04_3D工坊9展品9.jpg\"],\"text\":[\"3D工坊9展品1\",\"3D工坊9展品2\",\"3D工坊9展品3\",\"3D工坊9展品9\"],\"type\":[\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2015-9-\",\"arr\":{\"year\":2015,\"month\":9,\"link\":[\"2015-9-20_小派机器人.jpg\"],\"text\":[\"小派机器人\"],\"type\":[\"image\"]}},{\"date\":\"2015-12\",\"arr\":{\"year\":2015,\"month\":12,\"link\":[\"2015-12-24_第二届3D打印设计邀请赛1同济.jpg\",\"2015-12-24_第二届3D打印设计邀请赛2北理工.jpg\",\"2015-12-24_第二届3D打印设计邀请赛3.jpg\",\"2015-12-24_第二届3D打印设计邀请赛4重大.jpg\",\"2015-12-24_第二届3D打印设计邀请赛5西交.JPG\",\"2015-12-24_第二届3D打印设计邀请赛6同济.jpg\",\"2015-12-24_第二届3D打印设计邀请赛7大工.JPG\"],\"text\":[\"第二届3D打印设计邀请赛1同济\",\"第二届3D打印设计邀请赛2北理工\",\"第二届3D打印设计邀请赛3\",\"第二届3D打印设计邀请赛4重大\",\"第二届3D打印设计邀请赛5西交\",\"第二届3D打印设计邀请赛6同济\",\"第二届3D打印设计邀请赛7大工\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2015-10\",\"arr\":{\"year\":2015,\"month\":10,\"link\":[\"2015-10-02_硬币分拣机.jpg\",\"2015-10-04_漂移板.jpg\"],\"text\":[\"硬币分拣机\",\"漂移板\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2015-04\",\"arr\":{\"year\":2015,\"month\":4,\"link\":[\"2015-04-30_开关.jpg\"],\"text\":[\"开关\"],\"type\":[\"image\"]}},{\"date\":\"2015-01\",\"arr\":{\"year\":2015,\"month\":1,\"link\":[\"2015-01-21_3D打印并联臂.jpg\"],\"text\":[\"3D打印并联臂\"],\"type\":[\"image\"]}},{\"date\":\"2014-11\",\"arr\":{\"year\":2014,\"month\":11,\"link\":[\"2014-11-03_3D打印1.JPG\",\"2014-11-03_3D打印2.JPG\",\"2014-11-30_首届3D打印设计邀请赛1.jpg\",\"2014-11-30_首届3D打印设计邀请赛1大工.jpg\",\"2014-11-30_首届3D打印设计邀请赛2.jpg\"],\"text\":[\"3D打印1\",\"3D打印2\",\"首届3D打印设计邀请赛1\",\"首届3D打印设计邀请赛1大工\",\"首届3D打印设计邀请赛2\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2014-10\",\"arr\":{\"year\":2014,\"month\":10,\"link\":[\"2014-10-01_光雕2.jpg\",\"2014-10-31_光雕3.jpg\"],\"text\":[\"光雕2\",\"光雕3\"],\"type\":[\"image\",\"image\"]}},{\"date\":\"2014-07\",\"arr\":{\"year\":2014,\"month\":7,\"link\":[\"2014-07-04_光雕1.jpg\"],\"text\":[\"光雕1\"],\"type\":[\"image\"]}},{\"date\":\"2014-04\",\"arr\":{\"year\":2014,\"month\":4,\"link\":[\"2014-04-20_C51.jpg\"],\"text\":[\"C51\"],\"type\":[\"image\"]}}]}"},{"_content":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n\n          var minSrc = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/' + data.link[i];\n          var src = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/' + data.link[i];\n          var type = data.type[i];\n          // var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          var target = src;\n          // src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);","source":"photos/ins.js","raw":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n\n          var minSrc = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/' + data.link[i];\n          var src = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/' + data.link[i];\n          var type = data.type[i];\n          // var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          var target = src;\n          // src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);","date":"2020-01-15T10:21:07.563Z","updated":"2020-01-05T19:13:25.292Z","path":"photos/ins.js","layout":"false","title":"","comments":1,"_id":"ck7an50ee006t4cvjt6l6j0yh","content":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n\n          var minSrc = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/' + data.link[i];\n          var src = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/' + data.link[i];\n          var type = data.type[i];\n          // var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          var target = src;\n          // src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"/photos/empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);","site":{"data":{}},"excerpt":"","more":"/******/\n(function(modules) { // webpackBootstrap\n  /******/ // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n    /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n      /******/\n      id: moduleId,\n      /******/\n      loaded: false\n        /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/ // __webpack_public_path__\n  /******/\n  __webpack_require__.p = \"/dist/\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);\n  /******/\n})\n/************************************************************************/\n/******/\n([\n  /* 0 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    'use strict';\n\n    __webpack_require__(1);\n\n    var _view = __webpack_require__(2);\n\n    var _view2 = _interopRequireDefault(_view);\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    /**\n     * @name impush-client \n     * @description 这个项目让我发家致富…\n     * @date 2016-12-1\n     */\n\n    var _collection = [];\n    var _count = 0;\n    var searchData;\n\n    function addMask(elem) {\n      var rect = elem.getBoundingClientRect();\n      var style = getComputedStyle(elem, null);\n\n      var mask = document.createElement('i');\n      mask.className = 'icon-film';\n      mask.style.color = '#fff';\n      mask.style.fontSize = '26px';\n      mask.style.position = 'absolute';\n      mask.style.right = '10px';\n      mask.style.bottom = '10px';\n      mask.style.zIndex = 1;\n      elem.parentNode.appendChild(mask);\n    }\n\n    var createVideoIncon = function createVideoIncon() {\n      var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]');\n      for (var i = 0, len = $videoImg.length; i < len; i++) {\n        addMask($videoImg[i]);\n      }\n    };\n    var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n\n          var minSrc = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/' + data.link[i];\n          var src = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/' + data.link[i];\n          var type = data.type[i];\n          // var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          var target = src;\n          // src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"/photos/empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n\n    var replacer = function replacer(str) {\n      var arr = str.split(\"/\");\n      return \"/assets/ins/\" + arr[arr.length - 1];\n    };\n\n    var ctrler = function ctrler(data) {\n      var imgObj = {};\n      for (var i = 0, len = data.length; i < len; i++) {\n        var y = data[i].y;\n        var m = data[i].m;\n        var src = replacer(data[i].src);\n        var text = data[i].text;\n        var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m);\n        if (imgObj[key]) {\n          imgObj[key].srclist.push(src);\n          imgObj[key].text.push(text);\n        } else {\n          imgObj[key] = {\n            year: y,\n            month: m,\n            srclist: [src],\n            text: [text]\n          };\n        }\n      }\n      render(imgObj);\n    };\n\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n\n    Ins.init();\n\n    // export default impush;\n\n    /***/\n  },\n  /* 1 */\n  /***/\n  function(module, exports, __webpack_require__) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      'use strict';\n\n      var inViewport = __webpack_require__(3);\n      var lazyAttrs = ['data-src'];\n\n      global.lzld = lazyload();\n\n      // Provide libs using getAttribute early to get the good src\n      // and not the fake data-src\n      replaceGetAttribute('Image');\n      replaceGetAttribute('IFrame');\n\n      function registerLazyAttr(attr) {\n        if (indexOf.call(lazyAttrs, attr) === -1) {\n          lazyAttrs.push(attr);\n        }\n      }\n\n      function lazyload(opts) {\n        opts = merge({\n          'offset': 333,\n          'src': 'data-src',\n          'container': false\n        }, opts || {});\n\n        if (typeof opts.src === 'string') {\n          registerLazyAttr(opts.src);\n        }\n\n        var elts = [];\n\n        function show(elt) {\n          var src = findRealSrc(elt);\n\n          if (src) {\n            elt.src = src;\n          }\n\n          elt.setAttribute('data-lzled', true);\n          elts[indexOf.call(elts, elt)] = null;\n        }\n\n        function findRealSrc(elt) {\n          if (typeof opts.src === 'function') {\n            return opts.src(elt);\n          }\n\n          return elt.getAttribute(opts.src);\n        }\n\n        function register(elt) {\n          elt.onload = null;\n          elt.removeAttribute('onload');\n          elt.onerror = null;\n          elt.removeAttribute('onerror');\n\n          if (indexOf.call(elts, elt) === -1) {\n            inViewport(elt, opts, show);\n          }\n        }\n\n        return register;\n      }\n\n      function replaceGetAttribute(elementName) {\n        var fullname = 'HTML' + elementName + 'Element';\n        if (fullname in global === false) {\n          return;\n        }\n\n        var original = global[fullname].prototype.getAttribute;\n        global[fullname].prototype.getAttribute = function(name) {\n          if (name === 'src') {\n            var realSrc;\n            for (var i = 0, max = lazyAttrs.length; i < max; i++) {\n              realSrc = original.call(this, lazyAttrs[i]);\n              if (realSrc) {\n                break;\n              }\n            }\n\n            return realSrc || original.call(this, name);\n          }\n\n          // our own lazyloader will go through theses lines\n          // because we use getAttribute(opts.src)\n          return original.call(this, name);\n        };\n      }\n\n      function merge(defaults, opts) {\n        for (var name in defaults) {\n          if (opts[name] === undefined) {\n            opts[name] = defaults[name];\n          }\n        }\n\n        return opts;\n      }\n\n      // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html\n      function indexOf(value) {\n        for (var i = this.length; i-- && this[i] !== value;) {}\n        return i;\n      }\n\n      module.exports = lazyload;\n\n      // export default impush;\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  },\n  /* 2 */\n  /***/\n  function(module, exports) {\n\n    'use strict';\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\n      // parse slide data (url, title, size ...) from DOM elements \n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        el = el.parentNode.parentNode;\n        var thumbElements = el.getElementsByClassName('thumb'),\n          numNodes = thumbElements.length,\n          items = [],\n          figureEl,\n          linkEl,\n          size,\n          type,\n          // video or not\n          target,\n          item;\n\n        for (var i = 0; i < numNodes; i++) {\n\n          figureEl = thumbElements[i]; // \n\n          // include only element nodes \n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // \n\n          size = linkEl.getAttribute('data-size').split('x');\n          type = linkEl.getAttribute('data-type');\n          target = linkEl.getAttribute('data-target');\n          // create slide object\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n\n          if (figureEl.children.length > 1) {\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            item.msrc = linkEl.children[0].getAttribute('src');\n            item.type = type;\n            item.target = target;\n            item.html = '<video src=\"' + target + '\" controls=\"controls\" autoplay=\"autoplay\"></video>';\n            if (type === 'video') {\n              //item.src = null;\n            }\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n          items.push(item);\n        }\n\n        return items;\n      };\n\n      // find nearest parent element\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      };\n\n      // triggers when user clicks on thumbnail\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n        var eTarget = e.target || e.srcElement;\n\n        // find root element of slide\n        var clickedListItem = closest(eTarget, function(el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        }\n\n        // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n        var clickedGallery = clickedListItem.parentNode,\n\n          // childNodes = clickedListItem.parentNode.childNodes,\n          // numChildNodes = childNodes.length,\n          childNodes = document.getElementsByClassName('thumb'),\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n        return false;\n      };\n\n      // parse picture index and gallery index from URL (#&pid=1&gid=2)\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n          params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n          var pair = vars[i].split('=');\n          if (pair.length < 2) {\n            continue;\n          }\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n\n        items = parseThumbnailElements(galleryElement);\n        // define options (if needed)\n        options = {\n\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n              // find thumbnail\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n\n        };\n\n        // PhotoSwipe opened from URL\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used \n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        }\n\n        // exit if index not found\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        }\n\n        // Pass data to PhotoSwipe and initialize it\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n        gallery.init();\n\n        var $tempVideo;\n        var stopVideoHandle = function stopVideoHandle() {\n          if ($tempVideo) {\n            $tempVideo.remove();\n            $tempVideo = null;\n          }\n        };\n        var changeHandle = function changeHandle() {\n          var item = gallery.currItem;\n          stopVideoHandle();\n          if (item.type === 'video') {\n            var $ctn = item.container;\n            var style = $ctn.getElementsByClassName('pswp__img')[0].style;\n            var $video = document.createElement('video');\n            $video.setAttribute('autoplay', 'autoplay');\n            $video.setAttribute('controls', 'controls');\n            $video.setAttribute('src', item.target);\n            $video.style.width = style.width;\n            $video.style.height = style.height;\n            $video.style.position = 'absolute';\n            $video.style.zIndex = 2;\n            $tempVideo = $video;\n            $ctn.appendChild($video);\n          }\n        };\n        gallery.listen('initialZoomIn', changeHandle);\n        gallery.listen('afterChange', changeHandle);\n        gallery.listen('initialZoomOut', stopVideoHandle);\n      };\n\n      // loop through all gallery elements and bind events\n      var galleryElements = document.querySelectorAll(gallerySelector);\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      }\n\n      // Parse URL and open gallery if it contains #&pid=3&gid=1\n      var hashData = photoswipeParseHash();\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    var Viewer = function() {\n      function init() {\n        initPhotoSwipeFromDOM('.photos');\n      }\n      return {\n        init: init\n      };\n    }();\n\n    module.exports = Viewer;\n\n    /***/\n  },\n  /* 3 */\n  /***/\n  function(module, exports) {\n\n    /* WEBPACK VAR INJECTION */\n    (function(global) {\n      module.exports = inViewport;\n\n      var instances = [];\n      var supportsMutationObserver = typeof global.MutationObserver === 'function';\n\n      function inViewport(elt, params, cb) {\n        var opts = {\n          container: global.document.body,\n          offset: 0\n        };\n\n        if (params === undefined || typeof params === 'function') {\n          cb = params;\n          params = {};\n        }\n\n        var container = opts.container = params.container || opts.container;\n        var offset = opts.offset = params.offset || opts.offset;\n\n        for (var i = 0; i < instances.length; i++) {\n          if (instances[i].container === container) {\n            return instances[i].isInViewport(elt, offset, cb);\n          }\n        }\n\n        return instances[\n          instances.push(createInViewport(container)) - 1\n        ].isInViewport(elt, offset, cb);\n      }\n\n      function addEvent(el, type, fn) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + type, fn);\n        } else {\n          el.addEventListener(type, fn, false);\n        }\n      }\n\n      function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n          var context = this,\n            args = arguments;\n          var callNow = immediate && !timeout;\n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n          if (callNow) func.apply(context, args);\n\n          function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n          }\n        };\n      }\n\n      // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708\n      var contains = function() {\n        if (!global.document) {\n          return true;\n        }\n        return global.document.documentElement.compareDocumentPosition ?\n          function(a, b) {\n            return !!(a.compareDocumentPosition(b) & 16);\n          } :\n          global.document.documentElement.contains ?\n          function(a, b) {\n            return a !== b && (a.contains ? a.contains(b) : false);\n          } :\n          function(a, b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n            return false;\n          };\n      }\n\n      function createInViewport(container) {\n        var watches = createWatches();\n\n        var scrollContainer = container === global.document.body ? global : container;\n        var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15);\n\n        addEvent(scrollContainer, 'scroll', debouncedCheck);\n\n        if (scrollContainer === global) {\n          addEvent(global, 'resize', debouncedCheck);\n        }\n\n        if (supportsMutationObserver) {\n          observeDOM(watches, container, debouncedCheck);\n        }\n\n        // failsafe check, every 200ms we check for visible images\n        // usecase: a hidden parent containing eleements\n        // when the parent becomes visible, we have no event that the children\n        // became visible\n        setInterval(debouncedCheck, 150);\n\n        function isInViewport(elt, offset, cb) {\n          if (!cb) {\n            return isVisible(elt, offset);\n          }\n\n          var remote = createRemote(elt, offset, cb);\n          remote.watch();\n          return remote;\n        }\n\n        function createRemote(elt, offset, cb) {\n          function watch() {\n            watches.add(elt, offset, cb);\n          }\n\n          function dispose() {\n            watches.remove(elt);\n          }\n\n          return {\n            watch: watch,\n            dispose: dispose\n          };\n        }\n\n        function watchInViewport(elt, offset, cb) {\n          if (isVisible(elt, offset)) {\n            watches.remove(elt);\n            cb(elt);\n          }\n        }\n\n        function isVisible(elt, offset) {\n          if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) {\n            return false;\n          }\n\n          // Check if the element is visible\n          // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js\n          if (!elt.offsetWidth || !elt.offsetHeight) {\n            return false;\n          }\n\n          var eltRect = elt.getBoundingClientRect();\n          var viewport = {};\n\n          if (container === global.document.body) {\n            viewport = {\n              top: -offset,\n              left: -offset,\n              right: global.document.documentElement.clientWidth + offset,\n              bottom: global.document.documentElement.clientHeight + offset\n            };\n          } else {\n            var containerRect = container.getBoundingClientRect();\n            viewport = {\n              top: containerRect.top - offset,\n              left: containerRect.left - offset,\n              right: containerRect.right + offset,\n              bottom: containerRect.bottom + offset\n            };\n          }\n\n          // The element must overlap with the visible part of the viewport\n          var visible =\n            (\n              (eltRect.right > viewport.left) &&\n              (eltRect.left < viewport.right) &&\n              (eltRect.bottom > viewport.top) &&\n              (eltRect.top < viewport.bottom)\n            );\n\n          return visible;\n        }\n\n        return {\n          container: container,\n          isInViewport: isInViewport\n        };\n      }\n\n      function createWatches() {\n        var watches = [];\n\n        function add(elt, offset, cb) {\n          if (!isWatched(elt)) {\n            watches.push([elt, offset, cb]);\n          }\n        }\n\n        function remove(elt) {\n          var pos = indexOf(elt);\n          if (pos !== -1) {\n            watches.splice(pos, 1);\n          }\n        }\n\n        function indexOf(elt) {\n          for (var i = watches.length - 1; i >= 0; i--) {\n            if (watches[i][0] === elt) {\n              return i;\n            }\n          }\n          return -1;\n        }\n\n        function isWatched(elt) {\n          return indexOf(elt) !== -1;\n        }\n\n        function checkAll(cb) {\n          return function() {\n            for (var i = watches.length - 1; i >= 0; i--) {\n              cb.apply(this, watches[i]);\n            }\n          };\n        }\n\n        return {\n          add: add,\n          remove: remove,\n          isWatched: isWatched,\n          checkAll: checkAll\n        };\n      }\n\n      function observeDOM(watches, container, cb) {\n        var observer = new MutationObserver(watch);\n        var filter = Array.prototype.filter;\n        var concat = Array.prototype.concat;\n\n        observer.observe(container, {\n          childList: true,\n          subtree: true,\n          // changes like style/width/height/display will be catched\n          attributes: true\n        });\n\n        function watch(mutations) {\n          // some new DOM nodes where previously watched\n          // we should check their positions\n          if (mutations.some(knownNodes) === true) {\n            setTimeout(cb, 0);\n          }\n        }\n\n        function knownNodes(mutation) {\n          var nodes = concat.call([],\n            Array.prototype.slice.call(mutation.addedNodes),\n            mutation.target\n          );\n          return filter.call(nodes, watches.isWatched).length > 0;\n        }\n      }\n\n      /* WEBPACK VAR INJECTION */\n    }.call(exports, (function() {\n      return this;\n    }())))\n\n    /***/\n  }\n  /******/\n]);"}],"Post":[{"title":"AI通关超级马里奥","date":"2019-05-22T07:06:26.000Z","_content":"\n在windows下编译运行lua源程序 - weixin_38527697的博客 - CSDN博客 https://blog.csdn.net/weixin_38527697/article/details/80718168\n\n基于NEAT算法的马里奥AI实现 - 小天狼星的博客 - CSDN博客 https://blog.csdn.net/qq_37913997/article/details/81871589\n\naleju/mario-ai: Playing Mario with Deep Reinforcement Learning https://github.com/aleju/mario-ai\n\nBitTigerLab/ArtificialIntelligent/RetroContest at master · Fabsqrt/BitTigerLab https://github.com/Fabsqrt/BitTigerLab/tree/master/ArtificialIntelligent/RetroContest\n\nopenai/retro: Retro Games in Gym https://github.com/openai/retro#gym-retro\n\nBitTigerLab/README.md at master · Fabsqrt/BitTigerLab https://github.com/Fabsqrt/BitTigerLab/blob/master/ArtificialIntelligent/Mario/README.md\n\nNeuroEvolution of Augmenting Topologies http://www.cs.ucf.edu/~kstanley/neat.html\n\nCodeReclaimers/neat-python: Python implementation of the NEAT neuroevolution algorithm https://github.com/CodeReclaimers/neat-python\n\nNEAT 监督学习 - 进化算法 Evolutionary Algorithm | 莫烦Python https://morvanzhou.github.io/tutorials/machine-learning/evolutionary-algorithm/4-02-neat-supervised-learning/\n\n沁原的硅谷创新课 002 如何训练人工智能游戏高手？OpenAI、Gym Retro、DQN、PPO、TensorFlow - YouTube https://www.youtube.com/watch?v=cZa_xot8Wdc&list=PL34eqMVgn4cjnvak8FtJysKd6Ke_T5Lsl&index=2\n\n","source":"_posts/AI通关超级马里奥.md","raw":"---\ntitle: AI通关超级马里奥\ndate: 2019-05-22 15:06:26\ntags:\n  - lua\n  - neat\n  - Mario\n---\n\n在windows下编译运行lua源程序 - weixin_38527697的博客 - CSDN博客 https://blog.csdn.net/weixin_38527697/article/details/80718168\n\n基于NEAT算法的马里奥AI实现 - 小天狼星的博客 - CSDN博客 https://blog.csdn.net/qq_37913997/article/details/81871589\n\naleju/mario-ai: Playing Mario with Deep Reinforcement Learning https://github.com/aleju/mario-ai\n\nBitTigerLab/ArtificialIntelligent/RetroContest at master · Fabsqrt/BitTigerLab https://github.com/Fabsqrt/BitTigerLab/tree/master/ArtificialIntelligent/RetroContest\n\nopenai/retro: Retro Games in Gym https://github.com/openai/retro#gym-retro\n\nBitTigerLab/README.md at master · Fabsqrt/BitTigerLab https://github.com/Fabsqrt/BitTigerLab/blob/master/ArtificialIntelligent/Mario/README.md\n\nNeuroEvolution of Augmenting Topologies http://www.cs.ucf.edu/~kstanley/neat.html\n\nCodeReclaimers/neat-python: Python implementation of the NEAT neuroevolution algorithm https://github.com/CodeReclaimers/neat-python\n\nNEAT 监督学习 - 进化算法 Evolutionary Algorithm | 莫烦Python https://morvanzhou.github.io/tutorials/machine-learning/evolutionary-algorithm/4-02-neat-supervised-learning/\n\n沁原的硅谷创新课 002 如何训练人工智能游戏高手？OpenAI、Gym Retro、DQN、PPO、TensorFlow - YouTube https://www.youtube.com/watch?v=cZa_xot8Wdc&list=PL34eqMVgn4cjnvak8FtJysKd6Ke_T5Lsl&index=2\n\n","slug":"AI通关超级马里奥","published":1,"updated":"2020-01-05T19:13:24.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506d00014cvjtv441jm6","content":"<p>在windows下编译运行lua源程序 - weixin_38527697的博客 - CSDN博客 <a href=\"https://blog.csdn.net/weixin_38527697/article/details/80718168\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_38527697/article/details/80718168</a></p>\n<p>基于NEAT算法的马里奥AI实现 - 小天狼星的博客 - CSDN博客 <a href=\"https://blog.csdn.net/qq_37913997/article/details/81871589\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_37913997/article/details/81871589</a></p>\n<p>aleju/mario-ai: Playing Mario with Deep Reinforcement Learning <a href=\"https://github.com/aleju/mario-ai\" target=\"_blank\" rel=\"noopener\">https://github.com/aleju/mario-ai</a></p>\n<p>BitTigerLab/ArtificialIntelligent/RetroContest at master · Fabsqrt/BitTigerLab <a href=\"https://github.com/Fabsqrt/BitTigerLab/tree/master/ArtificialIntelligent/RetroContest\" target=\"_blank\" rel=\"noopener\">https://github.com/Fabsqrt/BitTigerLab/tree/master/ArtificialIntelligent/RetroContest</a></p>\n<p>openai/retro: Retro Games in Gym <a href=\"https://github.com/openai/retro#gym-retro\" target=\"_blank\" rel=\"noopener\">https://github.com/openai/retro#gym-retro</a></p>\n<p>BitTigerLab/README.md at master · Fabsqrt/BitTigerLab <a href=\"https://github.com/Fabsqrt/BitTigerLab/blob/master/ArtificialIntelligent/Mario/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/Fabsqrt/BitTigerLab/blob/master/ArtificialIntelligent/Mario/README.md</a></p>\n<p>NeuroEvolution of Augmenting Topologies <a href=\"http://www.cs.ucf.edu/~kstanley/neat.html\" target=\"_blank\" rel=\"noopener\">http://www.cs.ucf.edu/~kstanley/neat.html</a></p>\n<p>CodeReclaimers/neat-python: Python implementation of the NEAT neuroevolution algorithm <a href=\"https://github.com/CodeReclaimers/neat-python\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeReclaimers/neat-python</a></p>\n<p>NEAT 监督学习 - 进化算法 Evolutionary Algorithm | 莫烦Python <a href=\"https://morvanzhou.github.io/tutorials/machine-learning/evolutionary-algorithm/4-02-neat-supervised-learning/\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/tutorials/machine-learning/evolutionary-algorithm/4-02-neat-supervised-learning/</a></p>\n<p>沁原的硅谷创新课 002 如何训练人工智能游戏高手？OpenAI、Gym Retro、DQN、PPO、TensorFlow - YouTube <a href=\"https://www.youtube.com/watch?v=cZa_xot8Wdc&amp;list=PL34eqMVgn4cjnvak8FtJysKd6Ke_T5Lsl&amp;index=2\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=cZa_xot8Wdc&amp;list=PL34eqMVgn4cjnvak8FtJysKd6Ke_T5Lsl&amp;index=2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在windows下编译运行lua源程序 - weixin_38527697的博客 - CSDN博客 <a href=\"https://blog.csdn.net/weixin_38527697/article/details/80718168\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_38527697/article/details/80718168</a></p>\n<p>基于NEAT算法的马里奥AI实现 - 小天狼星的博客 - CSDN博客 <a href=\"https://blog.csdn.net/qq_37913997/article/details/81871589\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_37913997/article/details/81871589</a></p>\n<p>aleju/mario-ai: Playing Mario with Deep Reinforcement Learning <a href=\"https://github.com/aleju/mario-ai\" target=\"_blank\" rel=\"noopener\">https://github.com/aleju/mario-ai</a></p>\n<p>BitTigerLab/ArtificialIntelligent/RetroContest at master · Fabsqrt/BitTigerLab <a href=\"https://github.com/Fabsqrt/BitTigerLab/tree/master/ArtificialIntelligent/RetroContest\" target=\"_blank\" rel=\"noopener\">https://github.com/Fabsqrt/BitTigerLab/tree/master/ArtificialIntelligent/RetroContest</a></p>\n<p>openai/retro: Retro Games in Gym <a href=\"https://github.com/openai/retro#gym-retro\" target=\"_blank\" rel=\"noopener\">https://github.com/openai/retro#gym-retro</a></p>\n<p>BitTigerLab/README.md at master · Fabsqrt/BitTigerLab <a href=\"https://github.com/Fabsqrt/BitTigerLab/blob/master/ArtificialIntelligent/Mario/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/Fabsqrt/BitTigerLab/blob/master/ArtificialIntelligent/Mario/README.md</a></p>\n<p>NeuroEvolution of Augmenting Topologies <a href=\"http://www.cs.ucf.edu/~kstanley/neat.html\" target=\"_blank\" rel=\"noopener\">http://www.cs.ucf.edu/~kstanley/neat.html</a></p>\n<p>CodeReclaimers/neat-python: Python implementation of the NEAT neuroevolution algorithm <a href=\"https://github.com/CodeReclaimers/neat-python\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeReclaimers/neat-python</a></p>\n<p>NEAT 监督学习 - 进化算法 Evolutionary Algorithm | 莫烦Python <a href=\"https://morvanzhou.github.io/tutorials/machine-learning/evolutionary-algorithm/4-02-neat-supervised-learning/\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/tutorials/machine-learning/evolutionary-algorithm/4-02-neat-supervised-learning/</a></p>\n<p>沁原的硅谷创新课 002 如何训练人工智能游戏高手？OpenAI、Gym Retro、DQN、PPO、TensorFlow - YouTube <a href=\"https://www.youtube.com/watch?v=cZa_xot8Wdc&amp;list=PL34eqMVgn4cjnvak8FtJysKd6Ke_T5Lsl&amp;index=2\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=cZa_xot8Wdc&amp;list=PL34eqMVgn4cjnvak8FtJysKd6Ke_T5Lsl&amp;index=2</a></p>\n"},{"title":"Arduino和一些好玩的","date":"2019-08-05T13:34:00.000Z","_content":"\n\n\n\n\n## 显示器同步全彩灯带背景氛围灯\n\n* Mirlight (Domowy Ambilight) | Mirley - Elektronika i Programowanie  \nhttp://mirley.firlej.org/mirlight\n\n\n* arduino控制WS2812灯条！ - Arduino - 极客工坊 - Powered by Discuz!  \nhttps://www.geek-workshop.com/thread-7262-1-1.html\n\n\n\n## other\n\n* 《写生机器人》制作经验分享（上） - 知乎  \nhttps://zhuanlan.zhihu.com/p/32084037\n\n\n\n","source":"_posts/Arduino和一些好玩的.md","raw":"---\ntitle: Arduino和一些好玩的\ndate: 2019-08-05 21:34:00\ntags:\n  - Arduino\n---\n\n\n\n\n\n## 显示器同步全彩灯带背景氛围灯\n\n* Mirlight (Domowy Ambilight) | Mirley - Elektronika i Programowanie  \nhttp://mirley.firlej.org/mirlight\n\n\n* arduino控制WS2812灯条！ - Arduino - 极客工坊 - Powered by Discuz!  \nhttps://www.geek-workshop.com/thread-7262-1-1.html\n\n\n\n## other\n\n* 《写生机器人》制作经验分享（上） - 知乎  \nhttps://zhuanlan.zhihu.com/p/32084037\n\n\n\n","slug":"Arduino和一些好玩的","published":1,"updated":"2020-01-05T19:13:24.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506g00024cvjs0qey3b5","content":"<h2 id=\"显示器同步全彩灯带背景氛围灯\"><a href=\"#显示器同步全彩灯带背景氛围灯\" class=\"headerlink\" title=\"显示器同步全彩灯带背景氛围灯\"></a>显示器同步全彩灯带背景氛围灯</h2><ul>\n<li>Mirlight (Domowy Ambilight) | Mirley - Elektronika i Programowanie<br><a href=\"http://mirley.firlej.org/mirlight\" target=\"_blank\" rel=\"noopener\">http://mirley.firlej.org/mirlight</a></li>\n</ul>\n<ul>\n<li>arduino控制WS2812灯条！ - Arduino - 极客工坊 - Powered by Discuz!<br><a href=\"https://www.geek-workshop.com/thread-7262-1-1.html\" target=\"_blank\" rel=\"noopener\">https://www.geek-workshop.com/thread-7262-1-1.html</a></li>\n</ul>\n<h2 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h2><ul>\n<li>《写生机器人》制作经验分享（上） - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/32084037\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/32084037</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"显示器同步全彩灯带背景氛围灯\"><a href=\"#显示器同步全彩灯带背景氛围灯\" class=\"headerlink\" title=\"显示器同步全彩灯带背景氛围灯\"></a>显示器同步全彩灯带背景氛围灯</h2><ul>\n<li>Mirlight (Domowy Ambilight) | Mirley - Elektronika i Programowanie<br><a href=\"http://mirley.firlej.org/mirlight\" target=\"_blank\" rel=\"noopener\">http://mirley.firlej.org/mirlight</a></li>\n</ul>\n<ul>\n<li>arduino控制WS2812灯条！ - Arduino - 极客工坊 - Powered by Discuz!<br><a href=\"https://www.geek-workshop.com/thread-7262-1-1.html\" target=\"_blank\" rel=\"noopener\">https://www.geek-workshop.com/thread-7262-1-1.html</a></li>\n</ul>\n<h2 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h2><ul>\n<li>《写生机器人》制作经验分享（上） - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/32084037\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/32084037</a></li>\n</ul>\n"},{"title":"Brainfuck与2020的新年仪式感","date":"2019-12-31T14:22:22.000Z","_content":"\n此处@yingping\n\n* Brainfuck与2019的新年仪式感 · Li Yingping's Studio  \nhttps://bye-lemon.github.io/2018/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2018%EF%BC%81/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 可视化工具和Hello World!\n\n* brainfuck-visualizer  \nhttp://fatiherikli.github.io/brainfuck-visualizer/\n\n\n## 辞旧迎新的仪式感\n\n``` brainfuck\n+++++ +++++\n[\n    > +++++ ++\n    > +++++ +++++\n    > +++++ +++++ +\n    > +++\n    > ++++\n    <<<<< -\n]\n> ++ .                          print\"H\"\n> --- .                         print\"a\"\n> ++.                           print\"p\"\n.                               print\"p\"\n+++++ ++++ .                    print\"y\"\n> ++ .                          print\" \"\n<<< +++++ + .                   print\"N\"\n> ++++ .                        print\"e\"\n> -- .                          print\"w\"\n> .                             print\" \"\n<<< +++++ +++++ + .             print\"Y\"\n> .                             print\"e\"\n---- .                          print\"a\"\n> ----- .                       print\"r\"\n>> ++++ .                      \n<<<< - .                       \n> +++++ +++ .                  \n>> .                           \n<<< .                          \n> .                            \n>> + .                         \n```\n\n## ASCII码表\n\n|ASCII值 | 控制字符 | ASCII值 | 控制字符 | ASCII值 | 控制字符 | ASCII值 | 控制字符 |\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| 0 | NUL | 32 | (space) | 64 | @ | 96 | ` |\n| 1 | SOH | 33 | ！ | 65 | A | 97 | a |\n| 2 | STX | 34 | ” | 66 | B | 98 | b |\n| 3 | ETX | 35 | # | 67 | C | 99 | c |\n| 4 | EOT | 36 | $ | 68 | D | 100 | d | \n| 5 | ENQ | 37 | % | 69 | E | 101 | e | \n| 6 | ACK | 38 | & | 70 | F | 102 | f | \n| 7 | BEL | 39 | ' | 71 | G | 103 | g | \n| 8 | BS | 40 | ( | 72 | H | 104 | h | \n| 9 | HT | 41 | ) | 73 | I | 105 | i | \n| 10 | LF | 42 | * | 74 | J | 106 | j | \n| 11 | VT | 43 | + | 75 | K | 107 | k | \n| 12 | FF | 44 | , | 76 | L | 108 | l | \n| 13 | CR | 45 | - | 77 | M | 109 | m | \n| 14 | SO | 46 | . | 78 | N | 110 | n | \n| 15 | SI | 47 | / | 79 | O | 111 | o | \n| 16 | DLE | 48 | 0 | 80 | P | 112 | p | \n| 17 | DCI | 49 | 1 | 81 | Q | 113 | q | \n| 18 | DC2 | 50 | 2 | 82 | R | 114 | r | \n| 19 | DC3 | 51 | 3 | 83 | X | 115 | s | \n| 20 | DC4 | 52 | 4 | 84 | T | 116 | t | \n| 21 | NAK | 53 | 5 | 85 | U | 117 | u | \n| 22 | SYN | 54 | 6 | 86 | V | 118 | v | \n| 23 | TB | 55 | 7 | 87 | W | 119 | w | \n| 24 | CAN | 56 | 8 | 88 | X | 120 | x | \n| 25 | EM | 57 | 9 | 89 | Y | 121 | y | \n| 26 | SUB | 58 | : | 90 | Z | 122 | z | \n| 27 | ESC | 59 | ; | 91 | [ | 123 | { | \n| 28 | FS | 60 | <  | 92 | \\ | 124 | \\| | \n| 29 | GS | 61 | = | 93 | ] | 125 | } | \n| 30 | RS | 62 | >  | 94 | ^ | 126 | ~ | \n| 31 | US | 63 | ? | 95 | — | 127 | DEL |\n","source":"_posts/Brainfuck与2020的新年仪式感.md","raw":"---\ntitle: Brainfuck与2020的新年仪式感\ndate: 2019-12-31 22:22:22\ntags:\n  - brainfuck\n---\n\n此处@yingping\n\n* Brainfuck与2019的新年仪式感 · Li Yingping's Studio  \nhttps://bye-lemon.github.io/2018/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2018%EF%BC%81/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 可视化工具和Hello World!\n\n* brainfuck-visualizer  \nhttp://fatiherikli.github.io/brainfuck-visualizer/\n\n\n## 辞旧迎新的仪式感\n\n``` brainfuck\n+++++ +++++\n[\n    > +++++ ++\n    > +++++ +++++\n    > +++++ +++++ +\n    > +++\n    > ++++\n    <<<<< -\n]\n> ++ .                          print\"H\"\n> --- .                         print\"a\"\n> ++.                           print\"p\"\n.                               print\"p\"\n+++++ ++++ .                    print\"y\"\n> ++ .                          print\" \"\n<<< +++++ + .                   print\"N\"\n> ++++ .                        print\"e\"\n> -- .                          print\"w\"\n> .                             print\" \"\n<<< +++++ +++++ + .             print\"Y\"\n> .                             print\"e\"\n---- .                          print\"a\"\n> ----- .                       print\"r\"\n>> ++++ .                      \n<<<< - .                       \n> +++++ +++ .                  \n>> .                           \n<<< .                          \n> .                            \n>> + .                         \n```\n\n## ASCII码表\n\n|ASCII值 | 控制字符 | ASCII值 | 控制字符 | ASCII值 | 控制字符 | ASCII值 | 控制字符 |\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| 0 | NUL | 32 | (space) | 64 | @ | 96 | ` |\n| 1 | SOH | 33 | ！ | 65 | A | 97 | a |\n| 2 | STX | 34 | ” | 66 | B | 98 | b |\n| 3 | ETX | 35 | # | 67 | C | 99 | c |\n| 4 | EOT | 36 | $ | 68 | D | 100 | d | \n| 5 | ENQ | 37 | % | 69 | E | 101 | e | \n| 6 | ACK | 38 | & | 70 | F | 102 | f | \n| 7 | BEL | 39 | ' | 71 | G | 103 | g | \n| 8 | BS | 40 | ( | 72 | H | 104 | h | \n| 9 | HT | 41 | ) | 73 | I | 105 | i | \n| 10 | LF | 42 | * | 74 | J | 106 | j | \n| 11 | VT | 43 | + | 75 | K | 107 | k | \n| 12 | FF | 44 | , | 76 | L | 108 | l | \n| 13 | CR | 45 | - | 77 | M | 109 | m | \n| 14 | SO | 46 | . | 78 | N | 110 | n | \n| 15 | SI | 47 | / | 79 | O | 111 | o | \n| 16 | DLE | 48 | 0 | 80 | P | 112 | p | \n| 17 | DCI | 49 | 1 | 81 | Q | 113 | q | \n| 18 | DC2 | 50 | 2 | 82 | R | 114 | r | \n| 19 | DC3 | 51 | 3 | 83 | X | 115 | s | \n| 20 | DC4 | 52 | 4 | 84 | T | 116 | t | \n| 21 | NAK | 53 | 5 | 85 | U | 117 | u | \n| 22 | SYN | 54 | 6 | 86 | V | 118 | v | \n| 23 | TB | 55 | 7 | 87 | W | 119 | w | \n| 24 | CAN | 56 | 8 | 88 | X | 120 | x | \n| 25 | EM | 57 | 9 | 89 | Y | 121 | y | \n| 26 | SUB | 58 | : | 90 | Z | 122 | z | \n| 27 | ESC | 59 | ; | 91 | [ | 123 | { | \n| 28 | FS | 60 | <  | 92 | \\ | 124 | \\| | \n| 29 | GS | 61 | = | 93 | ] | 125 | } | \n| 30 | RS | 62 | >  | 94 | ^ | 126 | ~ | \n| 31 | US | 63 | ? | 95 | — | 127 | DEL |\n","slug":"Brainfuck与2020的新年仪式感","published":1,"updated":"2020-01-05T19:13:24.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506j00044cvjycwgxqd3","content":"<p>此处@yingping</p>\n<ul>\n<li>Brainfuck与2019的新年仪式感 · Li Yingping’s Studio<br><a href=\"https://bye-lemon.github.io/2018/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2018%EF%BC%81/\" target=\"_blank\" rel=\"noopener\">https://bye-lemon.github.io/2018/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2018%EF%BC%81/</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"可视化工具和Hello-World\"><a href=\"#可视化工具和Hello-World\" class=\"headerlink\" title=\"可视化工具和Hello World!\"></a>可视化工具和Hello World!</h2><ul>\n<li>brainfuck-visualizer<br><a href=\"http://fatiherikli.github.io/brainfuck-visualizer/\" target=\"_blank\" rel=\"noopener\">http://fatiherikli.github.io/brainfuck-visualizer/</a></li>\n</ul>\n<h2 id=\"辞旧迎新的仪式感\"><a href=\"#辞旧迎新的仪式感\" class=\"headerlink\" title=\"辞旧迎新的仪式感\"></a>辞旧迎新的仪式感</h2><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\"><span class=\"title\">[</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &lt;&lt;&lt;&lt;&lt; <span class=\"literal\">-</span></span><br><span class=\"line\"><span class=\"title\">]</span></span><br><span class=\"line\">&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"H\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                         <span class=\"comment\">print\"a\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"string\">.</span>                           <span class=\"comment\">print\"p\"</span></span><br><span class=\"line\"><span class=\"comment\"></span><span class=\"string\">.</span>                               <span class=\"comment\">print\"p\"</span></span><br><span class=\"line\"><span class=\"comment\"></span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                    <span class=\"comment\">print\"y\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"</span> <span class=\"comment\">\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&lt;&lt;&lt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span> <span class=\"string\">.</span>                   <span class=\"comment\">print\"N\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                        <span class=\"comment\">print\"e\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"w\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"string\">.</span>                             <span class=\"comment\">print\"</span> <span class=\"comment\">\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&lt;&lt;&lt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span> <span class=\"string\">.</span>             <span class=\"comment\">print\"Y\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"string\">.</span>                             <span class=\"comment\">print\"e\"</span></span><br><span class=\"line\"><span class=\"comment\"></span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"a\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                       <span class=\"comment\">print\"r\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt;&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                      </span><br><span class=\"line\">&lt;&lt;&lt;&lt; <span class=\"literal\">-</span> <span class=\"string\">.</span>                       </span><br><span class=\"line\">&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                  </span><br><span class=\"line\">&gt;&gt; <span class=\"string\">.</span>                           </span><br><span class=\"line\">&lt;&lt;&lt; <span class=\"string\">.</span>                          </span><br><span class=\"line\">&gt; <span class=\"string\">.</span>                            </span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">+</span> <span class=\"string\">.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ASCII码表\"><a href=\"#ASCII码表\" class=\"headerlink\" title=\"ASCII码表\"></a>ASCII码表</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">NUL</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">(space)</td>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">@</td>\n<td style=\"text-align:center\">96</td>\n<td style=\"text-align:center\">`</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">SOH</td>\n<td style=\"text-align:center\">33</td>\n<td style=\"text-align:center\">！</td>\n<td style=\"text-align:center\">65</td>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">97</td>\n<td style=\"text-align:center\">a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">STX</td>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">”</td>\n<td style=\"text-align:center\">66</td>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">98</td>\n<td style=\"text-align:center\">b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">ETX</td>\n<td style=\"text-align:center\">35</td>\n<td style=\"text-align:center\">#</td>\n<td style=\"text-align:center\">67</td>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">99</td>\n<td style=\"text-align:center\">c</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">36</td>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:center\">68</td>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">d</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">ENQ</td>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">69</td>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\">e</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">ACK</td>\n<td style=\"text-align:center\">38</td>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">70</td>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">102</td>\n<td style=\"text-align:center\">f</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">BEL</td>\n<td style=\"text-align:center\">39</td>\n<td style=\"text-align:center\">‘</td>\n<td style=\"text-align:center\">71</td>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">103</td>\n<td style=\"text-align:center\">g</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">BS</td>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:center\">(</td>\n<td style=\"text-align:center\">72</td>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">104</td>\n<td style=\"text-align:center\">h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">HT</td>\n<td style=\"text-align:center\">41</td>\n<td style=\"text-align:center\">)</td>\n<td style=\"text-align:center\">73</td>\n<td style=\"text-align:center\">I</td>\n<td style=\"text-align:center\">105</td>\n<td style=\"text-align:center\">i</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">LF</td>\n<td style=\"text-align:center\">42</td>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">74</td>\n<td style=\"text-align:center\">J</td>\n<td style=\"text-align:center\">106</td>\n<td style=\"text-align:center\">j</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">VT</td>\n<td style=\"text-align:center\">43</td>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">75</td>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">107</td>\n<td style=\"text-align:center\">k</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">FF</td>\n<td style=\"text-align:center\">44</td>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:center\">76</td>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">108</td>\n<td style=\"text-align:center\">l</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">CR</td>\n<td style=\"text-align:center\">45</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">77</td>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">109</td>\n<td style=\"text-align:center\">m</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">SO</td>\n<td style=\"text-align:center\">46</td>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:center\">78</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">110</td>\n<td style=\"text-align:center\">n</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">SI</td>\n<td style=\"text-align:center\">47</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">79</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">111</td>\n<td style=\"text-align:center\">o</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">DLE</td>\n<td style=\"text-align:center\">48</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">P</td>\n<td style=\"text-align:center\">112</td>\n<td style=\"text-align:center\">p</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\">DCI</td>\n<td style=\"text-align:center\">49</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">81</td>\n<td style=\"text-align:center\">Q</td>\n<td style=\"text-align:center\">113</td>\n<td style=\"text-align:center\">q</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">DC2</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">R</td>\n<td style=\"text-align:center\">114</td>\n<td style=\"text-align:center\">r</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\">DC3</td>\n<td style=\"text-align:center\">51</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">83</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">115</td>\n<td style=\"text-align:center\">s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td style=\"text-align:center\">DC4</td>\n<td style=\"text-align:center\">52</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">84</td>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">116</td>\n<td style=\"text-align:center\">t</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">NAK</td>\n<td style=\"text-align:center\">53</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">85</td>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:center\">117</td>\n<td style=\"text-align:center\">u</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:center\">SYN</td>\n<td style=\"text-align:center\">54</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">86</td>\n<td style=\"text-align:center\">V</td>\n<td style=\"text-align:center\">118</td>\n<td style=\"text-align:center\">v</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">TB</td>\n<td style=\"text-align:center\">55</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">87</td>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">119</td>\n<td style=\"text-align:center\">w</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:center\">CAN</td>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">88</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">120</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\">EM</td>\n<td style=\"text-align:center\">57</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">89</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">121</td>\n<td style=\"text-align:center\">y</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:center\">SUB</td>\n<td style=\"text-align:center\">58</td>\n<td style=\"text-align:center\">:</td>\n<td style=\"text-align:center\">90</td>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">122</td>\n<td style=\"text-align:center\">z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">ESC</td>\n<td style=\"text-align:center\">59</td>\n<td style=\"text-align:center\">;</td>\n<td style=\"text-align:center\">91</td>\n<td style=\"text-align:center\">[</td>\n<td style=\"text-align:center\">123</td>\n<td style=\"text-align:center\">{</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:center\">FS</td>\n<td style=\"text-align:center\">60</td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">92</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\">124</td>\n<td style=\"text-align:center\">\\</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td style=\"text-align:center\">GS</td>\n<td style=\"text-align:center\">61</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">93</td>\n<td style=\"text-align:center\">]</td>\n<td style=\"text-align:center\">125</td>\n<td style=\"text-align:center\">}</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:center\">RS</td>\n<td style=\"text-align:center\">62</td>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">94</td>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">126</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td style=\"text-align:center\">US</td>\n<td style=\"text-align:center\">63</td>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">95</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\">127</td>\n<td style=\"text-align:center\">DEL</td>\n</tr>\n</tbody>\n</table>\n</div>\n</the>","site":{"data":{}},"excerpt":"<p>此处@yingping</p>\n<ul>\n<li>Brainfuck与2019的新年仪式感 · Li Yingping’s Studio<br><a href=\"https://bye-lemon.github.io/2018/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2018%EF%BC%81/\" target=\"_blank\" rel=\"noopener\">https://bye-lemon.github.io/2018/12/31/%E5%86%8D%E8%A7%81%EF%BC%8C2018%EF%BC%81/</a></li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"可视化工具和Hello-World\"><a href=\"#可视化工具和Hello-World\" class=\"headerlink\" title=\"可视化工具和Hello World!\"></a>可视化工具和Hello World!</h2><ul>\n<li>brainfuck-visualizer<br><a href=\"http://fatiherikli.github.io/brainfuck-visualizer/\" target=\"_blank\" rel=\"noopener\">http://fatiherikli.github.io/brainfuck-visualizer/</a></li>\n</ul>\n<h2 id=\"辞旧迎新的仪式感\"><a href=\"#辞旧迎新的仪式感\" class=\"headerlink\" title=\"辞旧迎新的仪式感\"></a>辞旧迎新的仪式感</h2><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\"><span class=\"title\">[</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span></span><br><span class=\"line\">    &lt;&lt;&lt;&lt;&lt; <span class=\"literal\">-</span></span><br><span class=\"line\"><span class=\"title\">]</span></span><br><span class=\"line\">&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"H\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                         <span class=\"comment\">print\"a\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"string\">.</span>                           <span class=\"comment\">print\"p\"</span></span><br><span class=\"line\"><span class=\"comment\"></span><span class=\"string\">.</span>                               <span class=\"comment\">print\"p\"</span></span><br><span class=\"line\"><span class=\"comment\"></span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                    <span class=\"comment\">print\"y\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"</span> <span class=\"comment\">\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&lt;&lt;&lt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span> <span class=\"string\">.</span>                   <span class=\"comment\">print\"N\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                        <span class=\"comment\">print\"e\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"w\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"string\">.</span>                             <span class=\"comment\">print\"</span> <span class=\"comment\">\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&lt;&lt;&lt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span> <span class=\"string\">.</span>             <span class=\"comment\">print\"Y\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"string\">.</span>                             <span class=\"comment\">print\"e\"</span></span><br><span class=\"line\"><span class=\"comment\"></span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                          <span class=\"comment\">print\"a\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt; <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"string\">.</span>                       <span class=\"comment\">print\"r\"</span></span><br><span class=\"line\"><span class=\"comment\"></span>&gt;&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                      </span><br><span class=\"line\">&lt;&lt;&lt;&lt; <span class=\"literal\">-</span> <span class=\"string\">.</span>                       </span><br><span class=\"line\">&gt; <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"string\">.</span>                  </span><br><span class=\"line\">&gt;&gt; <span class=\"string\">.</span>                           </span><br><span class=\"line\">&lt;&lt;&lt; <span class=\"string\">.</span>                          </span><br><span class=\"line\">&gt; <span class=\"string\">.</span>                            </span><br><span class=\"line\">&gt;&gt; <span class=\"literal\">+</span> <span class=\"string\">.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ASCII码表\"><a href=\"#ASCII码表\" class=\"headerlink\" title=\"ASCII码表\"></a>ASCII码表</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n<th style=\"text-align:center\">ASCII值</th>\n<th style=\"text-align:center\">控制字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">NUL</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">(space)</td>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">@</td>\n<td style=\"text-align:center\">96</td>\n<td style=\"text-align:center\">`</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">SOH</td>\n<td style=\"text-align:center\">33</td>\n<td style=\"text-align:center\">！</td>\n<td style=\"text-align:center\">65</td>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">97</td>\n<td style=\"text-align:center\">a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">STX</td>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">”</td>\n<td style=\"text-align:center\">66</td>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">98</td>\n<td style=\"text-align:center\">b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">ETX</td>\n<td style=\"text-align:center\">35</td>\n<td style=\"text-align:center\">#</td>\n<td style=\"text-align:center\">67</td>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">99</td>\n<td style=\"text-align:center\">c</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">36</td>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:center\">68</td>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">d</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">ENQ</td>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">69</td>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\">e</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">ACK</td>\n<td style=\"text-align:center\">38</td>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">70</td>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">102</td>\n<td style=\"text-align:center\">f</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">BEL</td>\n<td style=\"text-align:center\">39</td>\n<td style=\"text-align:center\">‘</td>\n<td style=\"text-align:center\">71</td>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">103</td>\n<td style=\"text-align:center\">g</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">BS</td>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:center\">(</td>\n<td style=\"text-align:center\">72</td>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">104</td>\n<td style=\"text-align:center\">h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">HT</td>\n<td style=\"text-align:center\">41</td>\n<td style=\"text-align:center\">)</td>\n<td style=\"text-align:center\">73</td>\n<td style=\"text-align:center\">I</td>\n<td style=\"text-align:center\">105</td>\n<td style=\"text-align:center\">i</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">LF</td>\n<td style=\"text-align:center\">42</td>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">74</td>\n<td style=\"text-align:center\">J</td>\n<td style=\"text-align:center\">106</td>\n<td style=\"text-align:center\">j</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">VT</td>\n<td style=\"text-align:center\">43</td>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">75</td>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">107</td>\n<td style=\"text-align:center\">k</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">FF</td>\n<td style=\"text-align:center\">44</td>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:center\">76</td>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">108</td>\n<td style=\"text-align:center\">l</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">CR</td>\n<td style=\"text-align:center\">45</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">77</td>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">109</td>\n<td style=\"text-align:center\">m</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">SO</td>\n<td style=\"text-align:center\">46</td>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:center\">78</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">110</td>\n<td style=\"text-align:center\">n</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">SI</td>\n<td style=\"text-align:center\">47</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">79</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">111</td>\n<td style=\"text-align:center\">o</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">DLE</td>\n<td style=\"text-align:center\">48</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">P</td>\n<td style=\"text-align:center\">112</td>\n<td style=\"text-align:center\">p</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\">DCI</td>\n<td style=\"text-align:center\">49</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">81</td>\n<td style=\"text-align:center\">Q</td>\n<td style=\"text-align:center\">113</td>\n<td style=\"text-align:center\">q</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">DC2</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">R</td>\n<td style=\"text-align:center\">114</td>\n<td style=\"text-align:center\">r</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\">DC3</td>\n<td style=\"text-align:center\">51</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">83</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">115</td>\n<td style=\"text-align:center\">s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td style=\"text-align:center\">DC4</td>\n<td style=\"text-align:center\">52</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">84</td>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">116</td>\n<td style=\"text-align:center\">t</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">NAK</td>\n<td style=\"text-align:center\">53</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">85</td>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:center\">117</td>\n<td style=\"text-align:center\">u</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:center\">SYN</td>\n<td style=\"text-align:center\">54</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">86</td>\n<td style=\"text-align:center\">V</td>\n<td style=\"text-align:center\">118</td>\n<td style=\"text-align:center\">v</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">TB</td>\n<td style=\"text-align:center\">55</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">87</td>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">119</td>\n<td style=\"text-align:center\">w</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:center\">CAN</td>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">88</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">120</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\">EM</td>\n<td style=\"text-align:center\">57</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">89</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">121</td>\n<td style=\"text-align:center\">y</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:center\">SUB</td>\n<td style=\"text-align:center\">58</td>\n<td style=\"text-align:center\">:</td>\n<td style=\"text-align:center\">90</td>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">122</td>\n<td style=\"text-align:center\">z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">ESC</td>\n<td style=\"text-align:center\">59</td>\n<td style=\"text-align:center\">;</td>\n<td style=\"text-align:center\">91</td>\n<td style=\"text-align:center\">[</td>\n<td style=\"text-align:center\">123</td>\n<td style=\"text-align:center\">{</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:center\">FS</td>\n<td style=\"text-align:center\">60</td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">92</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\">124</td>\n<td style=\"text-align:center\">\\</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td style=\"text-align:center\">GS</td>\n<td style=\"text-align:center\">61</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">93</td>\n<td style=\"text-align:center\">]</td>\n<td style=\"text-align:center\">125</td>\n<td style=\"text-align:center\">}</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:center\">RS</td>\n<td style=\"text-align:center\">62</td>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">94</td>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">126</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td style=\"text-align:center\">US</td>\n<td style=\"text-align:center\">63</td>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">95</td>\n<td style=\"text-align:center\">—</td>\n<td style=\"text-align:center\">127</td>\n<td style=\"text-align:center\">DEL</td>\n</tr>\n</tbody>\n</table>\n</div>\n</the>"},{"title":"FDM3D打印电吉他琴体，制作电吉他","date":"2019-06-23T17:05:39.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n涉及制作一把电吉他：  \n琴体部分完全采用FDM3D打印制作……  \n~~多图预警~~\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 展示\n\n<img alt=\"00\" src=\"FDM3D打印电吉他琴体，制作电吉他/00.jpg\">  \n\n\n## 模型\n* Stratocaster/Les Paul Hybrid Guitar by TheWhaleBiologist - Thingiverse   \nhttps://www.thingiverse.com/thing:352349\n\nTheWhaleBiologist大神的模型是一个琴体整体，并提供了可使用Inventor修改的.ipt原始文件。  \n我在琴体模型上添加了自己的logo，并将整个模型切分成22个小块，便于使用不同颜色进行打印。\n\n* Guitar by Binjun - Thingiverse  \nhttps://www.thingiverse.com/thing:3709391\n\n\n<img alt=\"01\" src=\"FDM3D打印电吉他琴体，制作电吉他/01.jpg\">  \n\n## 准备\n<img alt=\"02\" src=\"FDM3D打印电吉他琴体，制作电吉他/02.jpg\">  \n\n除了琴体外，还需要购买电吉他的其他配件。在某宝上可以购买到整套电吉他的DIY组装材料，主要包括：  \n* 琴颈\n* 弦准\n* 压弦扣\n* 琴弦\n* 连接加强板\n* 下驹后盖板\n* 尾钉\n* 护板\n* 琴码\n* 拾音器等电子配件\n\n<img alt=\"03\" src=\"FDM3D打印电吉他琴体，制作电吉他/03.jpg\">  \n\n工具准备\n* 手钻\n* 胶水(502、AB胶、亚克力胶水)\n* 打磨工具（锉刀、剪刀、美工刀）\n* 螺丝刀\n\n## 组装\n\n1.用胶水和剪刀将3D打印出来的塑料小块进行粘贴拼接，完成琴体的制作。\n\n<img alt=\"04\" src=\"FDM3D打印电吉他琴体，制作电吉他/04.jpg\">  \n\n2.在上弦枕底部涂抹胶水粘在指板的开槽处。  \n3.组装弦准，在琴头上打孔安装旋钮和压弦扣。\n\n<img alt=\"05\" src=\"FDM3D打印电吉他琴体，制作电吉他/05.jpg\">  \n\n\n4.连接琴柄和3D打印琴体，调整好琴柄和琴体开槽处的尺寸和高度，根据加强板螺丝孔的位置开孔，用螺丝将琴柄、琴身和加强板连在一起。\n\n<img alt=\"06\" src=\"FDM3D打印电吉他琴体，制作电吉他/06.jpg\">  \n\n5.将电路部分连接好，预留接地线和音频输出线，安装护板。\n\n<img alt=\"07\" src=\"FDM3D打印电吉他琴体，制作电吉他/07.jpg\"> \n\n6.安装琴码。  \n\n<img alt=\"08\" src=\"FDM3D打印电吉他琴体，制作电吉他/08.jpg\"> \n\n7.焊接插座线，安装插座片。  \n\n<img alt=\"09\" src=\"FDM3D打印电吉他琴体，制作电吉他/09.jpg\">  \n\n<img alt=\"10\" src=\"FDM3D打印电吉他琴体，制作电吉他/10.jpg\">  \n\n8.安装下驹在琴体背面的部件，焊接好接地线并固定好弹簧。\n\n<img alt=\"11\" src=\"FDM3D打印电吉他琴体，制作电吉他/11.jpg\">  \n\n<img alt=\"12\" src=\"FDM3D打印电吉他琴体，制作电吉他/12.jpg\">  \n\n9.安装琴弦并调音，摇把只是摆设可以不装。\n\n<img alt=\"13\" src=\"FDM3D打印电吉他琴体，制作电吉他/13.jpg\">  \n\n10.买个琴箱，完成。\n\n<img alt=\"14\" src=\"FDM3D打印电吉他琴体，制作电吉他/14.jpg\">  \n\n## 一些乐理知识\n\n### 有效弦长 Scale Length\n有效弦长是弦枕与第12品之间长度的二倍，这段长度也正好是一个八度的音程，琴桥的位置也由此确定，即琴桥必须调整到一个正确的位置，让这把琴得到一个正确的有效弦长。\n\n\n## 其他\n\n* 3D打印电吉他 撩妹技能Get起来！|3D学堂|3D虎  \nhttp://www.3dhoo.com/news/xuetang/39430.html\n\n","source":"_posts/FDM3D打印电吉他琴体，制作电吉他.md","raw":"---\ntitle: FDM3D打印电吉他琴体，制作电吉他\ndate: 2019-06-24 01:05:39\ntags:\n  - 3D打印\n  - 吉他\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n涉及制作一把电吉他：  \n琴体部分完全采用FDM3D打印制作……  \n~~多图预警~~\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 展示\n\n<img alt=\"00\" src=\"FDM3D打印电吉他琴体，制作电吉他/00.jpg\">  \n\n\n## 模型\n* Stratocaster/Les Paul Hybrid Guitar by TheWhaleBiologist - Thingiverse   \nhttps://www.thingiverse.com/thing:352349\n\nTheWhaleBiologist大神的模型是一个琴体整体，并提供了可使用Inventor修改的.ipt原始文件。  \n我在琴体模型上添加了自己的logo，并将整个模型切分成22个小块，便于使用不同颜色进行打印。\n\n* Guitar by Binjun - Thingiverse  \nhttps://www.thingiverse.com/thing:3709391\n\n\n<img alt=\"01\" src=\"FDM3D打印电吉他琴体，制作电吉他/01.jpg\">  \n\n## 准备\n<img alt=\"02\" src=\"FDM3D打印电吉他琴体，制作电吉他/02.jpg\">  \n\n除了琴体外，还需要购买电吉他的其他配件。在某宝上可以购买到整套电吉他的DIY组装材料，主要包括：  \n* 琴颈\n* 弦准\n* 压弦扣\n* 琴弦\n* 连接加强板\n* 下驹后盖板\n* 尾钉\n* 护板\n* 琴码\n* 拾音器等电子配件\n\n<img alt=\"03\" src=\"FDM3D打印电吉他琴体，制作电吉他/03.jpg\">  \n\n工具准备\n* 手钻\n* 胶水(502、AB胶、亚克力胶水)\n* 打磨工具（锉刀、剪刀、美工刀）\n* 螺丝刀\n\n## 组装\n\n1.用胶水和剪刀将3D打印出来的塑料小块进行粘贴拼接，完成琴体的制作。\n\n<img alt=\"04\" src=\"FDM3D打印电吉他琴体，制作电吉他/04.jpg\">  \n\n2.在上弦枕底部涂抹胶水粘在指板的开槽处。  \n3.组装弦准，在琴头上打孔安装旋钮和压弦扣。\n\n<img alt=\"05\" src=\"FDM3D打印电吉他琴体，制作电吉他/05.jpg\">  \n\n\n4.连接琴柄和3D打印琴体，调整好琴柄和琴体开槽处的尺寸和高度，根据加强板螺丝孔的位置开孔，用螺丝将琴柄、琴身和加强板连在一起。\n\n<img alt=\"06\" src=\"FDM3D打印电吉他琴体，制作电吉他/06.jpg\">  \n\n5.将电路部分连接好，预留接地线和音频输出线，安装护板。\n\n<img alt=\"07\" src=\"FDM3D打印电吉他琴体，制作电吉他/07.jpg\"> \n\n6.安装琴码。  \n\n<img alt=\"08\" src=\"FDM3D打印电吉他琴体，制作电吉他/08.jpg\"> \n\n7.焊接插座线，安装插座片。  \n\n<img alt=\"09\" src=\"FDM3D打印电吉他琴体，制作电吉他/09.jpg\">  \n\n<img alt=\"10\" src=\"FDM3D打印电吉他琴体，制作电吉他/10.jpg\">  \n\n8.安装下驹在琴体背面的部件，焊接好接地线并固定好弹簧。\n\n<img alt=\"11\" src=\"FDM3D打印电吉他琴体，制作电吉他/11.jpg\">  \n\n<img alt=\"12\" src=\"FDM3D打印电吉他琴体，制作电吉他/12.jpg\">  \n\n9.安装琴弦并调音，摇把只是摆设可以不装。\n\n<img alt=\"13\" src=\"FDM3D打印电吉他琴体，制作电吉他/13.jpg\">  \n\n10.买个琴箱，完成。\n\n<img alt=\"14\" src=\"FDM3D打印电吉他琴体，制作电吉他/14.jpg\">  \n\n## 一些乐理知识\n\n### 有效弦长 Scale Length\n有效弦长是弦枕与第12品之间长度的二倍，这段长度也正好是一个八度的音程，琴桥的位置也由此确定，即琴桥必须调整到一个正确的位置，让这把琴得到一个正确的有效弦长。\n\n\n## 其他\n\n* 3D打印电吉他 撩妹技能Get起来！|3D学堂|3D虎  \nhttp://www.3dhoo.com/news/xuetang/39430.html\n\n","slug":"FDM3D打印电吉他琴体，制作电吉他","published":1,"updated":"2020-01-05T19:13:24.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506k00054cvj7cgdwjnq","content":"<p><strong> FDM3D打印电吉他琴体，制作电吉他 </strong> <excerpt in index | 首页摘要><br>涉及制作一把电吉他：<br>琴体部分完全采用FDM3D打印制作……<br><del>多图预警</del><br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h2><p><img alt=\"00\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/00.jpg\">  </p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h2><ul>\n<li>Stratocaster/Les Paul Hybrid Guitar by TheWhaleBiologist - Thingiverse<br><a href=\"https://www.thingiverse.com/thing:352349\" target=\"_blank\" rel=\"noopener\">https://www.thingiverse.com/thing:352349</a></li>\n</ul>\n<p>TheWhaleBiologist大神的模型是一个琴体整体，并提供了可使用Inventor修改的.ipt原始文件。<br>我在琴体模型上添加了自己的logo，并将整个模型切分成22个小块，便于使用不同颜色进行打印。</p>\n<ul>\n<li>Guitar by Binjun - Thingiverse<br><a href=\"https://www.thingiverse.com/thing:3709391\" target=\"_blank\" rel=\"noopener\">https://www.thingiverse.com/thing:3709391</a></li>\n</ul>\n<p><img alt=\"01\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/01.jpg\">  </p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><img alt=\"02\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/02.jpg\">  </p>\n<p>除了琴体外，还需要购买电吉他的其他配件。在某宝上可以购买到整套电吉他的DIY组装材料，主要包括：  </p>\n<ul>\n<li>琴颈</li>\n<li>弦准</li>\n<li>压弦扣</li>\n<li>琴弦</li>\n<li>连接加强板</li>\n<li>下驹后盖板</li>\n<li>尾钉</li>\n<li>护板</li>\n<li>琴码</li>\n<li>拾音器等电子配件</li>\n</ul>\n<p><img alt=\"03\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/03.jpg\">  </p>\n<p>工具准备</p>\n<ul>\n<li>手钻</li>\n<li>胶水(502、AB胶、亚克力胶水)</li>\n<li>打磨工具（锉刀、剪刀、美工刀）</li>\n<li>螺丝刀</li>\n</ul>\n<h2 id=\"组装\"><a href=\"#组装\" class=\"headerlink\" title=\"组装\"></a>组装</h2><p>1.用胶水和剪刀将3D打印出来的塑料小块进行粘贴拼接，完成琴体的制作。</p>\n<p><img alt=\"04\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/04.jpg\">  </p>\n<p>2.在上弦枕底部涂抹胶水粘在指板的开槽处。<br>3.组装弦准，在琴头上打孔安装旋钮和压弦扣。</p>\n<p><img alt=\"05\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/05.jpg\">  </p>\n<p>4.连接琴柄和3D打印琴体，调整好琴柄和琴体开槽处的尺寸和高度，根据加强板螺丝孔的位置开孔，用螺丝将琴柄、琴身和加强板连在一起。</p>\n<p><img alt=\"06\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/06.jpg\">  </p>\n<p>5.将电路部分连接好，预留接地线和音频输出线，安装护板。</p>\n<p><img alt=\"07\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/07.jpg\"> </p>\n<p>6.安装琴码。  </p>\n<p><img alt=\"08\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/08.jpg\"> </p>\n<p>7.焊接插座线，安装插座片。  </p>\n<p><img alt=\"09\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/09.jpg\">  </p>\n<p><img alt=\"10\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/10.jpg\">  </p>\n<p>8.安装下驹在琴体背面的部件，焊接好接地线并固定好弹簧。</p>\n<p><img alt=\"11\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/11.jpg\">  </p>\n<p><img alt=\"12\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/12.jpg\">  </p>\n<p>9.安装琴弦并调音，摇把只是摆设可以不装。</p>\n<p><img alt=\"13\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/13.jpg\">  </p>\n<p>10.买个琴箱，完成。</p>\n<p><img alt=\"14\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/14.jpg\">  </p>\n<h2 id=\"一些乐理知识\"><a href=\"#一些乐理知识\" class=\"headerlink\" title=\"一些乐理知识\"></a>一些乐理知识</h2><h3 id=\"有效弦长-Scale-Length\"><a href=\"#有效弦长-Scale-Length\" class=\"headerlink\" title=\"有效弦长 Scale Length\"></a>有效弦长 Scale Length</h3><p>有效弦长是弦枕与第12品之间长度的二倍，这段长度也正好是一个八度的音程，琴桥的位置也由此确定，即琴桥必须调整到一个正确的位置，让这把琴得到一个正确的有效弦长。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>3D打印电吉他 撩妹技能Get起来！|3D学堂|3D虎<br><a href=\"http://www.3dhoo.com/news/xuetang/39430.html\" target=\"_blank\" rel=\"noopener\">http://www.3dhoo.com/news/xuetang/39430.html</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> FDM3D打印电吉他琴体，制作电吉他 </strong> <excerpt in index | 首页摘要><br>涉及制作一把电吉他：<br>琴体部分完全采用FDM3D打印制作……<br><del>多图预警</del><br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h2><p><img alt=\"00\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/00.jpg\">  </p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h2><ul>\n<li>Stratocaster/Les Paul Hybrid Guitar by TheWhaleBiologist - Thingiverse<br><a href=\"https://www.thingiverse.com/thing:352349\" target=\"_blank\" rel=\"noopener\">https://www.thingiverse.com/thing:352349</a></li>\n</ul>\n<p>TheWhaleBiologist大神的模型是一个琴体整体，并提供了可使用Inventor修改的.ipt原始文件。<br>我在琴体模型上添加了自己的logo，并将整个模型切分成22个小块，便于使用不同颜色进行打印。</p>\n<ul>\n<li>Guitar by Binjun - Thingiverse<br><a href=\"https://www.thingiverse.com/thing:3709391\" target=\"_blank\" rel=\"noopener\">https://www.thingiverse.com/thing:3709391</a></li>\n</ul>\n<p><img alt=\"01\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/01.jpg\">  </p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p><img alt=\"02\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/02.jpg\">  </p>\n<p>除了琴体外，还需要购买电吉他的其他配件。在某宝上可以购买到整套电吉他的DIY组装材料，主要包括：  </p>\n<ul>\n<li>琴颈</li>\n<li>弦准</li>\n<li>压弦扣</li>\n<li>琴弦</li>\n<li>连接加强板</li>\n<li>下驹后盖板</li>\n<li>尾钉</li>\n<li>护板</li>\n<li>琴码</li>\n<li>拾音器等电子配件</li>\n</ul>\n<p><img alt=\"03\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/03.jpg\">  </p>\n<p>工具准备</p>\n<ul>\n<li>手钻</li>\n<li>胶水(502、AB胶、亚克力胶水)</li>\n<li>打磨工具（锉刀、剪刀、美工刀）</li>\n<li>螺丝刀</li>\n</ul>\n<h2 id=\"组装\"><a href=\"#组装\" class=\"headerlink\" title=\"组装\"></a>组装</h2><p>1.用胶水和剪刀将3D打印出来的塑料小块进行粘贴拼接，完成琴体的制作。</p>\n<p><img alt=\"04\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/04.jpg\">  </p>\n<p>2.在上弦枕底部涂抹胶水粘在指板的开槽处。<br>3.组装弦准，在琴头上打孔安装旋钮和压弦扣。</p>\n<p><img alt=\"05\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/05.jpg\">  </p>\n<p>4.连接琴柄和3D打印琴体，调整好琴柄和琴体开槽处的尺寸和高度，根据加强板螺丝孔的位置开孔，用螺丝将琴柄、琴身和加强板连在一起。</p>\n<p><img alt=\"06\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/06.jpg\">  </p>\n<p>5.将电路部分连接好，预留接地线和音频输出线，安装护板。</p>\n<p><img alt=\"07\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/07.jpg\"> </p>\n<p>6.安装琴码。  </p>\n<p><img alt=\"08\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/08.jpg\"> </p>\n<p>7.焊接插座线，安装插座片。  </p>\n<p><img alt=\"09\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/09.jpg\">  </p>\n<p><img alt=\"10\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/10.jpg\">  </p>\n<p>8.安装下驹在琴体背面的部件，焊接好接地线并固定好弹簧。</p>\n<p><img alt=\"11\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/11.jpg\">  </p>\n<p><img alt=\"12\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/12.jpg\">  </p>\n<p>9.安装琴弦并调音，摇把只是摆设可以不装。</p>\n<p><img alt=\"13\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/13.jpg\">  </p>\n<p>10.买个琴箱，完成。</p>\n<p><img alt=\"14\" src=\"/2019/06/24/FDM3D打印电吉他琴体，制作电吉他/14.jpg\">  </p>\n<h2 id=\"一些乐理知识\"><a href=\"#一些乐理知识\" class=\"headerlink\" title=\"一些乐理知识\"></a>一些乐理知识</h2><h3 id=\"有效弦长-Scale-Length\"><a href=\"#有效弦长-Scale-Length\" class=\"headerlink\" title=\"有效弦长 Scale Length\"></a>有效弦长 Scale Length</h3><p>有效弦长是弦枕与第12品之间长度的二倍，这段长度也正好是一个八度的音程，琴桥的位置也由此确定，即琴桥必须调整到一个正确的位置，让这把琴得到一个正确的有效弦长。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>3D打印电吉他 撩妹技能Get起来！|3D学堂|3D虎<br><a href=\"http://www.3dhoo.com/news/xuetang/39430.html\" target=\"_blank\" rel=\"noopener\">http://www.3dhoo.com/news/xuetang/39430.html</a></li>\n</ul>\n</the>"},{"title":"Flask学习笔记","date":"2019-07-23T08:29:31.000Z","_content":"\n\n\n\n\n\n### 利用循环的判断语句控制template的渲染\n``` html\n<head>\n  {% if title %}\n  <title>{{  title  }}</title>\n  {% else %}\n  <title>AI Workplace</title>\n   {% endif %}\n</head>\n<body>\n  <h1>Welcome to AI Workshop</h1>\n  {% for i in range(2) %}\n    <img src=\"{{ url_for('video_feed') }}\">\n    <p>text {{ i }}</p>\n{% endfor %}\n</body>\n```\n\n### 模板继承和引用\n``` html\n{% extends \"base.html\"%}\n\n{% block content %}\n{% endblock %}\n```\n\n\n\n* Basic usage — Flask-Bootstrap 3.3.7.1 documentation  \nhttps://pythonhosted.org/Flask-Bootstrap/basic-usage.html\n\n\n\n### 数据库\n\n* Flask-SQLAlchemy — Flask-SQLAlchemy 2.0 documentation  \nhttp://www.pythondoc.com/flask-sqlalchemy/index.html\n\n\n\n\n\n\n\n\n\n\n\n\n### ubuntu 虚拟环境\n\n安装Python虚拟环境的virtualenv，执行命令\n``` bash\nsudo apt-get install python-virtualenv\n```\n命令会同时安装python-virtualenv和python3-virtualenv  \n\n安装virtualwrapper，virtualwrapper是一个简单方便的管理Python虚拟环境的工具\n``` bash\npip3 install virtualenvwrapper\n```\n\n配置virtualwrapper的环境变量\n``` bash\nvim ~/.bashrc\n```\n\nShift + g 到达文本最后，加入以下内容\n``` bash\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nexport WORKON_HOME=~/Envs\nsource /home/lee/.local/bin/virtualenvwrapper.sh\n```\n其中 virtualenvwrapper.sh 和 python3 的路径可通过下面命令查看\n``` bash\nsudo find / -name \"virtualenvwrapper.sh\"\nwhereis python  # 查看所有python的路径，不止一个\nwhich python3   # 查看当前使用的python路径\n```\n\n执行下面命令，使对~/.bashrc的修改生效\n``` bash\nsource ~/.bashrc\n```\n\n新建虚拟环境\n``` bash\nmkvirtualenv --python=/usr/bin/python3 envname\n```\n\n进入虚拟环境\n``` bash\n$ workon envname\n```\n\n\n\n安装指定包\n``` bash\npip install -r requirements.txt \n```\n\n\n\n虚拟化境virtualenv下提升权限\n\n指定python路径\n``` bash\n(envname)$ which python\n/home/username/Envs/envname/bin/python\n(envname)$ sudo /home/username/Envs/envname/bin/python server.py\n```\n\n\n退出虚拟环境\n``` bash\n(envname)$ deactivate\n```\n\n\n\n\n\n\n\n\n\n\n* Python-Flask-企业级论坛实战 - 随笔分类 - sellsa - 博客园  \nhttps://www.cnblogs.com/sellsa/category/1244063.html\n\n\n\n\n### URL传参\n\n* ### path形式传参\n\n``` python\n@app.route('/article/<article_id>/')    #我们在<>里面写参数名article_id\ndef article_detail(article_id):         #这里的参数名要和上面的一致，即article_id\n    return '您请求的文章是：{}'.format(article_id)\n```\n\n限定参数数据类型\n``` python\n@app.route('/article/<int:article_id>/')\n```\n这样当我们传递的参数是int类型的时候才能正常访问，其他类型都会返回404  \n\n类型可以设置提下几种：  \n* string: 默认的数据类型，接收没有任何斜杠\"\\   /\"的文本\n* int: 整数形\n* float: 浮点型\n* path: 和string类似，但是接受斜杠\n* uuid: 只接受uuid字符串\n* any: 可以指定多种路径，比如以下例子\n``` python\n@app.route('/<any(article,blog):url_path>/<id>/')\ndef item(url_path, id):\n    if url_path == 'article':\n        return '文章详情：{}'.format(id)\n    else:\n        return '博客详情：{}'.format(id)\n```\n\n\n* ### ?key=value形式传参\n\n即在浏览器的URL中使用“?key=value”的形式传递参数（多个参数之间使用“&”连接即可），在后台则使用“from flask import request”，然后使用“request.args.get(key)”来获取参数key的值value。\n``` python\nfrom flask import Flask, request\n...\n \n@app.route('/d/')\ndef d():\n    wd = request.args.get('wd')\n    return '您传递的参数是: {}'.format(wd)\n```\n访问127.0.0.1:5000/d/?wd=hello\n\n\n### URL重定向\n\n\nurl_for使用  \n我们之前是通过url来找到对应的视图函数\n*  　　/     =>    hello_world  \n\n那么url_for则是通过视图函数找到url\n* 　　hello world  =>  /\n\n``` python\nfrom flask import url_for\n\n@app.route('/')\ndef hello_world():\n    return url_for('my_list', page_id=1)\n\n@app.route('/list/<page_id>')\ndef my_list():\n    return 'list page'\n```\n\n在flask中，重定向是通过flask.redict(location, code=302)函数来实现的\n* location表示需要重定向到的URL,应该配合url_for()函数来使用\n* code表示采用哪种重定向，默认是302（临时重定向），也可以改成301来实现永久重定向\n``` python\nfrom flask import redirect\n\n@app.route(\"/redirect\")\ndef test():\n    return redirect(url_for('hello'))\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Flask学习笔记.md","raw":"---\ntitle: Flask学习笔记\ndate: 2019-07-23 16:29:31\ntags:\n  - flask\n---\n\n\n\n\n\n\n### 利用循环的判断语句控制template的渲染\n``` html\n<head>\n  {% if title %}\n  <title>{{  title  }}</title>\n  {% else %}\n  <title>AI Workplace</title>\n   {% endif %}\n</head>\n<body>\n  <h1>Welcome to AI Workshop</h1>\n  {% for i in range(2) %}\n    <img src=\"{{ url_for('video_feed') }}\">\n    <p>text {{ i }}</p>\n{% endfor %}\n</body>\n```\n\n### 模板继承和引用\n``` html\n{% extends \"base.html\"%}\n\n{% block content %}\n{% endblock %}\n```\n\n\n\n* Basic usage — Flask-Bootstrap 3.3.7.1 documentation  \nhttps://pythonhosted.org/Flask-Bootstrap/basic-usage.html\n\n\n\n### 数据库\n\n* Flask-SQLAlchemy — Flask-SQLAlchemy 2.0 documentation  \nhttp://www.pythondoc.com/flask-sqlalchemy/index.html\n\n\n\n\n\n\n\n\n\n\n\n\n### ubuntu 虚拟环境\n\n安装Python虚拟环境的virtualenv，执行命令\n``` bash\nsudo apt-get install python-virtualenv\n```\n命令会同时安装python-virtualenv和python3-virtualenv  \n\n安装virtualwrapper，virtualwrapper是一个简单方便的管理Python虚拟环境的工具\n``` bash\npip3 install virtualenvwrapper\n```\n\n配置virtualwrapper的环境变量\n``` bash\nvim ~/.bashrc\n```\n\nShift + g 到达文本最后，加入以下内容\n``` bash\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nexport WORKON_HOME=~/Envs\nsource /home/lee/.local/bin/virtualenvwrapper.sh\n```\n其中 virtualenvwrapper.sh 和 python3 的路径可通过下面命令查看\n``` bash\nsudo find / -name \"virtualenvwrapper.sh\"\nwhereis python  # 查看所有python的路径，不止一个\nwhich python3   # 查看当前使用的python路径\n```\n\n执行下面命令，使对~/.bashrc的修改生效\n``` bash\nsource ~/.bashrc\n```\n\n新建虚拟环境\n``` bash\nmkvirtualenv --python=/usr/bin/python3 envname\n```\n\n进入虚拟环境\n``` bash\n$ workon envname\n```\n\n\n\n安装指定包\n``` bash\npip install -r requirements.txt \n```\n\n\n\n虚拟化境virtualenv下提升权限\n\n指定python路径\n``` bash\n(envname)$ which python\n/home/username/Envs/envname/bin/python\n(envname)$ sudo /home/username/Envs/envname/bin/python server.py\n```\n\n\n退出虚拟环境\n``` bash\n(envname)$ deactivate\n```\n\n\n\n\n\n\n\n\n\n\n* Python-Flask-企业级论坛实战 - 随笔分类 - sellsa - 博客园  \nhttps://www.cnblogs.com/sellsa/category/1244063.html\n\n\n\n\n### URL传参\n\n* ### path形式传参\n\n``` python\n@app.route('/article/<article_id>/')    #我们在<>里面写参数名article_id\ndef article_detail(article_id):         #这里的参数名要和上面的一致，即article_id\n    return '您请求的文章是：{}'.format(article_id)\n```\n\n限定参数数据类型\n``` python\n@app.route('/article/<int:article_id>/')\n```\n这样当我们传递的参数是int类型的时候才能正常访问，其他类型都会返回404  \n\n类型可以设置提下几种：  \n* string: 默认的数据类型，接收没有任何斜杠\"\\   /\"的文本\n* int: 整数形\n* float: 浮点型\n* path: 和string类似，但是接受斜杠\n* uuid: 只接受uuid字符串\n* any: 可以指定多种路径，比如以下例子\n``` python\n@app.route('/<any(article,blog):url_path>/<id>/')\ndef item(url_path, id):\n    if url_path == 'article':\n        return '文章详情：{}'.format(id)\n    else:\n        return '博客详情：{}'.format(id)\n```\n\n\n* ### ?key=value形式传参\n\n即在浏览器的URL中使用“?key=value”的形式传递参数（多个参数之间使用“&”连接即可），在后台则使用“from flask import request”，然后使用“request.args.get(key)”来获取参数key的值value。\n``` python\nfrom flask import Flask, request\n...\n \n@app.route('/d/')\ndef d():\n    wd = request.args.get('wd')\n    return '您传递的参数是: {}'.format(wd)\n```\n访问127.0.0.1:5000/d/?wd=hello\n\n\n### URL重定向\n\n\nurl_for使用  \n我们之前是通过url来找到对应的视图函数\n*  　　/     =>    hello_world  \n\n那么url_for则是通过视图函数找到url\n* 　　hello world  =>  /\n\n``` python\nfrom flask import url_for\n\n@app.route('/')\ndef hello_world():\n    return url_for('my_list', page_id=1)\n\n@app.route('/list/<page_id>')\ndef my_list():\n    return 'list page'\n```\n\n在flask中，重定向是通过flask.redict(location, code=302)函数来实现的\n* location表示需要重定向到的URL,应该配合url_for()函数来使用\n* code表示采用哪种重定向，默认是302（临时重定向），也可以改成301来实现永久重定向\n``` python\nfrom flask import redirect\n\n@app.route(\"/redirect\")\ndef test():\n    return redirect(url_for('hello'))\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Flask学习笔记","published":1,"updated":"2020-01-05T19:13:24.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506l00064cvjnx3dbcwh","content":"<h3 id=\"利用循环的判断语句控制template的渲染\"><a href=\"#利用循环的判断语句控制template的渲染\" class=\"headerlink\" title=\"利用循环的判断语句控制template的渲染\"></a>利用循环的判断语句控制template的渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  &#123;% if title %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;&#123;  title  &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  &#123;% else %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>AI Workplace<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to AI Workshop<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  &#123;% for i in range(2) %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for('video_feed') &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>text &#123;&#123; i &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模板继承和引用\"><a href=\"#模板继承和引用\" class=\"headerlink\" title=\"模板继承和引用\"></a>模板继承和引用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends \"base.html\"%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Basic usage — Flask-Bootstrap 3.3.7.1 documentation<br><a href=\"https://pythonhosted.org/Flask-Bootstrap/basic-usage.html\" target=\"_blank\" rel=\"noopener\">https://pythonhosted.org/Flask-Bootstrap/basic-usage.html</a></li>\n</ul>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li>Flask-SQLAlchemy — Flask-SQLAlchemy 2.0 documentation<br><a href=\"http://www.pythondoc.com/flask-sqlalchemy/index.html\" target=\"_blank\" rel=\"noopener\">http://www.pythondoc.com/flask-sqlalchemy/index.html</a></li>\n</ul>\n<h3 id=\"ubuntu-虚拟环境\"><a href=\"#ubuntu-虚拟环境\" class=\"headerlink\" title=\"ubuntu 虚拟环境\"></a>ubuntu 虚拟环境</h3><p>安装Python虚拟环境的virtualenv，执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-virtualenv</span><br></pre></td></tr></table></figure></p>\n<p>命令会同时安装python-virtualenv和python3-virtualenv  </p>\n<p>安装virtualwrapper，virtualwrapper是一个简单方便的管理Python虚拟环境的工具<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure></p>\n<p>配置virtualwrapper的环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>Shift + g 到达文本最后，加入以下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class=\"line\"><span class=\"built_in\">export</span> WORKON_HOME=~/Envs</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/lee/.<span class=\"built_in\">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p>\n<p>其中 virtualenvwrapper.sh 和 python3 的路径可通过下面命令查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo find / -name <span class=\"string\">\"virtualenvwrapper.sh\"</span></span><br><span class=\"line\">whereis python  <span class=\"comment\"># 查看所有python的路径，不止一个</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> python3   <span class=\"comment\"># 查看当前使用的python路径</span></span><br></pre></td></tr></table></figure></p>\n<p>执行下面命令，使对~/.bashrc的修改生效<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>新建虚拟环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv --python=/usr/bin/python3 envname</span><br></pre></td></tr></table></figure></p>\n<p>进入虚拟环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ workon envname</span><br></pre></td></tr></table></figure></p>\n<p>安装指定包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>虚拟化境virtualenv下提升权限</p>\n<p>指定python路径<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(envname)$ <span class=\"built_in\">which</span> python</span><br><span class=\"line\">/home/username/Envs/envname/bin/python</span><br><span class=\"line\">(envname)$ sudo /home/username/Envs/envname/bin/python server.py</span><br></pre></td></tr></table></figure></p>\n<p>退出虚拟环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(envname)$ deactivate</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Python-Flask-企业级论坛实战 - 随笔分类 - sellsa - 博客园<br><a href=\"https://www.cnblogs.com/sellsa/category/1244063.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sellsa/category/1244063.html</a></li>\n</ul>\n<h3 id=\"URL传参\"><a href=\"#URL传参\" class=\"headerlink\" title=\"URL传参\"></a>URL传参</h3><ul>\n<li><h3 id=\"path形式传参\"><a href=\"#path形式传参\" class=\"headerlink\" title=\"path形式传参\"></a>path形式传参</h3></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/article/&lt;article_id&gt;/')    #我们在&lt;&gt;里面写参数名article_id</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">article_detail</span><span class=\"params\">(article_id)</span>:</span>         <span class=\"comment\">#这里的参数名要和上面的一致，即article_id</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'您请求的文章是：&#123;&#125;'</span>.format(article_id)</span><br></pre></td></tr></table></figure>\n<p>限定参数数据类型<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/article/&lt;int:article_id&gt;/')</span></span><br></pre></td></tr></table></figure></p>\n<p>这样当我们传递的参数是int类型的时候才能正常访问，其他类型都会返回404  </p>\n<p>类型可以设置提下几种：  </p>\n<ul>\n<li>string: 默认的数据类型，接收没有任何斜杠”   /“的文本</li>\n<li>int: 整数形</li>\n<li>float: 浮点型</li>\n<li>path: 和string类似，但是接受斜杠</li>\n<li>uuid: 只接受uuid字符串</li>\n<li><p>any: 可以指定多种路径，比如以下例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/&lt;any(article,blog):url_path&gt;/&lt;id&gt;/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">item</span><span class=\"params\">(url_path, id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> url_path == <span class=\"string\">'article'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'文章详情：&#123;&#125;'</span>.format(id)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'博客详情：&#123;&#125;'</span>.format(id)</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"key-value形式传参\"><a href=\"#key-value形式传参\" class=\"headerlink\" title=\"?key=value形式传参\"></a>?key=value形式传参</h3></li>\n</ul>\n<p>即在浏览器的URL中使用“?key=value”的形式传递参数（多个参数之间使用“&amp;”连接即可），在后台则使用“from flask import request”，然后使用“request.args.get(key)”来获取参数key的值value。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@app.route('/d/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">d</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    wd = request.args.get(<span class=\"string\">'wd'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'您传递的参数是: &#123;&#125;'</span>.format(wd)</span><br></pre></td></tr></table></figure></p>\n<p>访问127.0.0.1:5000/d/?wd=hello</p>\n<h3 id=\"URL重定向\"><a href=\"#URL重定向\" class=\"headerlink\" title=\"URL重定向\"></a>URL重定向</h3><p>url_for使用<br>我们之前是通过url来找到对应的视图函数</p>\n<ul>\n<li>　　/     =&gt;    hello_world  </li>\n</ul>\n<p>那么url_for则是通过视图函数找到url</p>\n<ul>\n<li>　　hello world  =&gt;  /</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> url_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_for(<span class=\"string\">'my_list'</span>, page_id=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/list/&lt;page_id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_list</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'list page'</span></span><br></pre></td></tr></table></figure>\n<p>在flask中，重定向是通过flask.redict(location, code=302)函数来实现的</p>\n<ul>\n<li>location表示需要重定向到的URL,应该配合url_for()函数来使用</li>\n<li>code表示采用哪种重定向，默认是302（临时重定向），也可以改成301来实现永久重定向<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> redirect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/redirect\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'hello'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"利用循环的判断语句控制template的渲染\"><a href=\"#利用循环的判断语句控制template的渲染\" class=\"headerlink\" title=\"利用循环的判断语句控制template的渲染\"></a>利用循环的判断语句控制template的渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  &#123;% if title %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;&#123;  title  &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  &#123;% else %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>AI Workplace<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to AI Workshop<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  &#123;% for i in range(2) %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for('video_feed') &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>text &#123;&#123; i &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模板继承和引用\"><a href=\"#模板继承和引用\" class=\"headerlink\" title=\"模板继承和引用\"></a>模板继承和引用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends \"base.html\"%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Basic usage — Flask-Bootstrap 3.3.7.1 documentation<br><a href=\"https://pythonhosted.org/Flask-Bootstrap/basic-usage.html\" target=\"_blank\" rel=\"noopener\">https://pythonhosted.org/Flask-Bootstrap/basic-usage.html</a></li>\n</ul>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li>Flask-SQLAlchemy — Flask-SQLAlchemy 2.0 documentation<br><a href=\"http://www.pythondoc.com/flask-sqlalchemy/index.html\" target=\"_blank\" rel=\"noopener\">http://www.pythondoc.com/flask-sqlalchemy/index.html</a></li>\n</ul>\n<h3 id=\"ubuntu-虚拟环境\"><a href=\"#ubuntu-虚拟环境\" class=\"headerlink\" title=\"ubuntu 虚拟环境\"></a>ubuntu 虚拟环境</h3><p>安装Python虚拟环境的virtualenv，执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-virtualenv</span><br></pre></td></tr></table></figure></p>\n<p>命令会同时安装python-virtualenv和python3-virtualenv  </p>\n<p>安装virtualwrapper，virtualwrapper是一个简单方便的管理Python虚拟环境的工具<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure></p>\n<p>配置virtualwrapper的环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>Shift + g 到达文本最后，加入以下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class=\"line\"><span class=\"built_in\">export</span> WORKON_HOME=~/Envs</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/lee/.<span class=\"built_in\">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p>\n<p>其中 virtualenvwrapper.sh 和 python3 的路径可通过下面命令查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo find / -name <span class=\"string\">\"virtualenvwrapper.sh\"</span></span><br><span class=\"line\">whereis python  <span class=\"comment\"># 查看所有python的路径，不止一个</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> python3   <span class=\"comment\"># 查看当前使用的python路径</span></span><br></pre></td></tr></table></figure></p>\n<p>执行下面命令，使对~/.bashrc的修改生效<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>新建虚拟环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv --python=/usr/bin/python3 envname</span><br></pre></td></tr></table></figure></p>\n<p>进入虚拟环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ workon envname</span><br></pre></td></tr></table></figure></p>\n<p>安装指定包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>虚拟化境virtualenv下提升权限</p>\n<p>指定python路径<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(envname)$ <span class=\"built_in\">which</span> python</span><br><span class=\"line\">/home/username/Envs/envname/bin/python</span><br><span class=\"line\">(envname)$ sudo /home/username/Envs/envname/bin/python server.py</span><br></pre></td></tr></table></figure></p>\n<p>退出虚拟环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(envname)$ deactivate</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Python-Flask-企业级论坛实战 - 随笔分类 - sellsa - 博客园<br><a href=\"https://www.cnblogs.com/sellsa/category/1244063.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sellsa/category/1244063.html</a></li>\n</ul>\n<h3 id=\"URL传参\"><a href=\"#URL传参\" class=\"headerlink\" title=\"URL传参\"></a>URL传参</h3><ul>\n<li><h3 id=\"path形式传参\"><a href=\"#path形式传参\" class=\"headerlink\" title=\"path形式传参\"></a>path形式传参</h3></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/article/&lt;article_id&gt;/')    #我们在&lt;&gt;里面写参数名article_id</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">article_detail</span><span class=\"params\">(article_id)</span>:</span>         <span class=\"comment\">#这里的参数名要和上面的一致，即article_id</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'您请求的文章是：&#123;&#125;'</span>.format(article_id)</span><br></pre></td></tr></table></figure>\n<p>限定参数数据类型<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/article/&lt;int:article_id&gt;/')</span></span><br></pre></td></tr></table></figure></p>\n<p>这样当我们传递的参数是int类型的时候才能正常访问，其他类型都会返回404  </p>\n<p>类型可以设置提下几种：  </p>\n<ul>\n<li>string: 默认的数据类型，接收没有任何斜杠”   /“的文本</li>\n<li>int: 整数形</li>\n<li>float: 浮点型</li>\n<li>path: 和string类似，但是接受斜杠</li>\n<li>uuid: 只接受uuid字符串</li>\n<li><p>any: 可以指定多种路径，比如以下例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/&lt;any(article,blog):url_path&gt;/&lt;id&gt;/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">item</span><span class=\"params\">(url_path, id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> url_path == <span class=\"string\">'article'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'文章详情：&#123;&#125;'</span>.format(id)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'博客详情：&#123;&#125;'</span>.format(id)</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"key-value形式传参\"><a href=\"#key-value形式传参\" class=\"headerlink\" title=\"?key=value形式传参\"></a>?key=value形式传参</h3></li>\n</ul>\n<p>即在浏览器的URL中使用“?key=value”的形式传递参数（多个参数之间使用“&amp;”连接即可），在后台则使用“from flask import request”，然后使用“request.args.get(key)”来获取参数key的值value。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@app.route('/d/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">d</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    wd = request.args.get(<span class=\"string\">'wd'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'您传递的参数是: &#123;&#125;'</span>.format(wd)</span><br></pre></td></tr></table></figure></p>\n<p>访问127.0.0.1:5000/d/?wd=hello</p>\n<h3 id=\"URL重定向\"><a href=\"#URL重定向\" class=\"headerlink\" title=\"URL重定向\"></a>URL重定向</h3><p>url_for使用<br>我们之前是通过url来找到对应的视图函数</p>\n<ul>\n<li>　　/     =&gt;    hello_world  </li>\n</ul>\n<p>那么url_for则是通过视图函数找到url</p>\n<ul>\n<li>　　hello world  =&gt;  /</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> url_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_for(<span class=\"string\">'my_list'</span>, page_id=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/list/&lt;page_id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_list</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'list page'</span></span><br></pre></td></tr></table></figure>\n<p>在flask中，重定向是通过flask.redict(location, code=302)函数来实现的</p>\n<ul>\n<li>location表示需要重定向到的URL,应该配合url_for()函数来使用</li>\n<li>code表示采用哪种重定向，默认是302（临时重定向），也可以改成301来实现永久重定向<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> redirect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/redirect\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">'hello'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Hexo：Hello Hexo","date":"2019-04-19T14:30:18.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 准备\n\n### 所需软件\n\n* git: http://git-scm.com/\n* node.js：http://nodejs.org/\n\n查看是否安装成功\n\n``` bash\n$ git --version\n$ npm -v\n```\n\n### Hexo 相关命令\n``` bash\n$ hexo new page\"pageName\"     新建页面\n$ cls                         清屏\n$ hexo clean                  清理项目\n$ hexo g(generate)            生成静态页面至public目录\n$ hexo s(server)              开启预览访问端口\n$ hexo d(deploy)              将.deploy目录部署到GitHub\n$ hexo help                   查看帮助\n$ hexo version                查看Hexo的版本\n```\n\n## 部署\n\n### 安装hexo\n\n``` bash\n$ npm install hexo-cli -g\n```\n\n安装hexo-deployer-git工具\n``` bash\n$ npm install hexo-deployer-git --save\n```\n#### npm install 慢的话\n``` bash\n显示当前的镜像网址\n$ npm get registry \nhttps://registry.npmjs.org/\n使用淘宝的镜像网址\n$ npm config set registry http://registry.npm.taobao.org\n```\n\n### 静态博客搭建\n``` bash\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo s\n```\n浏览器访问：http://localhost:4000/ \n按Ctrl+C停止  \n\n\n### 配置到GitHub\n\n在github上创建仓库，仓库名称为：用户名.github.io\n配置blog\\\\_config.yml中的deploy\n\n``` yml\ndeploy:\n  type: git\n  repo: git@github.com:your_github_user_name/your_github_user_name.github.io.git\n  branch: master\n```\n\n生成 ssh key\n``` bash\n$ ssh-keygen -t rsa -C xxx@qq.com(your_email)\n$ 连按三次Enter\n```\n其中ssh-keygen.exe在.\\Git\\usr\\bin文件夹中  \n根据路径提示找到id_rsa.pub文件，拷贝公钥  \n进入github账户设置，在ssh and GPG keys中新增一个ssh key  \n把刚刚拷贝出来的公钥粘贴到key中，title放空就好  \n\n验证ssh key\n``` bash\n$ ssh -T git@github.com\n```\n\n在本地hexo init生成的文件夹中初始化git仓库\n``` bash\n$ git init\n```\n将本地仓库和远程仓库连接\n``` bash\n$ git remote add origin git@github.com:your_github_user_name/your_github_user_name.github.io.git\n```\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n## 网站部署\n\n``` bash\n$ hexo clean  //清除缓存文件db.json和已生成的静态文件public\n$ hexo g      //生成网站静态文件到默认设置的public文件夹\n$ hexo s      //开启服务器预览网址\n$ hexo d      //部署网站到设定的仓库\n```\n\n\n\n## 主题\n\n### 挑选主题\n* Themes | Hexo https://hexo.io/themes/\n* Themes · hexojs/hexo Wiki https://github.com/hexojs/hexo/wiki/Themes\n\n常用的主题是next主题。\n\n## 添加主题\n复制主题到themes目录下\n``` bash\ncd themes && git clone https://github.com/maochunguang/black-blue(主题地址)\n```\n\n配置blog\\\\_config.yml，修改对应主题目录名\n``` yml\ntheme: 主题名称\n```\n\n重新生成静态页面\n``` bash\nhexo g\n```\n启动本地服务，重新访问：http://localhost:4000/ ，查看新主题的效果\n``` bash\nhexo s\n```\n确认后上传到github，通过 用户名.github.io 访问查看最终效果\n``` bash\nhexo d\n```\n\n## 插入图片\n\n### 设置\n配置blog\\\\_config.yml\n\n``` yml\npost_asset_folder: true\n```\n安装插件\n``` bash\nnpm install hexo-asset-image --save\n```\n\nhtml语法\n``` html\n<div align=center>\n<img alt=\"title\" src = \"path to xxx.png\" width=999 height=999>\n</div>\n```\n\n\n## 代码折叠\n\n目前使用以下脚本  \n<html>\n<head>\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        ``` html\n        <html>\n        <head>\n        <meta charset=\"utf-8\"> \n        <title>title_test</title> \n        <script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n        </script>\n        <script>\n        $(document).ready(function(){\n            $(document).on('click', '.fold_hider', function(){\n                $('>.fold', this.parentNode).slideToggle();\n                $('>:first', this).toggleClass('open');\n            });\n            $(\"div.fold\").css(\"display\",\"none\");\n        });\n        </script>\n        </head>\n        <body>\n        <div>\n            <div class=\"fold_hider\">\n                <div class=\"close hider_title\">点击显示/隐藏代码</div>\n            </div>\n            <div class=\"fold\">\n                要隐藏的部分\n            </div>\n        </div>\n        </body>\n        </html>\n        ```\n    </div>\n</div>\n</body>\n</html>\n\n* 如何配置才能让hexo搭建的博客中的代码实现折叠功能？ - 知乎  \nhttps://www.zhihu.com/question/66271897\n\n\n\n* 如何在Hexo中对文章md文件分类 - 貌似掉线的博客 - CSDN博客  \nhttps://blog.csdn.net/maosidiaoxian/article/details/85220394\n\n\n\n## 绑定域名\n\n### 在域名的解析设置中添加记录\n\n<img src='Hexo：Hello Hexo\\000.png'>\n\n| 参数 | 值 | 说明 |\n| :-----| :--- | :--- |\n| 记录类型 | CNAME | |\n| 主机记录 | @ | 域名前缀 @直接解析主域名\n| 解析路线 | 默认 |  |\n| 记录值 | your_github_user_name.github.io  | |\n| TTL |  10分钟 |  缓存时间 |\n\n\n### 在github添加自定义域名\n\n<img src='Hexo：Hello Hexo\\001.png'>\n\n\n### 配置hexo的_config.yml\n\n``` yml\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://www.yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n\n### 上传CNAME文件\n\n在/hexo/source目录下，新建一个CNAME文件，内容为域名，上传更新\n\n\n## 使用marp添加PPT\n\n### marp\n* Marp: Markdown Presentation Ecosystem  \nhttps://marp.app/\n\n\n在 themes\\yilia\\_config.yml 中添加 PPT 菜单\n``` yml\nmenu:\n  主页: /\n  随笔: /tags/随笔/\n  相册: /photos/\n  PPT: /slides/\n```\n\n在 source\\slides 文件夹下，生成ppt目录\n```\n---\ntitle: slides\n---\n\n<style>\ntable th:first-of-type {\n    width: 1cm;\n}\ntable th:nth-of-type(2) {\n    width: 5cm;\n}\n</style>\n\n\n|NO.|Links|\n|:-:|:-:|\n|1|[test1](https://binjun.xyz/slides/index/test1.html)|\n|2|[test2](https://binjun.xyz/slides/index/test2.html)|\n```\n\n在 source\\slides\\index 文件夹下，放置用于存放ppt图片的test文件夹和对应test.md文件\n\n首先上传ppt图片到github上，使用github作为图床  \n\n然后修改test.md文件中图片位置，利用marp生成对应html  \n``` \n---\nmarp: true\ntheme: base\n---\n![bg](https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/master/slides/index/coreXY/幻灯片1.PNG)\n---\n```\n\n最后将html文件放在source\\slides\\index 文件夹下  \n\n\n\n\n\n\n\n\n\n","source":"_posts/Hexo：Hello Hexo.md","raw":"---\ntitle: Hexo：Hello Hexo\ndate: 2019-04-19 22:30:18\ntags:\n  - hexo\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 准备\n\n### 所需软件\n\n* git: http://git-scm.com/\n* node.js：http://nodejs.org/\n\n查看是否安装成功\n\n``` bash\n$ git --version\n$ npm -v\n```\n\n### Hexo 相关命令\n``` bash\n$ hexo new page\"pageName\"     新建页面\n$ cls                         清屏\n$ hexo clean                  清理项目\n$ hexo g(generate)            生成静态页面至public目录\n$ hexo s(server)              开启预览访问端口\n$ hexo d(deploy)              将.deploy目录部署到GitHub\n$ hexo help                   查看帮助\n$ hexo version                查看Hexo的版本\n```\n\n## 部署\n\n### 安装hexo\n\n``` bash\n$ npm install hexo-cli -g\n```\n\n安装hexo-deployer-git工具\n``` bash\n$ npm install hexo-deployer-git --save\n```\n#### npm install 慢的话\n``` bash\n显示当前的镜像网址\n$ npm get registry \nhttps://registry.npmjs.org/\n使用淘宝的镜像网址\n$ npm config set registry http://registry.npm.taobao.org\n```\n\n### 静态博客搭建\n``` bash\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo s\n```\n浏览器访问：http://localhost:4000/ \n按Ctrl+C停止  \n\n\n### 配置到GitHub\n\n在github上创建仓库，仓库名称为：用户名.github.io\n配置blog\\\\_config.yml中的deploy\n\n``` yml\ndeploy:\n  type: git\n  repo: git@github.com:your_github_user_name/your_github_user_name.github.io.git\n  branch: master\n```\n\n生成 ssh key\n``` bash\n$ ssh-keygen -t rsa -C xxx@qq.com(your_email)\n$ 连按三次Enter\n```\n其中ssh-keygen.exe在.\\Git\\usr\\bin文件夹中  \n根据路径提示找到id_rsa.pub文件，拷贝公钥  \n进入github账户设置，在ssh and GPG keys中新增一个ssh key  \n把刚刚拷贝出来的公钥粘贴到key中，title放空就好  \n\n验证ssh key\n``` bash\n$ ssh -T git@github.com\n```\n\n在本地hexo init生成的文件夹中初始化git仓库\n``` bash\n$ git init\n```\n将本地仓库和远程仓库连接\n``` bash\n$ git remote add origin git@github.com:your_github_user_name/your_github_user_name.github.io.git\n```\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n## 网站部署\n\n``` bash\n$ hexo clean  //清除缓存文件db.json和已生成的静态文件public\n$ hexo g      //生成网站静态文件到默认设置的public文件夹\n$ hexo s      //开启服务器预览网址\n$ hexo d      //部署网站到设定的仓库\n```\n\n\n\n## 主题\n\n### 挑选主题\n* Themes | Hexo https://hexo.io/themes/\n* Themes · hexojs/hexo Wiki https://github.com/hexojs/hexo/wiki/Themes\n\n常用的主题是next主题。\n\n## 添加主题\n复制主题到themes目录下\n``` bash\ncd themes && git clone https://github.com/maochunguang/black-blue(主题地址)\n```\n\n配置blog\\\\_config.yml，修改对应主题目录名\n``` yml\ntheme: 主题名称\n```\n\n重新生成静态页面\n``` bash\nhexo g\n```\n启动本地服务，重新访问：http://localhost:4000/ ，查看新主题的效果\n``` bash\nhexo s\n```\n确认后上传到github，通过 用户名.github.io 访问查看最终效果\n``` bash\nhexo d\n```\n\n## 插入图片\n\n### 设置\n配置blog\\\\_config.yml\n\n``` yml\npost_asset_folder: true\n```\n安装插件\n``` bash\nnpm install hexo-asset-image --save\n```\n\nhtml语法\n``` html\n<div align=center>\n<img alt=\"title\" src = \"path to xxx.png\" width=999 height=999>\n</div>\n```\n\n\n## 代码折叠\n\n目前使用以下脚本  \n<html>\n<head>\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        ``` html\n        <html>\n        <head>\n        <meta charset=\"utf-8\"> \n        <title>title_test</title> \n        <script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n        </script>\n        <script>\n        $(document).ready(function(){\n            $(document).on('click', '.fold_hider', function(){\n                $('>.fold', this.parentNode).slideToggle();\n                $('>:first', this).toggleClass('open');\n            });\n            $(\"div.fold\").css(\"display\",\"none\");\n        });\n        </script>\n        </head>\n        <body>\n        <div>\n            <div class=\"fold_hider\">\n                <div class=\"close hider_title\">点击显示/隐藏代码</div>\n            </div>\n            <div class=\"fold\">\n                要隐藏的部分\n            </div>\n        </div>\n        </body>\n        </html>\n        ```\n    </div>\n</div>\n</body>\n</html>\n\n* 如何配置才能让hexo搭建的博客中的代码实现折叠功能？ - 知乎  \nhttps://www.zhihu.com/question/66271897\n\n\n\n* 如何在Hexo中对文章md文件分类 - 貌似掉线的博客 - CSDN博客  \nhttps://blog.csdn.net/maosidiaoxian/article/details/85220394\n\n\n\n## 绑定域名\n\n### 在域名的解析设置中添加记录\n\n<img src='Hexo：Hello Hexo\\000.png'>\n\n| 参数 | 值 | 说明 |\n| :-----| :--- | :--- |\n| 记录类型 | CNAME | |\n| 主机记录 | @ | 域名前缀 @直接解析主域名\n| 解析路线 | 默认 |  |\n| 记录值 | your_github_user_name.github.io  | |\n| TTL |  10分钟 |  缓存时间 |\n\n\n### 在github添加自定义域名\n\n<img src='Hexo：Hello Hexo\\001.png'>\n\n\n### 配置hexo的_config.yml\n\n``` yml\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://www.yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n\n### 上传CNAME文件\n\n在/hexo/source目录下，新建一个CNAME文件，内容为域名，上传更新\n\n\n## 使用marp添加PPT\n\n### marp\n* Marp: Markdown Presentation Ecosystem  \nhttps://marp.app/\n\n\n在 themes\\yilia\\_config.yml 中添加 PPT 菜单\n``` yml\nmenu:\n  主页: /\n  随笔: /tags/随笔/\n  相册: /photos/\n  PPT: /slides/\n```\n\n在 source\\slides 文件夹下，生成ppt目录\n```\n---\ntitle: slides\n---\n\n<style>\ntable th:first-of-type {\n    width: 1cm;\n}\ntable th:nth-of-type(2) {\n    width: 5cm;\n}\n</style>\n\n\n|NO.|Links|\n|:-:|:-:|\n|1|[test1](https://binjun.xyz/slides/index/test1.html)|\n|2|[test2](https://binjun.xyz/slides/index/test2.html)|\n```\n\n在 source\\slides\\index 文件夹下，放置用于存放ppt图片的test文件夹和对应test.md文件\n\n首先上传ppt图片到github上，使用github作为图床  \n\n然后修改test.md文件中图片位置，利用marp生成对应html  \n``` \n---\nmarp: true\ntheme: base\n---\n![bg](https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/master/slides/index/coreXY/幻灯片1.PNG)\n---\n```\n\n最后将html文件放在source\\slides\\index 文件夹下  \n\n\n\n\n\n\n\n\n\n","slug":"Hexo：Hello Hexo","published":1,"updated":"2020-02-25T13:48:33.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506o00084cvj1rm382hw","content":"<p><strong> Hexo：Hello Hexo </strong> <excerpt in index | 首页摘要><br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"所需软件\"><a href=\"#所需软件\" class=\"headerlink\" title=\"所需软件\"></a>所需软件</h3><ul>\n<li>git: <a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/</a></li>\n<li>node.js：<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/</a></li>\n</ul>\n<p>查看是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br><span class=\"line\">$ npm -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo-相关命令\"><a href=\"#Hexo-相关命令\" class=\"headerlink\" title=\"Hexo 相关命令\"></a>Hexo 相关命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page<span class=\"string\">\"pageName\"</span>     新建页面</span><br><span class=\"line\">$ cls                         清屏</span><br><span class=\"line\">$ hexo clean                  清理项目</span><br><span class=\"line\">$ hexo g(generate)            生成静态页面至public目录</span><br><span class=\"line\">$ hexo s(server)              开启预览访问端口</span><br><span class=\"line\">$ hexo d(deploy)              将.deploy目录部署到GitHub</span><br><span class=\"line\">$ hexo <span class=\"built_in\">help</span>                   查看帮助</span><br><span class=\"line\">$ hexo version                查看Hexo的版本</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>安装hexo-deployer-git工具<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"npm-install-慢的话\"><a href=\"#npm-install-慢的话\" class=\"headerlink\" title=\"npm install 慢的话\"></a>npm install 慢的话</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示当前的镜像网址</span><br><span class=\"line\">$ npm get registry </span><br><span class=\"line\">https://registry.npmjs.org/</span><br><span class=\"line\">使用淘宝的镜像网址</span><br><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态博客搭建\"><a href=\"#静态博客搭建\" class=\"headerlink\" title=\"静态博客搭建\"></a>静态博客搭建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>浏览器访问：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br>按Ctrl+C停止  </p>\n<h3 id=\"配置到GitHub\"><a href=\"#配置到GitHub\" class=\"headerlink\" title=\"配置到GitHub\"></a>配置到GitHub</h3><p>在github上创建仓库，仓库名称为：用户名.github.io<br>配置blog\\_config.yml中的deploy</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@github.com:your_github_user_name/your_github_user_name.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>生成 ssh key<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C xxx@qq.com(your_email)</span><br><span class=\"line\">$ 连按三次Enter</span><br></pre></td></tr></table></figure></p>\n<p>其中ssh-keygen.exe在.\\Git\\usr\\bin文件夹中<br>根据路径提示找到id_rsa.pub文件，拷贝公钥<br>进入github账户设置，在ssh and GPG keys中新增一个ssh key<br>把刚刚拷贝出来的公钥粘贴到key中，title放空就好  </p>\n<p>验证ssh key<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>在本地hexo init生成的文件夹中初始化git仓库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure></p>\n<p>将本地仓库和远程仓库连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:your_github_user_name/your_github_user_name.github.io.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h2 id=\"网站部署\"><a href=\"#网站部署\" class=\"headerlink\" title=\"网站部署\"></a>网站部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean  //清除缓存文件db.json和已生成的静态文件public</span><br><span class=\"line\">$ hexo g      //生成网站静态文件到默认设置的public文件夹</span><br><span class=\"line\">$ hexo s      //开启服务器预览网址</span><br><span class=\"line\">$ hexo d      //部署网站到设定的仓库</span><br></pre></td></tr></table></figure>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><h3 id=\"挑选主题\"><a href=\"#挑选主题\" class=\"headerlink\" title=\"挑选主题\"></a>挑选主题</h3><ul>\n<li>Themes | Hexo <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></li>\n<li>Themes · hexojs/hexo Wiki <a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo/wiki/Themes</a></li>\n</ul>\n<p>常用的主题是next主题。</p>\n<h2 id=\"添加主题\"><a href=\"#添加主题\" class=\"headerlink\" title=\"添加主题\"></a>添加主题</h2><p>复制主题到themes目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes &amp;&amp; git <span class=\"built_in\">clone</span> https://github.com/maochunguang/black-blue(主题地址)</span><br></pre></td></tr></table></figure></p>\n<p>配置blog\\_config.yml，修改对应主题目录名<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">主题名称</span></span><br></pre></td></tr></table></figure></p>\n<p>重新生成静态页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，重新访问：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，查看新主题的效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p>确认后上传到github，通过 用户名.github.io 访问查看最终效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p>配置blog\\_config.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>安装插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></p>\n<p>html语法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"path to xxx.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">999</span> <span class=\"attr\">height</span>=<span class=\"string\">999</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h2><p>目前使用以下脚本  </p>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>title_test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">$(document).ready(function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    $(document).on('click', '.fold_hider', function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $('&gt;.fold', this.parentNode).slideToggle();</span></span><br><span class=\"line\"><span class=\"undefined\">        $('&gt;:first', this).toggleClass('open');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    $(\"div.fold\").css(\"display\",\"none\");</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fold_hider\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close hider_title\"</span>&gt;</span>点击显示/隐藏代码<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fold\"</span>&gt;</span></span><br><span class=\"line\">        要隐藏的部分</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n    </div>\n</div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>\n\n<ul>\n<li>如何配置才能让hexo搭建的博客中的代码实现折叠功能？ - 知乎<br><a href=\"https://www.zhihu.com/question/66271897\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/66271897</a></li>\n</ul>\n<ul>\n<li>如何在Hexo中对文章md文件分类 - 貌似掉线的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/maosidiaoxian/article/details/85220394\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/maosidiaoxian/article/details/85220394</a></li>\n</ul>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><h3 id=\"在域名的解析设置中添加记录\"><a href=\"#在域名的解析设置中添加记录\" class=\"headerlink\" title=\"在域名的解析设置中添加记录\"></a>在域名的解析设置中添加记录</h3><p><img src=\"/2019/04/19/Hexo：Hello Hexo/000.png\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">记录类型</td>\n<td style=\"text-align:left\">CNAME</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">主机记录</td>\n<td style=\"text-align:left\">@</td>\n<td style=\"text-align:left\">域名前缀 @直接解析主域名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析路线</td>\n<td style=\"text-align:left\">默认</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">记录值</td>\n<td style=\"text-align:left\">your_github_user_name.github.io</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TTL</td>\n<td style=\"text-align:left\">10分钟</td>\n<td style=\"text-align:left\">缓存时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"在github添加自定义域名\"><a href=\"#在github添加自定义域名\" class=\"headerlink\" title=\"在github添加自定义域名\"></a>在github添加自定义域名</h3><p><img src=\"/2019/04/19/Hexo：Hello Hexo/001.png\"></p>\n<h3 id=\"配置hexo的-config-yml\"><a href=\"#配置hexo的-config-yml\" class=\"headerlink\" title=\"配置hexo的_config.yml\"></a>配置hexo的_config.yml</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">http://www.yoursite.com</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"上传CNAME文件\"><a href=\"#上传CNAME文件\" class=\"headerlink\" title=\"上传CNAME文件\"></a>上传CNAME文件</h3><p>在/hexo/source目录下，新建一个CNAME文件，内容为域名，上传更新</p>\n<h2 id=\"使用marp添加PPT\"><a href=\"#使用marp添加PPT\" class=\"headerlink\" title=\"使用marp添加PPT\"></a>使用marp添加PPT</h2><h3 id=\"marp\"><a href=\"#marp\" class=\"headerlink\" title=\"marp\"></a>marp</h3><ul>\n<li>Marp: Markdown Presentation Ecosystem<br><a href=\"https://marp.app/\" target=\"_blank\" rel=\"noopener\">https://marp.app/</a></li>\n</ul>\n<p>在 themes\\yilia_config.yml 中添加 PPT 菜单<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">随笔:</span> <span class=\"string\">/tags/随笔/</span></span><br><span class=\"line\">  <span class=\"string\">相册:</span> <span class=\"string\">/photos/</span></span><br><span class=\"line\"><span class=\"attr\">  PPT:</span> <span class=\"string\">/slides/</span></span><br></pre></td></tr></table></figure></p>\n<p>在 source\\slides 文件夹下，生成ppt目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: slides</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">table th:first-of-type &#123;</span><br><span class=\"line\">    width: 1cm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">table th:nth-of-type(2) &#123;</span><br><span class=\"line\">    width: 5cm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">|NO.|Links|</span><br><span class=\"line\">|:-:|:-:|</span><br><span class=\"line\">|1|[test1](https://binjun.xyz/slides/index/test1.html)|</span><br><span class=\"line\">|2|[test2](https://binjun.xyz/slides/index/test2.html)|</span><br></pre></td></tr></table></figure></p>\n<p>在 source\\slides\\index 文件夹下，放置用于存放ppt图片的test文件夹和对应test.md文件</p>\n<p>首先上传ppt图片到github上，使用github作为图床  </p>\n<p>然后修改test.md文件中图片位置，利用marp生成对应html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">marp: true</span><br><span class=\"line\">theme: base</span><br><span class=\"line\">---</span><br><span class=\"line\">![bg](https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/master/slides/index/coreXY/幻灯片1.PNG)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>最后将html文件放在source\\slides\\index 文件夹下  </p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> Hexo：Hello Hexo </strong> <excerpt in index | 首页摘要><br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"所需软件\"><a href=\"#所需软件\" class=\"headerlink\" title=\"所需软件\"></a>所需软件</h3><ul>\n<li>git: <a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/</a></li>\n<li>node.js：<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/</a></li>\n</ul>\n<p>查看是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br><span class=\"line\">$ npm -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo-相关命令\"><a href=\"#Hexo-相关命令\" class=\"headerlink\" title=\"Hexo 相关命令\"></a>Hexo 相关命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page<span class=\"string\">\"pageName\"</span>     新建页面</span><br><span class=\"line\">$ cls                         清屏</span><br><span class=\"line\">$ hexo clean                  清理项目</span><br><span class=\"line\">$ hexo g(generate)            生成静态页面至public目录</span><br><span class=\"line\">$ hexo s(server)              开启预览访问端口</span><br><span class=\"line\">$ hexo d(deploy)              将.deploy目录部署到GitHub</span><br><span class=\"line\">$ hexo <span class=\"built_in\">help</span>                   查看帮助</span><br><span class=\"line\">$ hexo version                查看Hexo的版本</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>安装hexo-deployer-git工具<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"npm-install-慢的话\"><a href=\"#npm-install-慢的话\" class=\"headerlink\" title=\"npm install 慢的话\"></a>npm install 慢的话</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示当前的镜像网址</span><br><span class=\"line\">$ npm get registry </span><br><span class=\"line\">https://registry.npmjs.org/</span><br><span class=\"line\">使用淘宝的镜像网址</span><br><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态博客搭建\"><a href=\"#静态博客搭建\" class=\"headerlink\" title=\"静态博客搭建\"></a>静态博客搭建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>浏览器访问：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br>按Ctrl+C停止  </p>\n<h3 id=\"配置到GitHub\"><a href=\"#配置到GitHub\" class=\"headerlink\" title=\"配置到GitHub\"></a>配置到GitHub</h3><p>在github上创建仓库，仓库名称为：用户名.github.io<br>配置blog\\_config.yml中的deploy</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@github.com:your_github_user_name/your_github_user_name.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>生成 ssh key<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C xxx@qq.com(your_email)</span><br><span class=\"line\">$ 连按三次Enter</span><br></pre></td></tr></table></figure></p>\n<p>其中ssh-keygen.exe在.\\Git\\usr\\bin文件夹中<br>根据路径提示找到id_rsa.pub文件，拷贝公钥<br>进入github账户设置，在ssh and GPG keys中新增一个ssh key<br>把刚刚拷贝出来的公钥粘贴到key中，title放空就好  </p>\n<p>验证ssh key<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>在本地hexo init生成的文件夹中初始化git仓库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure></p>\n<p>将本地仓库和远程仓库连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:your_github_user_name/your_github_user_name.github.io.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h2 id=\"网站部署\"><a href=\"#网站部署\" class=\"headerlink\" title=\"网站部署\"></a>网站部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean  //清除缓存文件db.json和已生成的静态文件public</span><br><span class=\"line\">$ hexo g      //生成网站静态文件到默认设置的public文件夹</span><br><span class=\"line\">$ hexo s      //开启服务器预览网址</span><br><span class=\"line\">$ hexo d      //部署网站到设定的仓库</span><br></pre></td></tr></table></figure>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><h3 id=\"挑选主题\"><a href=\"#挑选主题\" class=\"headerlink\" title=\"挑选主题\"></a>挑选主题</h3><ul>\n<li>Themes | Hexo <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></li>\n<li>Themes · hexojs/hexo Wiki <a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo/wiki/Themes</a></li>\n</ul>\n<p>常用的主题是next主题。</p>\n<h2 id=\"添加主题\"><a href=\"#添加主题\" class=\"headerlink\" title=\"添加主题\"></a>添加主题</h2><p>复制主题到themes目录下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes &amp;&amp; git <span class=\"built_in\">clone</span> https://github.com/maochunguang/black-blue(主题地址)</span><br></pre></td></tr></table></figure></p>\n<p>配置blog\\_config.yml，修改对应主题目录名<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">主题名称</span></span><br></pre></td></tr></table></figure></p>\n<p>重新生成静态页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，重新访问：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，查看新主题的效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p>确认后上传到github，通过 用户名.github.io 访问查看最终效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p>配置blog\\_config.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>安装插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></p>\n<p>html语法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"path to xxx.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">999</span> <span class=\"attr\">height</span>=<span class=\"string\">999</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h2><p>目前使用以下脚本  </p>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>title_test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">$(document).ready(function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    $(document).on('click', '.fold_hider', function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $('&gt;.fold', this.parentNode).slideToggle();</span></span><br><span class=\"line\"><span class=\"undefined\">        $('&gt;:first', this).toggleClass('open');</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    $(\"div.fold\").css(\"display\",\"none\");</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fold_hider\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close hider_title\"</span>&gt;</span>点击显示/隐藏代码<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fold\"</span>&gt;</span></span><br><span class=\"line\">        要隐藏的部分</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n    </div>\n</div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>\n\n<ul>\n<li>如何配置才能让hexo搭建的博客中的代码实现折叠功能？ - 知乎<br><a href=\"https://www.zhihu.com/question/66271897\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/66271897</a></li>\n</ul>\n<ul>\n<li>如何在Hexo中对文章md文件分类 - 貌似掉线的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/maosidiaoxian/article/details/85220394\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/maosidiaoxian/article/details/85220394</a></li>\n</ul>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><h3 id=\"在域名的解析设置中添加记录\"><a href=\"#在域名的解析设置中添加记录\" class=\"headerlink\" title=\"在域名的解析设置中添加记录\"></a>在域名的解析设置中添加记录</h3><p><img src=\"/2019/04/19/Hexo：Hello Hexo/000.png\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">记录类型</td>\n<td style=\"text-align:left\">CNAME</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">主机记录</td>\n<td style=\"text-align:left\">@</td>\n<td style=\"text-align:left\">域名前缀 @直接解析主域名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析路线</td>\n<td style=\"text-align:left\">默认</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">记录值</td>\n<td style=\"text-align:left\">your_github_user_name.github.io</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TTL</td>\n<td style=\"text-align:left\">10分钟</td>\n<td style=\"text-align:left\">缓存时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"在github添加自定义域名\"><a href=\"#在github添加自定义域名\" class=\"headerlink\" title=\"在github添加自定义域名\"></a>在github添加自定义域名</h3><p><img src=\"/2019/04/19/Hexo：Hello Hexo/001.png\"></p>\n<h3 id=\"配置hexo的-config-yml\"><a href=\"#配置hexo的-config-yml\" class=\"headerlink\" title=\"配置hexo的_config.yml\"></a>配置hexo的_config.yml</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">http://www.yoursite.com</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"上传CNAME文件\"><a href=\"#上传CNAME文件\" class=\"headerlink\" title=\"上传CNAME文件\"></a>上传CNAME文件</h3><p>在/hexo/source目录下，新建一个CNAME文件，内容为域名，上传更新</p>\n<h2 id=\"使用marp添加PPT\"><a href=\"#使用marp添加PPT\" class=\"headerlink\" title=\"使用marp添加PPT\"></a>使用marp添加PPT</h2><h3 id=\"marp\"><a href=\"#marp\" class=\"headerlink\" title=\"marp\"></a>marp</h3><ul>\n<li>Marp: Markdown Presentation Ecosystem<br><a href=\"https://marp.app/\" target=\"_blank\" rel=\"noopener\">https://marp.app/</a></li>\n</ul>\n<p>在 themes\\yilia_config.yml 中添加 PPT 菜单<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">随笔:</span> <span class=\"string\">/tags/随笔/</span></span><br><span class=\"line\">  <span class=\"string\">相册:</span> <span class=\"string\">/photos/</span></span><br><span class=\"line\"><span class=\"attr\">  PPT:</span> <span class=\"string\">/slides/</span></span><br></pre></td></tr></table></figure></p>\n<p>在 source\\slides 文件夹下，生成ppt目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: slides</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">table th:first-of-type &#123;</span><br><span class=\"line\">    width: 1cm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">table th:nth-of-type(2) &#123;</span><br><span class=\"line\">    width: 5cm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">|NO.|Links|</span><br><span class=\"line\">|:-:|:-:|</span><br><span class=\"line\">|1|[test1](https://binjun.xyz/slides/index/test1.html)|</span><br><span class=\"line\">|2|[test2](https://binjun.xyz/slides/index/test2.html)|</span><br></pre></td></tr></table></figure></p>\n<p>在 source\\slides\\index 文件夹下，放置用于存放ppt图片的test文件夹和对应test.md文件</p>\n<p>首先上传ppt图片到github上，使用github作为图床  </p>\n<p>然后修改test.md文件中图片位置，利用marp生成对应html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">marp: true</span><br><span class=\"line\">theme: base</span><br><span class=\"line\">---</span><br><span class=\"line\">![bg](https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/master/slides/index/coreXY/幻灯片1.PNG)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>最后将html文件放在source\\slides\\index 文件夹下  </p>\n</the>"},{"title":"Hexo：yilia主题下使用LaTex添加公式","date":"2019-06-22T14:30:18.000Z","_content":"\n## 配置文件中开启mathjax\n\n修改/themes/yilia主题目录下的_config.yml文件,添加支持Mathjax\n``` yml\n# 数学公式\nmathjax: true\n```\n\n## 安装Kramed\n更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出。\n``` bash\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n打开/node_modules/hexo-renderer-kramed/lib/renderer.js，进行如下更改：\n``` js\n// Change inline math rule\nfunction formatText(text) {\n    // Fit kramed's rule: $$ + \\1 + $$\n    // return text.replace(/`\\$(.*?)\\$`/g, '$$$$$1$$$$');\n    return text;\n}\n```\n### 停止使用 hexo-math，并安装mathjax包\n``` bash\nnpm uninstall hexo-math --save\nnpm install hexo-renderer-mathjax --save\n```\n打开/node_modules/hexo-renderer-mathjax/mathjax.html,更新Mathjax的配置文件\n``` html\n<!-- <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script> -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n```\n\n### 更改默认转义规则\nLaTeX与markdown语法有语义冲突，需要修改\\node_modules\\kramed\\lib\\rules\\inline.js中的默认规则\n``` js\nvar inline = {\n    // escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\n    escape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\n    // em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n    em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n### 公式输入相关\n\nMathpix Snip工具：只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  \n* Mathpix Snip  \nhttps://mathpix.com/\n\n基本语法\n* 03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客  \nhttps://blog.csdn.net/ds19991999/article/details/81275580\n\n\n### VScode下markdown公式预览\n安装markwown math扩展插件，重启，预览时使用快捷键 ctrl + shift + p","source":"_posts/Hexo：yilia主题下使用LaTex添加公式.md","raw":"---\ntitle: Hexo：yilia主题下使用LaTex添加公式\ndate: 2019-06-22 22:30:18\ntags:\n  - hexo\n---\n\n## 配置文件中开启mathjax\n\n修改/themes/yilia主题目录下的_config.yml文件,添加支持Mathjax\n``` yml\n# 数学公式\nmathjax: true\n```\n\n## 安装Kramed\n更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出。\n``` bash\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n打开/node_modules/hexo-renderer-kramed/lib/renderer.js，进行如下更改：\n``` js\n// Change inline math rule\nfunction formatText(text) {\n    // Fit kramed's rule: $$ + \\1 + $$\n    // return text.replace(/`\\$(.*?)\\$`/g, '$$$$$1$$$$');\n    return text;\n}\n```\n### 停止使用 hexo-math，并安装mathjax包\n``` bash\nnpm uninstall hexo-math --save\nnpm install hexo-renderer-mathjax --save\n```\n打开/node_modules/hexo-renderer-mathjax/mathjax.html,更新Mathjax的配置文件\n``` html\n<!-- <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script> -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n```\n\n### 更改默认转义规则\nLaTeX与markdown语法有语义冲突，需要修改\\node_modules\\kramed\\lib\\rules\\inline.js中的默认规则\n``` js\nvar inline = {\n    // escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\n    escape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\n    // em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n    em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n### 公式输入相关\n\nMathpix Snip工具：只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  \n* Mathpix Snip  \nhttps://mathpix.com/\n\n基本语法\n* 03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客  \nhttps://blog.csdn.net/ds19991999/article/details/81275580\n\n\n### VScode下markdown公式预览\n安装markwown math扩展插件，重启，预览时使用快捷键 ctrl + shift + p","slug":"Hexo：yilia主题下使用LaTex添加公式","published":1,"updated":"2020-01-05T19:13:24.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506r00094cvjdw2kou26","content":"<h2 id=\"配置文件中开启mathjax\"><a href=\"#配置文件中开启mathjax\" class=\"headerlink\" title=\"配置文件中开启mathjax\"></a>配置文件中开启mathjax</h2><p>修改/themes/yilia主题目录下的_config.yml文件,添加支持Mathjax<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数学公式</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Kramed\"><a href=\"#安装Kramed\" class=\"headerlink\" title=\"安装Kramed\"></a>安装Kramed</h2><p>更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p>\n<p>打开/node_modules/hexo-renderer-kramed/lib/renderer.js，进行如下更改：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Change inline math rule</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatText</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Fit kramed's rule: $$ + \\1 + $$</span></span><br><span class=\"line\">    <span class=\"comment\">// return text.replace(/`\\$(.*?)\\$`/g, '$$$$$1$$$$');</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"停止使用-hexo-math，并安装mathjax包\"><a href=\"#停止使用-hexo-math，并安装mathjax包\" class=\"headerlink\" title=\"停止使用 hexo-math，并安装mathjax包\"></a>停止使用 hexo-math，并安装mathjax包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-math --save</span><br><span class=\"line\">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>\n<p>打开/node_modules/hexo-renderer-mathjax/mathjax.html,更新Mathjax的配置文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更改默认转义规则\"><a href=\"#更改默认转义规则\" class=\"headerlink\" title=\"更改默认转义规则\"></a>更改默认转义规则</h3><p>LaTeX与markdown语法有语义冲突，需要修改\\node_modules\\kramed\\lib\\rules\\inline.js中的默认规则<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inline = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,</span></span><br><span class=\"line\">    <span class=\"built_in\">escape</span>: <span class=\"regexp\">/^\\\\([`*\\[\\]()# +\\-.!_&gt;])/</span>,</span><br><span class=\"line\">    <span class=\"comment\">// em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</span></span><br><span class=\"line\">    em: <span class=\"regexp\">/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</span>,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"公式输入相关\"><a href=\"#公式输入相关\" class=\"headerlink\" title=\"公式输入相关\"></a>公式输入相关</h3><p>Mathpix Snip工具：只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  </p>\n<ul>\n<li>Mathpix Snip<br><a href=\"https://mathpix.com/\" target=\"_blank\" rel=\"noopener\">https://mathpix.com/</a></li>\n</ul>\n<p>基本语法</p>\n<ul>\n<li>03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/ds19991999/article/details/81275580\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ds19991999/article/details/81275580</a></li>\n</ul>\n<h3 id=\"VScode下markdown公式预览\"><a href=\"#VScode下markdown公式预览\" class=\"headerlink\" title=\"VScode下markdown公式预览\"></a>VScode下markdown公式预览</h3><p>安装markwown math扩展插件，重启，预览时使用快捷键 ctrl + shift + p</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"配置文件中开启mathjax\"><a href=\"#配置文件中开启mathjax\" class=\"headerlink\" title=\"配置文件中开启mathjax\"></a>配置文件中开启mathjax</h2><p>修改/themes/yilia主题目录下的_config.yml文件,添加支持Mathjax<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数学公式</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Kramed\"><a href=\"#安装Kramed\" class=\"headerlink\" title=\"安装Kramed\"></a>安装Kramed</h2><p>更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p>\n<p>打开/node_modules/hexo-renderer-kramed/lib/renderer.js，进行如下更改：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Change inline math rule</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatText</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Fit kramed's rule: $$ + \\1 + $$</span></span><br><span class=\"line\">    <span class=\"comment\">// return text.replace(/`\\$(.*?)\\$`/g, '$$$$$1$$$$');</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"停止使用-hexo-math，并安装mathjax包\"><a href=\"#停止使用-hexo-math，并安装mathjax包\" class=\"headerlink\" title=\"停止使用 hexo-math，并安装mathjax包\"></a>停止使用 hexo-math，并安装mathjax包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-math --save</span><br><span class=\"line\">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>\n<p>打开/node_modules/hexo-renderer-mathjax/mathjax.html,更新Mathjax的配置文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更改默认转义规则\"><a href=\"#更改默认转义规则\" class=\"headerlink\" title=\"更改默认转义规则\"></a>更改默认转义规则</h3><p>LaTeX与markdown语法有语义冲突，需要修改\\node_modules\\kramed\\lib\\rules\\inline.js中的默认规则<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inline = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,</span></span><br><span class=\"line\">    <span class=\"built_in\">escape</span>: <span class=\"regexp\">/^\\\\([`*\\[\\]()# +\\-.!_&gt;])/</span>,</span><br><span class=\"line\">    <span class=\"comment\">// em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</span></span><br><span class=\"line\">    em: <span class=\"regexp\">/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</span>,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"公式输入相关\"><a href=\"#公式输入相关\" class=\"headerlink\" title=\"公式输入相关\"></a>公式输入相关</h3><p>Mathpix Snip工具：只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  </p>\n<ul>\n<li>Mathpix Snip<br><a href=\"https://mathpix.com/\" target=\"_blank\" rel=\"noopener\">https://mathpix.com/</a></li>\n</ul>\n<p>基本语法</p>\n<ul>\n<li>03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/ds19991999/article/details/81275580\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ds19991999/article/details/81275580</a></li>\n</ul>\n<h3 id=\"VScode下markdown公式预览\"><a href=\"#VScode下markdown公式预览\" class=\"headerlink\" title=\"VScode下markdown公式预览\"></a>VScode下markdown公式预览</h3><p>安装markwown math扩展插件，重启，预览时使用快捷键 ctrl + shift + p</p>\n"},{"title":"Hexo：yilia主题下添加Subnav导航图标","date":"2019-07-09T06:37:29.000Z","_content":"\n\n## 准备素材\n\n搜索想要使用的图标，下载png格式文件\n* 图标下载，ICON(SVG/PNG/ICO/ICNS)图标搜索下载 - Easyicon  \nhttps://www.easyicon.net/\n* Font Awesome  \nhttps://fontawesome.com/\n\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/00.png\">\n</div>\n\n拷贝xxx.github.io\\themes\\yilia\\source-src\\css\\fonts下的iconfont.svg文件到桌面  \n\n使用百度字体平台，制作图标  \n* 百度字体平台  \nhttp://fontstore.baidu.com/store#!/\n\n进入“FontEdior”并“新建”新项目，点击“导入”选择“导入svg”，将iconfont.svg文件导入进来。  \n\n导入完成后，会出现yilia自带的图标文字。\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/01.png\">\n</div>\n\n再次点击“导入”选择“导入图片”，导入下载好的png格式图标。\n\n对图片大小和位置进行调整，保存并退出。\n\n选中编辑好的图标，点击“字形信息”，输入Unicode和名字，并记下来之后会用到。\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/02.png\">\n</div>\n\n点击“保存项目”，下载fonteditor.zip文件，制作完成。\n\n## 配置Hexo\n\n解压下载下来的fonteditor.zip文件，将.eot，.svg，.ttf，.woff四个文件拷贝到xxx.github.io\\themes\\yilia\\source-src\\css\\fonts文件夹下，重命名并替换原文件\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/03.png\">\n</div>\n\n编辑xxx.github.io\\themes\\yilia\\source-src\\css目录下的font.scss和social.scss文件。\n\n在font.scss中，直接添加.icon-{your App}:before{ content: \"{your unicode}\"}。 \n``` scss\n.icon-thingiverse:before { content: \"\\e878\"; }\n```\n\n在social.scss中，也很简单，添加颜色即可。\n\n``` scss\n        a.thingiverse {\n            background: #086ef6;\n            border:1px solid #086ef6;\n            &:hover {\n                border:1px solid #086ef6;\n            }\n        }\n```\n\n在xxx.github.io\\themes\\yilia目录下，运行\n\n``` bash\nxxx.github.io\\themes\\yilia>npm install\n>npm run dev\n>npm run dist\n```\n\n回到博客根目录\n``` bash\nhexo g \nhexo s\n```\n完成。\n\n## 问题记录\n### 1. npm ERR! Unexpected end of JSON input while parsing near    \n\n清一下缓存。\n``` bash\nnpm cache clean --force\n```\n\n### 2. npm ERR! node-sass\n\n先卸载，再重装，或者重建。\n``` bash\nnpm uninstall node-sass\nnpm install node-sass\nnpm rebuild node-sass\n```\n\n## 参考博客\n\n* Hexo yilia 主题一揽子使用方案 - YunShell - CSDN博客   \nhttps://blog.csdn.net/lynnbest/article/details/79845944\n\n* 【Hexo】yilia主题 添加 Subnav 社交图标 CSDN STEAM PSN等等 - csdn_inside的博客 - CSDN博客  \nhttps://blog.csdn.net/csdn_inside/article/details/89159803\n\n","source":"_posts/Hexo：yilia主题下添加Subnav导航图标.md","raw":"---\ntitle: Hexo：yilia主题下添加Subnav导航图标\ndate: 2019-07-09 14:37:29\ntags:\n  - hexo\n---\n\n\n## 准备素材\n\n搜索想要使用的图标，下载png格式文件\n* 图标下载，ICON(SVG/PNG/ICO/ICNS)图标搜索下载 - Easyicon  \nhttps://www.easyicon.net/\n* Font Awesome  \nhttps://fontawesome.com/\n\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/00.png\">\n</div>\n\n拷贝xxx.github.io\\themes\\yilia\\source-src\\css\\fonts下的iconfont.svg文件到桌面  \n\n使用百度字体平台，制作图标  \n* 百度字体平台  \nhttp://fontstore.baidu.com/store#!/\n\n进入“FontEdior”并“新建”新项目，点击“导入”选择“导入svg”，将iconfont.svg文件导入进来。  \n\n导入完成后，会出现yilia自带的图标文字。\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/01.png\">\n</div>\n\n再次点击“导入”选择“导入图片”，导入下载好的png格式图标。\n\n对图片大小和位置进行调整，保存并退出。\n\n选中编辑好的图标，点击“字形信息”，输入Unicode和名字，并记下来之后会用到。\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/02.png\">\n</div>\n\n点击“保存项目”，下载fonteditor.zip文件，制作完成。\n\n## 配置Hexo\n\n解压下载下来的fonteditor.zip文件，将.eot，.svg，.ttf，.woff四个文件拷贝到xxx.github.io\\themes\\yilia\\source-src\\css\\fonts文件夹下，重命名并替换原文件\n<div align=center>\n<img src = \"Hexo：yilia主题下添加Subnav导航图标/03.png\">\n</div>\n\n编辑xxx.github.io\\themes\\yilia\\source-src\\css目录下的font.scss和social.scss文件。\n\n在font.scss中，直接添加.icon-{your App}:before{ content: \"{your unicode}\"}。 \n``` scss\n.icon-thingiverse:before { content: \"\\e878\"; }\n```\n\n在social.scss中，也很简单，添加颜色即可。\n\n``` scss\n        a.thingiverse {\n            background: #086ef6;\n            border:1px solid #086ef6;\n            &:hover {\n                border:1px solid #086ef6;\n            }\n        }\n```\n\n在xxx.github.io\\themes\\yilia目录下，运行\n\n``` bash\nxxx.github.io\\themes\\yilia>npm install\n>npm run dev\n>npm run dist\n```\n\n回到博客根目录\n``` bash\nhexo g \nhexo s\n```\n完成。\n\n## 问题记录\n### 1. npm ERR! Unexpected end of JSON input while parsing near    \n\n清一下缓存。\n``` bash\nnpm cache clean --force\n```\n\n### 2. npm ERR! node-sass\n\n先卸载，再重装，或者重建。\n``` bash\nnpm uninstall node-sass\nnpm install node-sass\nnpm rebuild node-sass\n```\n\n## 参考博客\n\n* Hexo yilia 主题一揽子使用方案 - YunShell - CSDN博客   \nhttps://blog.csdn.net/lynnbest/article/details/79845944\n\n* 【Hexo】yilia主题 添加 Subnav 社交图标 CSDN STEAM PSN等等 - csdn_inside的博客 - CSDN博客  \nhttps://blog.csdn.net/csdn_inside/article/details/89159803\n\n","slug":"Hexo：yilia主题下添加Subnav导航图标","published":1,"updated":"2020-01-05T19:13:24.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506t000b4cvj9ro7h2go","content":"<h2 id=\"准备素材\"><a href=\"#准备素材\" class=\"headerlink\" title=\"准备素材\"></a>准备素材</h2><p>搜索想要使用的图标，下载png格式文件</p>\n<ul>\n<li>图标下载，ICON(SVG/PNG/ICO/ICNS)图标搜索下载 - Easyicon<br><a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">https://www.easyicon.net/</a></li>\n<li>Font Awesome<br><a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">https://fontawesome.com/</a></li>\n</ul>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/00.png\">\n</div>\n\n<p>拷贝xxx.github.io\\themes\\yilia\\source-src\\css\\fonts下的iconfont.svg文件到桌面  </p>\n<p>使用百度字体平台，制作图标  </p>\n<ul>\n<li>百度字体平台<br><a href=\"http://fontstore.baidu.com/store#!/\" target=\"_blank\" rel=\"noopener\">http://fontstore.baidu.com/store#!/</a></li>\n</ul>\n<p>进入“FontEdior”并“新建”新项目，点击“导入”选择“导入svg”，将iconfont.svg文件导入进来。  </p>\n<p>导入完成后，会出现yilia自带的图标文字。</p>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/01.png\">\n</div>\n\n<p>再次点击“导入”选择“导入图片”，导入下载好的png格式图标。</p>\n<p>对图片大小和位置进行调整，保存并退出。</p>\n<p>选中编辑好的图标，点击“字形信息”，输入Unicode和名字，并记下来之后会用到。</p>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/02.png\">\n</div>\n\n<p>点击“保存项目”，下载fonteditor.zip文件，制作完成。</p>\n<h2 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h2><p>解压下载下来的fonteditor.zip文件，将.eot，.svg，.ttf，.woff四个文件拷贝到xxx.github.io\\themes\\yilia\\source-src\\css\\fonts文件夹下，重命名并替换原文件</p>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/03.png\">\n</div>\n\n<p>编辑xxx.github.io\\themes\\yilia\\source-src\\css目录下的font.scss和social.scss文件。</p>\n<p>在font.scss中，直接添加.icon-{your App}:before{ content: “{your unicode}”}。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-thingiverse</span>:before &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e878\"</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在social.scss中，也很简单，添加颜色即可。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.thingiverse</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#086ef6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#086ef6</span>;</span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#086ef6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在xxx.github.io\\themes\\yilia目录下，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.github.io\\themes\\yilia&gt;npm install</span><br><span class=\"line\">&gt;npm run dev</span><br><span class=\"line\">&gt;npm run dist</span><br></pre></td></tr></table></figure>\n<p>回到博客根目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g </span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p>完成。</p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"1-npm-ERR-Unexpected-end-of-JSON-input-while-parsing-near\"><a href=\"#1-npm-ERR-Unexpected-end-of-JSON-input-while-parsing-near\" class=\"headerlink\" title=\"1. npm ERR! Unexpected end of JSON input while parsing near\"></a>1. npm ERR! Unexpected end of JSON input while parsing near</h3><p>清一下缓存。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-npm-ERR-node-sass\"><a href=\"#2-npm-ERR-node-sass\" class=\"headerlink\" title=\"2. npm ERR! node-sass\"></a>2. npm ERR! node-sass</h3><p>先卸载，再重装，或者重建。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall node-sass</span><br><span class=\"line\">npm install node-sass</span><br><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li><p>Hexo yilia 主题一揽子使用方案 - YunShell - CSDN博客<br><a href=\"https://blog.csdn.net/lynnbest/article/details/79845944\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lynnbest/article/details/79845944</a></p>\n</li>\n<li><p>【Hexo】yilia主题 添加 Subnav 社交图标 CSDN STEAM PSN等等 - csdn_inside的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/csdn_inside/article/details/89159803\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/csdn_inside/article/details/89159803</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备素材\"><a href=\"#准备素材\" class=\"headerlink\" title=\"准备素材\"></a>准备素材</h2><p>搜索想要使用的图标，下载png格式文件</p>\n<ul>\n<li>图标下载，ICON(SVG/PNG/ICO/ICNS)图标搜索下载 - Easyicon<br><a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">https://www.easyicon.net/</a></li>\n<li>Font Awesome<br><a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">https://fontawesome.com/</a></li>\n</ul>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/00.png\">\n</div>\n\n<p>拷贝xxx.github.io\\themes\\yilia\\source-src\\css\\fonts下的iconfont.svg文件到桌面  </p>\n<p>使用百度字体平台，制作图标  </p>\n<ul>\n<li>百度字体平台<br><a href=\"http://fontstore.baidu.com/store#!/\" target=\"_blank\" rel=\"noopener\">http://fontstore.baidu.com/store#!/</a></li>\n</ul>\n<p>进入“FontEdior”并“新建”新项目，点击“导入”选择“导入svg”，将iconfont.svg文件导入进来。  </p>\n<p>导入完成后，会出现yilia自带的图标文字。</p>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/01.png\">\n</div>\n\n<p>再次点击“导入”选择“导入图片”，导入下载好的png格式图标。</p>\n<p>对图片大小和位置进行调整，保存并退出。</p>\n<p>选中编辑好的图标，点击“字形信息”，输入Unicode和名字，并记下来之后会用到。</p>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/02.png\">\n</div>\n\n<p>点击“保存项目”，下载fonteditor.zip文件，制作完成。</p>\n<h2 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h2><p>解压下载下来的fonteditor.zip文件，将.eot，.svg，.ttf，.woff四个文件拷贝到xxx.github.io\\themes\\yilia\\source-src\\css\\fonts文件夹下，重命名并替换原文件</p>\n<div align=\"center\">\n<img src=\"/2019/07/09/Hexo：yilia主题下添加Subnav导航图标/03.png\">\n</div>\n\n<p>编辑xxx.github.io\\themes\\yilia\\source-src\\css目录下的font.scss和social.scss文件。</p>\n<p>在font.scss中，直接添加.icon-{your App}:before{ content: “{your unicode}”}。<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-thingiverse</span>:before &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e878\"</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在social.scss中，也很简单，添加颜色即可。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.thingiverse</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#086ef6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#086ef6</span>;</span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#086ef6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在xxx.github.io\\themes\\yilia目录下，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.github.io\\themes\\yilia&gt;npm install</span><br><span class=\"line\">&gt;npm run dev</span><br><span class=\"line\">&gt;npm run dist</span><br></pre></td></tr></table></figure>\n<p>回到博客根目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g </span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p>完成。</p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"1-npm-ERR-Unexpected-end-of-JSON-input-while-parsing-near\"><a href=\"#1-npm-ERR-Unexpected-end-of-JSON-input-while-parsing-near\" class=\"headerlink\" title=\"1. npm ERR! Unexpected end of JSON input while parsing near\"></a>1. npm ERR! Unexpected end of JSON input while parsing near</h3><p>清一下缓存。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-npm-ERR-node-sass\"><a href=\"#2-npm-ERR-node-sass\" class=\"headerlink\" title=\"2. npm ERR! node-sass\"></a>2. npm ERR! node-sass</h3><p>先卸载，再重装，或者重建。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall node-sass</span><br><span class=\"line\">npm install node-sass</span><br><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li><p>Hexo yilia 主题一揽子使用方案 - YunShell - CSDN博客<br><a href=\"https://blog.csdn.net/lynnbest/article/details/79845944\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lynnbest/article/details/79845944</a></p>\n</li>\n<li><p>【Hexo】yilia主题 添加 Subnav 社交图标 CSDN STEAM PSN等等 - csdn_inside的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/csdn_inside/article/details/89159803\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/csdn_inside/article/details/89159803</a></p>\n</li>\n</ul>\n"},{"title":"Hexo：yilia主题下添加live2d看板动画","date":"2020-01-01T11:09:10.000Z","_content":"\n<div align=center>\n<img src = \"Hexo：yilia主题下添加live2d看板动画\\01.png\">\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 安装依赖项\n``` bash\n$ npm install --save hexo-helper-live2d\n```\n\n## 下载模型\n* hexo live2d插件 2.0 ! | 幻想帖  \nhttps://huaji8.top/post/live2d-plugin-2.0/\n\n选好对应的模型，使用 “npm install 模型的包名” 来安装\n``` bash\n$ npm install live2d-widget-model-wanko\n```\n\n## 配置信息\n\n在主题下的_config.yml文件中添加相关配置信息\n``` yml\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-wanko\n  display:\n    position: right\n    width: 300\n    height: 600\n  mobile:\n    show: true\n  react:\n    opacity: 0.7\n```\n","source":"_posts/Hexo：yilia主题下添加live2d看板动画.md","raw":"---\ntitle: 'Hexo：yilia主题下添加live2d看板动画'\ndate: 2020-01-01 19:09:10\ntags:\n  - hexo\n---\n\n<div align=center>\n<img src = \"Hexo：yilia主题下添加live2d看板动画\\01.png\">\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 安装依赖项\n``` bash\n$ npm install --save hexo-helper-live2d\n```\n\n## 下载模型\n* hexo live2d插件 2.0 ! | 幻想帖  \nhttps://huaji8.top/post/live2d-plugin-2.0/\n\n选好对应的模型，使用 “npm install 模型的包名” 来安装\n``` bash\n$ npm install live2d-widget-model-wanko\n```\n\n## 配置信息\n\n在主题下的_config.yml文件中添加相关配置信息\n``` yml\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-wanko\n  display:\n    position: right\n    width: 300\n    height: 600\n  mobile:\n    show: true\n  react:\n    opacity: 0.7\n```\n","slug":"Hexo：yilia主题下添加live2d看板动画","published":1,"updated":"2020-01-05T19:13:24.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506v000c4cvjevkm7vfu","content":"<div align=\"center\">\n<img src=\"/2020/01/01/Hexo：yilia主题下添加live2d看板动画/01.png\">\n</div>\n\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"安装依赖项\"><a href=\"#安装依赖项\" class=\"headerlink\" title=\"安装依赖项\"></a>安装依赖项</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载模型\"><a href=\"#下载模型\" class=\"headerlink\" title=\"下载模型\"></a>下载模型</h2><ul>\n<li>hexo live2d插件 2.0 ! | 幻想帖<br><a href=\"https://huaji8.top/post/live2d-plugin-2.0/\" target=\"_blank\" rel=\"noopener\">https://huaji8.top/post/live2d-plugin-2.0/</a></li>\n</ul>\n<p>选好对应的模型，使用 “npm install 模型的包名” 来安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install live2d-widget-model-wanko</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h2><p>在主题下的_config.yml文件中添加相关配置信息<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\"><span class=\"attr\">  tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  model:</span></span><br><span class=\"line\"><span class=\"attr\">    use:</span> <span class=\"string\">live2d-widget-model-wanko</span></span><br><span class=\"line\"><span class=\"attr\">  display:</span></span><br><span class=\"line\"><span class=\"attr\">    position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"attr\">    width:</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">    height:</span> <span class=\"number\">600</span></span><br><span class=\"line\"><span class=\"attr\">  mobile:</span></span><br><span class=\"line\"><span class=\"attr\">    show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  react:</span></span><br><span class=\"line\"><span class=\"attr\">    opacity:</span> <span class=\"number\">0.7</span></span><br></pre></td></tr></table></figure></p>\n</the>","site":{"data":{}},"excerpt":"<div align=\"center\">\n<img src=\"/2020/01/01/Hexo：yilia主题下添加live2d看板动画/01.png\">\n</div>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"安装依赖项\"><a href=\"#安装依赖项\" class=\"headerlink\" title=\"安装依赖项\"></a>安装依赖项</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载模型\"><a href=\"#下载模型\" class=\"headerlink\" title=\"下载模型\"></a>下载模型</h2><ul>\n<li>hexo live2d插件 2.0 ! | 幻想帖<br><a href=\"https://huaji8.top/post/live2d-plugin-2.0/\" target=\"_blank\" rel=\"noopener\">https://huaji8.top/post/live2d-plugin-2.0/</a></li>\n</ul>\n<p>选好对应的模型，使用 “npm install 模型的包名” 来安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install live2d-widget-model-wanko</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h2><p>在主题下的_config.yml文件中添加相关配置信息<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\"><span class=\"attr\">  tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  model:</span></span><br><span class=\"line\"><span class=\"attr\">    use:</span> <span class=\"string\">live2d-widget-model-wanko</span></span><br><span class=\"line\"><span class=\"attr\">  display:</span></span><br><span class=\"line\"><span class=\"attr\">    position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"attr\">    width:</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">    height:</span> <span class=\"number\">600</span></span><br><span class=\"line\"><span class=\"attr\">  mobile:</span></span><br><span class=\"line\"><span class=\"attr\">    show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  react:</span></span><br><span class=\"line\"><span class=\"attr\">    opacity:</span> <span class=\"number\">0.7</span></span><br></pre></td></tr></table></figure></p>\n</the>"},{"title":"Hexo:使用dev分支管理站点源文件，多地同步","date":"2019-06-15T16:14:49.000Z","_content":"\n## 使用dev分支管理站点、源文件，多地同步\n5点钟被蚊子吵醒了，dong还在睡觉于是跑来310用zb的电脑玩耍，突然想用zb的键盘写博客。  \n\nhttps://www.jianshu.com/p/4bcf2848b3fc\n```bash\nhexo d\n```\nhexo的部署命令会自动生成站点文件进行git commit，将修改push到指定的remote branch一般是master中。  \n根据Hexo建站完成部署，其实我们的本地源文件都没有同步在github上。我在我的xxx.github.io仓库中创建了一个dev分支，用于管理源文件。  \n使用vscode注意修改.git文件夹中的config文件就可以了  \n``` conf\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n[remote \"origin\"]\n\turl = https://github.com/leebinjun/leebinjun.github.io.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"dev\"]\n\tremote = origin\n\tmerge = refs/heads/dev\n```\n来到zb的电脑上，偷偷建一个文件夹  \nclone博客代码到本地，发现是网页那一堆，没有源文件  \n``` bash\ngit clone xxx.git\n```\n与远程仓库建立连接\n``` bash\ngit remote add origin xxx.git\n```\n查看本地是否具有dev分支\n``` bash\ngit branch  \n```\n没有dev分支,则从远端获取最新到本地，不会自动merge\n``` bash\ngit fetch origin dev\n```\n在本地创建分支dev并切换到该分支  \n``` bash\ngit checkout -b dev origin/dev   \n```\n拉取dev分支上的内容到本地了\n``` bash\ngit pull origin dev             \n```\n然后就可以愉快地开始写博客了。  \n推送时会有remote: Permission to A denied to B地问题，原因是系统已经记住了zb的密码，每次push操作都会读取zb的信息。查了一下解决方案，决定还是不删他账号也不重新生成密钥了。  \n敲完这些，发现他的电脑还没hexo，于是我把他的键盘和U盘一起拿走了。  ","source":"_posts/Hexo：使用dev分支管理站点源文件，多地同步.md","raw":"---\ntitle: 'Hexo:使用dev分支管理站点源文件，多地同步'\ndate: 2019-06-16 00:14:49\ntags:\n  - hexo\n---\n\n## 使用dev分支管理站点、源文件，多地同步\n5点钟被蚊子吵醒了，dong还在睡觉于是跑来310用zb的电脑玩耍，突然想用zb的键盘写博客。  \n\nhttps://www.jianshu.com/p/4bcf2848b3fc\n```bash\nhexo d\n```\nhexo的部署命令会自动生成站点文件进行git commit，将修改push到指定的remote branch一般是master中。  \n根据Hexo建站完成部署，其实我们的本地源文件都没有同步在github上。我在我的xxx.github.io仓库中创建了一个dev分支，用于管理源文件。  \n使用vscode注意修改.git文件夹中的config文件就可以了  \n``` conf\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n[remote \"origin\"]\n\turl = https://github.com/leebinjun/leebinjun.github.io.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"dev\"]\n\tremote = origin\n\tmerge = refs/heads/dev\n```\n来到zb的电脑上，偷偷建一个文件夹  \nclone博客代码到本地，发现是网页那一堆，没有源文件  \n``` bash\ngit clone xxx.git\n```\n与远程仓库建立连接\n``` bash\ngit remote add origin xxx.git\n```\n查看本地是否具有dev分支\n``` bash\ngit branch  \n```\n没有dev分支,则从远端获取最新到本地，不会自动merge\n``` bash\ngit fetch origin dev\n```\n在本地创建分支dev并切换到该分支  \n``` bash\ngit checkout -b dev origin/dev   \n```\n拉取dev分支上的内容到本地了\n``` bash\ngit pull origin dev             \n```\n然后就可以愉快地开始写博客了。  \n推送时会有remote: Permission to A denied to B地问题，原因是系统已经记住了zb的密码，每次push操作都会读取zb的信息。查了一下解决方案，决定还是不删他账号也不重新生成密钥了。  \n敲完这些，发现他的电脑还没hexo，于是我把他的键盘和U盘一起拿走了。  ","slug":"Hexo：使用dev分支管理站点源文件，多地同步","published":1,"updated":"2020-01-05T19:13:24.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an506y000e4cvjoofsf7ez","content":"<h2 id=\"使用dev分支管理站点、源文件，多地同步\"><a href=\"#使用dev分支管理站点、源文件，多地同步\" class=\"headerlink\" title=\"使用dev分支管理站点、源文件，多地同步\"></a>使用dev分支管理站点、源文件，多地同步</h2><p>5点钟被蚊子吵醒了，dong还在睡觉于是跑来310用zb的电脑玩耍，突然想用zb的键盘写博客。  </p>\n<p><a href=\"https://www.jianshu.com/p/4bcf2848b3fc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4bcf2848b3fc</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>hexo的部署命令会自动生成站点文件进行git commit，将修改push到指定的remote branch一般是master中。<br>根据Hexo建站完成部署，其实我们的本地源文件都没有同步在github上。我在我的xxx.github.io仓库中创建了一个dev分支，用于管理源文件。<br>使用vscode注意修改.git文件夹中的config文件就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion = 0</span><br><span class=\"line\">\tfilemode = false</span><br><span class=\"line\">\tbare = false</span><br><span class=\"line\">\tlogallrefupdates = true</span><br><span class=\"line\">\tsymlinks = false</span><br><span class=\"line\">\tignorecase = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl = https://github.com/leebinjun/leebinjun.github.io.git</span><br><span class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">[branch &quot;dev&quot;]</span><br><span class=\"line\">\tremote = origin</span><br><span class=\"line\">\tmerge = refs/heads/dev</span><br></pre></td></tr></table></figure></p>\n<p>来到zb的电脑上，偷偷建一个文件夹<br>clone博客代码到本地，发现是网页那一堆，没有源文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>与远程仓库建立连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>查看本地是否具有dev分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>没有dev分支,则从远端获取最新到本地，不会自动merge<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin dev</span><br></pre></td></tr></table></figure></p>\n<p>在本地创建分支dev并切换到该分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure></p>\n<p>拉取dev分支上的内容到本地了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以愉快地开始写博客了。<br>推送时会有remote: Permission to A denied to B地问题，原因是系统已经记住了zb的密码，每次push操作都会读取zb的信息。查了一下解决方案，决定还是不删他账号也不重新生成密钥了。<br>敲完这些，发现他的电脑还没hexo，于是我把他的键盘和U盘一起拿走了。  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用dev分支管理站点、源文件，多地同步\"><a href=\"#使用dev分支管理站点、源文件，多地同步\" class=\"headerlink\" title=\"使用dev分支管理站点、源文件，多地同步\"></a>使用dev分支管理站点、源文件，多地同步</h2><p>5点钟被蚊子吵醒了，dong还在睡觉于是跑来310用zb的电脑玩耍，突然想用zb的键盘写博客。  </p>\n<p><a href=\"https://www.jianshu.com/p/4bcf2848b3fc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4bcf2848b3fc</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>hexo的部署命令会自动生成站点文件进行git commit，将修改push到指定的remote branch一般是master中。<br>根据Hexo建站完成部署，其实我们的本地源文件都没有同步在github上。我在我的xxx.github.io仓库中创建了一个dev分支，用于管理源文件。<br>使用vscode注意修改.git文件夹中的config文件就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion = 0</span><br><span class=\"line\">\tfilemode = false</span><br><span class=\"line\">\tbare = false</span><br><span class=\"line\">\tlogallrefupdates = true</span><br><span class=\"line\">\tsymlinks = false</span><br><span class=\"line\">\tignorecase = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl = https://github.com/leebinjun/leebinjun.github.io.git</span><br><span class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">[branch &quot;dev&quot;]</span><br><span class=\"line\">\tremote = origin</span><br><span class=\"line\">\tmerge = refs/heads/dev</span><br></pre></td></tr></table></figure></p>\n<p>来到zb的电脑上，偷偷建一个文件夹<br>clone博客代码到本地，发现是网页那一堆，没有源文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>与远程仓库建立连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>查看本地是否具有dev分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>没有dev分支,则从远端获取最新到本地，不会自动merge<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin dev</span><br></pre></td></tr></table></figure></p>\n<p>在本地创建分支dev并切换到该分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure></p>\n<p>拉取dev分支上的内容到本地了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以愉快地开始写博客了。<br>推送时会有remote: Permission to A denied to B地问题，原因是系统已经记住了zb的密码，每次push操作都会读取zb的信息。查了一下解决方案，决定还是不删他账号也不重新生成密钥了。<br>敲完这些，发现他的电脑还没hexo，于是我把他的键盘和U盘一起拿走了。  </p>\n"},{"title":"Hexo：yilia主题下添加相册功能","date":"2020-01-04T17:54:29.000Z","_content":"\n参考Lawlite的博客 \n* Hexo+Github实现相册功能 | Lawlite的博客  \nhttp://www.lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/\n\n\n\n## 创建图床，用于储存相册\n\n在leebinjun.github.io仓库新建data分支，专门用于存储图片。\n``` shell\ngit branch data\ngit checkout data\n```\n\n在data分支创建photos_backup文件夹，用于作为图床存放相册图片。\n\n在photos文件夹放入原始图片，运行py文件处理原图，在min_photos文件夹生成图标文件，并生成data.json文件。\n\n``` python\ndef cut_photo():\n    \"\"\"裁剪算法\n    ----------\n    调用Graphics类中的裁剪算法，将src_dir目录下的文件复制到des_dir下裁剪成正方形\n    \"\"\"\n    src_dir, des_dir = \"photos_backup/photos/\", \"photos_backup/min_photos/\"\n    if directory_exists(src_dir) and directory_exists(des_dir):\n        file_list = list_img_file(src_dir)\n        file_list_des = list_img_file(des_dir)\n        # print file_list\n        if file_list:\n            for infile in file_list:\n                if infile not in file_list_des:\n                    img = Image.open(src_dir+infile)\n                    g = Graphics(infile=src_dir+infile, outfile=des_dir+infile)\n                    g.cut_by_ratio()\n                else:\n                    file_list.remove(infile)\n        else:\n            pass\n    else:\n        print(\"source directory not exist!\")     \n    \n    # 进行压缩\n    compress('4', des_dir, des_dir, file_list)\n\nif __name__ == \"__main__\":\n    \n    print_help()\n    resize_photo()       # 压缩图片，不大于1080P，保存到photos文件夹下\n    cut_photo()          # 裁剪图片，裁剪成正方形,并压缩，保存到mini_photos文件夹下\n    # git_operation()    # 提交到github仓库\n    handle_photo()       # 将文件处理成json格式，存到博客仓库中    \n```\n\n## 博客操作\n\n在博客的source文件夹下建立一个photos文件夹\n``` cmd\nhexo new page photos\n```\n\n由于之前hexo插入图片对blog\\\\_config.yml进行过配置\n\n``` yml\npost_asset_folder: true\n```\n\nphotos文件夹会自动生成一个index.md文件和一个同名文件夹\n\n清空photos文件夹，放入相关样式文件，如下\n\n* leebinjun.github.io/source/photos at dev · leebinjun/leebinjun.github.io  \nhttps://github.com/leebinjun/leebinjun.github.io/tree/dev/source/photos\n\n<img src = \"Hexo：yilia主题下添加相册功能\\0.png\">\n\n\n修改ins.js文件，主要render函数相关路径\n``` js\n var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n\n          var minSrc = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/' + data.link[i];\n          var src = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/' + data.link[i];\n          var type = data.type[i];\n          // var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          var target = src;\n          // src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n```\n\n修改ins.json文件，与data分支中由python脚本生成的data.json同步\n``` json\n{\"list\": [{\"date\": \"2020-01\", \"arr\": {\"year\": 2020, \"month\": 1, \"link\": [\"2020-01-04_\\u6d4b\\u8bd5.jpg\"], \"text\": [\"\\u6d4b\\u8bd5\"], \"type\": [\"image\"]}}]}\n```\n\n\n配置themes\\yilia\\\\_config.yml文件，在侧边栏添加相册\n``` yml\n# Header\nmenu:\n  主页: /\n  相册: /photos/\n  随笔: /tags/随笔/\n```\n\n\n\n\n\n\n\n\n","source":"_posts/Hexo：yilia主题下添加相册功能.md","raw":"---\ntitle: Hexo：yilia主题下添加相册功能\ndate: 2020-01-05 01:54:29\ntags:\n  - hexo\n---\n\n参考Lawlite的博客 \n* Hexo+Github实现相册功能 | Lawlite的博客  \nhttp://www.lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/\n\n\n\n## 创建图床，用于储存相册\n\n在leebinjun.github.io仓库新建data分支，专门用于存储图片。\n``` shell\ngit branch data\ngit checkout data\n```\n\n在data分支创建photos_backup文件夹，用于作为图床存放相册图片。\n\n在photos文件夹放入原始图片，运行py文件处理原图，在min_photos文件夹生成图标文件，并生成data.json文件。\n\n``` python\ndef cut_photo():\n    \"\"\"裁剪算法\n    ----------\n    调用Graphics类中的裁剪算法，将src_dir目录下的文件复制到des_dir下裁剪成正方形\n    \"\"\"\n    src_dir, des_dir = \"photos_backup/photos/\", \"photos_backup/min_photos/\"\n    if directory_exists(src_dir) and directory_exists(des_dir):\n        file_list = list_img_file(src_dir)\n        file_list_des = list_img_file(des_dir)\n        # print file_list\n        if file_list:\n            for infile in file_list:\n                if infile not in file_list_des:\n                    img = Image.open(src_dir+infile)\n                    g = Graphics(infile=src_dir+infile, outfile=des_dir+infile)\n                    g.cut_by_ratio()\n                else:\n                    file_list.remove(infile)\n        else:\n            pass\n    else:\n        print(\"source directory not exist!\")     \n    \n    # 进行压缩\n    compress('4', des_dir, des_dir, file_list)\n\nif __name__ == \"__main__\":\n    \n    print_help()\n    resize_photo()       # 压缩图片，不大于1080P，保存到photos文件夹下\n    cut_photo()          # 裁剪图片，裁剪成正方形,并压缩，保存到mini_photos文件夹下\n    # git_operation()    # 提交到github仓库\n    handle_photo()       # 将文件处理成json格式，存到博客仓库中    \n```\n\n## 博客操作\n\n在博客的source文件夹下建立一个photos文件夹\n``` cmd\nhexo new page photos\n```\n\n由于之前hexo插入图片对blog\\\\_config.yml进行过配置\n\n``` yml\npost_asset_folder: true\n```\n\nphotos文件夹会自动生成一个index.md文件和一个同名文件夹\n\n清空photos文件夹，放入相关样式文件，如下\n\n* leebinjun.github.io/source/photos at dev · leebinjun/leebinjun.github.io  \nhttps://github.com/leebinjun/leebinjun.github.io/tree/dev/source/photos\n\n<img src = \"Hexo：yilia主题下添加相册功能\\0.png\">\n\n\n修改ins.js文件，主要render函数相关路径\n``` js\n var render = function render(res) {\n      var ulTmpl = \"\";\n      for (var j = 0, len2 = res.list.length; j < len2; j++) {\n        var data = res.list[j].arr;\n        var liTmpl = \"\";\n        for (var i = 0, len = data.link.length; i < len; i++) {\n\n          var minSrc = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/' + data.link[i];\n          var src = 'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/' + data.link[i];\n          var type = data.type[i];\n          // var target = src + (type === 'video' ? '.mp4' : '.jpg');\n          var target = src;\n          // src += '.jpg';\n\n          liTmpl += '<figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\">\\\n                <a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"' + type + '\" data-target=\"' + target + '\">\\\n                  <img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\">\\\n                </a>\\\n                <figcaption style=\"display:none\" itemprop=\"caption description\">' + data.text[i] + '</figcaption>\\\n            </figure>';\n        }\n        ulTmpl = ulTmpl + '<section class=\"archives album\"><h1 class=\"year\">' + data.year + '<em>' + data.month + '月</em></h1>\\\n        <ul class=\"img-box-ul\">' + liTmpl + '</ul>\\\n        </section>';\n      }\n      document.querySelector('.instagram').innerHTML = '<div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\">' + ulTmpl + '</div>';\n      createVideoIncon();\n      _view2.default.init();\n    };\n```\n\n修改ins.json文件，与data分支中由python脚本生成的data.json同步\n``` json\n{\"list\": [{\"date\": \"2020-01\", \"arr\": {\"year\": 2020, \"month\": 1, \"link\": [\"2020-01-04_\\u6d4b\\u8bd5.jpg\"], \"text\": [\"\\u6d4b\\u8bd5\"], \"type\": [\"image\"]}}]}\n```\n\n\n配置themes\\yilia\\\\_config.yml文件，在侧边栏添加相册\n``` yml\n# Header\nmenu:\n  主页: /\n  相册: /photos/\n  随笔: /tags/随笔/\n```\n\n\n\n\n\n\n\n\n","slug":"Hexo：yilia主题下添加相册功能","published":1,"updated":"2020-01-15T09:50:08.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5070000g4cvj0wb68cst","content":"<p>参考Lawlite的博客 </p>\n<ul>\n<li>Hexo+Github实现相册功能 | Lawlite的博客<br><a href=\"http://www.lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">http://www.lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</a></li>\n</ul>\n<h2 id=\"创建图床，用于储存相册\"><a href=\"#创建图床，用于储存相册\" class=\"headerlink\" title=\"创建图床，用于储存相册\"></a>创建图床，用于储存相册</h2><p>在leebinjun.github.io仓库新建data分支，专门用于存储图片。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch data</span><br><span class=\"line\">git checkout data</span><br></pre></td></tr></table></figure></p>\n<p>在data分支创建photos_backup文件夹，用于作为图床存放相册图片。</p>\n<p>在photos文件夹放入原始图片，运行py文件处理原图，在min_photos文件夹生成图标文件，并生成data.json文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cut_photo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"裁剪算法</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    调用Graphics类中的裁剪算法，将src_dir目录下的文件复制到des_dir下裁剪成正方形</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    src_dir, des_dir = <span class=\"string\">\"photos_backup/photos/\"</span>, <span class=\"string\">\"photos_backup/min_photos/\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> directory_exists(src_dir) <span class=\"keyword\">and</span> directory_exists(des_dir):</span><br><span class=\"line\">        file_list = list_img_file(src_dir)</span><br><span class=\"line\">        file_list_des = list_img_file(des_dir)</span><br><span class=\"line\">        <span class=\"comment\"># print file_list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> file_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> infile <span class=\"keyword\">in</span> file_list:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> infile <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> file_list_des:</span><br><span class=\"line\">                    img = Image.open(src_dir+infile)</span><br><span class=\"line\">                    g = Graphics(infile=src_dir+infile, outfile=des_dir+infile)</span><br><span class=\"line\">                    g.cut_by_ratio()</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    file_list.remove(infile)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"source directory not exist!\"</span>)     </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 进行压缩</span></span><br><span class=\"line\">    compress(<span class=\"string\">'4'</span>, des_dir, des_dir, file_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    print_help()</span><br><span class=\"line\">    resize_photo()       <span class=\"comment\"># 压缩图片，不大于1080P，保存到photos文件夹下</span></span><br><span class=\"line\">    cut_photo()          <span class=\"comment\"># 裁剪图片，裁剪成正方形,并压缩，保存到mini_photos文件夹下</span></span><br><span class=\"line\">    <span class=\"comment\"># git_operation()    # 提交到github仓库</span></span><br><span class=\"line\">    handle_photo()       <span class=\"comment\"># 将文件处理成json格式，存到博客仓库中</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"博客操作\"><a href=\"#博客操作\" class=\"headerlink\" title=\"博客操作\"></a>博客操作</h2><p>在博客的source文件夹下建立一个photos文件夹<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page photos</span><br></pre></td></tr></table></figure></p>\n<p>由于之前hexo插入图片对blog\\_config.yml进行过配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>photos文件夹会自动生成一个index.md文件和一个同名文件夹</p>\n<p>清空photos文件夹，放入相关样式文件，如下</p>\n<ul>\n<li>leebinjun.github.io/source/photos at dev · leebinjun/leebinjun.github.io<br><a href=\"https://github.com/leebinjun/leebinjun.github.io/tree/dev/source/photos\" target=\"_blank\" rel=\"noopener\">https://github.com/leebinjun/leebinjun.github.io/tree/dev/source/photos</a></li>\n</ul>\n<p><img src=\"/2020/01/05/Hexo：yilia主题下添加相册功能/0.png\"></p>\n<p>修改ins.js文件，主要render函数相关路径<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> ulTmpl = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len2 = res.list.length; j &lt; len2; j++) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> data = res.list[j].arr;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> liTmpl = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = data.link.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">var</span> minSrc = <span class=\"string\">'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/'</span> + data.link[i];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> src = <span class=\"string\">'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/'</span> + data.link[i];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> type = data.type[i];</span><br><span class=\"line\">         <span class=\"comment\">// var target = src + (type === 'video' ? '.mp4' : '.jpg');</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> target = src;</span><br><span class=\"line\">         <span class=\"comment\">// src += '.jpg';</span></span><br><span class=\"line\"></span><br><span class=\"line\">         liTmpl += <span class=\"string\">'&lt;figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\"&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">               &lt;a href=\"'</span> + src + <span class=\"string\">'\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"'</span> + type + <span class=\"string\">'\" data-target=\"'</span> + target + <span class=\"string\">'\"&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">                 &lt;img class=\"reward-img\" data-type=\"'</span> + type + <span class=\"string\">'\" data-src=\"'</span> + minSrc + <span class=\"string\">'\" src=\"empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\"&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">               &lt;/a&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">               &lt;figcaption style=\"display:none\" itemprop=\"caption description\"&gt;'</span> + data.text[i] + <span class=\"string\">'&lt;/figcaption&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">           &lt;/figure&gt;'</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       ulTmpl = ulTmpl + <span class=\"string\">'&lt;section class=\"archives album\"&gt;&lt;h1 class=\"year\"&gt;'</span> + data.year + <span class=\"string\">'&lt;em&gt;'</span> + data.month + <span class=\"string\">'月&lt;/em&gt;&lt;/h1&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">       &lt;ul class=\"img-box-ul\"&gt;'</span> + liTmpl + <span class=\"string\">'&lt;/ul&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">       &lt;/section&gt;'</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.instagram'</span>).innerHTML = <span class=\"string\">'&lt;div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\"&gt;'</span> + ulTmpl + <span class=\"string\">'&lt;/div&gt;'</span>;</span><br><span class=\"line\">     createVideoIncon();</span><br><span class=\"line\">     _view2.default.init();</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>修改ins.json文件，与data分支中由python脚本生成的data.json同步<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"list\"</span>: [&#123;<span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2020-01\"</span>, <span class=\"attr\">\"arr\"</span>: &#123;<span class=\"attr\">\"year\"</span>: <span class=\"number\">2020</span>, <span class=\"attr\">\"month\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"link\"</span>: [<span class=\"string\">\"2020-01-04_\\u6d4b\\u8bd5.jpg\"</span>], <span class=\"attr\">\"text\"</span>: [<span class=\"string\">\"\\u6d4b\\u8bd5\"</span>], <span class=\"attr\">\"type\"</span>: [<span class=\"string\">\"image\"</span>]&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置themes\\yilia\\_config.yml文件，在侧边栏添加相册<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Header</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">相册:</span> <span class=\"string\">/photos/</span></span><br><span class=\"line\">  <span class=\"string\">随笔:</span> <span class=\"string\">/tags/随笔/</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考Lawlite的博客 </p>\n<ul>\n<li>Hexo+Github实现相册功能 | Lawlite的博客<br><a href=\"http://www.lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">http://www.lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</a></li>\n</ul>\n<h2 id=\"创建图床，用于储存相册\"><a href=\"#创建图床，用于储存相册\" class=\"headerlink\" title=\"创建图床，用于储存相册\"></a>创建图床，用于储存相册</h2><p>在leebinjun.github.io仓库新建data分支，专门用于存储图片。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch data</span><br><span class=\"line\">git checkout data</span><br></pre></td></tr></table></figure></p>\n<p>在data分支创建photos_backup文件夹，用于作为图床存放相册图片。</p>\n<p>在photos文件夹放入原始图片，运行py文件处理原图，在min_photos文件夹生成图标文件，并生成data.json文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cut_photo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"裁剪算法</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    调用Graphics类中的裁剪算法，将src_dir目录下的文件复制到des_dir下裁剪成正方形</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    src_dir, des_dir = <span class=\"string\">\"photos_backup/photos/\"</span>, <span class=\"string\">\"photos_backup/min_photos/\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> directory_exists(src_dir) <span class=\"keyword\">and</span> directory_exists(des_dir):</span><br><span class=\"line\">        file_list = list_img_file(src_dir)</span><br><span class=\"line\">        file_list_des = list_img_file(des_dir)</span><br><span class=\"line\">        <span class=\"comment\"># print file_list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> file_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> infile <span class=\"keyword\">in</span> file_list:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> infile <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> file_list_des:</span><br><span class=\"line\">                    img = Image.open(src_dir+infile)</span><br><span class=\"line\">                    g = Graphics(infile=src_dir+infile, outfile=des_dir+infile)</span><br><span class=\"line\">                    g.cut_by_ratio()</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    file_list.remove(infile)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"source directory not exist!\"</span>)     </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 进行压缩</span></span><br><span class=\"line\">    compress(<span class=\"string\">'4'</span>, des_dir, des_dir, file_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    print_help()</span><br><span class=\"line\">    resize_photo()       <span class=\"comment\"># 压缩图片，不大于1080P，保存到photos文件夹下</span></span><br><span class=\"line\">    cut_photo()          <span class=\"comment\"># 裁剪图片，裁剪成正方形,并压缩，保存到mini_photos文件夹下</span></span><br><span class=\"line\">    <span class=\"comment\"># git_operation()    # 提交到github仓库</span></span><br><span class=\"line\">    handle_photo()       <span class=\"comment\"># 将文件处理成json格式，存到博客仓库中</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"博客操作\"><a href=\"#博客操作\" class=\"headerlink\" title=\"博客操作\"></a>博客操作</h2><p>在博客的source文件夹下建立一个photos文件夹<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page photos</span><br></pre></td></tr></table></figure></p>\n<p>由于之前hexo插入图片对blog\\_config.yml进行过配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>photos文件夹会自动生成一个index.md文件和一个同名文件夹</p>\n<p>清空photos文件夹，放入相关样式文件，如下</p>\n<ul>\n<li>leebinjun.github.io/source/photos at dev · leebinjun/leebinjun.github.io<br><a href=\"https://github.com/leebinjun/leebinjun.github.io/tree/dev/source/photos\" target=\"_blank\" rel=\"noopener\">https://github.com/leebinjun/leebinjun.github.io/tree/dev/source/photos</a></li>\n</ul>\n<p><img src=\"/2020/01/05/Hexo：yilia主题下添加相册功能/0.png\"></p>\n<p>修改ins.js文件，主要render函数相关路径<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> ulTmpl = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len2 = res.list.length; j &lt; len2; j++) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> data = res.list[j].arr;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> liTmpl = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = data.link.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">var</span> minSrc = <span class=\"string\">'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/min_photos/'</span> + data.link[i];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> src = <span class=\"string\">'https://raw.githubusercontent.com/leebinjun/leebinjun.github.io/data/photos_backup/photos/'</span> + data.link[i];</span><br><span class=\"line\">         <span class=\"keyword\">var</span> type = data.type[i];</span><br><span class=\"line\">         <span class=\"comment\">// var target = src + (type === 'video' ? '.mp4' : '.jpg');</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> target = src;</span><br><span class=\"line\">         <span class=\"comment\">// src += '.jpg';</span></span><br><span class=\"line\"></span><br><span class=\"line\">         liTmpl += <span class=\"string\">'&lt;figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\"&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">               &lt;a href=\"'</span> + src + <span class=\"string\">'\" itemprop=\"contentUrl\" data-size=\"640x640\" data-type=\"'</span> + type + <span class=\"string\">'\" data-target=\"'</span> + target + <span class=\"string\">'\"&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">                 &lt;img class=\"reward-img\" data-type=\"'</span> + type + <span class=\"string\">'\" data-src=\"'</span> + minSrc + <span class=\"string\">'\" src=\"empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\"&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">               &lt;/a&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">               &lt;figcaption style=\"display:none\" itemprop=\"caption description\"&gt;'</span> + data.text[i] + <span class=\"string\">'&lt;/figcaption&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">           &lt;/figure&gt;'</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       ulTmpl = ulTmpl + <span class=\"string\">'&lt;section class=\"archives album\"&gt;&lt;h1 class=\"year\"&gt;'</span> + data.year + <span class=\"string\">'&lt;em&gt;'</span> + data.month + <span class=\"string\">'月&lt;/em&gt;&lt;/h1&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">       &lt;ul class=\"img-box-ul\"&gt;'</span> + liTmpl + <span class=\"string\">'&lt;/ul&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">       &lt;/section&gt;'</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.instagram'</span>).innerHTML = <span class=\"string\">'&lt;div class=\"photos\" itemscope=\"\" itemtype=\"http://schema.org/ImageGallery\"&gt;'</span> + ulTmpl + <span class=\"string\">'&lt;/div&gt;'</span>;</span><br><span class=\"line\">     createVideoIncon();</span><br><span class=\"line\">     _view2.default.init();</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>修改ins.json文件，与data分支中由python脚本生成的data.json同步<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"list\"</span>: [&#123;<span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2020-01\"</span>, <span class=\"attr\">\"arr\"</span>: &#123;<span class=\"attr\">\"year\"</span>: <span class=\"number\">2020</span>, <span class=\"attr\">\"month\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"link\"</span>: [<span class=\"string\">\"2020-01-04_\\u6d4b\\u8bd5.jpg\"</span>], <span class=\"attr\">\"text\"</span>: [<span class=\"string\">\"\\u6d4b\\u8bd5\"</span>], <span class=\"attr\">\"type\"</span>: [<span class=\"string\">\"image\"</span>]&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置themes\\yilia\\_config.yml文件，在侧边栏添加相册<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Header</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">相册:</span> <span class=\"string\">/photos/</span></span><br><span class=\"line\">  <span class=\"string\">随笔:</span> <span class=\"string\">/tags/随笔/</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Hikey970使用记录","date":"2019-05-12T03:16:12.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\nhello hikey!\nHikey970使用记录一：ubuntu16.04下烧写lebian系统  \nHikey970使用记录二：编译安装opencv4.0.0  \nHikey970使用记录三：USB转串口驱动安装  \n<!-- more -->\n<The rest of contents | 余下全文>\n\nHikey970使用记录一：[ubuntu16.04下烧写lebian系统](https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%80%EF%BC%9Aubuntu16-04%E4%B8%8B%E7%83%A7%E5%86%99lebian%E7%B3%BB%E7%BB%9F/)\n\nHikey970使用记录二：[编译安装opencv4.0.0](https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%BA%8C%EF%BC%9A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85opencv4-0-0/)  \n\nHikey970使用记录三：[USB转串口驱动安装](https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%89%EF%BC%9AUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/)\n\n\nHikey970使用记录四：[python加载运行OpenCL](https://leebinjun.github.io/2019/06/08/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E5%9B%9B%EF%BC%9Apython%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8COpenCL/)\n\n\n## hikey970亚克力外壳\n* hikey970 case by Binjun - Thingiverse  \nhttps://www.thingiverse.com/thing:3801720\n\n<img src=\"Hikey970使用记录\\01.png\">\n\n\n## 问题记录 \n### apt-get 安装时出现dpkg: error processing package XXX的问题\n``` bash\n$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_backup/\n$ sudo mkdir /var/lib/dpkg/info/\n```\n* Ubuntu在apt-get 安装时出现dpkg: error processing package XXX的问题 - tnaig的博客 - CSDN博客  \nhttps://blog.csdn.net/tnaig/article/details/78497792\n\n\n* Linux应用环境实战13：我该如何备份系统 - ichsonx的专栏 - CSDN博客  \nhttps://blog.csdn.net/ichsonx/article/details/49387855\n\n### hub集线器和MobaXterm终端的冲突\nhikey970的USB口有限，插上hub集线器(鼠标、键盘、摄像头)，终端会掉线。  \n应该是供电问题，hub最好单独供电。\n\n\n## 常用功能 \n\n截图\n``` bash\nsudo apt-get install scrot\nsudo scrot\n```\n\npip指定安装源安装\n``` bash\nsudo pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple XXX\n```\n\n\n### 发声\n\n* usb声卡\n使用 lsusb 来列出 USB 设备和它的属性，lsusb 会显示驱动和内部连接到你系统的设备。  \n如果无法运行 lsusb，使用以下命令安装。\n``` bash\nsudo apt-get install usbutils\n```\n\n``` bash\nshunya@hikey970:~$ lsusb\nBus 002 Device 003: ID 05e3:0612 Genesys Logic, Inc.\nBus 002 Device 002: ID 0451:8140 Texas Instruments, Inc.\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 004: ID 0d8c:0014 C-Media Electronics, Inc.\nBus 001 Device 003: ID 05e3:0610 Genesys Logic, Inc. 4-port hub\nBus 001 Device 002: ID 0451:8142 Texas Instruments, Inc. TUSB8041 4-Port Hub\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n```\n\n\n* tick\n找一块带音响的hdmi屏幕。\n``` bash\naplay c.wav\n```\n\n\n### 中文支持\n默认不支持中文，打开可以看到一个个小框框，里面还有四个字母，可以安装文泉驿的中文字体\n``` bash\nsudo apt install fonts-wqy-zenhei\n```\n\n### exFat U盘读取\n``` bash\nsudo apt install exfat-utils\n```\n\n","source":"_posts/Hikey970使用记录.md","raw":"---\ntitle: Hikey970使用记录\ndate: 2019-05-12 11:16:12\ntags:\n  - Hikey970\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\nhello hikey!\nHikey970使用记录一：ubuntu16.04下烧写lebian系统  \nHikey970使用记录二：编译安装opencv4.0.0  \nHikey970使用记录三：USB转串口驱动安装  \n<!-- more -->\n<The rest of contents | 余下全文>\n\nHikey970使用记录一：[ubuntu16.04下烧写lebian系统](https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%80%EF%BC%9Aubuntu16-04%E4%B8%8B%E7%83%A7%E5%86%99lebian%E7%B3%BB%E7%BB%9F/)\n\nHikey970使用记录二：[编译安装opencv4.0.0](https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%BA%8C%EF%BC%9A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85opencv4-0-0/)  \n\nHikey970使用记录三：[USB转串口驱动安装](https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%89%EF%BC%9AUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/)\n\n\nHikey970使用记录四：[python加载运行OpenCL](https://leebinjun.github.io/2019/06/08/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E5%9B%9B%EF%BC%9Apython%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8COpenCL/)\n\n\n## hikey970亚克力外壳\n* hikey970 case by Binjun - Thingiverse  \nhttps://www.thingiverse.com/thing:3801720\n\n<img src=\"Hikey970使用记录\\01.png\">\n\n\n## 问题记录 \n### apt-get 安装时出现dpkg: error processing package XXX的问题\n``` bash\n$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_backup/\n$ sudo mkdir /var/lib/dpkg/info/\n```\n* Ubuntu在apt-get 安装时出现dpkg: error processing package XXX的问题 - tnaig的博客 - CSDN博客  \nhttps://blog.csdn.net/tnaig/article/details/78497792\n\n\n* Linux应用环境实战13：我该如何备份系统 - ichsonx的专栏 - CSDN博客  \nhttps://blog.csdn.net/ichsonx/article/details/49387855\n\n### hub集线器和MobaXterm终端的冲突\nhikey970的USB口有限，插上hub集线器(鼠标、键盘、摄像头)，终端会掉线。  \n应该是供电问题，hub最好单独供电。\n\n\n## 常用功能 \n\n截图\n``` bash\nsudo apt-get install scrot\nsudo scrot\n```\n\npip指定安装源安装\n``` bash\nsudo pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple XXX\n```\n\n\n### 发声\n\n* usb声卡\n使用 lsusb 来列出 USB 设备和它的属性，lsusb 会显示驱动和内部连接到你系统的设备。  \n如果无法运行 lsusb，使用以下命令安装。\n``` bash\nsudo apt-get install usbutils\n```\n\n``` bash\nshunya@hikey970:~$ lsusb\nBus 002 Device 003: ID 05e3:0612 Genesys Logic, Inc.\nBus 002 Device 002: ID 0451:8140 Texas Instruments, Inc.\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 004: ID 0d8c:0014 C-Media Electronics, Inc.\nBus 001 Device 003: ID 05e3:0610 Genesys Logic, Inc. 4-port hub\nBus 001 Device 002: ID 0451:8142 Texas Instruments, Inc. TUSB8041 4-Port Hub\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n```\n\n\n* tick\n找一块带音响的hdmi屏幕。\n``` bash\naplay c.wav\n```\n\n\n### 中文支持\n默认不支持中文，打开可以看到一个个小框框，里面还有四个字母，可以安装文泉驿的中文字体\n``` bash\nsudo apt install fonts-wqy-zenhei\n```\n\n### exFat U盘读取\n``` bash\nsudo apt install exfat-utils\n```\n\n","slug":"Hikey970使用记录","published":1,"updated":"2020-01-05T19:13:24.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5071000j4cvjsai6elj4","content":"<p><strong> Hikey970使用记录 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>Hikey970使用记录一：ubuntu16.04下烧写lebian系统<br>Hikey970使用记录二：编译安装opencv4.0.0<br>Hikey970使用记录三：USB转串口驱动安装<br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n<p>Hikey970使用记录一：<a href=\"https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%80%EF%BC%9Aubuntu16-04%E4%B8%8B%E7%83%A7%E5%86%99lebian%E7%B3%BB%E7%BB%9F/\" target=\"_blank\" rel=\"noopener\">ubuntu16.04下烧写lebian系统</a></p>\n<p>Hikey970使用记录二：<a href=\"https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%BA%8C%EF%BC%9A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85opencv4-0-0/\" target=\"_blank\" rel=\"noopener\">编译安装opencv4.0.0</a>  </p>\n<p>Hikey970使用记录三：<a href=\"https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%89%EF%BC%9AUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/\" target=\"_blank\" rel=\"noopener\">USB转串口驱动安装</a></p>\n<p>Hikey970使用记录四：<a href=\"https://leebinjun.github.io/2019/06/08/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E5%9B%9B%EF%BC%9Apython%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8COpenCL/\" target=\"_blank\" rel=\"noopener\">python加载运行OpenCL</a></p>\n<h2 id=\"hikey970亚克力外壳\"><a href=\"#hikey970亚克力外壳\" class=\"headerlink\" title=\"hikey970亚克力外壳\"></a>hikey970亚克力外壳</h2><ul>\n<li>hikey970 case by Binjun - Thingiverse<br><a href=\"https://www.thingiverse.com/thing:3801720\" target=\"_blank\" rel=\"noopener\">https://www.thingiverse.com/thing:3801720</a></li>\n</ul>\n<p><img src=\"/2019/05/12/Hikey970使用记录/01.png\"></p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"apt-get-安装时出现dpkg-error-processing-package-XXX的问题\"><a href=\"#apt-get-安装时出现dpkg-error-processing-package-XXX的问题\" class=\"headerlink\" title=\"apt-get 安装时出现dpkg: error processing package XXX的问题\"></a>apt-get 安装时出现dpkg: error processing package XXX的问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_backup/</span><br><span class=\"line\">$ sudo mkdir /var/lib/dpkg/info/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Ubuntu在apt-get 安装时出现dpkg: error processing package XXX的问题 - tnaig的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/tnaig/article/details/78497792\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tnaig/article/details/78497792</a></li>\n</ul>\n<ul>\n<li>Linux应用环境实战13：我该如何备份系统 - ichsonx的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/ichsonx/article/details/49387855\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ichsonx/article/details/49387855</a></li>\n</ul>\n<h3 id=\"hub集线器和MobaXterm终端的冲突\"><a href=\"#hub集线器和MobaXterm终端的冲突\" class=\"headerlink\" title=\"hub集线器和MobaXterm终端的冲突\"></a>hub集线器和MobaXterm终端的冲突</h3><p>hikey970的USB口有限，插上hub集线器(鼠标、键盘、摄像头)，终端会掉线。<br>应该是供电问题，hub最好单独供电。</p>\n<h2 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h2><p>截图<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install scrot</span><br><span class=\"line\">sudo scrot</span><br></pre></td></tr></table></figure></p>\n<p>pip指定安装源安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple XXX</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发声\"><a href=\"#发声\" class=\"headerlink\" title=\"发声\"></a>发声</h3><ul>\n<li>usb声卡<br>使用 lsusb 来列出 USB 设备和它的属性，lsusb 会显示驱动和内部连接到你系统的设备。<br>如果无法运行 lsusb，使用以下命令安装。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install usbutils</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shunya@hikey970:~$ lsusb</span><br><span class=\"line\">Bus 002 Device 003: ID 05e3:0612 Genesys Logic, Inc.</span><br><span class=\"line\">Bus 002 Device 002: ID 0451:8140 Texas Instruments, Inc.</span><br><span class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class=\"line\">Bus 001 Device 004: ID 0d8c:0014 C-Media Electronics, Inc.</span><br><span class=\"line\">Bus 001 Device 003: ID 05e3:0610 Genesys Logic, Inc. 4-port hub</span><br><span class=\"line\">Bus 001 Device 002: ID 0451:8142 Texas Instruments, Inc. TUSB8041 4-Port Hub</span><br><span class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure>\n<ul>\n<li>tick<br>找一块带音响的hdmi屏幕。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplay c.wav</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h3><p>默认不支持中文，打开可以看到一个个小框框，里面还有四个字母，可以安装文泉驿的中文字体<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fonts-wqy-zenhei</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"exFat-U盘读取\"><a href=\"#exFat-U盘读取\" class=\"headerlink\" title=\"exFat U盘读取\"></a>exFat U盘读取</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install exfat-utils</span><br></pre></td></tr></table></figure>\n</the>","site":{"data":{}},"excerpt":"<p><strong> Hikey970使用记录 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>Hikey970使用记录一：ubuntu16.04下烧写lebian系统<br>Hikey970使用记录二：编译安装opencv4.0.0<br>Hikey970使用记录三：USB转串口驱动安装<br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<p>Hikey970使用记录一：<a href=\"https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%80%EF%BC%9Aubuntu16-04%E4%B8%8B%E7%83%A7%E5%86%99lebian%E7%B3%BB%E7%BB%9F/\" target=\"_blank\" rel=\"noopener\">ubuntu16.04下烧写lebian系统</a></p>\n<p>Hikey970使用记录二：<a href=\"https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%BA%8C%EF%BC%9A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85opencv4-0-0/\" target=\"_blank\" rel=\"noopener\">编译安装opencv4.0.0</a>  </p>\n<p>Hikey970使用记录三：<a href=\"https://leebinjun.github.io/2019/05/22/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%89%EF%BC%9AUSB%E8%BD%AC%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/\" target=\"_blank\" rel=\"noopener\">USB转串口驱动安装</a></p>\n<p>Hikey970使用记录四：<a href=\"https://leebinjun.github.io/2019/06/08/Hikey970%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E5%9B%9B%EF%BC%9Apython%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8COpenCL/\" target=\"_blank\" rel=\"noopener\">python加载运行OpenCL</a></p>\n<h2 id=\"hikey970亚克力外壳\"><a href=\"#hikey970亚克力外壳\" class=\"headerlink\" title=\"hikey970亚克力外壳\"></a>hikey970亚克力外壳</h2><ul>\n<li>hikey970 case by Binjun - Thingiverse<br><a href=\"https://www.thingiverse.com/thing:3801720\" target=\"_blank\" rel=\"noopener\">https://www.thingiverse.com/thing:3801720</a></li>\n</ul>\n<p><img src=\"/2019/05/12/Hikey970使用记录/01.png\"></p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"apt-get-安装时出现dpkg-error-processing-package-XXX的问题\"><a href=\"#apt-get-安装时出现dpkg-error-processing-package-XXX的问题\" class=\"headerlink\" title=\"apt-get 安装时出现dpkg: error processing package XXX的问题\"></a>apt-get 安装时出现dpkg: error processing package XXX的问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_backup/</span><br><span class=\"line\">$ sudo mkdir /var/lib/dpkg/info/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Ubuntu在apt-get 安装时出现dpkg: error processing package XXX的问题 - tnaig的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/tnaig/article/details/78497792\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tnaig/article/details/78497792</a></li>\n</ul>\n<ul>\n<li>Linux应用环境实战13：我该如何备份系统 - ichsonx的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/ichsonx/article/details/49387855\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ichsonx/article/details/49387855</a></li>\n</ul>\n<h3 id=\"hub集线器和MobaXterm终端的冲突\"><a href=\"#hub集线器和MobaXterm终端的冲突\" class=\"headerlink\" title=\"hub集线器和MobaXterm终端的冲突\"></a>hub集线器和MobaXterm终端的冲突</h3><p>hikey970的USB口有限，插上hub集线器(鼠标、键盘、摄像头)，终端会掉线。<br>应该是供电问题，hub最好单独供电。</p>\n<h2 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h2><p>截图<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install scrot</span><br><span class=\"line\">sudo scrot</span><br></pre></td></tr></table></figure></p>\n<p>pip指定安装源安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple XXX</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发声\"><a href=\"#发声\" class=\"headerlink\" title=\"发声\"></a>发声</h3><ul>\n<li>usb声卡<br>使用 lsusb 来列出 USB 设备和它的属性，lsusb 会显示驱动和内部连接到你系统的设备。<br>如果无法运行 lsusb，使用以下命令安装。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install usbutils</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shunya@hikey970:~$ lsusb</span><br><span class=\"line\">Bus 002 Device 003: ID 05e3:0612 Genesys Logic, Inc.</span><br><span class=\"line\">Bus 002 Device 002: ID 0451:8140 Texas Instruments, Inc.</span><br><span class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class=\"line\">Bus 001 Device 004: ID 0d8c:0014 C-Media Electronics, Inc.</span><br><span class=\"line\">Bus 001 Device 003: ID 05e3:0610 Genesys Logic, Inc. 4-port hub</span><br><span class=\"line\">Bus 001 Device 002: ID 0451:8142 Texas Instruments, Inc. TUSB8041 4-Port Hub</span><br><span class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure>\n<ul>\n<li>tick<br>找一块带音响的hdmi屏幕。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplay c.wav</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h3><p>默认不支持中文，打开可以看到一个个小框框，里面还有四个字母，可以安装文泉驿的中文字体<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fonts-wqy-zenhei</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"exFat-U盘读取\"><a href=\"#exFat-U盘读取\" class=\"headerlink\" title=\"exFat U盘读取\"></a>exFat U盘读取</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install exfat-utils</span><br></pre></td></tr></table></figure>\n</the>"},{"title":"Hikey970使用记录一：ubuntu16.04下烧写lebian系统","date":"2019-05-22T01:53:43.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\nhello hikey!\nubuntu16.04下烧写lebian系统  \n<!-- more -->\n<The rest of contents | 余下全文>\n\n# ubuntu16.04下烧写lebian系统\n## 准备 \n* hikey970 开发板\n* 开发板电源 12V2A\n* ubuntu16.04 主机\n* type-C 数据线\n\n## 安装\n\n安装安卓fastboot  \n``` bash\n$ sudo apt-get install android-tools-adb\n$ sudo apt-get install android-tools-fastboot\n```\n\n## 下载镜像  \n* LeMaker | The Single Board Computers Community  \n http://www.lemaker.org/product-hikey970-download-86.html\n\n``` bash\n$ cd Workplace/\n$ mkdir hikey970work\n$ cd hikey970work/\n$ wget http://mirror.lemaker.org/hikey970-lebian-9.tar.gz\n$ tar -xzvf hikey970-lebian-9.tar.gz\n$ cd hikey970-lebian-9/\n```\n\n版本的镜像有语法错误，要进行修改一下三个文件\n* flash-all-binaries.sh\n* flash-minimum-binaries.sh\n* /binaries/recovery-flash.sh\n``` bash\n$ cat flash-all-binaries.sh\n    #/bin/bash\n    ...\n$ vim flash-all-binaries.sh\n    #!/bin/bash\n    ...\n```\n\n## 烧写\n先把板子上的开关1-4拨为On Off On Off  \n连接typeC线到板子上(注意是HDMI和USB口中间的那个typec口，而不是debug口)  \n开发板上电\n\n``` bash\n~/Workplace/hikey970work/hikey970-lebian-9$ sudo ./flash-all-binaries.sh\n```\n等待刷机完成(100s)\n\n## 刷入分区补丁\n\n默认的系统分区很小，所以需要打一个补丁\n* 分区补丁下载  \nhttps://www.bwbot.org/s/GWciA9\n从上面的的下载地址下载补丁，之后解压。 把解压后的内容复制到 hikey970-lebian-9 文件夹内，执行\n\n``` bash\nsudo fastboot flash boot boot-hikey970.uefi.2.img\nsudo fastboot flash userdata hikey970-lebian9-tf.img\n```\n\n## 启动系统\n断开板子的电源，然后把开关拨至on off off off。给板子连接上鼠标键盘网线和显示器，然后给板子上电，等待系统启动完成。正常情况下应该可以看到登陆界面，用户名和密码都是shunya。\n\n在路由器上查找板子的ip，然后通过ssh 连接就可以了。\n\n### wifi 设备未就绪 的问题\n\n``` bash\nsudo service network-manager restart\n```\n\n## 调整分区\n\n运行下面的指令调整分区\n\n``` bash\n$ sudo resize2fs /dev/sdd15\n```\n\n这样能够把系统分区扩展到20G，剩下的需要用gparted扩展\n\n``` bash\n$ sudo apt-get install gparted\n$ sudo gparted-pkexec # 注意此指令只能再外接显示器的情况下才能运行\n```\n在GParted工具中，首先选择60G的硬盘，再点击与未分配分区相邻的userdata分区（这个镜像对应是/dev/sdd15）进行resize，注意增加分区大小或者合并只能是相邻的分区，如果不是连续，发现中间有swap分区可先删除，然后把未分配的空间全部扩展到最后一个分区，最后应用就可以了。\n``` bash\nshunya@hikey970:~$ df -h\n```\n可以看到系统空间已经增大到50G了\n\n## 更换国内源\n修改源文件\n``` bash\n$ sudo vim /etc/apt/sources.list\n\n    # deb http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free\n    # deb http://http.debian.net/debian/ stretch main contrib non-free\n    # deb-src http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse\n    # deb-src http://http.debian.net/debian/ stretch main contrib non-free\n    # deb http://security.debian.org/ stretch/updates main contrib non-free\n    # deb-src http://security.debian.org/ stretch/updates main contrib non-free\n    # deb http://http.debian.net/debian/ stretch-updates main contrib non-free\n    # deb-src http://security.ubuntu.com/ubuntu xenial-security main\n    # deb https://packages.debian.org/zh-tw/jessie/ xenial-security main\n    # deb-src https://packages.debian.org/zh-tw/jessie/ xenial-security main\n    # deb-src http://http.debian.net/debian/ stretch-updates main contrib non-free\n    # deb-src http://security.ubuntu.com/ubuntu xenial-security main\n    # deb-src http://security.ubuntu.com/ubuntu xenial-security universe\n    deb http://ftp.ports.debian.org/debian-ports/ sid main\n    # deb-src http://ftp.ports.debian.org/debian-ports/ sid main\n    deb http://debian.nctu.edu.tw/debian-ports/ sid main\n    # deb-src debian.nctu.edu.tw/debian-ports/ sid main\n    # deb https://packages.debian.org/ stretch main contrib non-free\n```\n更新\n``` bash\n$ sudo apt-get update\n$ sudo apt-get upgrade\n```\n\n### 没更新源时 ctrl+z 中断下载的 Could not get lock 问题\n删除apt-get操作时的lock\n``` bash\nsudo rm /var/lib/apt/lists/lock \nsudo rm /var/lib/dpkg/lock\nsudo rm /var/cache/apt/archives/lock\nsudo apt-get update\n```\n\n\n## 参考资料\n* 引言 · Hikey 970 开发板使用教程  \nhttps://doc.bwbot.org/en/books-online/hikey970-doc/\n* hikey970学习-005 update image guide 镜像升级指南 - Mingyong_Zhuang的技术博客 - CSDN博客  \nhttps://blog.csdn.net/qqqzmy/article/details/82667142\n* Ubuntu 使用Gparted工具扩大第一分区方法步骤 - zalebool - 博客园  \nhttps://www.cnblogs.com/zalebool/p/5814907.html\n\n\n\n\n","source":"_posts/Hikey970使用记录一：ubuntu16-04下烧写lebian系统.md","raw":"---\ntitle: Hikey970使用记录一：ubuntu16.04下烧写lebian系统\ndate: 2019-05-22 09:53:43\ntags:\n  - Hikey970\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\nhello hikey!\nubuntu16.04下烧写lebian系统  \n<!-- more -->\n<The rest of contents | 余下全文>\n\n# ubuntu16.04下烧写lebian系统\n## 准备 \n* hikey970 开发板\n* 开发板电源 12V2A\n* ubuntu16.04 主机\n* type-C 数据线\n\n## 安装\n\n安装安卓fastboot  \n``` bash\n$ sudo apt-get install android-tools-adb\n$ sudo apt-get install android-tools-fastboot\n```\n\n## 下载镜像  \n* LeMaker | The Single Board Computers Community  \n http://www.lemaker.org/product-hikey970-download-86.html\n\n``` bash\n$ cd Workplace/\n$ mkdir hikey970work\n$ cd hikey970work/\n$ wget http://mirror.lemaker.org/hikey970-lebian-9.tar.gz\n$ tar -xzvf hikey970-lebian-9.tar.gz\n$ cd hikey970-lebian-9/\n```\n\n版本的镜像有语法错误，要进行修改一下三个文件\n* flash-all-binaries.sh\n* flash-minimum-binaries.sh\n* /binaries/recovery-flash.sh\n``` bash\n$ cat flash-all-binaries.sh\n    #/bin/bash\n    ...\n$ vim flash-all-binaries.sh\n    #!/bin/bash\n    ...\n```\n\n## 烧写\n先把板子上的开关1-4拨为On Off On Off  \n连接typeC线到板子上(注意是HDMI和USB口中间的那个typec口，而不是debug口)  \n开发板上电\n\n``` bash\n~/Workplace/hikey970work/hikey970-lebian-9$ sudo ./flash-all-binaries.sh\n```\n等待刷机完成(100s)\n\n## 刷入分区补丁\n\n默认的系统分区很小，所以需要打一个补丁\n* 分区补丁下载  \nhttps://www.bwbot.org/s/GWciA9\n从上面的的下载地址下载补丁，之后解压。 把解压后的内容复制到 hikey970-lebian-9 文件夹内，执行\n\n``` bash\nsudo fastboot flash boot boot-hikey970.uefi.2.img\nsudo fastboot flash userdata hikey970-lebian9-tf.img\n```\n\n## 启动系统\n断开板子的电源，然后把开关拨至on off off off。给板子连接上鼠标键盘网线和显示器，然后给板子上电，等待系统启动完成。正常情况下应该可以看到登陆界面，用户名和密码都是shunya。\n\n在路由器上查找板子的ip，然后通过ssh 连接就可以了。\n\n### wifi 设备未就绪 的问题\n\n``` bash\nsudo service network-manager restart\n```\n\n## 调整分区\n\n运行下面的指令调整分区\n\n``` bash\n$ sudo resize2fs /dev/sdd15\n```\n\n这样能够把系统分区扩展到20G，剩下的需要用gparted扩展\n\n``` bash\n$ sudo apt-get install gparted\n$ sudo gparted-pkexec # 注意此指令只能再外接显示器的情况下才能运行\n```\n在GParted工具中，首先选择60G的硬盘，再点击与未分配分区相邻的userdata分区（这个镜像对应是/dev/sdd15）进行resize，注意增加分区大小或者合并只能是相邻的分区，如果不是连续，发现中间有swap分区可先删除，然后把未分配的空间全部扩展到最后一个分区，最后应用就可以了。\n``` bash\nshunya@hikey970:~$ df -h\n```\n可以看到系统空间已经增大到50G了\n\n## 更换国内源\n修改源文件\n``` bash\n$ sudo vim /etc/apt/sources.list\n\n    # deb http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free\n    deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free\n    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free\n    # deb http://http.debian.net/debian/ stretch main contrib non-free\n    # deb-src http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse\n    # deb-src http://http.debian.net/debian/ stretch main contrib non-free\n    # deb http://security.debian.org/ stretch/updates main contrib non-free\n    # deb-src http://security.debian.org/ stretch/updates main contrib non-free\n    # deb http://http.debian.net/debian/ stretch-updates main contrib non-free\n    # deb-src http://security.ubuntu.com/ubuntu xenial-security main\n    # deb https://packages.debian.org/zh-tw/jessie/ xenial-security main\n    # deb-src https://packages.debian.org/zh-tw/jessie/ xenial-security main\n    # deb-src http://http.debian.net/debian/ stretch-updates main contrib non-free\n    # deb-src http://security.ubuntu.com/ubuntu xenial-security main\n    # deb-src http://security.ubuntu.com/ubuntu xenial-security universe\n    deb http://ftp.ports.debian.org/debian-ports/ sid main\n    # deb-src http://ftp.ports.debian.org/debian-ports/ sid main\n    deb http://debian.nctu.edu.tw/debian-ports/ sid main\n    # deb-src debian.nctu.edu.tw/debian-ports/ sid main\n    # deb https://packages.debian.org/ stretch main contrib non-free\n```\n更新\n``` bash\n$ sudo apt-get update\n$ sudo apt-get upgrade\n```\n\n### 没更新源时 ctrl+z 中断下载的 Could not get lock 问题\n删除apt-get操作时的lock\n``` bash\nsudo rm /var/lib/apt/lists/lock \nsudo rm /var/lib/dpkg/lock\nsudo rm /var/cache/apt/archives/lock\nsudo apt-get update\n```\n\n\n## 参考资料\n* 引言 · Hikey 970 开发板使用教程  \nhttps://doc.bwbot.org/en/books-online/hikey970-doc/\n* hikey970学习-005 update image guide 镜像升级指南 - Mingyong_Zhuang的技术博客 - CSDN博客  \nhttps://blog.csdn.net/qqqzmy/article/details/82667142\n* Ubuntu 使用Gparted工具扩大第一分区方法步骤 - zalebool - 博客园  \nhttps://www.cnblogs.com/zalebool/p/5814907.html\n\n\n\n\n","slug":"Hikey970使用记录一：ubuntu16-04下烧写lebian系统","published":1,"updated":"2020-01-05T19:13:24.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5072000l4cvjnwr2m0b3","content":"<p><strong> Hikey970使用记录一：ubuntu16.04下烧写lebian系统 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>ubuntu16.04下烧写lebian系统<br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n<h1 id=\"ubuntu16-04下烧写lebian系统\"><a href=\"#ubuntu16-04下烧写lebian系统\" class=\"headerlink\" title=\"ubuntu16.04下烧写lebian系统\"></a>ubuntu16.04下烧写lebian系统</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>hikey970 开发板</li>\n<li>开发板电源 12V2A</li>\n<li>ubuntu16.04 主机</li>\n<li>type-C 数据线</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装安卓fastboot<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install android-tools-adb</span><br><span class=\"line\">$ sudo apt-get install android-tools-fastboot</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><ul>\n<li>LeMaker | The Single Board Computers Community<br><a href=\"http://www.lemaker.org/product-hikey970-download-86.html\" target=\"_blank\" rel=\"noopener\">http://www.lemaker.org/product-hikey970-download-86.html</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Workplace/</span><br><span class=\"line\">$ mkdir hikey970work</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hikey970work/</span><br><span class=\"line\">$ wget http://mirror.lemaker.org/hikey970-lebian-9.tar.gz</span><br><span class=\"line\">$ tar -xzvf hikey970-lebian-9.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hikey970-lebian-9/</span><br></pre></td></tr></table></figure>\n<p>版本的镜像有语法错误，要进行修改一下三个文件</p>\n<ul>\n<li>flash-all-binaries.sh</li>\n<li>flash-minimum-binaries.sh</li>\n<li>/binaries/recovery-flash.sh<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat flash-all-binaries.sh</span><br><span class=\"line\">    <span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">$ vim flash-all-binaries.sh</span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"烧写\"><a href=\"#烧写\" class=\"headerlink\" title=\"烧写\"></a>烧写</h2><p>先把板子上的开关1-4拨为On Off On Off<br>连接typeC线到板子上(注意是HDMI和USB口中间的那个typec口，而不是debug口)<br>开发板上电</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Workplace/hikey970work/hikey970-lebian-9$ sudo ./flash-all-binaries.sh</span><br></pre></td></tr></table></figure>\n<p>等待刷机完成(100s)</p>\n<h2 id=\"刷入分区补丁\"><a href=\"#刷入分区补丁\" class=\"headerlink\" title=\"刷入分区补丁\"></a>刷入分区补丁</h2><p>默认的系统分区很小，所以需要打一个补丁</p>\n<ul>\n<li>分区补丁下载<br><a href=\"https://www.bwbot.org/s/GWciA9\" target=\"_blank\" rel=\"noopener\">https://www.bwbot.org/s/GWciA9</a><br>从上面的的下载地址下载补丁，之后解压。 把解压后的内容复制到 hikey970-lebian-9 文件夹内，执行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fastboot flash boot boot-hikey970.uefi.2.img</span><br><span class=\"line\">sudo fastboot flash userdata hikey970-lebian9-tf.img</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动系统\"><a href=\"#启动系统\" class=\"headerlink\" title=\"启动系统\"></a>启动系统</h2><p>断开板子的电源，然后把开关拨至on off off off。给板子连接上鼠标键盘网线和显示器，然后给板子上电，等待系统启动完成。正常情况下应该可以看到登陆界面，用户名和密码都是shunya。</p>\n<p>在路由器上查找板子的ip，然后通过ssh 连接就可以了。</p>\n<h3 id=\"wifi-设备未就绪-的问题\"><a href=\"#wifi-设备未就绪-的问题\" class=\"headerlink\" title=\"wifi 设备未就绪 的问题\"></a>wifi 设备未就绪 的问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service network-manager restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"调整分区\"><a href=\"#调整分区\" class=\"headerlink\" title=\"调整分区\"></a>调整分区</h2><p>运行下面的指令调整分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo resize2fs /dev/sdd15</span><br></pre></td></tr></table></figure>\n<p>这样能够把系统分区扩展到20G，剩下的需要用gparted扩展</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install gparted</span><br><span class=\"line\">$ sudo gparted-pkexec <span class=\"comment\"># 注意此指令只能再外接显示器的情况下才能运行</span></span><br></pre></td></tr></table></figure>\n<p>在GParted工具中，首先选择60G的硬盘，再点击与未分配分区相邻的userdata分区（这个镜像对应是/dev/sdd15）进行resize，注意增加分区大小或者合并只能是相邻的分区，如果不是连续，发现中间有swap分区可先删除，然后把未分配的空间全部扩展到最后一个分区，最后应用就可以了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shunya@hikey970:~$ df -h</span><br></pre></td></tr></table></figure></p>\n<p>可以看到系统空间已经增大到50G了</p>\n<h2 id=\"更换国内源\"><a href=\"#更换国内源\" class=\"headerlink\" title=\"更换国内源\"></a>更换国内源</h2><p>修改源文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># deb http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse</span></span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br><span class=\"line\">    <span class=\"comment\"># deb http://http.debian.net/debian/ stretch main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://http.debian.net/debian/ stretch main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb http://security.debian.org/ stretch/updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.debian.org/ stretch/updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb http://http.debian.net/debian/ stretch-updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.ubuntu.com/ubuntu xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb https://packages.debian.org/zh-tw/jessie/ xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src https://packages.debian.org/zh-tw/jessie/ xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://http.debian.net/debian/ stretch-updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.ubuntu.com/ubuntu xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.ubuntu.com/ubuntu xenial-security universe</span></span><br><span class=\"line\">    deb http://ftp.ports.debian.org/debian-ports/ sid main</span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://ftp.ports.debian.org/debian-ports/ sid main</span></span><br><span class=\"line\">    deb http://debian.nctu.edu.tw/debian-ports/ sid main</span><br><span class=\"line\">    <span class=\"comment\"># deb-src debian.nctu.edu.tw/debian-ports/ sid main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb https://packages.debian.org/ stretch main contrib non-free</span></span><br></pre></td></tr></table></figure></p>\n<p>更新<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"没更新源时-ctrl-z-中断下载的-Could-not-get-lock-问题\"><a href=\"#没更新源时-ctrl-z-中断下载的-Could-not-get-lock-问题\" class=\"headerlink\" title=\"没更新源时 ctrl+z 中断下载的 Could not get lock 问题\"></a>没更新源时 ctrl+z 中断下载的 Could not get lock 问题</h3><p>删除apt-get操作时的lock<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm /var/lib/apt/lists/lock </span><br><span class=\"line\">sudo rm /var/lib/dpkg/lock</span><br><span class=\"line\">sudo rm /var/cache/apt/archives/lock</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>引言 · Hikey 970 开发板使用教程<br><a href=\"https://doc.bwbot.org/en/books-online/hikey970-doc/\" target=\"_blank\" rel=\"noopener\">https://doc.bwbot.org/en/books-online/hikey970-doc/</a></li>\n<li>hikey970学习-005 update image guide 镜像升级指南 - Mingyong_Zhuang的技术博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qqqzmy/article/details/82667142\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qqqzmy/article/details/82667142</a></li>\n<li>Ubuntu 使用Gparted工具扩大第一分区方法步骤 - zalebool - 博客园<br><a href=\"https://www.cnblogs.com/zalebool/p/5814907.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zalebool/p/5814907.html</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> Hikey970使用记录一：ubuntu16.04下烧写lebian系统 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>ubuntu16.04下烧写lebian系统<br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h1 id=\"ubuntu16-04下烧写lebian系统\"><a href=\"#ubuntu16-04下烧写lebian系统\" class=\"headerlink\" title=\"ubuntu16.04下烧写lebian系统\"></a>ubuntu16.04下烧写lebian系统</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>hikey970 开发板</li>\n<li>开发板电源 12V2A</li>\n<li>ubuntu16.04 主机</li>\n<li>type-C 数据线</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装安卓fastboot<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install android-tools-adb</span><br><span class=\"line\">$ sudo apt-get install android-tools-fastboot</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><ul>\n<li>LeMaker | The Single Board Computers Community<br><a href=\"http://www.lemaker.org/product-hikey970-download-86.html\" target=\"_blank\" rel=\"noopener\">http://www.lemaker.org/product-hikey970-download-86.html</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Workplace/</span><br><span class=\"line\">$ mkdir hikey970work</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hikey970work/</span><br><span class=\"line\">$ wget http://mirror.lemaker.org/hikey970-lebian-9.tar.gz</span><br><span class=\"line\">$ tar -xzvf hikey970-lebian-9.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hikey970-lebian-9/</span><br></pre></td></tr></table></figure>\n<p>版本的镜像有语法错误，要进行修改一下三个文件</p>\n<ul>\n<li>flash-all-binaries.sh</li>\n<li>flash-minimum-binaries.sh</li>\n<li>/binaries/recovery-flash.sh<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat flash-all-binaries.sh</span><br><span class=\"line\">    <span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">$ vim flash-all-binaries.sh</span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"烧写\"><a href=\"#烧写\" class=\"headerlink\" title=\"烧写\"></a>烧写</h2><p>先把板子上的开关1-4拨为On Off On Off<br>连接typeC线到板子上(注意是HDMI和USB口中间的那个typec口，而不是debug口)<br>开发板上电</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Workplace/hikey970work/hikey970-lebian-9$ sudo ./flash-all-binaries.sh</span><br></pre></td></tr></table></figure>\n<p>等待刷机完成(100s)</p>\n<h2 id=\"刷入分区补丁\"><a href=\"#刷入分区补丁\" class=\"headerlink\" title=\"刷入分区补丁\"></a>刷入分区补丁</h2><p>默认的系统分区很小，所以需要打一个补丁</p>\n<ul>\n<li>分区补丁下载<br><a href=\"https://www.bwbot.org/s/GWciA9\" target=\"_blank\" rel=\"noopener\">https://www.bwbot.org/s/GWciA9</a><br>从上面的的下载地址下载补丁，之后解压。 把解压后的内容复制到 hikey970-lebian-9 文件夹内，执行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fastboot flash boot boot-hikey970.uefi.2.img</span><br><span class=\"line\">sudo fastboot flash userdata hikey970-lebian9-tf.img</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动系统\"><a href=\"#启动系统\" class=\"headerlink\" title=\"启动系统\"></a>启动系统</h2><p>断开板子的电源，然后把开关拨至on off off off。给板子连接上鼠标键盘网线和显示器，然后给板子上电，等待系统启动完成。正常情况下应该可以看到登陆界面，用户名和密码都是shunya。</p>\n<p>在路由器上查找板子的ip，然后通过ssh 连接就可以了。</p>\n<h3 id=\"wifi-设备未就绪-的问题\"><a href=\"#wifi-设备未就绪-的问题\" class=\"headerlink\" title=\"wifi 设备未就绪 的问题\"></a>wifi 设备未就绪 的问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service network-manager restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"调整分区\"><a href=\"#调整分区\" class=\"headerlink\" title=\"调整分区\"></a>调整分区</h2><p>运行下面的指令调整分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo resize2fs /dev/sdd15</span><br></pre></td></tr></table></figure>\n<p>这样能够把系统分区扩展到20G，剩下的需要用gparted扩展</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install gparted</span><br><span class=\"line\">$ sudo gparted-pkexec <span class=\"comment\"># 注意此指令只能再外接显示器的情况下才能运行</span></span><br></pre></td></tr></table></figure>\n<p>在GParted工具中，首先选择60G的硬盘，再点击与未分配分区相邻的userdata分区（这个镜像对应是/dev/sdd15）进行resize，注意增加分区大小或者合并只能是相邻的分区，如果不是连续，发现中间有swap分区可先删除，然后把未分配的空间全部扩展到最后一个分区，最后应用就可以了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shunya@hikey970:~$ df -h</span><br></pre></td></tr></table></figure></p>\n<p>可以看到系统空间已经增大到50G了</p>\n<h2 id=\"更换国内源\"><a href=\"#更换国内源\" class=\"headerlink\" title=\"更换国内源\"></a>更换国内源</h2><p>修改源文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># deb http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse</span></span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class=\"line\">    deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br><span class=\"line\">    deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br><span class=\"line\">    <span class=\"comment\"># deb http://http.debian.net/debian/ stretch main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://mirrors.ustc.edu.cn/debian/ xenial main restricted universe multiverse</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://http.debian.net/debian/ stretch main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb http://security.debian.org/ stretch/updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.debian.org/ stretch/updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb http://http.debian.net/debian/ stretch-updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.ubuntu.com/ubuntu xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb https://packages.debian.org/zh-tw/jessie/ xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src https://packages.debian.org/zh-tw/jessie/ xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://http.debian.net/debian/ stretch-updates main contrib non-free</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.ubuntu.com/ubuntu xenial-security main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://security.ubuntu.com/ubuntu xenial-security universe</span></span><br><span class=\"line\">    deb http://ftp.ports.debian.org/debian-ports/ sid main</span><br><span class=\"line\">    <span class=\"comment\"># deb-src http://ftp.ports.debian.org/debian-ports/ sid main</span></span><br><span class=\"line\">    deb http://debian.nctu.edu.tw/debian-ports/ sid main</span><br><span class=\"line\">    <span class=\"comment\"># deb-src debian.nctu.edu.tw/debian-ports/ sid main</span></span><br><span class=\"line\">    <span class=\"comment\"># deb https://packages.debian.org/ stretch main contrib non-free</span></span><br></pre></td></tr></table></figure></p>\n<p>更新<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"没更新源时-ctrl-z-中断下载的-Could-not-get-lock-问题\"><a href=\"#没更新源时-ctrl-z-中断下载的-Could-not-get-lock-问题\" class=\"headerlink\" title=\"没更新源时 ctrl+z 中断下载的 Could not get lock 问题\"></a>没更新源时 ctrl+z 中断下载的 Could not get lock 问题</h3><p>删除apt-get操作时的lock<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm /var/lib/apt/lists/lock </span><br><span class=\"line\">sudo rm /var/lib/dpkg/lock</span><br><span class=\"line\">sudo rm /var/cache/apt/archives/lock</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>引言 · Hikey 970 开发板使用教程<br><a href=\"https://doc.bwbot.org/en/books-online/hikey970-doc/\" target=\"_blank\" rel=\"noopener\">https://doc.bwbot.org/en/books-online/hikey970-doc/</a></li>\n<li>hikey970学习-005 update image guide 镜像升级指南 - Mingyong_Zhuang的技术博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qqqzmy/article/details/82667142\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qqqzmy/article/details/82667142</a></li>\n<li>Ubuntu 使用Gparted工具扩大第一分区方法步骤 - zalebool - 博客园<br><a href=\"https://www.cnblogs.com/zalebool/p/5814907.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zalebool/p/5814907.html</a></li>\n</ul>\n</the>"},{"title":"Hikey970使用记录三：USB转串口驱动安装","date":"2019-05-22T01:54:51.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要> \nhello hikey!  \nUSB转串口驱动安装    \n* 3. usb转串口驱动安装 · Hikey 970 开发板使用教程  \nhttps://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n安装USB转串口驱动需要编译对应的驱动程序,方法如下。\n\n## 下载linux内核源码\n``` bash\n$ git clone --single-branch -b hikey970-v4.9 --depth=1 https://github.com/96boards-hikey/linux\n$ cd linux\n$ ls\n$ git checkout hikey970-v4.9\n```\n\n## 配置内核源代码\n获取内核配置文件\n``` bash\ncp /proc/config.gz ~/\ngzip -d ~/config.gz\n```\n进入内核源代码文件夹\n``` bash\ncd ~/linux\n```\n将内核配置文件复制到此处\n``` bash\nmake mrproper\ncp ~/config .config\nsudo chmod 666 .config\n```\n配置内核文件\n``` bash\nsudo apt-get install libncurses5-dev\nsudo apt-get install bc\nmake menuconfig\n```\n内核配置界面如下,Device Drivers-->USB Support --> USB Serial Converter Support 将其设置成M。编译内核module有两种模式，一种是直接编译到内核里面，另一种是编译成独立的.ko文件module。我们采用的是.ko的模式。这样不用重新编译内核更加方便。 继续进入此选项将想要编译的驱动设置成M，如果不清楚自己的型号可以全部设置成M 设置完成后选择保存，之后再退出此界面  \n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\01.png\" witdh=1200 height=600>\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\02.png\" witdh=1200 height=600>\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\03.png\" witdh=1200 height=600>\n\n## 编译驱动module\n``` bash\nmake modules_prepare\nsudo make -j4 modules # 需要执行这个才会生成modules.order,modules.builtin\nsudo make M=drivers/usb/serial\n```\n编译完成之后可以在drivers/usb/serial中看到生成了许多.ko文件,这些就是我们需要的驱动文件。\n\n## 安装驱动module\n创建module文件目录\n``` bash\nsudo mkdir -p /lib/modules/$(uname -r)/kernel/drivers/usb/serial/\nsudo cp drivers/usb/serial/*.ko /lib/modules/$(uname -r)/kernel/drivers/usb/serial/\n```\n复制depmod依赖文件\n``` bash\nsudo cp ~/linux/modules.order /lib/modules/$(uname -r)/\nsudo cp ~/linux/modules.builtin /lib/modules/$(uname -r)/\n```\n生成对应文件\n``` bash\ncd /lib/modules/$(uname -r)\nsudo depmod -a\n```\n加载驱动\n``` bash\nsudo modprobe pl2303\n```\n\n## 测试驱动\n\n查看驱动是否正常加载\n``` bash\n$ lsmod\n```\n可以看到pl2303驱动已经成功加载,这时再插上U转串试一下\n``` bash\n$ ls /dev/tty*\n```\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\04.png\" witdh=1200 height=600>\n  \n## 自动加载驱动\n修改 /etc/modules文件 在其中加入想要加载的内核模块的名称，比如对于我的设备就是pl2303。文件内容如下  \n``` bash\n$ sudo vim /etc/modules\n\n    # /etc/modules: kernel modules to load at boot time.\n    #\n    # This file contains the names of kernel modules that should be loaded\n    # at boot time, one per line. Lines beginning with \"#\" are ignored.\n    pl2303\n```\n保存退出，下次在系统启动时就会自动加载这个驱动了。\n\n\n## 串口测试\n``` bash\n$ pip3 install pyserial\n$ python\n>>> import serial\n```\n\n## 问题记录\n\n### 明明已经安装matplotlib 还是报错ImportError: No module named 'matplotlib'\nsudo下环境和虚拟环境不同。\n``` bash\n$ sudo apt-get install python-matplotlib\n```\n### sudo python 下找不到模块\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\05.png\" witdh=600 height=300>\n\n在 .py 文件中添加 sys.path\n``` bash\n$ vim serial_test.py\n    import sys\n    sys.path.append(\"/home/shunya/.local/lib/python3.5/site-packages\")\n    import serial\n$ sudo python serial_test.py\n```\n\n\n## 参考资料\n* 3. usb转串口驱动安装 · Hikey 970 开发板使用教程  \nhttps://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\n\n","source":"_posts/Hikey970使用记录三：USB转串口驱动安装.md","raw":"---\ntitle: Hikey970使用记录三：USB转串口驱动安装\ndate: 2019-05-22 09:54:51\ntags:\n  - Hikey970\n---\n** {{ title }} ** <Excerpt in index | 首页摘要> \nhello hikey!  \nUSB转串口驱动安装    \n* 3. usb转串口驱动安装 · Hikey 970 开发板使用教程  \nhttps://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n安装USB转串口驱动需要编译对应的驱动程序,方法如下。\n\n## 下载linux内核源码\n``` bash\n$ git clone --single-branch -b hikey970-v4.9 --depth=1 https://github.com/96boards-hikey/linux\n$ cd linux\n$ ls\n$ git checkout hikey970-v4.9\n```\n\n## 配置内核源代码\n获取内核配置文件\n``` bash\ncp /proc/config.gz ~/\ngzip -d ~/config.gz\n```\n进入内核源代码文件夹\n``` bash\ncd ~/linux\n```\n将内核配置文件复制到此处\n``` bash\nmake mrproper\ncp ~/config .config\nsudo chmod 666 .config\n```\n配置内核文件\n``` bash\nsudo apt-get install libncurses5-dev\nsudo apt-get install bc\nmake menuconfig\n```\n内核配置界面如下,Device Drivers-->USB Support --> USB Serial Converter Support 将其设置成M。编译内核module有两种模式，一种是直接编译到内核里面，另一种是编译成独立的.ko文件module。我们采用的是.ko的模式。这样不用重新编译内核更加方便。 继续进入此选项将想要编译的驱动设置成M，如果不清楚自己的型号可以全部设置成M 设置完成后选择保存，之后再退出此界面  \n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\01.png\" witdh=1200 height=600>\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\02.png\" witdh=1200 height=600>\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\03.png\" witdh=1200 height=600>\n\n## 编译驱动module\n``` bash\nmake modules_prepare\nsudo make -j4 modules # 需要执行这个才会生成modules.order,modules.builtin\nsudo make M=drivers/usb/serial\n```\n编译完成之后可以在drivers/usb/serial中看到生成了许多.ko文件,这些就是我们需要的驱动文件。\n\n## 安装驱动module\n创建module文件目录\n``` bash\nsudo mkdir -p /lib/modules/$(uname -r)/kernel/drivers/usb/serial/\nsudo cp drivers/usb/serial/*.ko /lib/modules/$(uname -r)/kernel/drivers/usb/serial/\n```\n复制depmod依赖文件\n``` bash\nsudo cp ~/linux/modules.order /lib/modules/$(uname -r)/\nsudo cp ~/linux/modules.builtin /lib/modules/$(uname -r)/\n```\n生成对应文件\n``` bash\ncd /lib/modules/$(uname -r)\nsudo depmod -a\n```\n加载驱动\n``` bash\nsudo modprobe pl2303\n```\n\n## 测试驱动\n\n查看驱动是否正常加载\n``` bash\n$ lsmod\n```\n可以看到pl2303驱动已经成功加载,这时再插上U转串试一下\n``` bash\n$ ls /dev/tty*\n```\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\04.png\" witdh=1200 height=600>\n  \n## 自动加载驱动\n修改 /etc/modules文件 在其中加入想要加载的内核模块的名称，比如对于我的设备就是pl2303。文件内容如下  \n``` bash\n$ sudo vim /etc/modules\n\n    # /etc/modules: kernel modules to load at boot time.\n    #\n    # This file contains the names of kernel modules that should be loaded\n    # at boot time, one per line. Lines beginning with \"#\" are ignored.\n    pl2303\n```\n保存退出，下次在系统启动时就会自动加载这个驱动了。\n\n\n## 串口测试\n``` bash\n$ pip3 install pyserial\n$ python\n>>> import serial\n```\n\n## 问题记录\n\n### 明明已经安装matplotlib 还是报错ImportError: No module named 'matplotlib'\nsudo下环境和虚拟环境不同。\n``` bash\n$ sudo apt-get install python-matplotlib\n```\n### sudo python 下找不到模块\n<img src=\"Hikey970使用记录三：USB转串口驱动安装\\05.png\" witdh=600 height=300>\n\n在 .py 文件中添加 sys.path\n``` bash\n$ vim serial_test.py\n    import sys\n    sys.path.append(\"/home/shunya/.local/lib/python3.5/site-packages\")\n    import serial\n$ sudo python serial_test.py\n```\n\n\n## 参考资料\n* 3. usb转串口驱动安装 · Hikey 970 开发板使用教程  \nhttps://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\n\n","slug":"Hikey970使用记录三：USB转串口驱动安装","published":1,"updated":"2020-01-05T19:13:24.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5072000n4cvjv0ntsu0a","content":"<p><strong> Hikey970使用记录三：USB转串口驱动安装 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>USB转串口驱动安装    </excerpt></p>\n<ul>\n<li><ol>\n<li>usb转串口驱动安装 · Hikey 970 开发板使用教程<br><a href=\"https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\" target=\"_blank\" rel=\"noopener\">https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html</a><a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n</the></li>\n</ol>\n</li>\n</ul>\n<p>安装USB转串口驱动需要编译对应的驱动程序,方法如下。</p>\n<h2 id=\"下载linux内核源码\"><a href=\"#下载linux内核源码\" class=\"headerlink\" title=\"下载linux内核源码\"></a>下载linux内核源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --single-branch -b hikey970-v4.9 --depth=1 https://github.com/96boards-hikey/linux</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> linux</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">$ git checkout hikey970-v4.9</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置内核源代码\"><a href=\"#配置内核源代码\" class=\"headerlink\" title=\"配置内核源代码\"></a>配置内核源代码</h2><p>获取内核配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /proc/config.gz ~/</span><br><span class=\"line\">gzip -d ~/config.gz</span><br></pre></td></tr></table></figure></p>\n<p>进入内核源代码文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/linux</span><br></pre></td></tr></table></figure></p>\n<p>将内核配置文件复制到此处<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make mrproper</span><br><span class=\"line\">cp ~/config .config</span><br><span class=\"line\">sudo chmod 666 .config</span><br></pre></td></tr></table></figure></p>\n<p>配置内核文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libncurses5-dev</span><br><span class=\"line\">sudo apt-get install bc</span><br><span class=\"line\">make menuconfig</span><br></pre></td></tr></table></figure></p>\n<p>内核配置界面如下,Device Drivers—&gt;USB Support —&gt; USB Serial Converter Support 将其设置成M。编译内核module有两种模式，一种是直接编译到内核里面，另一种是编译成独立的.ko文件module。我们采用的是.ko的模式。这样不用重新编译内核更加方便。 继续进入此选项将想要编译的驱动设置成M，如果不清楚自己的型号可以全部设置成M 设置完成后选择保存，之后再退出此界面<br><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/01.png\" witdh=\"1200\" height=\"600\"><br><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/02.png\" witdh=\"1200\" height=\"600\"><br><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/03.png\" witdh=\"1200\" height=\"600\"></p>\n<h2 id=\"编译驱动module\"><a href=\"#编译驱动module\" class=\"headerlink\" title=\"编译驱动module\"></a>编译驱动module</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make modules_prepare</span><br><span class=\"line\">sudo make -j4 modules <span class=\"comment\"># 需要执行这个才会生成modules.order,modules.builtin</span></span><br><span class=\"line\">sudo make M=drivers/usb/serial</span><br></pre></td></tr></table></figure>\n<p>编译完成之后可以在drivers/usb/serial中看到生成了许多.ko文件,这些就是我们需要的驱动文件。</p>\n<h2 id=\"安装驱动module\"><a href=\"#安装驱动module\" class=\"headerlink\" title=\"安装驱动module\"></a>安装驱动module</h2><p>创建module文件目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /lib/modules/$(uname -r)/kernel/drivers/usb/serial/</span><br><span class=\"line\">sudo cp drivers/usb/serial/*.ko /lib/modules/$(uname -r)/kernel/drivers/usb/serial/</span><br></pre></td></tr></table></figure></p>\n<p>复制depmod依赖文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp ~/linux/modules.order /lib/modules/$(uname -r)/</span><br><span class=\"line\">sudo cp ~/linux/modules.builtin /lib/modules/$(uname -r)/</span><br></pre></td></tr></table></figure></p>\n<p>生成对应文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/$(uname -r)</span><br><span class=\"line\">sudo depmod -a</span><br></pre></td></tr></table></figure></p>\n<p>加载驱动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe pl2303</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试驱动\"><a href=\"#测试驱动\" class=\"headerlink\" title=\"测试驱动\"></a>测试驱动</h2><p>查看驱动是否正常加载<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsmod</span><br></pre></td></tr></table></figure></p>\n<p>可以看到pl2303驱动已经成功加载,这时再插上U转串试一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls /dev/tty*</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/04.png\" witdh=\"1200\" height=\"600\"></p>\n<h2 id=\"自动加载驱动\"><a href=\"#自动加载驱动\" class=\"headerlink\" title=\"自动加载驱动\"></a>自动加载驱动</h2><p>修改 /etc/modules文件 在其中加入想要加载的内核模块的名称，比如对于我的设备就是pl2303。文件内容如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/modules</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># /etc/modules: kernel modules to load at boot time.</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># This file contains the names of kernel modules that should be loaded</span></span><br><span class=\"line\">    <span class=\"comment\"># at boot time, one per line. Lines beginning with \"#\" are ignored.</span></span><br><span class=\"line\">    pl2303</span><br></pre></td></tr></table></figure></p>\n<p>保存退出，下次在系统启动时就会自动加载这个驱动了。</p>\n<h2 id=\"串口测试\"><a href=\"#串口测试\" class=\"headerlink\" title=\"串口测试\"></a>串口测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install pyserial</span><br><span class=\"line\">$ python</span><br><span class=\"line\">&gt;&gt;&gt; import serial</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"明明已经安装matplotlib-还是报错ImportError-No-module-named-‘matplotlib’\"><a href=\"#明明已经安装matplotlib-还是报错ImportError-No-module-named-‘matplotlib’\" class=\"headerlink\" title=\"明明已经安装matplotlib 还是报错ImportError: No module named ‘matplotlib’\"></a>明明已经安装matplotlib 还是报错ImportError: No module named ‘matplotlib’</h3><p>sudo下环境和虚拟环境不同。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-matplotlib</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"sudo-python-下找不到模块\"><a href=\"#sudo-python-下找不到模块\" class=\"headerlink\" title=\"sudo python 下找不到模块\"></a>sudo python 下找不到模块</h3><p><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/05.png\" witdh=\"600\" height=\"300\"></p>\n<p>在 .py 文件中添加 sys.path<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim serial_test.py</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    sys.path.append(<span class=\"string\">\"/home/shunya/.local/lib/python3.5/site-packages\"</span>)</span><br><span class=\"line\">    import serial</span><br><span class=\"line\">$ sudo python serial_test.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><ol>\n<li>usb转串口驱动安装 · Hikey 970 开发板使用教程<br><a href=\"https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\" target=\"_blank\" rel=\"noopener\">https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html</a></li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong> Hikey970使用记录三：USB转串口驱动安装 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>USB转串口驱动安装    </excerpt></p>\n<ul>\n<li><ol>\n<li>usb转串口驱动安装 · Hikey 970 开发板使用教程<br><a href=\"https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\" target=\"_blank\" rel=\"noopener\">https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html</a></li></ol></li></ul>","more":"<the rest of contents | 余下全文>\n\n\n</the>\n\n\n\n<p>安装USB转串口驱动需要编译对应的驱动程序,方法如下。</p>\n<h2 id=\"下载linux内核源码\"><a href=\"#下载linux内核源码\" class=\"headerlink\" title=\"下载linux内核源码\"></a>下载linux内核源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --single-branch -b hikey970-v4.9 --depth=1 https://github.com/96boards-hikey/linux</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> linux</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">$ git checkout hikey970-v4.9</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置内核源代码\"><a href=\"#配置内核源代码\" class=\"headerlink\" title=\"配置内核源代码\"></a>配置内核源代码</h2><p>获取内核配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /proc/config.gz ~/</span><br><span class=\"line\">gzip -d ~/config.gz</span><br></pre></td></tr></table></figure></p>\n<p>进入内核源代码文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/linux</span><br></pre></td></tr></table></figure></p>\n<p>将内核配置文件复制到此处<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make mrproper</span><br><span class=\"line\">cp ~/config .config</span><br><span class=\"line\">sudo chmod 666 .config</span><br></pre></td></tr></table></figure></p>\n<p>配置内核文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libncurses5-dev</span><br><span class=\"line\">sudo apt-get install bc</span><br><span class=\"line\">make menuconfig</span><br></pre></td></tr></table></figure></p>\n<p>内核配置界面如下,Device Drivers—&gt;USB Support —&gt; USB Serial Converter Support 将其设置成M。编译内核module有两种模式，一种是直接编译到内核里面，另一种是编译成独立的.ko文件module。我们采用的是.ko的模式。这样不用重新编译内核更加方便。 继续进入此选项将想要编译的驱动设置成M，如果不清楚自己的型号可以全部设置成M 设置完成后选择保存，之后再退出此界面<br><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/01.png\" witdh=\"1200\" height=\"600\"><br><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/02.png\" witdh=\"1200\" height=\"600\"><br><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/03.png\" witdh=\"1200\" height=\"600\"></p>\n<h2 id=\"编译驱动module\"><a href=\"#编译驱动module\" class=\"headerlink\" title=\"编译驱动module\"></a>编译驱动module</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make modules_prepare</span><br><span class=\"line\">sudo make -j4 modules <span class=\"comment\"># 需要执行这个才会生成modules.order,modules.builtin</span></span><br><span class=\"line\">sudo make M=drivers/usb/serial</span><br></pre></td></tr></table></figure>\n<p>编译完成之后可以在drivers/usb/serial中看到生成了许多.ko文件,这些就是我们需要的驱动文件。</p>\n<h2 id=\"安装驱动module\"><a href=\"#安装驱动module\" class=\"headerlink\" title=\"安装驱动module\"></a>安装驱动module</h2><p>创建module文件目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /lib/modules/$(uname -r)/kernel/drivers/usb/serial/</span><br><span class=\"line\">sudo cp drivers/usb/serial/*.ko /lib/modules/$(uname -r)/kernel/drivers/usb/serial/</span><br></pre></td></tr></table></figure></p>\n<p>复制depmod依赖文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp ~/linux/modules.order /lib/modules/$(uname -r)/</span><br><span class=\"line\">sudo cp ~/linux/modules.builtin /lib/modules/$(uname -r)/</span><br></pre></td></tr></table></figure></p>\n<p>生成对应文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/$(uname -r)</span><br><span class=\"line\">sudo depmod -a</span><br></pre></td></tr></table></figure></p>\n<p>加载驱动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe pl2303</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试驱动\"><a href=\"#测试驱动\" class=\"headerlink\" title=\"测试驱动\"></a>测试驱动</h2><p>查看驱动是否正常加载<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsmod</span><br></pre></td></tr></table></figure></p>\n<p>可以看到pl2303驱动已经成功加载,这时再插上U转串试一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls /dev/tty*</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/04.png\" witdh=\"1200\" height=\"600\"></p>\n<h2 id=\"自动加载驱动\"><a href=\"#自动加载驱动\" class=\"headerlink\" title=\"自动加载驱动\"></a>自动加载驱动</h2><p>修改 /etc/modules文件 在其中加入想要加载的内核模块的名称，比如对于我的设备就是pl2303。文件内容如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/modules</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># /etc/modules: kernel modules to load at boot time.</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># This file contains the names of kernel modules that should be loaded</span></span><br><span class=\"line\">    <span class=\"comment\"># at boot time, one per line. Lines beginning with \"#\" are ignored.</span></span><br><span class=\"line\">    pl2303</span><br></pre></td></tr></table></figure></p>\n<p>保存退出，下次在系统启动时就会自动加载这个驱动了。</p>\n<h2 id=\"串口测试\"><a href=\"#串口测试\" class=\"headerlink\" title=\"串口测试\"></a>串口测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install pyserial</span><br><span class=\"line\">$ python</span><br><span class=\"line\">&gt;&gt;&gt; import serial</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"明明已经安装matplotlib-还是报错ImportError-No-module-named-‘matplotlib’\"><a href=\"#明明已经安装matplotlib-还是报错ImportError-No-module-named-‘matplotlib’\" class=\"headerlink\" title=\"明明已经安装matplotlib 还是报错ImportError: No module named ‘matplotlib’\"></a>明明已经安装matplotlib 还是报错ImportError: No module named ‘matplotlib’</h3><p>sudo下环境和虚拟环境不同。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-matplotlib</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"sudo-python-下找不到模块\"><a href=\"#sudo-python-下找不到模块\" class=\"headerlink\" title=\"sudo python 下找不到模块\"></a>sudo python 下找不到模块</h3><p><img src=\"/2019/05/22/Hikey970使用记录三：USB转串口驱动安装/05.png\" witdh=\"600\" height=\"300\"></p>\n<p>在 .py 文件中添加 sys.path<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim serial_test.py</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    sys.path.append(<span class=\"string\">\"/home/shunya/.local/lib/python3.5/site-packages\"</span>)</span><br><span class=\"line\">    import serial</span><br><span class=\"line\">$ sudo python serial_test.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><ol>\n<li>usb转串口驱动安装 · Hikey 970 开发板使用教程<br><a href=\"https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html\" target=\"_blank\" rel=\"noopener\">https://doc.bwbot.org/zh-cn/books-online/hikey970-doc/topic/485.html</a></li>\n</ol>\n</li>\n</ul>"},{"title":"Hikey970使用记录五：安装测试dlib19","date":"2019-08-18T16:02:20.000Z","_content":"\n\n## 安装\n安装相关依赖\n``` bash\nsudo apt install build-essential cmake pkg-config\nsudo apt install libboost-dev libopenblas-dev\n```\n\n下载安装包并安装\n```\nwget http://dlib.net/files/dlib-19.17.tar.bz2\ntar -jxvf dlib-19.17.tar.bz2\ncd dlib-19.17\npython setup.py install\n```\n\n## 测试\n``` bash\nimport dlib\n```\n\n\n\n","source":"_posts/Hikey970使用记录五：安装测试dlib19.md","raw":"---\ntitle: Hikey970使用记录五：安装测试dlib19\ndate: 2019-08-19 00:02:20\ntags:\n---\n\n\n## 安装\n安装相关依赖\n``` bash\nsudo apt install build-essential cmake pkg-config\nsudo apt install libboost-dev libopenblas-dev\n```\n\n下载安装包并安装\n```\nwget http://dlib.net/files/dlib-19.17.tar.bz2\ntar -jxvf dlib-19.17.tar.bz2\ncd dlib-19.17\npython setup.py install\n```\n\n## 测试\n``` bash\nimport dlib\n```\n\n\n\n","slug":"Hikey970使用记录五：安装测试dlib19","published":1,"updated":"2020-01-05T19:13:24.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5073000q4cvjmqphdo9w","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装相关依赖<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install build-essential cmake pkg-config</span><br><span class=\"line\">sudo apt install libboost-dev libopenblas-dev</span><br></pre></td></tr></table></figure></p>\n<p>下载安装包并安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dlib.net/files/dlib-19.17.tar.bz2</span><br><span class=\"line\">tar -jxvf dlib-19.17.tar.bz2</span><br><span class=\"line\">cd dlib-19.17</span><br><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dlib</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装相关依赖<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install build-essential cmake pkg-config</span><br><span class=\"line\">sudo apt install libboost-dev libopenblas-dev</span><br></pre></td></tr></table></figure></p>\n<p>下载安装包并安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dlib.net/files/dlib-19.17.tar.bz2</span><br><span class=\"line\">tar -jxvf dlib-19.17.tar.bz2</span><br><span class=\"line\">cd dlib-19.17</span><br><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dlib</span><br></pre></td></tr></table></figure>\n"},{"title":"Hikey970使用记录二：编译安装opencv4.0.0","date":"2019-05-22T01:54:03.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\nhello hikey!\n编译安装opencv4.0.0  \n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 编译安装opencv4.0.0\n## 准备\n\n查看ip\n``` bash\n$ ip addr\n```\n\n调整系统默认python版本\n``` bash\n$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1\n$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2\n$ update-alternatives --config python\n$ python\n```\n\n电源管理中关屏保  \n更新源\n``` bash\n$ sudo apt-get update\n$ sudo apt-get upgrade\n```\n### 相关依赖\n``` bash\n$ sudo apt-get install build-essential pkg-config\n$ sudo apt-get install cmake\n$ sudo apt-get install libjpeg-dev\n$ sudo apt-get install libtiff5-dev\n$ sudo apt-get install libpng12-dev\n$ sudo apt-get install libpng-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\n$ sudo apt-get install libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk2.0-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python3-dev\n```\n\n``` bash\n$ sudo apt-get install libjasper-dev\n```\nlibjasper-dev安装可能会报错，原因是Arm64架构的版本目前还没有被Debian官方收录，可以通过直接下载deb文件安装，注意相关依赖和包的冲突。\n\n\n删除与libjpeg-turbo8冲突的包\n``` bash\n$ sudo apt-get --purge remove libturbojpeg0\n$ sudo apt-get --purge remove libjpeg62-turbo-dev\n$ sudo apt --fix-broken install\n```\n下载相关包并按依赖关系依次安装\n``` bash\n$ wget https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502/+files/libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb\n$ sudo dpkg -i libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb\n$ wget http://launchpadlibrarian.net/152841589/libjpeg8_8c-2ubuntu8_arm64.deb\n$ sudo dpkg -i libjpeg8_8c-2ubuntu8_arm64.deb\n$ wget http://launchpadlibrarian.net/376191785/libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n$ sudo dpkg -i libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n$ wget http://launchpadlibrarian.net/376191781/libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n$ sudo dpkg -i libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n```\n相关下载地址\n* arm64 build of libjpeg-turbo 1.3.0-0ubuntu1.1 : Private PPA for Ubuntu Security Team : “Ubuntu Security Team” team  \nhttps://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502\n\n\n### 下载opencv源码\n``` bash\n$ cd Workplace/opencv/\n$ wget https://github.com/opencv/opencv/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n```\n下载比较慢，建议提前下好后上传\n\n### 设置编译环境\n安装cmake-qt-gui，使用图形界面  \n使用MobaXterm时，CMake界面可以弹出  \n``` bash\n$ mkdir build\n$ cd build/\n$ sudo apt-get install cmake-qt-gui\n$ cmake-gui\n```\n\n选择源文件路径，编译文件夹选择刚才新建的build文件夹\n点击左下角Configure，默认Generator为Unix Makefile，完成后界面变红\n\n然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0/modules的路径填进去，点击左下角Configure，如图\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0\\01.png\" height=300 width=600 >\n\n开启python接口选项，注意PYTHON3的参数，路径没有问题BUILD_opencv_python3会自动生成。  \n勾选INSTALL_PYTHON_EXMAPLES\n再次点击Configure\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0\\03.png\" height=300 width=600 >\n\n\n生成编译文件时，face_landmark_model.dat可能下载不了，所以提前将其下载，并放入./cache/data/文件夹下，重命名为7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat\n* face_landmark_model.dat 下载地址  \nhttps://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat\n\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0\\02.png\" height=150 width=510 >\n\n然后就可以生成编译文件了，点击Generate\n\n### 调整SWAP分区\n\n``` bash\n$ cd /var && ls\n```\n创建一个swap文件,如果已经有swap就卸载它\n``` bash\n$ sudo swapoff swap \n```\n删除swap虚拟内存文件:\n``` bash\n$ rm /var/swap\n```\n使用dd命令创建一个文件，of后面跟你需要创建swap的位置\n``` bash\n$ sudo dd if=/dev/zero of=swap bs=1M count=4096\n```\n格式化为swap文件\n``` bash\n$ sudo mkswap swap \n```\n装载新的swap文件\n``` bash\n$ sudo swapon swap \n$ htop\n```\n可以在htop中看到swap分区大小为4GB，完成  \n注意每次reboot后swap分区不会自动挂载\n\n## 编译\n确定一下swap分区\n``` bash\n$ htop\n```\n\n键入下述命令开始编译\n``` bash\n$ sudo make -j4\n```\n安装\n``` bash\n$ sudo make install \n$ sudo ldconfig\n```\n\n因编译后的库文件cv2.so生成位置为usr/local/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so，或者在~/Workplace/opencv/opencv-4.0.0/build/lib/python3/cv2.cpython-35m-aarch64-linux-gnu.so，这将导致该模块在Python3中无法import进来，将其拷贝到python3的第三方库文件夹dist-packages下并添加软链接\n``` bash\n$ sudo cp /usr/local/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so /usr/local/lib/python3.5/dist-packages\n$ cd /usr/local/lib/python3.5/dist-packages/\n$ ls\n$ sudo ln -s cv2.cpython-35m-aarch64-linux-gnu.so cv2.so\n```\n\nimport cv2 没有报错，则安装正常\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0/04.png\" height=100 width=600>\n\n\n### 问题：ImportError: numpy.core.multiarray failed to import  \n出现这个错误的原因是numpy的版本太低了\n``` bash\n$ pip3 install -U numpy\n```\n\n\n\n### 创建虚拟环境\n\n``` bash\n$ pip3 install virtualenv\n$ virtualenv\n-bash: virtualenv: command not found\n$ sudo apt-get install python-virtualenv\n$ virtualenv\n-bash: virtualenv: command not found\n$ sudo find / -name virtualenv\n$ /home/shunya/.local/bin/virtualenv py35 -p /usr/bin/python3\n$ source ~/python-env/py35/bin/activate\n```\n\n\n### 测试_人体姿态点检测\n``` bash\n$ pip3 install scipy\n$ cd Workplace/pose/\n$ python main.py\n```\n\n## 参考资料\n* face_landmark_model.dat 下载地址 - dspeia的博客 - CSDN博客  \nhttps://blog.csdn.net/qq_34806812/article/details/82501999\n* hikey970学习-011 hikey970上安装opencv - Mingyong_Zhuang的技术博客 - CSDN博客  \nhttps://blog.csdn.net/qqqzmy/article/details/82855377\n","source":"_posts/Hikey970使用记录二：编译安装opencv4-0-0.md","raw":"---\ntitle: Hikey970使用记录二：编译安装opencv4.0.0\ndate: 2019-05-22 09:54:03\ntags:\n  - Hikey970\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\nhello hikey!\n编译安装opencv4.0.0  \n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 编译安装opencv4.0.0\n## 准备\n\n查看ip\n``` bash\n$ ip addr\n```\n\n调整系统默认python版本\n``` bash\n$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1\n$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2\n$ update-alternatives --config python\n$ python\n```\n\n电源管理中关屏保  \n更新源\n``` bash\n$ sudo apt-get update\n$ sudo apt-get upgrade\n```\n### 相关依赖\n``` bash\n$ sudo apt-get install build-essential pkg-config\n$ sudo apt-get install cmake\n$ sudo apt-get install libjpeg-dev\n$ sudo apt-get install libtiff5-dev\n$ sudo apt-get install libpng12-dev\n$ sudo apt-get install libpng-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\n$ sudo apt-get install libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk2.0-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python3-dev\n```\n\n``` bash\n$ sudo apt-get install libjasper-dev\n```\nlibjasper-dev安装可能会报错，原因是Arm64架构的版本目前还没有被Debian官方收录，可以通过直接下载deb文件安装，注意相关依赖和包的冲突。\n\n\n删除与libjpeg-turbo8冲突的包\n``` bash\n$ sudo apt-get --purge remove libturbojpeg0\n$ sudo apt-get --purge remove libjpeg62-turbo-dev\n$ sudo apt --fix-broken install\n```\n下载相关包并按依赖关系依次安装\n``` bash\n$ wget https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502/+files/libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb\n$ sudo dpkg -i libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb\n$ wget http://launchpadlibrarian.net/152841589/libjpeg8_8c-2ubuntu8_arm64.deb\n$ sudo dpkg -i libjpeg8_8c-2ubuntu8_arm64.deb\n$ wget http://launchpadlibrarian.net/376191785/libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n$ sudo dpkg -i libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n$ wget http://launchpadlibrarian.net/376191781/libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n$ sudo dpkg -i libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb\n```\n相关下载地址\n* arm64 build of libjpeg-turbo 1.3.0-0ubuntu1.1 : Private PPA for Ubuntu Security Team : “Ubuntu Security Team” team  \nhttps://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502\n\n\n### 下载opencv源码\n``` bash\n$ cd Workplace/opencv/\n$ wget https://github.com/opencv/opencv/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n```\n下载比较慢，建议提前下好后上传\n\n### 设置编译环境\n安装cmake-qt-gui，使用图形界面  \n使用MobaXterm时，CMake界面可以弹出  \n``` bash\n$ mkdir build\n$ cd build/\n$ sudo apt-get install cmake-qt-gui\n$ cmake-gui\n```\n\n选择源文件路径，编译文件夹选择刚才新建的build文件夹\n点击左下角Configure，默认Generator为Unix Makefile，完成后界面变红\n\n然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0/modules的路径填进去，点击左下角Configure，如图\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0\\01.png\" height=300 width=600 >\n\n开启python接口选项，注意PYTHON3的参数，路径没有问题BUILD_opencv_python3会自动生成。  \n勾选INSTALL_PYTHON_EXMAPLES\n再次点击Configure\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0\\03.png\" height=300 width=600 >\n\n\n生成编译文件时，face_landmark_model.dat可能下载不了，所以提前将其下载，并放入./cache/data/文件夹下，重命名为7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat\n* face_landmark_model.dat 下载地址  \nhttps://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat\n\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0\\02.png\" height=150 width=510 >\n\n然后就可以生成编译文件了，点击Generate\n\n### 调整SWAP分区\n\n``` bash\n$ cd /var && ls\n```\n创建一个swap文件,如果已经有swap就卸载它\n``` bash\n$ sudo swapoff swap \n```\n删除swap虚拟内存文件:\n``` bash\n$ rm /var/swap\n```\n使用dd命令创建一个文件，of后面跟你需要创建swap的位置\n``` bash\n$ sudo dd if=/dev/zero of=swap bs=1M count=4096\n```\n格式化为swap文件\n``` bash\n$ sudo mkswap swap \n```\n装载新的swap文件\n``` bash\n$ sudo swapon swap \n$ htop\n```\n可以在htop中看到swap分区大小为4GB，完成  \n注意每次reboot后swap分区不会自动挂载\n\n## 编译\n确定一下swap分区\n``` bash\n$ htop\n```\n\n键入下述命令开始编译\n``` bash\n$ sudo make -j4\n```\n安装\n``` bash\n$ sudo make install \n$ sudo ldconfig\n```\n\n因编译后的库文件cv2.so生成位置为usr/local/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so，或者在~/Workplace/opencv/opencv-4.0.0/build/lib/python3/cv2.cpython-35m-aarch64-linux-gnu.so，这将导致该模块在Python3中无法import进来，将其拷贝到python3的第三方库文件夹dist-packages下并添加软链接\n``` bash\n$ sudo cp /usr/local/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so /usr/local/lib/python3.5/dist-packages\n$ cd /usr/local/lib/python3.5/dist-packages/\n$ ls\n$ sudo ln -s cv2.cpython-35m-aarch64-linux-gnu.so cv2.so\n```\n\nimport cv2 没有报错，则安装正常\n<img src=\"Hikey970使用记录二：编译安装opencv4-0-0/04.png\" height=100 width=600>\n\n\n### 问题：ImportError: numpy.core.multiarray failed to import  \n出现这个错误的原因是numpy的版本太低了\n``` bash\n$ pip3 install -U numpy\n```\n\n\n\n### 创建虚拟环境\n\n``` bash\n$ pip3 install virtualenv\n$ virtualenv\n-bash: virtualenv: command not found\n$ sudo apt-get install python-virtualenv\n$ virtualenv\n-bash: virtualenv: command not found\n$ sudo find / -name virtualenv\n$ /home/shunya/.local/bin/virtualenv py35 -p /usr/bin/python3\n$ source ~/python-env/py35/bin/activate\n```\n\n\n### 测试_人体姿态点检测\n``` bash\n$ pip3 install scipy\n$ cd Workplace/pose/\n$ python main.py\n```\n\n## 参考资料\n* face_landmark_model.dat 下载地址 - dspeia的博客 - CSDN博客  \nhttps://blog.csdn.net/qq_34806812/article/details/82501999\n* hikey970学习-011 hikey970上安装opencv - Mingyong_Zhuang的技术博客 - CSDN博客  \nhttps://blog.csdn.net/qqqzmy/article/details/82855377\n","slug":"Hikey970使用记录二：编译安装opencv4-0-0","published":1,"updated":"2020-01-05T19:13:24.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5074000r4cvjnyalxogk","content":"<p><strong> Hikey970使用记录二：编译安装opencv4.0.0 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>编译安装opencv4.0.0<br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n<h1 id=\"编译安装opencv4-0-0\"><a href=\"#编译安装opencv4-0-0\" class=\"headerlink\" title=\"编译安装opencv4.0.0\"></a>编译安装opencv4.0.0</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>查看ip<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip addr</span><br></pre></td></tr></table></figure></p>\n<p>调整系统默认python版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class=\"line\">$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2</span><br><span class=\"line\">$ update-alternatives --config python</span><br><span class=\"line\">$ python</span><br></pre></td></tr></table></figure></p>\n<p>电源管理中关屏保<br>更新源<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"相关依赖\"><a href=\"#相关依赖\" class=\"headerlink\" title=\"相关依赖\"></a>相关依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential pkg-config</span><br><span class=\"line\">$ sudo apt-get install cmake</span><br><span class=\"line\">$ sudo apt-get install libjpeg-dev</span><br><span class=\"line\">$ sudo apt-get install libtiff5-dev</span><br><span class=\"line\">$ sudo apt-get install libpng12-dev</span><br><span class=\"line\">$ sudo apt-get install libpng-dev</span><br><span class=\"line\">$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev</span><br><span class=\"line\">$ sudo apt-get install libxvidcore-dev libx264-dev</span><br><span class=\"line\">$ sudo apt-get install libgtk2.0-dev</span><br><span class=\"line\">$ sudo apt-get install libatlas-base-dev gfortran</span><br><span class=\"line\">$ sudo apt-get install python3-dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install libjasper-dev</span><br></pre></td></tr></table></figure>\n<p>libjasper-dev安装可能会报错，原因是Arm64架构的版本目前还没有被Debian官方收录，可以通过直接下载deb文件安装，注意相关依赖和包的冲突。</p>\n<p>删除与libjpeg-turbo8冲突的包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get --purge remove libturbojpeg0</span><br><span class=\"line\">$ sudo apt-get --purge remove libjpeg62-turbo-dev</span><br><span class=\"line\">$ sudo apt --fix-broken install</span><br></pre></td></tr></table></figure></p>\n<p>下载相关包并按依赖关系依次安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502/+files/libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb</span><br><span class=\"line\">$ wget http://launchpadlibrarian.net/152841589/libjpeg8_8c-2ubuntu8_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjpeg8_8c-2ubuntu8_arm64.deb</span><br><span class=\"line\">$ wget http://launchpadlibrarian.net/376191785/libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br><span class=\"line\">$ wget http://launchpadlibrarian.net/376191781/libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br></pre></td></tr></table></figure></p>\n<p>相关下载地址</p>\n<ul>\n<li>arm64 build of libjpeg-turbo 1.3.0-0ubuntu1.1 : Private PPA for Ubuntu Security Team : “Ubuntu Security Team” team<br><a href=\"https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502\" target=\"_blank\" rel=\"noopener\">https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502</a></li>\n</ul>\n<h3 id=\"下载opencv源码\"><a href=\"#下载opencv源码\" class=\"headerlink\" title=\"下载opencv源码\"></a>下载opencv源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Workplace/opencv/</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br></pre></td></tr></table></figure>\n<p>下载比较慢，建议提前下好后上传</p>\n<h3 id=\"设置编译环境\"><a href=\"#设置编译环境\" class=\"headerlink\" title=\"设置编译环境\"></a>设置编译环境</h3><p>安装cmake-qt-gui，使用图形界面<br>使用MobaXterm时，CMake界面可以弹出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build/</span><br><span class=\"line\">$ sudo apt-get install cmake-qt-gui</span><br><span class=\"line\">$ cmake-gui</span><br></pre></td></tr></table></figure></p>\n<p>选择源文件路径，编译文件夹选择刚才新建的build文件夹<br>点击左下角Configure，默认Generator为Unix Makefile，完成后界面变红</p>\n<p>然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0/modules的路径填进去，点击左下角Configure，如图<br><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/01.png\" height=\"300\" width=\"600\"></p>\n<p>开启python接口选项，注意PYTHON3的参数，路径没有问题BUILD_opencv_python3会自动生成。<br>勾选INSTALL_PYTHON_EXMAPLES<br>再次点击Configure<br><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/03.png\" height=\"300\" width=\"600\"></p>\n<p>生成编译文件时，face_landmark_model.dat可能下载不了，所以提前将其下载，并放入./cache/data/文件夹下，重命名为7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat</p>\n<ul>\n<li>face_landmark_model.dat 下载地址<br><a href=\"https://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat</a></li>\n</ul>\n<p><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/02.png\" height=\"150\" width=\"510\"></p>\n<p>然后就可以生成编译文件了，点击Generate</p>\n<h3 id=\"调整SWAP分区\"><a href=\"#调整SWAP分区\" class=\"headerlink\" title=\"调整SWAP分区\"></a>调整SWAP分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var &amp;&amp; ls</span><br></pre></td></tr></table></figure>\n<p>创建一个swap文件,如果已经有swap就卸载它<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo swapoff swap</span><br></pre></td></tr></table></figure></p>\n<p>删除swap虚拟内存文件:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm /var/swap</span><br></pre></td></tr></table></figure></p>\n<p>使用dd命令创建一个文件，of后面跟你需要创建swap的位置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swap bs=1M count=4096</span><br></pre></td></tr></table></figure></p>\n<p>格式化为swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkswap swap</span><br></pre></td></tr></table></figure></p>\n<p>装载新的swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo swapon swap </span><br><span class=\"line\">$ htop</span><br></pre></td></tr></table></figure></p>\n<p>可以在htop中看到swap分区大小为4GB，完成<br>注意每次reboot后swap分区不会自动挂载</p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>确定一下swap分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ htop</span><br></pre></td></tr></table></figure></p>\n<p>键入下述命令开始编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo make -j4</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo make install </span><br><span class=\"line\">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p>\n<p>因编译后的库文件cv2.so生成位置为usr/local/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so，或者在~/Workplace/opencv/opencv-4.0.0/build/lib/python3/cv2.cpython-35m-aarch64-linux-gnu.so，这将导致该模块在Python3中无法import进来，将其拷贝到python3的第三方库文件夹dist-packages下并添加软链接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp /usr/<span class=\"built_in\">local</span>/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages/</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">$ sudo ln -s cv2.cpython-35m-aarch64-linux-gnu.so cv2.so</span><br></pre></td></tr></table></figure></p>\n<p>import cv2 没有报错，则安装正常<br><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/04.png\" height=\"100\" width=\"600\"></p>\n<h3 id=\"问题：ImportError-numpy-core-multiarray-failed-to-import\"><a href=\"#问题：ImportError-numpy-core-multiarray-failed-to-import\" class=\"headerlink\" title=\"问题：ImportError: numpy.core.multiarray failed to import\"></a>问题：ImportError: numpy.core.multiarray failed to import</h3><p>出现这个错误的原因是numpy的版本太低了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install -U numpy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install virtualenv</span><br><span class=\"line\">$ virtualenv</span><br><span class=\"line\">-bash: virtualenv: <span class=\"built_in\">command</span> not found</span><br><span class=\"line\">$ sudo apt-get install python-virtualenv</span><br><span class=\"line\">$ virtualenv</span><br><span class=\"line\">-bash: virtualenv: <span class=\"built_in\">command</span> not found</span><br><span class=\"line\">$ sudo find / -name virtualenv</span><br><span class=\"line\">$ /home/shunya/.<span class=\"built_in\">local</span>/bin/virtualenv py35 -p /usr/bin/python3</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/python-env/py35/bin/activate</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-人体姿态点检测\"><a href=\"#测试-人体姿态点检测\" class=\"headerlink\" title=\"测试_人体姿态点检测\"></a>测试_人体姿态点检测</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install scipy</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Workplace/pose/</span><br><span class=\"line\">$ python main.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>face_landmark_model.dat 下载地址 - dspeia的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_34806812/article/details/82501999\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_34806812/article/details/82501999</a></li>\n<li>hikey970学习-011 hikey970上安装opencv - Mingyong_Zhuang的技术博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qqqzmy/article/details/82855377\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qqqzmy/article/details/82855377</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> Hikey970使用记录二：编译安装opencv4.0.0 </strong> <excerpt in index | 首页摘要><br>hello hikey!<br>编译安装opencv4.0.0<br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h1 id=\"编译安装opencv4-0-0\"><a href=\"#编译安装opencv4-0-0\" class=\"headerlink\" title=\"编译安装opencv4.0.0\"></a>编译安装opencv4.0.0</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>查看ip<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip addr</span><br></pre></td></tr></table></figure></p>\n<p>调整系统默认python版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class=\"line\">$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2</span><br><span class=\"line\">$ update-alternatives --config python</span><br><span class=\"line\">$ python</span><br></pre></td></tr></table></figure></p>\n<p>电源管理中关屏保<br>更新源<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"相关依赖\"><a href=\"#相关依赖\" class=\"headerlink\" title=\"相关依赖\"></a>相关依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential pkg-config</span><br><span class=\"line\">$ sudo apt-get install cmake</span><br><span class=\"line\">$ sudo apt-get install libjpeg-dev</span><br><span class=\"line\">$ sudo apt-get install libtiff5-dev</span><br><span class=\"line\">$ sudo apt-get install libpng12-dev</span><br><span class=\"line\">$ sudo apt-get install libpng-dev</span><br><span class=\"line\">$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev</span><br><span class=\"line\">$ sudo apt-get install libxvidcore-dev libx264-dev</span><br><span class=\"line\">$ sudo apt-get install libgtk2.0-dev</span><br><span class=\"line\">$ sudo apt-get install libatlas-base-dev gfortran</span><br><span class=\"line\">$ sudo apt-get install python3-dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install libjasper-dev</span><br></pre></td></tr></table></figure>\n<p>libjasper-dev安装可能会报错，原因是Arm64架构的版本目前还没有被Debian官方收录，可以通过直接下载deb文件安装，注意相关依赖和包的冲突。</p>\n<p>删除与libjpeg-turbo8冲突的包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get --purge remove libturbojpeg0</span><br><span class=\"line\">$ sudo apt-get --purge remove libjpeg62-turbo-dev</span><br><span class=\"line\">$ sudo apt --fix-broken install</span><br></pre></td></tr></table></figure></p>\n<p>下载相关包并按依赖关系依次安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502/+files/libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjpeg-turbo8_1.3.0-0ubuntu1.1_arm64.deb</span><br><span class=\"line\">$ wget http://launchpadlibrarian.net/152841589/libjpeg8_8c-2ubuntu8_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjpeg8_8c-2ubuntu8_arm64.deb</span><br><span class=\"line\">$ wget http://launchpadlibrarian.net/376191785/libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjasper1_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br><span class=\"line\">$ wget http://launchpadlibrarian.net/376191781/libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br><span class=\"line\">$ sudo dpkg -i libjasper-dev_1.900.1-debian1-2.4ubuntu1.2_arm64.deb</span><br></pre></td></tr></table></figure></p>\n<p>相关下载地址</p>\n<ul>\n<li>arm64 build of libjpeg-turbo 1.3.0-0ubuntu1.1 : Private PPA for Ubuntu Security Team : “Ubuntu Security Team” team<br><a href=\"https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502\" target=\"_blank\" rel=\"noopener\">https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/5255502</a></li>\n</ul>\n<h3 id=\"下载opencv源码\"><a href=\"#下载opencv源码\" class=\"headerlink\" title=\"下载opencv源码\"></a>下载opencv源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Workplace/opencv/</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br></pre></td></tr></table></figure>\n<p>下载比较慢，建议提前下好后上传</p>\n<h3 id=\"设置编译环境\"><a href=\"#设置编译环境\" class=\"headerlink\" title=\"设置编译环境\"></a>设置编译环境</h3><p>安装cmake-qt-gui，使用图形界面<br>使用MobaXterm时，CMake界面可以弹出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build/</span><br><span class=\"line\">$ sudo apt-get install cmake-qt-gui</span><br><span class=\"line\">$ cmake-gui</span><br></pre></td></tr></table></figure></p>\n<p>选择源文件路径，编译文件夹选择刚才新建的build文件夹<br>点击左下角Configure，默认Generator为Unix Makefile，完成后界面变红</p>\n<p>然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0/modules的路径填进去，点击左下角Configure，如图<br><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/01.png\" height=\"300\" width=\"600\"></p>\n<p>开启python接口选项，注意PYTHON3的参数，路径没有问题BUILD_opencv_python3会自动生成。<br>勾选INSTALL_PYTHON_EXMAPLES<br>再次点击Configure<br><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/03.png\" height=\"300\" width=\"600\"></p>\n<p>生成编译文件时，face_landmark_model.dat可能下载不了，所以提前将其下载，并放入./cache/data/文件夹下，重命名为7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat</p>\n<ul>\n<li>face_landmark_model.dat 下载地址<br><a href=\"https://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat</a></li>\n</ul>\n<p><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/02.png\" height=\"150\" width=\"510\"></p>\n<p>然后就可以生成编译文件了，点击Generate</p>\n<h3 id=\"调整SWAP分区\"><a href=\"#调整SWAP分区\" class=\"headerlink\" title=\"调整SWAP分区\"></a>调整SWAP分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var &amp;&amp; ls</span><br></pre></td></tr></table></figure>\n<p>创建一个swap文件,如果已经有swap就卸载它<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo swapoff swap</span><br></pre></td></tr></table></figure></p>\n<p>删除swap虚拟内存文件:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm /var/swap</span><br></pre></td></tr></table></figure></p>\n<p>使用dd命令创建一个文件，of后面跟你需要创建swap的位置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swap bs=1M count=4096</span><br></pre></td></tr></table></figure></p>\n<p>格式化为swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkswap swap</span><br></pre></td></tr></table></figure></p>\n<p>装载新的swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo swapon swap </span><br><span class=\"line\">$ htop</span><br></pre></td></tr></table></figure></p>\n<p>可以在htop中看到swap分区大小为4GB，完成<br>注意每次reboot后swap分区不会自动挂载</p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>确定一下swap分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ htop</span><br></pre></td></tr></table></figure></p>\n<p>键入下述命令开始编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo make -j4</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo make install </span><br><span class=\"line\">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p>\n<p>因编译后的库文件cv2.so生成位置为usr/local/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so，或者在~/Workplace/opencv/opencv-4.0.0/build/lib/python3/cv2.cpython-35m-aarch64-linux-gnu.so，这将导致该模块在Python3中无法import进来，将其拷贝到python3的第三方库文件夹dist-packages下并添加软链接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp /usr/<span class=\"built_in\">local</span>/python/cv2/python-3.5/cv2.cpython-35m-aarch64-linux-gnu.so /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages/</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">$ sudo ln -s cv2.cpython-35m-aarch64-linux-gnu.so cv2.so</span><br></pre></td></tr></table></figure></p>\n<p>import cv2 没有报错，则安装正常<br><img src=\"/2019/05/22/Hikey970使用记录二：编译安装opencv4-0-0/04.png\" height=\"100\" width=\"600\"></p>\n<h3 id=\"问题：ImportError-numpy-core-multiarray-failed-to-import\"><a href=\"#问题：ImportError-numpy-core-multiarray-failed-to-import\" class=\"headerlink\" title=\"问题：ImportError: numpy.core.multiarray failed to import\"></a>问题：ImportError: numpy.core.multiarray failed to import</h3><p>出现这个错误的原因是numpy的版本太低了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install -U numpy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install virtualenv</span><br><span class=\"line\">$ virtualenv</span><br><span class=\"line\">-bash: virtualenv: <span class=\"built_in\">command</span> not found</span><br><span class=\"line\">$ sudo apt-get install python-virtualenv</span><br><span class=\"line\">$ virtualenv</span><br><span class=\"line\">-bash: virtualenv: <span class=\"built_in\">command</span> not found</span><br><span class=\"line\">$ sudo find / -name virtualenv</span><br><span class=\"line\">$ /home/shunya/.<span class=\"built_in\">local</span>/bin/virtualenv py35 -p /usr/bin/python3</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/python-env/py35/bin/activate</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-人体姿态点检测\"><a href=\"#测试-人体姿态点检测\" class=\"headerlink\" title=\"测试_人体姿态点检测\"></a>测试_人体姿态点检测</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install scipy</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Workplace/pose/</span><br><span class=\"line\">$ python main.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>face_landmark_model.dat 下载地址 - dspeia的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_34806812/article/details/82501999\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_34806812/article/details/82501999</a></li>\n<li>hikey970学习-011 hikey970上安装opencv - Mingyong_Zhuang的技术博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qqqzmy/article/details/82855377\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qqqzmy/article/details/82855377</a></li>\n</ul>\n</the>"},{"title":"Jetson Nano 使用记录","date":"2019-05-18T10:00:32.000Z","_content":"\n\n\n\n* balenaEtcher - Home  \nhttps://www.balena.io/etcher/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* Jetson-Nano开箱配置及Tensorflow安装使用 - dwSun的博客 - CSDN博客 </br>https://blog.csdn.net/dvd_sun/article/details/88975005","source":"_posts/Jetson-Nano-使用记录.md","raw":"---\ntitle: Jetson Nano 使用记录\ndate: 2019-05-18 18:00:32\ntags:\n---\n\n\n\n\n* balenaEtcher - Home  \nhttps://www.balena.io/etcher/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* Jetson-Nano开箱配置及Tensorflow安装使用 - dwSun的博客 - CSDN博客 </br>https://blog.csdn.net/dvd_sun/article/details/88975005","slug":"Jetson-Nano-使用记录","published":1,"updated":"2020-01-05T19:13:24.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5075000t4cvjlwiwsl8z","content":"<ul>\n<li>balenaEtcher - Home<br><a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">https://www.balena.io/etcher/</a></li>\n</ul>\n<ul>\n<li>Jetson-Nano开箱配置及Tensorflow安装使用 - dwSun的博客 - CSDN博客 &lt;/br&gt;<a href=\"https://blog.csdn.net/dvd_sun/article/details/88975005\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dvd_sun/article/details/88975005</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>balenaEtcher - Home<br><a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">https://www.balena.io/etcher/</a></li>\n</ul>\n<ul>\n<li>Jetson-Nano开箱配置及Tensorflow安装使用 - dwSun的博客 - CSDN博客 &lt;/br&gt;<a href=\"https://blog.csdn.net/dvd_sun/article/details/88975005\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dvd_sun/article/details/88975005</a></li>\n</ul>\n"},{"title":"OpenCV学习笔记","date":"2019-06-14T10:01:28.000Z","_content":"\n\n\n\n\n","source":"_posts/OpenCV学习笔记.md","raw":"---\ntitle: 'OpenCV学习笔记'\ndate: 2019-06-14 18:01:28\ntags:\n  - opencv\n---\n\n\n\n\n\n","slug":"OpenCV学习笔记","published":1,"updated":"2020-01-05T19:13:24.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5075000u4cvjdrrzq97j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Pixar Lamp","date":"2019-05-14T11:25:43.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n做个跳跳灯！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 设计思路\n\n### 2018年3月\n<div align=center>\n<img src = \"Pixar-Lamp\\设计思路.png\" width=1000 height=800>\n</div>\n\n### 2019年5月\n<div align=center>\n<img src = \"Pixar-Lamp\\设计思路-201905.png\" width=1000 height=800>\n</div>\n\n# 准备\n\n``` bash\n> conda create -n lamp python=3.6\n> activate lamp\n> pip install numpy\n> pip install pandas\n> pip install scipy\n> pip install tensorflow\n> pip install baidu-aip\n> pip install pyserial\n> pip install opencv-python\n> pip install opencv-contrib-python\n```\n\n\n调用华为api\n* huaweicloud/huaweicloud-sdk-python-frs https://github.com/huaweicloud/huaweicloud-sdk-python-frs\n\n姿态点检测\n<div align=center>\n<img src = \"Pixar-Lamp\\001.jpg\" width=200 height=200>\n</div>\n\n* Ilovepose </br>http://ilovepose.luohuank.xin/\n* 如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎 </br>https://www.zhihu.com/question/59750782\n* 基于OpenPose的人体姿态检测 - yph001的博客 - CSDN博客 </br>https://blog.csdn.net/yph001/article/details/83218839\n\n\n\n\n\n\n## 单人姿态估计\n\n### 综述\n* 【极市】张锋-2D单人人体姿态估计及其应用_腾讯视频 </br>https://v.qq.com/x/page/w0543yfwrhq.html\n* PowerPoint Template</br> http://static.extremevision.com.cn/donkey_84b48a46-86f7-4db3-a5fd-87b0f8e6389a.pdf\n* MPII Human Pose Database </br> http://human-pose.mpi-inf.mpg.de/#results\n\n应用\n* 人机交互\n* 行人再识别 person re-id\n* 行为识别\n\n问题\n* 遮挡\n* 复杂背景\n* 光照\n* 复杂姿态\n* 多尺度\n* 拍摄角度\n\n### 方法\n\n* 多尺度、多分辨率\n* 基于Residual Block\n* 扩大感受野\n* 预处理\n* 后处理\n\n传统方法\n* 基于图结构(Pictorial Structures)\n* DPM(形变部件模型)目标价侧算法  \nDPM算法采用了改进后的HOG特征，SVM分类器和滑动窗口（Sliding Windows）检测思想，针对目标的多视角问题，采用了多组件（Component）的策略，针对目标本身的形变问题，采用了基于图结构（Pictorial Structure）的部件模型策略。此外，将样本的所属的模型类别，部件模型的位置等作为潜变量（Latent Variable），采用多示例学习（Multiple-instance Learning）来自动确定。\n\n基于深度学习的方法\n* 直接回归坐标 \n  * CNN多阶段 \n\n* 通过热力图回归坐标\n  * CNN+图模型\n\n#### Deep Pose\n* CNN分类效果好，能不能直接用CNN回归关节坐标\n* 2014， Szegedy\n* AlesNet\n\n#### 迭代误差反馈模型\n* 让网络学习到一个多阶段反馈的模型\n* 2016\n\n#### 双源CNN\n* 给网络添加先验知识\n* Fuan xiaochuan\n* 2015\n\n\n#### CNN\n* 由于人的尺度是不一样的，能不能让网络客服这一问题，并学习到关节与关节之间的关系(pair wise relation)？\n* Yann lecun\n* 2014\n* CNN+图模型\n\n#### DCNN\n* CNN+树状结构图模型\n* 2016\n* Wang xiaogang\n\n#### CPM\n* 卷积姿态机 + 大卷积核提升感受野 + 多阶段回归\n* 2016\n\n#### hourglass\n* 堆叠的沙漏模型 + 极大提升感受野 + 多阶段回归\n* 2016\n\n#### \n* 图模型太慢，直接使用卷积核来实现\n* 树状结构的特征学习\n* 2016\n\n\n#### Efficient Concolutional Network\n* 关注efficience\n* 2016\n\n \n\n\n\n\n\n\n## 参考博客\n- 如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎   \nhttps://www.zhihu.com/question/59750782\n- CMU-Perceptual-Computing-Lab/openpose: OpenPose: Real-time multi-person keypoint detection library for body, face, hands, and foot estimation   \nhttps://github.com/CMU-Perceptual-Computing-Lab/openpose\n- 人体姿态估计数据集整理（Pose Estimation/Keypoint） - 上善若水 - CSDN博客   \nhttps://blog.csdn.net/guo1988kui/article/details/84321581\n- openpose实时多人2D姿态估计 - weixin_41441682的博客 - CSDN博客   \nhttps://blog.csdn.net/weixin_41441682/article/details/81357369#\n- 人体姿态估计资源大列表（Human Pose Estimation） - xiaolouhan的博客 - CSDN博客   \nhttps://blog.csdn.net/xiaolouhan/article/details/84321148\n- 新人求教如何从头学习人体姿态估计 - Ilovepose http://ilovepose.luohuank.xin/t/66\n论文解析与翻译：《Stacked Hourglass Networks for Human Pose Estimation》 - qq_38522972的博客 - CSDN博客  \nhttps://blog.csdn.net/qq_38522972/article/details/82958077\n- 人体姿态估计资源大列表（Human Pose Estimation） - weixin_38367817的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_38367817/article/details/86522569\n- 人体姿态估计综述（Human Pose Estimation Overview） - 青青韶华 - CSDN博客   \nhttps://blog.csdn.net/qq_36165459/article/details/78320535?locationNum=10&fps=1\n- 人体姿态估计（人体关键点检测）分类与经典方法分析（附GitHub地址） - ls83776736的博客 - CSDN博客  \nhttps://blog.csdn.net/ls83776736/article/details/87991515\nMPII Human Pose Database http://human-pose.mpi-inf.mpg.de/#results\n\n\n\n* 3 机械手臂从零开始 写动态环境 (机器学习实战 教程教学 tutorial) - YouTube</br>https://www.youtube.com/watch?v=T5QlePZ4s3U&list=PLXO45tsB95cL8HTAlqkrmKLN_VSjlq4J8&index=3\n\n\n\n\n\n\n\n# ReID\n\n\n行人智能认知\n* 行人检测\n* 行人分割&背景替换\n* 谷歌关键点检测&姿态识别\n* 行人跟踪/MOT\n* 动作识别\n* 行人属性结构化\n* 跨境追踪&行人再识别/ReID\n\n\n\n","source":"_posts/Pixar-Lamp.md","raw":"---\ntitle: Pixar Lamp\ndate: 2019-05-14 19:25:43\ntags:\n  - python\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n做个跳跳灯！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 设计思路\n\n### 2018年3月\n<div align=center>\n<img src = \"Pixar-Lamp\\设计思路.png\" width=1000 height=800>\n</div>\n\n### 2019年5月\n<div align=center>\n<img src = \"Pixar-Lamp\\设计思路-201905.png\" width=1000 height=800>\n</div>\n\n# 准备\n\n``` bash\n> conda create -n lamp python=3.6\n> activate lamp\n> pip install numpy\n> pip install pandas\n> pip install scipy\n> pip install tensorflow\n> pip install baidu-aip\n> pip install pyserial\n> pip install opencv-python\n> pip install opencv-contrib-python\n```\n\n\n调用华为api\n* huaweicloud/huaweicloud-sdk-python-frs https://github.com/huaweicloud/huaweicloud-sdk-python-frs\n\n姿态点检测\n<div align=center>\n<img src = \"Pixar-Lamp\\001.jpg\" width=200 height=200>\n</div>\n\n* Ilovepose </br>http://ilovepose.luohuank.xin/\n* 如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎 </br>https://www.zhihu.com/question/59750782\n* 基于OpenPose的人体姿态检测 - yph001的博客 - CSDN博客 </br>https://blog.csdn.net/yph001/article/details/83218839\n\n\n\n\n\n\n## 单人姿态估计\n\n### 综述\n* 【极市】张锋-2D单人人体姿态估计及其应用_腾讯视频 </br>https://v.qq.com/x/page/w0543yfwrhq.html\n* PowerPoint Template</br> http://static.extremevision.com.cn/donkey_84b48a46-86f7-4db3-a5fd-87b0f8e6389a.pdf\n* MPII Human Pose Database </br> http://human-pose.mpi-inf.mpg.de/#results\n\n应用\n* 人机交互\n* 行人再识别 person re-id\n* 行为识别\n\n问题\n* 遮挡\n* 复杂背景\n* 光照\n* 复杂姿态\n* 多尺度\n* 拍摄角度\n\n### 方法\n\n* 多尺度、多分辨率\n* 基于Residual Block\n* 扩大感受野\n* 预处理\n* 后处理\n\n传统方法\n* 基于图结构(Pictorial Structures)\n* DPM(形变部件模型)目标价侧算法  \nDPM算法采用了改进后的HOG特征，SVM分类器和滑动窗口（Sliding Windows）检测思想，针对目标的多视角问题，采用了多组件（Component）的策略，针对目标本身的形变问题，采用了基于图结构（Pictorial Structure）的部件模型策略。此外，将样本的所属的模型类别，部件模型的位置等作为潜变量（Latent Variable），采用多示例学习（Multiple-instance Learning）来自动确定。\n\n基于深度学习的方法\n* 直接回归坐标 \n  * CNN多阶段 \n\n* 通过热力图回归坐标\n  * CNN+图模型\n\n#### Deep Pose\n* CNN分类效果好，能不能直接用CNN回归关节坐标\n* 2014， Szegedy\n* AlesNet\n\n#### 迭代误差反馈模型\n* 让网络学习到一个多阶段反馈的模型\n* 2016\n\n#### 双源CNN\n* 给网络添加先验知识\n* Fuan xiaochuan\n* 2015\n\n\n#### CNN\n* 由于人的尺度是不一样的，能不能让网络客服这一问题，并学习到关节与关节之间的关系(pair wise relation)？\n* Yann lecun\n* 2014\n* CNN+图模型\n\n#### DCNN\n* CNN+树状结构图模型\n* 2016\n* Wang xiaogang\n\n#### CPM\n* 卷积姿态机 + 大卷积核提升感受野 + 多阶段回归\n* 2016\n\n#### hourglass\n* 堆叠的沙漏模型 + 极大提升感受野 + 多阶段回归\n* 2016\n\n#### \n* 图模型太慢，直接使用卷积核来实现\n* 树状结构的特征学习\n* 2016\n\n\n#### Efficient Concolutional Network\n* 关注efficience\n* 2016\n\n \n\n\n\n\n\n\n## 参考博客\n- 如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎   \nhttps://www.zhihu.com/question/59750782\n- CMU-Perceptual-Computing-Lab/openpose: OpenPose: Real-time multi-person keypoint detection library for body, face, hands, and foot estimation   \nhttps://github.com/CMU-Perceptual-Computing-Lab/openpose\n- 人体姿态估计数据集整理（Pose Estimation/Keypoint） - 上善若水 - CSDN博客   \nhttps://blog.csdn.net/guo1988kui/article/details/84321581\n- openpose实时多人2D姿态估计 - weixin_41441682的博客 - CSDN博客   \nhttps://blog.csdn.net/weixin_41441682/article/details/81357369#\n- 人体姿态估计资源大列表（Human Pose Estimation） - xiaolouhan的博客 - CSDN博客   \nhttps://blog.csdn.net/xiaolouhan/article/details/84321148\n- 新人求教如何从头学习人体姿态估计 - Ilovepose http://ilovepose.luohuank.xin/t/66\n论文解析与翻译：《Stacked Hourglass Networks for Human Pose Estimation》 - qq_38522972的博客 - CSDN博客  \nhttps://blog.csdn.net/qq_38522972/article/details/82958077\n- 人体姿态估计资源大列表（Human Pose Estimation） - weixin_38367817的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_38367817/article/details/86522569\n- 人体姿态估计综述（Human Pose Estimation Overview） - 青青韶华 - CSDN博客   \nhttps://blog.csdn.net/qq_36165459/article/details/78320535?locationNum=10&fps=1\n- 人体姿态估计（人体关键点检测）分类与经典方法分析（附GitHub地址） - ls83776736的博客 - CSDN博客  \nhttps://blog.csdn.net/ls83776736/article/details/87991515\nMPII Human Pose Database http://human-pose.mpi-inf.mpg.de/#results\n\n\n\n* 3 机械手臂从零开始 写动态环境 (机器学习实战 教程教学 tutorial) - YouTube</br>https://www.youtube.com/watch?v=T5QlePZ4s3U&list=PLXO45tsB95cL8HTAlqkrmKLN_VSjlq4J8&index=3\n\n\n\n\n\n\n\n# ReID\n\n\n行人智能认知\n* 行人检测\n* 行人分割&背景替换\n* 谷歌关键点检测&姿态识别\n* 行人跟踪/MOT\n* 动作识别\n* 行人属性结构化\n* 跨境追踪&行人再识别/ReID\n\n\n\n","slug":"Pixar-Lamp","published":1,"updated":"2020-01-05T19:13:24.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5076000w4cvjzqlgpgxz","content":"<p><strong> Pixar Lamp </strong> <excerpt in index | 首页摘要><br>做个跳跳灯！<br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n<h1 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h1><h3 id=\"2018年3月\"><a href=\"#2018年3月\" class=\"headerlink\" title=\"2018年3月\"></a>2018年3月</h3><div align=\"center\">\n<img src=\"/2019/05/14/Pixar-Lamp/设计思路.png\" width=\"1000\" height=\"800\">\n</div>\n\n<h3 id=\"2019年5月\"><a href=\"#2019年5月\" class=\"headerlink\" title=\"2019年5月\"></a>2019年5月</h3><div align=\"center\">\n<img src=\"/2019/05/14/Pixar-Lamp/设计思路-201905.png\" width=\"1000\" height=\"800\">\n</div>\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; conda create -n lamp python=3.6</span><br><span class=\"line\">&gt; activate lamp</span><br><span class=\"line\">&gt; pip install numpy</span><br><span class=\"line\">&gt; pip install pandas</span><br><span class=\"line\">&gt; pip install scipy</span><br><span class=\"line\">&gt; pip install tensorflow</span><br><span class=\"line\">&gt; pip install baidu-aip</span><br><span class=\"line\">&gt; pip install pyserial</span><br><span class=\"line\">&gt; pip install opencv-python</span><br><span class=\"line\">&gt; pip install opencv-contrib-python</span><br></pre></td></tr></table></figure>\n<p>调用华为api</p>\n<ul>\n<li>huaweicloud/huaweicloud-sdk-python-frs <a href=\"https://github.com/huaweicloud/huaweicloud-sdk-python-frs\" target=\"_blank\" rel=\"noopener\">https://github.com/huaweicloud/huaweicloud-sdk-python-frs</a></li>\n</ul>\n<p>姿态点检测</p>\n<div align=\"center\">\n<img src=\"/2019/05/14/Pixar-Lamp/001.jpg\" width=\"200\" height=\"200\">\n</div>\n\n<ul>\n<li>Ilovepose &lt;/br&gt;<a href=\"http://ilovepose.luohuank.xin/\" target=\"_blank\" rel=\"noopener\">http://ilovepose.luohuank.xin/</a></li>\n<li>如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎 &lt;/br&gt;<a href=\"https://www.zhihu.com/question/59750782\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/59750782</a></li>\n<li>基于OpenPose的人体姿态检测 - yph001的博客 - CSDN博客 &lt;/br&gt;<a href=\"https://blog.csdn.net/yph001/article/details/83218839\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yph001/article/details/83218839</a></li>\n</ul>\n<h2 id=\"单人姿态估计\"><a href=\"#单人姿态估计\" class=\"headerlink\" title=\"单人姿态估计\"></a>单人姿态估计</h2><h3 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h3><ul>\n<li>【极市】张锋-2D单人人体姿态估计及其应用_腾讯视频 &lt;/br&gt;<a href=\"https://v.qq.com/x/page/w0543yfwrhq.html\" target=\"_blank\" rel=\"noopener\">https://v.qq.com/x/page/w0543yfwrhq.html</a></li>\n<li>PowerPoint Template&lt;/br&gt; <a href=\"http://static.extremevision.com.cn/donkey_84b48a46-86f7-4db3-a5fd-87b0f8e6389a.pdf\" target=\"_blank\" rel=\"noopener\">http://static.extremevision.com.cn/donkey_84b48a46-86f7-4db3-a5fd-87b0f8e6389a.pdf</a></li>\n<li>MPII Human Pose Database &lt;/br&gt; <a href=\"http://human-pose.mpi-inf.mpg.de/#results\" target=\"_blank\" rel=\"noopener\">http://human-pose.mpi-inf.mpg.de/#results</a></li>\n</ul>\n<p>应用</p>\n<ul>\n<li>人机交互</li>\n<li>行人再识别 person re-id</li>\n<li>行为识别</li>\n</ul>\n<p>问题</p>\n<ul>\n<li>遮挡</li>\n<li>复杂背景</li>\n<li>光照</li>\n<li>复杂姿态</li>\n<li>多尺度</li>\n<li>拍摄角度</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li>多尺度、多分辨率</li>\n<li>基于Residual Block</li>\n<li>扩大感受野</li>\n<li>预处理</li>\n<li>后处理</li>\n</ul>\n<p>传统方法</p>\n<ul>\n<li>基于图结构(Pictorial Structures)</li>\n<li>DPM(形变部件模型)目标价侧算法<br>DPM算法采用了改进后的HOG特征，SVM分类器和滑动窗口（Sliding Windows）检测思想，针对目标的多视角问题，采用了多组件（Component）的策略，针对目标本身的形变问题，采用了基于图结构（Pictorial Structure）的部件模型策略。此外，将样本的所属的模型类别，部件模型的位置等作为潜变量（Latent Variable），采用多示例学习（Multiple-instance Learning）来自动确定。</li>\n</ul>\n<p>基于深度学习的方法</p>\n<ul>\n<li><p>直接回归坐标 </p>\n<ul>\n<li>CNN多阶段 </li>\n</ul>\n</li>\n<li><p>通过热力图回归坐标</p>\n<ul>\n<li>CNN+图模型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Deep-Pose\"><a href=\"#Deep-Pose\" class=\"headerlink\" title=\"Deep Pose\"></a>Deep Pose</h4><ul>\n<li>CNN分类效果好，能不能直接用CNN回归关节坐标</li>\n<li>2014， Szegedy</li>\n<li>AlesNet</li>\n</ul>\n<h4 id=\"迭代误差反馈模型\"><a href=\"#迭代误差反馈模型\" class=\"headerlink\" title=\"迭代误差反馈模型\"></a>迭代误差反馈模型</h4><ul>\n<li>让网络学习到一个多阶段反馈的模型</li>\n<li>2016</li>\n</ul>\n<h4 id=\"双源CNN\"><a href=\"#双源CNN\" class=\"headerlink\" title=\"双源CNN\"></a>双源CNN</h4><ul>\n<li>给网络添加先验知识</li>\n<li>Fuan xiaochuan</li>\n<li>2015</li>\n</ul>\n<h4 id=\"CNN\"><a href=\"#CNN\" class=\"headerlink\" title=\"CNN\"></a>CNN</h4><ul>\n<li>由于人的尺度是不一样的，能不能让网络客服这一问题，并学习到关节与关节之间的关系(pair wise relation)？</li>\n<li>Yann lecun</li>\n<li>2014</li>\n<li>CNN+图模型</li>\n</ul>\n<h4 id=\"DCNN\"><a href=\"#DCNN\" class=\"headerlink\" title=\"DCNN\"></a>DCNN</h4><ul>\n<li>CNN+树状结构图模型</li>\n<li>2016</li>\n<li>Wang xiaogang</li>\n</ul>\n<h4 id=\"CPM\"><a href=\"#CPM\" class=\"headerlink\" title=\"CPM\"></a>CPM</h4><ul>\n<li>卷积姿态机 + 大卷积核提升感受野 + 多阶段回归</li>\n<li>2016</li>\n</ul>\n<h4 id=\"hourglass\"><a href=\"#hourglass\" class=\"headerlink\" title=\"hourglass\"></a>hourglass</h4><ul>\n<li>堆叠的沙漏模型 + 极大提升感受野 + 多阶段回归</li>\n<li>2016</li>\n</ul>\n<h4 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h4><ul>\n<li>图模型太慢，直接使用卷积核来实现</li>\n<li>树状结构的特征学习</li>\n<li>2016</li>\n</ul>\n<h4 id=\"Efficient-Concolutional-Network\"><a href=\"#Efficient-Concolutional-Network\" class=\"headerlink\" title=\"Efficient Concolutional Network\"></a>Efficient Concolutional Network</h4><ul>\n<li>关注efficience</li>\n<li>2016</li>\n</ul>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎<br><a href=\"https://www.zhihu.com/question/59750782\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/59750782</a></li>\n<li>CMU-Perceptual-Computing-Lab/openpose: OpenPose: Real-time multi-person keypoint detection library for body, face, hands, and foot estimation<br><a href=\"https://github.com/CMU-Perceptual-Computing-Lab/openpose\" target=\"_blank\" rel=\"noopener\">https://github.com/CMU-Perceptual-Computing-Lab/openpose</a></li>\n<li>人体姿态估计数据集整理（Pose Estimation/Keypoint） - 上善若水 - CSDN博客<br><a href=\"https://blog.csdn.net/guo1988kui/article/details/84321581\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/guo1988kui/article/details/84321581</a></li>\n<li>openpose实时多人2D姿态估计 - weixin_41441682的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_41441682/article/details/81357369#\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_41441682/article/details/81357369#</a></li>\n<li>人体姿态估计资源大列表（Human Pose Estimation） - xiaolouhan的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/xiaolouhan/article/details/84321148\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xiaolouhan/article/details/84321148</a></li>\n<li>新人求教如何从头学习人体姿态估计 - Ilovepose <a href=\"http://ilovepose.luohuank.xin/t/66\" target=\"_blank\" rel=\"noopener\">http://ilovepose.luohuank.xin/t/66</a><br>论文解析与翻译：《Stacked Hourglass Networks for Human Pose Estimation》 - qq_38522972的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_38522972/article/details/82958077\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38522972/article/details/82958077</a></li>\n<li>人体姿态估计资源大列表（Human Pose Estimation） - weixin_38367817的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_38367817/article/details/86522569\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_38367817/article/details/86522569</a></li>\n<li>人体姿态估计综述（Human Pose Estimation Overview） - 青青韶华 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36165459/article/details/78320535?locationNum=10&amp;fps=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36165459/article/details/78320535?locationNum=10&amp;fps=1</a></li>\n<li>人体姿态估计（人体关键点检测）分类与经典方法分析（附GitHub地址） - ls83776736的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/ls83776736/article/details/87991515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ls83776736/article/details/87991515</a><br>MPII Human Pose Database <a href=\"http://human-pose.mpi-inf.mpg.de/#results\" target=\"_blank\" rel=\"noopener\">http://human-pose.mpi-inf.mpg.de/#results</a></li>\n</ul>\n<ul>\n<li>3 机械手臂从零开始 写动态环境 (机器学习实战 教程教学 tutorial) - YouTube&lt;/br&gt;<a href=\"https://www.youtube.com/watch?v=T5QlePZ4s3U&amp;list=PLXO45tsB95cL8HTAlqkrmKLN_VSjlq4J8&amp;index=3\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=T5QlePZ4s3U&amp;list=PLXO45tsB95cL8HTAlqkrmKLN_VSjlq4J8&amp;index=3</a></li>\n</ul>\n<h1 id=\"ReID\"><a href=\"#ReID\" class=\"headerlink\" title=\"ReID\"></a>ReID</h1><p>行人智能认知</p>\n<ul>\n<li>行人检测</li>\n<li>行人分割&amp;背景替换</li>\n<li>谷歌关键点检测&amp;姿态识别</li>\n<li>行人跟踪/MOT</li>\n<li>动作识别</li>\n<li>行人属性结构化</li>\n<li>跨境追踪&amp;行人再识别/ReID</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> Pixar Lamp </strong> <excerpt in index | 首页摘要><br>做个跳跳灯！<br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h1 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h1><h3 id=\"2018年3月\"><a href=\"#2018年3月\" class=\"headerlink\" title=\"2018年3月\"></a>2018年3月</h3><div align=\"center\">\n<img src=\"/2019/05/14/Pixar-Lamp/设计思路.png\" width=\"1000\" height=\"800\">\n</div>\n\n<h3 id=\"2019年5月\"><a href=\"#2019年5月\" class=\"headerlink\" title=\"2019年5月\"></a>2019年5月</h3><div align=\"center\">\n<img src=\"/2019/05/14/Pixar-Lamp/设计思路-201905.png\" width=\"1000\" height=\"800\">\n</div>\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; conda create -n lamp python=3.6</span><br><span class=\"line\">&gt; activate lamp</span><br><span class=\"line\">&gt; pip install numpy</span><br><span class=\"line\">&gt; pip install pandas</span><br><span class=\"line\">&gt; pip install scipy</span><br><span class=\"line\">&gt; pip install tensorflow</span><br><span class=\"line\">&gt; pip install baidu-aip</span><br><span class=\"line\">&gt; pip install pyserial</span><br><span class=\"line\">&gt; pip install opencv-python</span><br><span class=\"line\">&gt; pip install opencv-contrib-python</span><br></pre></td></tr></table></figure>\n<p>调用华为api</p>\n<ul>\n<li>huaweicloud/huaweicloud-sdk-python-frs <a href=\"https://github.com/huaweicloud/huaweicloud-sdk-python-frs\" target=\"_blank\" rel=\"noopener\">https://github.com/huaweicloud/huaweicloud-sdk-python-frs</a></li>\n</ul>\n<p>姿态点检测</p>\n<div align=\"center\">\n<img src=\"/2019/05/14/Pixar-Lamp/001.jpg\" width=\"200\" height=\"200\">\n</div>\n\n<ul>\n<li>Ilovepose &lt;/br&gt;<a href=\"http://ilovepose.luohuank.xin/\" target=\"_blank\" rel=\"noopener\">http://ilovepose.luohuank.xin/</a></li>\n<li>如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎 &lt;/br&gt;<a href=\"https://www.zhihu.com/question/59750782\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/59750782</a></li>\n<li>基于OpenPose的人体姿态检测 - yph001的博客 - CSDN博客 &lt;/br&gt;<a href=\"https://blog.csdn.net/yph001/article/details/83218839\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yph001/article/details/83218839</a></li>\n</ul>\n<h2 id=\"单人姿态估计\"><a href=\"#单人姿态估计\" class=\"headerlink\" title=\"单人姿态估计\"></a>单人姿态估计</h2><h3 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h3><ul>\n<li>【极市】张锋-2D单人人体姿态估计及其应用_腾讯视频 &lt;/br&gt;<a href=\"https://v.qq.com/x/page/w0543yfwrhq.html\" target=\"_blank\" rel=\"noopener\">https://v.qq.com/x/page/w0543yfwrhq.html</a></li>\n<li>PowerPoint Template&lt;/br&gt; <a href=\"http://static.extremevision.com.cn/donkey_84b48a46-86f7-4db3-a5fd-87b0f8e6389a.pdf\" target=\"_blank\" rel=\"noopener\">http://static.extremevision.com.cn/donkey_84b48a46-86f7-4db3-a5fd-87b0f8e6389a.pdf</a></li>\n<li>MPII Human Pose Database &lt;/br&gt; <a href=\"http://human-pose.mpi-inf.mpg.de/#results\" target=\"_blank\" rel=\"noopener\">http://human-pose.mpi-inf.mpg.de/#results</a></li>\n</ul>\n<p>应用</p>\n<ul>\n<li>人机交互</li>\n<li>行人再识别 person re-id</li>\n<li>行为识别</li>\n</ul>\n<p>问题</p>\n<ul>\n<li>遮挡</li>\n<li>复杂背景</li>\n<li>光照</li>\n<li>复杂姿态</li>\n<li>多尺度</li>\n<li>拍摄角度</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li>多尺度、多分辨率</li>\n<li>基于Residual Block</li>\n<li>扩大感受野</li>\n<li>预处理</li>\n<li>后处理</li>\n</ul>\n<p>传统方法</p>\n<ul>\n<li>基于图结构(Pictorial Structures)</li>\n<li>DPM(形变部件模型)目标价侧算法<br>DPM算法采用了改进后的HOG特征，SVM分类器和滑动窗口（Sliding Windows）检测思想，针对目标的多视角问题，采用了多组件（Component）的策略，针对目标本身的形变问题，采用了基于图结构（Pictorial Structure）的部件模型策略。此外，将样本的所属的模型类别，部件模型的位置等作为潜变量（Latent Variable），采用多示例学习（Multiple-instance Learning）来自动确定。</li>\n</ul>\n<p>基于深度学习的方法</p>\n<ul>\n<li><p>直接回归坐标 </p>\n<ul>\n<li>CNN多阶段 </li>\n</ul>\n</li>\n<li><p>通过热力图回归坐标</p>\n<ul>\n<li>CNN+图模型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Deep-Pose\"><a href=\"#Deep-Pose\" class=\"headerlink\" title=\"Deep Pose\"></a>Deep Pose</h4><ul>\n<li>CNN分类效果好，能不能直接用CNN回归关节坐标</li>\n<li>2014， Szegedy</li>\n<li>AlesNet</li>\n</ul>\n<h4 id=\"迭代误差反馈模型\"><a href=\"#迭代误差反馈模型\" class=\"headerlink\" title=\"迭代误差反馈模型\"></a>迭代误差反馈模型</h4><ul>\n<li>让网络学习到一个多阶段反馈的模型</li>\n<li>2016</li>\n</ul>\n<h4 id=\"双源CNN\"><a href=\"#双源CNN\" class=\"headerlink\" title=\"双源CNN\"></a>双源CNN</h4><ul>\n<li>给网络添加先验知识</li>\n<li>Fuan xiaochuan</li>\n<li>2015</li>\n</ul>\n<h4 id=\"CNN\"><a href=\"#CNN\" class=\"headerlink\" title=\"CNN\"></a>CNN</h4><ul>\n<li>由于人的尺度是不一样的，能不能让网络客服这一问题，并学习到关节与关节之间的关系(pair wise relation)？</li>\n<li>Yann lecun</li>\n<li>2014</li>\n<li>CNN+图模型</li>\n</ul>\n<h4 id=\"DCNN\"><a href=\"#DCNN\" class=\"headerlink\" title=\"DCNN\"></a>DCNN</h4><ul>\n<li>CNN+树状结构图模型</li>\n<li>2016</li>\n<li>Wang xiaogang</li>\n</ul>\n<h4 id=\"CPM\"><a href=\"#CPM\" class=\"headerlink\" title=\"CPM\"></a>CPM</h4><ul>\n<li>卷积姿态机 + 大卷积核提升感受野 + 多阶段回归</li>\n<li>2016</li>\n</ul>\n<h4 id=\"hourglass\"><a href=\"#hourglass\" class=\"headerlink\" title=\"hourglass\"></a>hourglass</h4><ul>\n<li>堆叠的沙漏模型 + 极大提升感受野 + 多阶段回归</li>\n<li>2016</li>\n</ul>\n<h4 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h4><ul>\n<li>图模型太慢，直接使用卷积核来实现</li>\n<li>树状结构的特征学习</li>\n<li>2016</li>\n</ul>\n<h4 id=\"Efficient-Concolutional-Network\"><a href=\"#Efficient-Concolutional-Network\" class=\"headerlink\" title=\"Efficient Concolutional Network\"></a>Efficient Concolutional Network</h4><ul>\n<li>关注efficience</li>\n<li>2016</li>\n</ul>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>如何评价卡内基梅隆大学的开源项目 OpenPose？ - 知乎<br><a href=\"https://www.zhihu.com/question/59750782\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/59750782</a></li>\n<li>CMU-Perceptual-Computing-Lab/openpose: OpenPose: Real-time multi-person keypoint detection library for body, face, hands, and foot estimation<br><a href=\"https://github.com/CMU-Perceptual-Computing-Lab/openpose\" target=\"_blank\" rel=\"noopener\">https://github.com/CMU-Perceptual-Computing-Lab/openpose</a></li>\n<li>人体姿态估计数据集整理（Pose Estimation/Keypoint） - 上善若水 - CSDN博客<br><a href=\"https://blog.csdn.net/guo1988kui/article/details/84321581\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/guo1988kui/article/details/84321581</a></li>\n<li>openpose实时多人2D姿态估计 - weixin_41441682的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_41441682/article/details/81357369#\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_41441682/article/details/81357369#</a></li>\n<li>人体姿态估计资源大列表（Human Pose Estimation） - xiaolouhan的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/xiaolouhan/article/details/84321148\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xiaolouhan/article/details/84321148</a></li>\n<li>新人求教如何从头学习人体姿态估计 - Ilovepose <a href=\"http://ilovepose.luohuank.xin/t/66\" target=\"_blank\" rel=\"noopener\">http://ilovepose.luohuank.xin/t/66</a><br>论文解析与翻译：《Stacked Hourglass Networks for Human Pose Estimation》 - qq_38522972的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_38522972/article/details/82958077\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38522972/article/details/82958077</a></li>\n<li>人体姿态估计资源大列表（Human Pose Estimation） - weixin_38367817的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_38367817/article/details/86522569\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_38367817/article/details/86522569</a></li>\n<li>人体姿态估计综述（Human Pose Estimation Overview） - 青青韶华 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36165459/article/details/78320535?locationNum=10&amp;fps=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36165459/article/details/78320535?locationNum=10&amp;fps=1</a></li>\n<li>人体姿态估计（人体关键点检测）分类与经典方法分析（附GitHub地址） - ls83776736的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/ls83776736/article/details/87991515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ls83776736/article/details/87991515</a><br>MPII Human Pose Database <a href=\"http://human-pose.mpi-inf.mpg.de/#results\" target=\"_blank\" rel=\"noopener\">http://human-pose.mpi-inf.mpg.de/#results</a></li>\n</ul>\n<ul>\n<li>3 机械手臂从零开始 写动态环境 (机器学习实战 教程教学 tutorial) - YouTube&lt;/br&gt;<a href=\"https://www.youtube.com/watch?v=T5QlePZ4s3U&amp;list=PLXO45tsB95cL8HTAlqkrmKLN_VSjlq4J8&amp;index=3\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=T5QlePZ4s3U&amp;list=PLXO45tsB95cL8HTAlqkrmKLN_VSjlq4J8&amp;index=3</a></li>\n</ul>\n<h1 id=\"ReID\"><a href=\"#ReID\" class=\"headerlink\" title=\"ReID\"></a>ReID</h1><p>行人智能认知</p>\n<ul>\n<li>行人检测</li>\n<li>行人分割&amp;背景替换</li>\n<li>谷歌关键点检测&amp;姿态识别</li>\n<li>行人跟踪/MOT</li>\n<li>动作识别</li>\n<li>行人属性结构化</li>\n<li>跨境追踪&amp;行人再识别/ReID</li>\n</ul>\n</the>"},{"title":"Hikey970使用记录四：python加载运行OpenCL","date":"2019-06-08T02:39:59.000Z","_content":"\n## 参考资料\n\n\n* Python 并行计算 - SoftStar的专栏 - CSDN博客  \nhttps://blog.csdn.net/u011532367/article/details/51008993\n\n\n## 安装\n``` bash\n$ sudo apt-get install opencl-dev\n$ pip3 install pybind11\n$ pip3 install pyopencl\n$ sudo apt-get install clinfo\n$ sudo clinfo\n```\n测试结果\n<img src=\"Hikey970使用记录四：python加载运行OpenCL\\001.png\" witdh=400 height=200>\n\n\n## 问题记录\nimport pyopencl as cl  \nImportError: No module named 'numpy.core._multiarray_umath'\nterminate called after throwing an instance of 'std::runtime_error'\n  what():  numpy failed to initialize\nAborted\n\n查看numpy的当前版本\n``` bash\npip show numpy\n```\n更新numpy的版本\n``` bash\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade numpy\n```\n\n## 参考资料\n* python - TensorFlow GPU比CPU更慢 - SegmentFault 思否  \nhttps://segmentfault.com/q/1010000012693363\n* https://discuss.96boards.org/search?q=opencl\n* https://community.arm.com/cn/f/discussions/13001/hikey960-arm-gpu\n","source":"_posts/Hikey970使用记录四：python加载运行OpenCL.md","raw":"---\ntitle: Hikey970使用记录四：python加载运行OpenCL\ndate: 2019-06-08 10:39:59\ntags:\n  - pyopencl\n---\n\n## 参考资料\n\n\n* Python 并行计算 - SoftStar的专栏 - CSDN博客  \nhttps://blog.csdn.net/u011532367/article/details/51008993\n\n\n## 安装\n``` bash\n$ sudo apt-get install opencl-dev\n$ pip3 install pybind11\n$ pip3 install pyopencl\n$ sudo apt-get install clinfo\n$ sudo clinfo\n```\n测试结果\n<img src=\"Hikey970使用记录四：python加载运行OpenCL\\001.png\" witdh=400 height=200>\n\n\n## 问题记录\nimport pyopencl as cl  \nImportError: No module named 'numpy.core._multiarray_umath'\nterminate called after throwing an instance of 'std::runtime_error'\n  what():  numpy failed to initialize\nAborted\n\n查看numpy的当前版本\n``` bash\npip show numpy\n```\n更新numpy的版本\n``` bash\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade numpy\n```\n\n## 参考资料\n* python - TensorFlow GPU比CPU更慢 - SegmentFault 思否  \nhttps://segmentfault.com/q/1010000012693363\n* https://discuss.96boards.org/search?q=opencl\n* https://community.arm.com/cn/f/discussions/13001/hikey960-arm-gpu\n","slug":"Hikey970使用记录四：python加载运行OpenCL","published":1,"updated":"2020-01-05T19:13:24.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5077000y4cvjam6flssi","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Python 并行计算 - SoftStar的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/u011532367/article/details/51008993\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011532367/article/details/51008993</a></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install opencl-dev</span><br><span class=\"line\">$ pip3 install pybind11</span><br><span class=\"line\">$ pip3 install pyopencl</span><br><span class=\"line\">$ sudo apt-get install clinfo</span><br><span class=\"line\">$ sudo clinfo</span><br></pre></td></tr></table></figure>\n<p>测试结果<br><img src=\"/2019/06/08/Hikey970使用记录四：python加载运行OpenCL/001.png\" witdh=\"400\" height=\"200\"></p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><p>import pyopencl as cl<br>ImportError: No module named ‘numpy.core._multiarray_umath’<br>terminate called after throwing an instance of ‘std::runtime_error’<br>  what():  numpy failed to initialize<br>Aborted</p>\n<p>查看numpy的当前版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show numpy</span><br></pre></td></tr></table></figure></p>\n<p>更新numpy的版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade numpy</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>python - TensorFlow GPU比CPU更慢 - SegmentFault 思否<br><a href=\"https://segmentfault.com/q/1010000012693363\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000012693363</a></li>\n<li><a href=\"https://discuss.96boards.org/search?q=opencl\" target=\"_blank\" rel=\"noopener\">https://discuss.96boards.org/search?q=opencl</a></li>\n<li><a href=\"https://community.arm.com/cn/f/discussions/13001/hikey960-arm-gpu\" target=\"_blank\" rel=\"noopener\">https://community.arm.com/cn/f/discussions/13001/hikey960-arm-gpu</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Python 并行计算 - SoftStar的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/u011532367/article/details/51008993\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011532367/article/details/51008993</a></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install opencl-dev</span><br><span class=\"line\">$ pip3 install pybind11</span><br><span class=\"line\">$ pip3 install pyopencl</span><br><span class=\"line\">$ sudo apt-get install clinfo</span><br><span class=\"line\">$ sudo clinfo</span><br></pre></td></tr></table></figure>\n<p>测试结果<br><img src=\"/2019/06/08/Hikey970使用记录四：python加载运行OpenCL/001.png\" witdh=\"400\" height=\"200\"></p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><p>import pyopencl as cl<br>ImportError: No module named ‘numpy.core._multiarray_umath’<br>terminate called after throwing an instance of ‘std::runtime_error’<br>  what():  numpy failed to initialize<br>Aborted</p>\n<p>查看numpy的当前版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip show numpy</span><br></pre></td></tr></table></figure></p>\n<p>更新numpy的版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade numpy</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>python - TensorFlow GPU比CPU更慢 - SegmentFault 思否<br><a href=\"https://segmentfault.com/q/1010000012693363\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000012693363</a></li>\n<li><a href=\"https://discuss.96boards.org/search?q=opencl\" target=\"_blank\" rel=\"noopener\">https://discuss.96boards.org/search?q=opencl</a></li>\n<li><a href=\"https://community.arm.com/cn/f/discussions/13001/hikey960-arm-gpu\" target=\"_blank\" rel=\"noopener\">https://community.arm.com/cn/f/discussions/13001/hikey960-arm-gpu</a></li>\n</ul>\n"},{"title":"Pixar-Lamp三：目标检测","date":"2019-08-11T11:51:10.000Z","_content":"\nopencv的dnn模块支持直接导入网络模型进行目标检测，以下测试了ssd_caffe和yoloV3两个模型。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 使用caffe\n\n``` python\n# Labels of Network.\nclassNames = { 0: 'background',\n    1: 'aeroplane', 2: 'bicycle', 3: 'bird', 4: 'boat',\n    5: 'bottle', 6: 'bus', 7: 'car', 8: 'cat', 9: 'chair',\n    10: 'cow', 11: 'diningtable', 12: 'dog', 13: 'horse',\n    14: 'motorbike', 15: 'person', 16: 'pottedplant',\n    17: 'sheep', 18: 'sofa', 19: 'train', 20: 'tvmonitor' }\n\n#Load the Caffe model \nprototxt = r\"MobileNetSSD_deploy.prototxt\"\nweights  = r\"MobileNetSSD_deploy.caffemodel\"\nnet = cv2.dnn.readNetFromCaffe(prototxt, weights)\n\nframe_resized = cv2.resize(frame,(300,300)) # resize frame for prediction\n\n# MobileNet requires fixed dimensions for input image(s)\n# so we have to ensure that it is resized to 300x300 pixels.\n# set a scale factor to image because network the objects has differents size. \n# We perform a mean subtraction (127.5, 127.5, 127.5) to normalize the input;\n# after executing this command our \"blob\" now has the shape:\n# (1, 3, 300, 300)\nblob = cv2.dnn.blobFromImage(frame_resized, 0.007843, (300, 300), (127.5, 127.5, 127.5), False)\n#Set to network the input blob \nnet.setInput(blob)\n#Prediction of network\ndetections = net.forward()\n```\n\n\n\n\n## 使用darknet\n\n* YOLO: Real-Time Object Detection  \nhttps://pjreddie.com/darknet/yolo/\n\n* YOLO Object Detection with OpenCV and Python  \nhttps://www.arunponnusamy.com/yolo-object-detection-opencv-python.html\n\n``` python\nclasses_file = r\"yolov3.txt\"\nwith open(classes_file, 'r') as f:\n    classes = [line.strip() for line in f.readlines()]\n\nconfigs_file = r\"yolov3.cfg\", \nweights_file = r\"yolov3.weights\"\nnet = cv2.dnn.readNetFromDarknet(configs_file, weights_file)\n\nblob = cv2.dnn.blobFromImage(image, 1/175, (416,416), (0,0,0), True, crop=False)\nnet.setInput(blob)\nouts = net.forward(get_output_layers(net))\n```\n\n\n\n* ### 问题1:Unknown layer type: shortcut in function cv::dnn::darknet::ReadDarknetFromCfgFile\n\n由于yolo3中的shortcut层还不被当前版本的opencv所支持，所以会报错，升级opencv即可。\n\n\n\n\n\n","source":"_posts/Pixar-Lamp三：目标检测.md","raw":"---\ntitle: Pixar-Lamp三：目标检测\ndate: 2019-08-11 19:51:10\ntags:\n - opencv\n---\n\nopencv的dnn模块支持直接导入网络模型进行目标检测，以下测试了ssd_caffe和yoloV3两个模型。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 使用caffe\n\n``` python\n# Labels of Network.\nclassNames = { 0: 'background',\n    1: 'aeroplane', 2: 'bicycle', 3: 'bird', 4: 'boat',\n    5: 'bottle', 6: 'bus', 7: 'car', 8: 'cat', 9: 'chair',\n    10: 'cow', 11: 'diningtable', 12: 'dog', 13: 'horse',\n    14: 'motorbike', 15: 'person', 16: 'pottedplant',\n    17: 'sheep', 18: 'sofa', 19: 'train', 20: 'tvmonitor' }\n\n#Load the Caffe model \nprototxt = r\"MobileNetSSD_deploy.prototxt\"\nweights  = r\"MobileNetSSD_deploy.caffemodel\"\nnet = cv2.dnn.readNetFromCaffe(prototxt, weights)\n\nframe_resized = cv2.resize(frame,(300,300)) # resize frame for prediction\n\n# MobileNet requires fixed dimensions for input image(s)\n# so we have to ensure that it is resized to 300x300 pixels.\n# set a scale factor to image because network the objects has differents size. \n# We perform a mean subtraction (127.5, 127.5, 127.5) to normalize the input;\n# after executing this command our \"blob\" now has the shape:\n# (1, 3, 300, 300)\nblob = cv2.dnn.blobFromImage(frame_resized, 0.007843, (300, 300), (127.5, 127.5, 127.5), False)\n#Set to network the input blob \nnet.setInput(blob)\n#Prediction of network\ndetections = net.forward()\n```\n\n\n\n\n## 使用darknet\n\n* YOLO: Real-Time Object Detection  \nhttps://pjreddie.com/darknet/yolo/\n\n* YOLO Object Detection with OpenCV and Python  \nhttps://www.arunponnusamy.com/yolo-object-detection-opencv-python.html\n\n``` python\nclasses_file = r\"yolov3.txt\"\nwith open(classes_file, 'r') as f:\n    classes = [line.strip() for line in f.readlines()]\n\nconfigs_file = r\"yolov3.cfg\", \nweights_file = r\"yolov3.weights\"\nnet = cv2.dnn.readNetFromDarknet(configs_file, weights_file)\n\nblob = cv2.dnn.blobFromImage(image, 1/175, (416,416), (0,0,0), True, crop=False)\nnet.setInput(blob)\nouts = net.forward(get_output_layers(net))\n```\n\n\n\n* ### 问题1:Unknown layer type: shortcut in function cv::dnn::darknet::ReadDarknetFromCfgFile\n\n由于yolo3中的shortcut层还不被当前版本的opencv所支持，所以会报错，升级opencv即可。\n\n\n\n\n\n","slug":"Pixar-Lamp三：目标检测","published":1,"updated":"2020-01-05T19:13:24.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507800114cvj6uo9brtg","content":"<p>opencv的dnn模块支持直接导入网络模型进行目标检测，以下测试了ssd_caffe和yoloV3两个模型。</p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"使用caffe\"><a href=\"#使用caffe\" class=\"headerlink\" title=\"使用caffe\"></a>使用caffe</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Labels of Network.</span></span><br><span class=\"line\">classNames = &#123; <span class=\"number\">0</span>: <span class=\"string\">'background'</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">'aeroplane'</span>, <span class=\"number\">2</span>: <span class=\"string\">'bicycle'</span>, <span class=\"number\">3</span>: <span class=\"string\">'bird'</span>, <span class=\"number\">4</span>: <span class=\"string\">'boat'</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">'bottle'</span>, <span class=\"number\">6</span>: <span class=\"string\">'bus'</span>, <span class=\"number\">7</span>: <span class=\"string\">'car'</span>, <span class=\"number\">8</span>: <span class=\"string\">'cat'</span>, <span class=\"number\">9</span>: <span class=\"string\">'chair'</span>,</span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"string\">'cow'</span>, <span class=\"number\">11</span>: <span class=\"string\">'diningtable'</span>, <span class=\"number\">12</span>: <span class=\"string\">'dog'</span>, <span class=\"number\">13</span>: <span class=\"string\">'horse'</span>,</span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"string\">'motorbike'</span>, <span class=\"number\">15</span>: <span class=\"string\">'person'</span>, <span class=\"number\">16</span>: <span class=\"string\">'pottedplant'</span>,</span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"string\">'sheep'</span>, <span class=\"number\">18</span>: <span class=\"string\">'sofa'</span>, <span class=\"number\">19</span>: <span class=\"string\">'train'</span>, <span class=\"number\">20</span>: <span class=\"string\">'tvmonitor'</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Load the Caffe model </span></span><br><span class=\"line\">prototxt = <span class=\"string\">r\"MobileNetSSD_deploy.prototxt\"</span></span><br><span class=\"line\">weights  = <span class=\"string\">r\"MobileNetSSD_deploy.caffemodel\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromCaffe(prototxt, weights)</span><br><span class=\"line\"></span><br><span class=\"line\">frame_resized = cv2.resize(frame,(<span class=\"number\">300</span>,<span class=\"number\">300</span>)) <span class=\"comment\"># resize frame for prediction</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MobileNet requires fixed dimensions for input image(s)</span></span><br><span class=\"line\"><span class=\"comment\"># so we have to ensure that it is resized to 300x300 pixels.</span></span><br><span class=\"line\"><span class=\"comment\"># set a scale factor to image because network the objects has differents size. </span></span><br><span class=\"line\"><span class=\"comment\"># We perform a mean subtraction (127.5, 127.5, 127.5) to normalize the input;</span></span><br><span class=\"line\"><span class=\"comment\"># after executing this command our \"blob\" now has the shape:</span></span><br><span class=\"line\"><span class=\"comment\"># (1, 3, 300, 300)</span></span><br><span class=\"line\">blob = cv2.dnn.blobFromImage(frame_resized, <span class=\"number\">0.007843</span>, (<span class=\"number\">300</span>, <span class=\"number\">300</span>), (<span class=\"number\">127.5</span>, <span class=\"number\">127.5</span>, <span class=\"number\">127.5</span>), <span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#Set to network the input blob </span></span><br><span class=\"line\">net.setInput(blob)</span><br><span class=\"line\"><span class=\"comment\">#Prediction of network</span></span><br><span class=\"line\">detections = net.forward()</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用darknet\"><a href=\"#使用darknet\" class=\"headerlink\" title=\"使用darknet\"></a>使用darknet</h2><ul>\n<li><p>YOLO: Real-Time Object Detection<br><a href=\"https://pjreddie.com/darknet/yolo/\" target=\"_blank\" rel=\"noopener\">https://pjreddie.com/darknet/yolo/</a></p>\n</li>\n<li><p>YOLO Object Detection with OpenCV and Python<br><a href=\"https://www.arunponnusamy.com/yolo-object-detection-opencv-python.html\" target=\"_blank\" rel=\"noopener\">https://www.arunponnusamy.com/yolo-object-detection-opencv-python.html</a></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classes_file = <span class=\"string\">r\"yolov3.txt\"</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(classes_file, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    classes = [line.strip() <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines()]</span><br><span class=\"line\"></span><br><span class=\"line\">configs_file = <span class=\"string\">r\"yolov3.cfg\"</span>, </span><br><span class=\"line\">weights_file = <span class=\"string\">r\"yolov3.weights\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromDarknet(configs_file, weights_file)</span><br><span class=\"line\"></span><br><span class=\"line\">blob = cv2.dnn.blobFromImage(image, <span class=\"number\">1</span>/<span class=\"number\">175</span>, (<span class=\"number\">416</span>,<span class=\"number\">416</span>), (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), <span class=\"literal\">True</span>, crop=<span class=\"literal\">False</span>)</span><br><span class=\"line\">net.setInput(blob)</span><br><span class=\"line\">outs = net.forward(get_output_layers(net))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"问题1-Unknown-layer-type-shortcut-in-function-cv-dnn-darknet-ReadDarknetFromCfgFile\"><a href=\"#问题1-Unknown-layer-type-shortcut-in-function-cv-dnn-darknet-ReadDarknetFromCfgFile\" class=\"headerlink\" title=\"问题1:Unknown layer type: shortcut in function cv::dnn::darknet::ReadDarknetFromCfgFile\"></a>问题1:Unknown layer type: shortcut in function cv::dnn::darknet::ReadDarknetFromCfgFile</h3></li>\n</ul>\n<p>由于yolo3中的shortcut层还不被当前版本的opencv所支持，所以会报错，升级opencv即可。</p>\n</the>","site":{"data":{}},"excerpt":"<p>opencv的dnn模块支持直接导入网络模型进行目标检测，以下测试了ssd_caffe和yoloV3两个模型。</p>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"使用caffe\"><a href=\"#使用caffe\" class=\"headerlink\" title=\"使用caffe\"></a>使用caffe</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Labels of Network.</span></span><br><span class=\"line\">classNames = &#123; <span class=\"number\">0</span>: <span class=\"string\">'background'</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">'aeroplane'</span>, <span class=\"number\">2</span>: <span class=\"string\">'bicycle'</span>, <span class=\"number\">3</span>: <span class=\"string\">'bird'</span>, <span class=\"number\">4</span>: <span class=\"string\">'boat'</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">'bottle'</span>, <span class=\"number\">6</span>: <span class=\"string\">'bus'</span>, <span class=\"number\">7</span>: <span class=\"string\">'car'</span>, <span class=\"number\">8</span>: <span class=\"string\">'cat'</span>, <span class=\"number\">9</span>: <span class=\"string\">'chair'</span>,</span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"string\">'cow'</span>, <span class=\"number\">11</span>: <span class=\"string\">'diningtable'</span>, <span class=\"number\">12</span>: <span class=\"string\">'dog'</span>, <span class=\"number\">13</span>: <span class=\"string\">'horse'</span>,</span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"string\">'motorbike'</span>, <span class=\"number\">15</span>: <span class=\"string\">'person'</span>, <span class=\"number\">16</span>: <span class=\"string\">'pottedplant'</span>,</span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"string\">'sheep'</span>, <span class=\"number\">18</span>: <span class=\"string\">'sofa'</span>, <span class=\"number\">19</span>: <span class=\"string\">'train'</span>, <span class=\"number\">20</span>: <span class=\"string\">'tvmonitor'</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Load the Caffe model </span></span><br><span class=\"line\">prototxt = <span class=\"string\">r\"MobileNetSSD_deploy.prototxt\"</span></span><br><span class=\"line\">weights  = <span class=\"string\">r\"MobileNetSSD_deploy.caffemodel\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromCaffe(prototxt, weights)</span><br><span class=\"line\"></span><br><span class=\"line\">frame_resized = cv2.resize(frame,(<span class=\"number\">300</span>,<span class=\"number\">300</span>)) <span class=\"comment\"># resize frame for prediction</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MobileNet requires fixed dimensions for input image(s)</span></span><br><span class=\"line\"><span class=\"comment\"># so we have to ensure that it is resized to 300x300 pixels.</span></span><br><span class=\"line\"><span class=\"comment\"># set a scale factor to image because network the objects has differents size. </span></span><br><span class=\"line\"><span class=\"comment\"># We perform a mean subtraction (127.5, 127.5, 127.5) to normalize the input;</span></span><br><span class=\"line\"><span class=\"comment\"># after executing this command our \"blob\" now has the shape:</span></span><br><span class=\"line\"><span class=\"comment\"># (1, 3, 300, 300)</span></span><br><span class=\"line\">blob = cv2.dnn.blobFromImage(frame_resized, <span class=\"number\">0.007843</span>, (<span class=\"number\">300</span>, <span class=\"number\">300</span>), (<span class=\"number\">127.5</span>, <span class=\"number\">127.5</span>, <span class=\"number\">127.5</span>), <span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#Set to network the input blob </span></span><br><span class=\"line\">net.setInput(blob)</span><br><span class=\"line\"><span class=\"comment\">#Prediction of network</span></span><br><span class=\"line\">detections = net.forward()</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用darknet\"><a href=\"#使用darknet\" class=\"headerlink\" title=\"使用darknet\"></a>使用darknet</h2><ul>\n<li><p>YOLO: Real-Time Object Detection<br><a href=\"https://pjreddie.com/darknet/yolo/\" target=\"_blank\" rel=\"noopener\">https://pjreddie.com/darknet/yolo/</a></p>\n</li>\n<li><p>YOLO Object Detection with OpenCV and Python<br><a href=\"https://www.arunponnusamy.com/yolo-object-detection-opencv-python.html\" target=\"_blank\" rel=\"noopener\">https://www.arunponnusamy.com/yolo-object-detection-opencv-python.html</a></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classes_file = <span class=\"string\">r\"yolov3.txt\"</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(classes_file, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    classes = [line.strip() <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines()]</span><br><span class=\"line\"></span><br><span class=\"line\">configs_file = <span class=\"string\">r\"yolov3.cfg\"</span>, </span><br><span class=\"line\">weights_file = <span class=\"string\">r\"yolov3.weights\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromDarknet(configs_file, weights_file)</span><br><span class=\"line\"></span><br><span class=\"line\">blob = cv2.dnn.blobFromImage(image, <span class=\"number\">1</span>/<span class=\"number\">175</span>, (<span class=\"number\">416</span>,<span class=\"number\">416</span>), (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), <span class=\"literal\">True</span>, crop=<span class=\"literal\">False</span>)</span><br><span class=\"line\">net.setInput(blob)</span><br><span class=\"line\">outs = net.forward(get_output_layers(net))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"问题1-Unknown-layer-type-shortcut-in-function-cv-dnn-darknet-ReadDarknetFromCfgFile\"><a href=\"#问题1-Unknown-layer-type-shortcut-in-function-cv-dnn-darknet-ReadDarknetFromCfgFile\" class=\"headerlink\" title=\"问题1:Unknown layer type: shortcut in function cv::dnn::darknet::ReadDarknetFromCfgFile\"></a>问题1:Unknown layer type: shortcut in function cv::dnn::darknet::ReadDarknetFromCfgFile</h3></li>\n</ul>\n<p>由于yolo3中的shortcut层还不被当前版本的opencv所支持，所以会报错，升级opencv即可。</p>\n</the>"},{"title":"TensorFlow 手写数字识别","date":"2019-04-26T02:13:08.000Z","_content":"\n## tensorflow基础\n\n### 基本概念\n\ntensorflow是一个编程系统，使用图(graphs)来表示计算任务，在会话(Seeeion)的context中执行graphs，graphs中的节点称为op(operation)，一个op获得零个或多个Tensor，执行计算产生零个或多个Tensor，Tensor可以看做n维数组或列表，图必须在会话中启动，通过变量(Variable)维护装填，使用feed和fetch可以为任意的操作赋值获从中获取数据。\n\n* TensorFlow Core  |  TensorFlow  \nhttps://tensorflow.google.cn/tutorials?tdsourcetag=s_pcqq_aiomsg\n\n* 优化器 Optimizer 加速神经网络训练 (深度学习) Speed up neural network training process (deep learning) - YouTube  \nhttps://www.youtube.com/watch?v=UlUGGB7akfE&list=PLXO45tsB95cKI5AIlf5TxxFPzb-0zeVZ8&index=18&app=desktop\n\n* An overview of gradient descent optimization algorithms  \nhttp://ruder.io/optimizing-gradient-descent/\n\n\n\n\n\n\n\n","source":"_posts/TensorFlow-手写数字识别.md","raw":"---\ntitle: TensorFlow 手写数字识别\ndate: 2019-04-26 10:13:08\ntags:\n  - tensorflow\n---\n\n## tensorflow基础\n\n### 基本概念\n\ntensorflow是一个编程系统，使用图(graphs)来表示计算任务，在会话(Seeeion)的context中执行graphs，graphs中的节点称为op(operation)，一个op获得零个或多个Tensor，执行计算产生零个或多个Tensor，Tensor可以看做n维数组或列表，图必须在会话中启动，通过变量(Variable)维护装填，使用feed和fetch可以为任意的操作赋值获从中获取数据。\n\n* TensorFlow Core  |  TensorFlow  \nhttps://tensorflow.google.cn/tutorials?tdsourcetag=s_pcqq_aiomsg\n\n* 优化器 Optimizer 加速神经网络训练 (深度学习) Speed up neural network training process (deep learning) - YouTube  \nhttps://www.youtube.com/watch?v=UlUGGB7akfE&list=PLXO45tsB95cKI5AIlf5TxxFPzb-0zeVZ8&index=18&app=desktop\n\n* An overview of gradient descent optimization algorithms  \nhttp://ruder.io/optimizing-gradient-descent/\n\n\n\n\n\n\n\n","slug":"TensorFlow-手写数字识别","published":1,"updated":"2020-01-05T19:13:24.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507900134cvjwoe0684s","content":"<h2 id=\"tensorflow基础\"><a href=\"#tensorflow基础\" class=\"headerlink\" title=\"tensorflow基础\"></a>tensorflow基础</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>tensorflow是一个编程系统，使用图(graphs)来表示计算任务，在会话(Seeeion)的context中执行graphs，graphs中的节点称为op(operation)，一个op获得零个或多个Tensor，执行计算产生零个或多个Tensor，Tensor可以看做n维数组或列表，图必须在会话中启动，通过变量(Variable)维护装填，使用feed和fetch可以为任意的操作赋值获从中获取数据。</p>\n<ul>\n<li><p>TensorFlow Core  |  TensorFlow<br><a href=\"https://tensorflow.google.cn/tutorials?tdsourcetag=s_pcqq_aiomsg\" target=\"_blank\" rel=\"noopener\">https://tensorflow.google.cn/tutorials?tdsourcetag=s_pcqq_aiomsg</a></p>\n</li>\n<li><p>优化器 Optimizer 加速神经网络训练 (深度学习) Speed up neural network training process (deep learning) - YouTube<br><a href=\"https://www.youtube.com/watch?v=UlUGGB7akfE&amp;list=PLXO45tsB95cKI5AIlf5TxxFPzb-0zeVZ8&amp;index=18&amp;app=desktop\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=UlUGGB7akfE&amp;list=PLXO45tsB95cKI5AIlf5TxxFPzb-0zeVZ8&amp;index=18&amp;app=desktop</a></p>\n</li>\n<li><p>An overview of gradient descent optimization algorithms<br><a href=\"http://ruder.io/optimizing-gradient-descent/\" target=\"_blank\" rel=\"noopener\">http://ruder.io/optimizing-gradient-descent/</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tensorflow基础\"><a href=\"#tensorflow基础\" class=\"headerlink\" title=\"tensorflow基础\"></a>tensorflow基础</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>tensorflow是一个编程系统，使用图(graphs)来表示计算任务，在会话(Seeeion)的context中执行graphs，graphs中的节点称为op(operation)，一个op获得零个或多个Tensor，执行计算产生零个或多个Tensor，Tensor可以看做n维数组或列表，图必须在会话中启动，通过变量(Variable)维护装填，使用feed和fetch可以为任意的操作赋值获从中获取数据。</p>\n<ul>\n<li><p>TensorFlow Core  |  TensorFlow<br><a href=\"https://tensorflow.google.cn/tutorials?tdsourcetag=s_pcqq_aiomsg\" target=\"_blank\" rel=\"noopener\">https://tensorflow.google.cn/tutorials?tdsourcetag=s_pcqq_aiomsg</a></p>\n</li>\n<li><p>优化器 Optimizer 加速神经网络训练 (深度学习) Speed up neural network training process (deep learning) - YouTube<br><a href=\"https://www.youtube.com/watch?v=UlUGGB7akfE&amp;list=PLXO45tsB95cKI5AIlf5TxxFPzb-0zeVZ8&amp;index=18&amp;app=desktop\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=UlUGGB7akfE&amp;list=PLXO45tsB95cKI5AIlf5TxxFPzb-0zeVZ8&amp;index=18&amp;app=desktop</a></p>\n</li>\n<li><p>An overview of gradient descent optimization algorithms<br><a href=\"http://ruder.io/optimizing-gradient-descent/\" target=\"_blank\" rel=\"noopener\">http://ruder.io/optimizing-gradient-descent/</a></p>\n</li>\n</ul>\n"},{"title":"Scikit-Learn学习笔记","date":"2019-05-02T12:56:38.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n## 选择学习方法\nSklearn官网提供了一个流程图\n<div align=center>\n<img src = \"Scikit-Learn学习笔记\\machine_learning_map.png\" width=600 height=300>\n</div>\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 通用学习模式\n### 导入模块\n``` python\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n```\n### 加载数据\n``` python\niris = datasets.load_iris()\niris_X = iris.data\niris_y = iris.target \nprint(iris_X[:2,:])\nprint(iris_y)\n```\n### 划分训练集和测试集\n``` python\nX_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size = 0.3)\n```\n### 创建模型，训练，预测\n``` python\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\nprint(knn.predict(X_test))\nprint(y_test)\n```\n### 模型保存和加载\n* method 1: pickle\n\n``` python\nimport pickle\nfrom sklearn.externals import joblib\n# save\nwith open('clf.pickle', 'wb') as f:\n    pickle.dump(model, f)\n# restore\nwith open('clf.pickle', 'rb') as f:\n    model = pickle.load(f)\n```\n\n* method 2: joblib\n\n``` python\nfrom sklearn.externals import joblib\n# save\njoblib.dump(model, 'clf.plk')\n# restore\nmodel2 = joblib.load('clf.plk')\n```\n\n## datasets数据库 \n### sklearn.datasets\n* API Reference — scikit-learn 0.20.3 documentation  \nhttps://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets\n\n### Sklearn的数据表示\n* 数据表\n* 特征矩阵\n* 目标数组\n``` python\n# 用seaborn加载数据\nimport seaborn as sns\niris = sns.load_dataset('iris')\niris.head()\n# 可视化\n%matplotlib inline\nimport seaborn as sns; sns.set()\nsns.pairplot(iris, hue='species', size=1.5);\n# 抽取特征矩阵和目标数组\nX_iris = iris.drop('species', axis=1)\nX_iris.shape\ny_iris = iris['species']\ny_iris.shape\n```\n\n## Sklearn评估器API\n### 步骤 \n(1)选择模型类;  \n(2)配置模型超参数(hyperparameter);  \n(3)整理数据，获取特征矩阵和目标数组;  \n(4)调用模型实例的fit()方法对数据进行拟合;  \n(5)对新数据应用模型:有监督用predict()预测标签,无监督用transform()或predict()转换或推断数据性质。\n\n## model\n### 属性  \nmodel.intercept_  \nmodel.coef_  \n### 功能  \nmodel.predict  \nmodel.score  \n\n## 模型验证\n\n## 数据预处理\n### 标准化\n### 缺失值\n### 特征工程\n\n\n\n## 参考博客\n* jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks  \nhttps://github.com/jakevdp/PythonDataScienceHandbook  \n* 莫烦Python  \nhttps://morvanzhou.github.io/  \n* 使用sklearn做单机特征工程 - jasonfreak - 博客园  \nhttps://www.cnblogs.com/jasonfreak/p/5448385.html\n\n","source":"_posts/Scikit-Learn学习笔记.md","raw":"---\ntitle: Scikit-Learn学习笔记\ndate: 2019-05-02 20:56:38\ntags:\n  - import\n  - sklearn\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n## 选择学习方法\nSklearn官网提供了一个流程图\n<div align=center>\n<img src = \"Scikit-Learn学习笔记\\machine_learning_map.png\" width=600 height=300>\n</div>\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 通用学习模式\n### 导入模块\n``` python\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n```\n### 加载数据\n``` python\niris = datasets.load_iris()\niris_X = iris.data\niris_y = iris.target \nprint(iris_X[:2,:])\nprint(iris_y)\n```\n### 划分训练集和测试集\n``` python\nX_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size = 0.3)\n```\n### 创建模型，训练，预测\n``` python\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\nprint(knn.predict(X_test))\nprint(y_test)\n```\n### 模型保存和加载\n* method 1: pickle\n\n``` python\nimport pickle\nfrom sklearn.externals import joblib\n# save\nwith open('clf.pickle', 'wb') as f:\n    pickle.dump(model, f)\n# restore\nwith open('clf.pickle', 'rb') as f:\n    model = pickle.load(f)\n```\n\n* method 2: joblib\n\n``` python\nfrom sklearn.externals import joblib\n# save\njoblib.dump(model, 'clf.plk')\n# restore\nmodel2 = joblib.load('clf.plk')\n```\n\n## datasets数据库 \n### sklearn.datasets\n* API Reference — scikit-learn 0.20.3 documentation  \nhttps://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets\n\n### Sklearn的数据表示\n* 数据表\n* 特征矩阵\n* 目标数组\n``` python\n# 用seaborn加载数据\nimport seaborn as sns\niris = sns.load_dataset('iris')\niris.head()\n# 可视化\n%matplotlib inline\nimport seaborn as sns; sns.set()\nsns.pairplot(iris, hue='species', size=1.5);\n# 抽取特征矩阵和目标数组\nX_iris = iris.drop('species', axis=1)\nX_iris.shape\ny_iris = iris['species']\ny_iris.shape\n```\n\n## Sklearn评估器API\n### 步骤 \n(1)选择模型类;  \n(2)配置模型超参数(hyperparameter);  \n(3)整理数据，获取特征矩阵和目标数组;  \n(4)调用模型实例的fit()方法对数据进行拟合;  \n(5)对新数据应用模型:有监督用predict()预测标签,无监督用transform()或predict()转换或推断数据性质。\n\n## model\n### 属性  \nmodel.intercept_  \nmodel.coef_  \n### 功能  \nmodel.predict  \nmodel.score  \n\n## 模型验证\n\n## 数据预处理\n### 标准化\n### 缺失值\n### 特征工程\n\n\n\n## 参考博客\n* jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks  \nhttps://github.com/jakevdp/PythonDataScienceHandbook  \n* 莫烦Python  \nhttps://morvanzhou.github.io/  \n* 使用sklearn做单机特征工程 - jasonfreak - 博客园  \nhttps://www.cnblogs.com/jasonfreak/p/5448385.html\n\n","slug":"Scikit-Learn学习笔记","published":1,"updated":"2020-01-05T19:13:24.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507a00144cvj1niippfn","content":"<p><strong> Scikit-Learn学习笔记 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"选择学习方法\"><a href=\"#选择学习方法\" class=\"headerlink\" title=\"选择学习方法\"></a>选择学习方法</h2><p>Sklearn官网提供了一个流程图</p>\n<p><div align=\"center\">\n<img src=\"/2019/05/02/Scikit-Learn学习笔记/machine_learning_map.png\" width=\"600\" height=\"300\">\n</div><br><a id=\"more\"></a></p>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"通用学习模式\"><a href=\"#通用学习模式\" class=\"headerlink\" title=\"通用学习模式\"></a>通用学习模式</h2><h3 id=\"导入模块\"><a href=\"#导入模块\" class=\"headerlink\" title=\"导入模块\"></a>导入模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.cross_validation <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure>\n<h3 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\">iris_X = iris.data</span><br><span class=\"line\">iris_y = iris.target </span><br><span class=\"line\">print(iris_X[:<span class=\"number\">2</span>,:])</span><br><span class=\"line\">print(iris_y)</span><br></pre></td></tr></table></figure>\n<h3 id=\"划分训练集和测试集\"><a href=\"#划分训练集和测试集\" class=\"headerlink\" title=\"划分训练集和测试集\"></a>划分训练集和测试集</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size = <span class=\"number\">0.3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建模型，训练，预测\"><a href=\"#创建模型，训练，预测\" class=\"headerlink\" title=\"创建模型，训练，预测\"></a>创建模型，训练，预测</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knn = KNeighborsClassifier()</span><br><span class=\"line\">knn.fit(X_train, y_train)</span><br><span class=\"line\">print(knn.predict(X_test))</span><br><span class=\"line\">print(y_test)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型保存和加载\"><a href=\"#模型保存和加载\" class=\"headerlink\" title=\"模型保存和加载\"></a>模型保存和加载</h3><ul>\n<li>method 1: pickle</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.externals <span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"comment\"># save</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'clf.pickle'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    pickle.dump(model, f)</span><br><span class=\"line\"><span class=\"comment\"># restore</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'clf.pickle'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    model = pickle.load(f)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>method 2: joblib</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.externals <span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"comment\"># save</span></span><br><span class=\"line\">joblib.dump(model, <span class=\"string\">'clf.plk'</span>)</span><br><span class=\"line\"><span class=\"comment\"># restore</span></span><br><span class=\"line\">model2 = joblib.load(<span class=\"string\">'clf.plk'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"datasets数据库\"><a href=\"#datasets数据库\" class=\"headerlink\" title=\"datasets数据库\"></a>datasets数据库</h2><h3 id=\"sklearn-datasets\"><a href=\"#sklearn-datasets\" class=\"headerlink\" title=\"sklearn.datasets\"></a>sklearn.datasets</h3><ul>\n<li>API Reference — scikit-learn 0.20.3 documentation<br><a href=\"https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets\" target=\"_blank\" rel=\"noopener\">https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets</a></li>\n</ul>\n<h3 id=\"Sklearn的数据表示\"><a href=\"#Sklearn的数据表示\" class=\"headerlink\" title=\"Sklearn的数据表示\"></a>Sklearn的数据表示</h3><ul>\n<li>数据表</li>\n<li>特征矩阵</li>\n<li>目标数组<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用seaborn加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\">iris = sns.load_dataset(<span class=\"string\">'iris'</span>)</span><br><span class=\"line\">iris.head()</span><br><span class=\"line\"><span class=\"comment\"># 可视化</span></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns; sns.set()</span><br><span class=\"line\">sns.pairplot(iris, hue=<span class=\"string\">'species'</span>, size=<span class=\"number\">1.5</span>);</span><br><span class=\"line\"><span class=\"comment\"># 抽取特征矩阵和目标数组</span></span><br><span class=\"line\">X_iris = iris.drop(<span class=\"string\">'species'</span>, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">X_iris.shape</span><br><span class=\"line\">y_iris = iris[<span class=\"string\">'species'</span>]</span><br><span class=\"line\">y_iris.shape</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Sklearn评估器API\"><a href=\"#Sklearn评估器API\" class=\"headerlink\" title=\"Sklearn评估器API\"></a>Sklearn评估器API</h2><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>(1)选择模型类;<br>(2)配置模型超参数(hyperparameter);<br>(3)整理数据，获取特征矩阵和目标数组;<br>(4)调用模型实例的fit()方法对数据进行拟合;<br>(5)对新数据应用模型:有监督用predict()预测标签,无监督用transform()或predict()转换或推断数据性质。</p>\n<h2 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h2><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>model.intercept_<br>model.coef_  </p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>model.predict<br>model.score  </p>\n<h2 id=\"模型验证\"><a href=\"#模型验证\" class=\"headerlink\" title=\"模型验证\"></a>模型验证</h2><h2 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h2><h3 id=\"标准化\"><a href=\"#标准化\" class=\"headerlink\" title=\"标准化\"></a>标准化</h3><h3 id=\"缺失值\"><a href=\"#缺失值\" class=\"headerlink\" title=\"缺失值\"></a>缺失值</h3><h3 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h3><h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks<br><a href=\"https://github.com/jakevdp/PythonDataScienceHandbook\" target=\"_blank\" rel=\"noopener\">https://github.com/jakevdp/PythonDataScienceHandbook</a>  </li>\n<li>莫烦Python<br><a href=\"https://morvanzhou.github.io/\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/</a>  </li>\n<li>使用sklearn做单机特征工程 - jasonfreak - 博客园<br><a href=\"https://www.cnblogs.com/jasonfreak/p/5448385.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jasonfreak/p/5448385.html</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> Scikit-Learn学习笔记 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"选择学习方法\"><a href=\"#选择学习方法\" class=\"headerlink\" title=\"选择学习方法\"></a>选择学习方法</h2><p>Sklearn官网提供了一个流程图</p>\n<p><div align=\"center\">\n<img src=\"/2019/05/02/Scikit-Learn学习笔记/machine_learning_map.png\" width=\"600\" height=\"300\">\n</div><br></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"通用学习模式\"><a href=\"#通用学习模式\" class=\"headerlink\" title=\"通用学习模式\"></a>通用学习模式</h2><h3 id=\"导入模块\"><a href=\"#导入模块\" class=\"headerlink\" title=\"导入模块\"></a>导入模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.cross_validation <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure>\n<h3 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\">iris_X = iris.data</span><br><span class=\"line\">iris_y = iris.target </span><br><span class=\"line\">print(iris_X[:<span class=\"number\">2</span>,:])</span><br><span class=\"line\">print(iris_y)</span><br></pre></td></tr></table></figure>\n<h3 id=\"划分训练集和测试集\"><a href=\"#划分训练集和测试集\" class=\"headerlink\" title=\"划分训练集和测试集\"></a>划分训练集和测试集</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size = <span class=\"number\">0.3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建模型，训练，预测\"><a href=\"#创建模型，训练，预测\" class=\"headerlink\" title=\"创建模型，训练，预测\"></a>创建模型，训练，预测</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knn = KNeighborsClassifier()</span><br><span class=\"line\">knn.fit(X_train, y_train)</span><br><span class=\"line\">print(knn.predict(X_test))</span><br><span class=\"line\">print(y_test)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型保存和加载\"><a href=\"#模型保存和加载\" class=\"headerlink\" title=\"模型保存和加载\"></a>模型保存和加载</h3><ul>\n<li>method 1: pickle</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.externals <span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"comment\"># save</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'clf.pickle'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    pickle.dump(model, f)</span><br><span class=\"line\"><span class=\"comment\"># restore</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'clf.pickle'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    model = pickle.load(f)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>method 2: joblib</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.externals <span class=\"keyword\">import</span> joblib</span><br><span class=\"line\"><span class=\"comment\"># save</span></span><br><span class=\"line\">joblib.dump(model, <span class=\"string\">'clf.plk'</span>)</span><br><span class=\"line\"><span class=\"comment\"># restore</span></span><br><span class=\"line\">model2 = joblib.load(<span class=\"string\">'clf.plk'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"datasets数据库\"><a href=\"#datasets数据库\" class=\"headerlink\" title=\"datasets数据库\"></a>datasets数据库</h2><h3 id=\"sklearn-datasets\"><a href=\"#sklearn-datasets\" class=\"headerlink\" title=\"sklearn.datasets\"></a>sklearn.datasets</h3><ul>\n<li>API Reference — scikit-learn 0.20.3 documentation<br><a href=\"https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets\" target=\"_blank\" rel=\"noopener\">https://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets</a></li>\n</ul>\n<h3 id=\"Sklearn的数据表示\"><a href=\"#Sklearn的数据表示\" class=\"headerlink\" title=\"Sklearn的数据表示\"></a>Sklearn的数据表示</h3><ul>\n<li>数据表</li>\n<li>特征矩阵</li>\n<li>目标数组<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用seaborn加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\">iris = sns.load_dataset(<span class=\"string\">'iris'</span>)</span><br><span class=\"line\">iris.head()</span><br><span class=\"line\"><span class=\"comment\"># 可视化</span></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns; sns.set()</span><br><span class=\"line\">sns.pairplot(iris, hue=<span class=\"string\">'species'</span>, size=<span class=\"number\">1.5</span>);</span><br><span class=\"line\"><span class=\"comment\"># 抽取特征矩阵和目标数组</span></span><br><span class=\"line\">X_iris = iris.drop(<span class=\"string\">'species'</span>, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">X_iris.shape</span><br><span class=\"line\">y_iris = iris[<span class=\"string\">'species'</span>]</span><br><span class=\"line\">y_iris.shape</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Sklearn评估器API\"><a href=\"#Sklearn评估器API\" class=\"headerlink\" title=\"Sklearn评估器API\"></a>Sklearn评估器API</h2><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>(1)选择模型类;<br>(2)配置模型超参数(hyperparameter);<br>(3)整理数据，获取特征矩阵和目标数组;<br>(4)调用模型实例的fit()方法对数据进行拟合;<br>(5)对新数据应用模型:有监督用predict()预测标签,无监督用transform()或predict()转换或推断数据性质。</p>\n<h2 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h2><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>model.intercept_<br>model.coef_  </p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>model.predict<br>model.score  </p>\n<h2 id=\"模型验证\"><a href=\"#模型验证\" class=\"headerlink\" title=\"模型验证\"></a>模型验证</h2><h2 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h2><h3 id=\"标准化\"><a href=\"#标准化\" class=\"headerlink\" title=\"标准化\"></a>标准化</h3><h3 id=\"缺失值\"><a href=\"#缺失值\" class=\"headerlink\" title=\"缺失值\"></a>缺失值</h3><h3 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h3><h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks<br><a href=\"https://github.com/jakevdp/PythonDataScienceHandbook\" target=\"_blank\" rel=\"noopener\">https://github.com/jakevdp/PythonDataScienceHandbook</a>  </li>\n<li>莫烦Python<br><a href=\"https://morvanzhou.github.io/\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/</a>  </li>\n<li>使用sklearn做单机特征工程 - jasonfreak - 博客园<br><a href=\"https://www.cnblogs.com/jasonfreak/p/5448385.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jasonfreak/p/5448385.html</a></li>\n</ul>\n</the>"},{"title":"RL学习笔记","date":"2019-05-22T07:56:59.000Z","_content":"\n## windows安装gym\n安装依赖包\n``` bash\n> pip install pillow ...\n```\n安装gym和游戏仿真环境Atari\n``` bash\n> pip install gym\n> pip install - -no-index -f https://github.com/Kojoley/atari-py/releases atari_py\n```\n\n\n\n\n``` bash\n(root) C:\\Users\\Administrator\\Desktop\\DQN-2048-master>python\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pandas as pd\n>>> import numpy as np\n>>> table = pd.DataFrame(np.random.random((3,4)), index=[2,4,6], columns=['a', 'c', 'd', 'd'])\n>>> table\n          a         c         d         d\n2  0.444598  0.907250  0.629258  0.607062\n4  0.531954  0.341319  0.477738  0.480921\n6  0.102290  0.765902  0.923868  0.159364\n>>> table_alist = table.loc[4,:]\n>>> table_alist\na    0.531954\nc    0.341319\nd    0.477738\nd    0.480921\nName: 4, dtype: float64\n>>> table_alist.max()\n0.5319538779267701\n>>> table_alist.argmax()\n'a'\n>>>\n\n```\n\n\n* 深度增强学习（DRL）漫谈 - 从DQN到AlphaGo - 世事难料，保持低调 - CSDN博客  \nhttps://blog.csdn.net/jinzhuojun/article/details/52752561\n\n* 深度增强学习DDPG（Deep Deterministic Policy Gradient）算法源码走读 - 世事难料，保持低调 - CSDN博客  \nhttps://blog.csdn.net/jinzhuojun/article/details/82556127\n\n\n* 在Windows下使用OpenAI Gym - HelloGym - 止于至玄 - CSDN博客  \nhttps://blog.csdn.net/philthinker/article/details/79810249\n\n","source":"_posts/RL学习笔记.md","raw":"---\ntitle: RL学习笔记\ndate: 2019-05-22 15:56:59\ntags:\n  - RL\n---\n\n## windows安装gym\n安装依赖包\n``` bash\n> pip install pillow ...\n```\n安装gym和游戏仿真环境Atari\n``` bash\n> pip install gym\n> pip install - -no-index -f https://github.com/Kojoley/atari-py/releases atari_py\n```\n\n\n\n\n``` bash\n(root) C:\\Users\\Administrator\\Desktop\\DQN-2048-master>python\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pandas as pd\n>>> import numpy as np\n>>> table = pd.DataFrame(np.random.random((3,4)), index=[2,4,6], columns=['a', 'c', 'd', 'd'])\n>>> table\n          a         c         d         d\n2  0.444598  0.907250  0.629258  0.607062\n4  0.531954  0.341319  0.477738  0.480921\n6  0.102290  0.765902  0.923868  0.159364\n>>> table_alist = table.loc[4,:]\n>>> table_alist\na    0.531954\nc    0.341319\nd    0.477738\nd    0.480921\nName: 4, dtype: float64\n>>> table_alist.max()\n0.5319538779267701\n>>> table_alist.argmax()\n'a'\n>>>\n\n```\n\n\n* 深度增强学习（DRL）漫谈 - 从DQN到AlphaGo - 世事难料，保持低调 - CSDN博客  \nhttps://blog.csdn.net/jinzhuojun/article/details/52752561\n\n* 深度增强学习DDPG（Deep Deterministic Policy Gradient）算法源码走读 - 世事难料，保持低调 - CSDN博客  \nhttps://blog.csdn.net/jinzhuojun/article/details/82556127\n\n\n* 在Windows下使用OpenAI Gym - HelloGym - 止于至玄 - CSDN博客  \nhttps://blog.csdn.net/philthinker/article/details/79810249\n\n","slug":"RL学习笔记","published":1,"updated":"2020-01-05T19:13:24.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507c00174cvjwyieopu1","content":"<h2 id=\"windows安装gym\"><a href=\"#windows安装gym\" class=\"headerlink\" title=\"windows安装gym\"></a>windows安装gym</h2><p>安装依赖包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pip install pillow ...</span><br></pre></td></tr></table></figure></p>\n<p>安装gym和游戏仿真环境Atari<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pip install gym</span><br><span class=\"line\">&gt; pip install - -no-index -f https://github.com/Kojoley/atari-py/releases atari_py</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root) C:\\Users\\Administrator\\Desktop\\DQN-2048-master&gt;python</span><br><span class=\"line\">Python 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span>, <span class=\"string\">\"copyright\"</span>, <span class=\"string\">\"credits\"</span> or <span class=\"string\">\"license\"</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt; import pandas as pd</span><br><span class=\"line\">&gt;&gt;&gt; import numpy as np</span><br><span class=\"line\">&gt;&gt;&gt; table = pd.DataFrame(np.random.random((3,4)), index=[2,4,6], columns=[<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'d'</span>])</span><br><span class=\"line\">&gt;&gt;&gt; table</span><br><span class=\"line\">          a         c         d         d</span><br><span class=\"line\">2  0.444598  0.907250  0.629258  0.607062</span><br><span class=\"line\">4  0.531954  0.341319  0.477738  0.480921</span><br><span class=\"line\">6  0.102290  0.765902  0.923868  0.159364</span><br><span class=\"line\">&gt;&gt;&gt; table_alist = table.loc[4,:]</span><br><span class=\"line\">&gt;&gt;&gt; table_alist</span><br><span class=\"line\">a    0.531954</span><br><span class=\"line\">c    0.341319</span><br><span class=\"line\">d    0.477738</span><br><span class=\"line\">d    0.480921</span><br><span class=\"line\">Name: 4, dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; table_alist.max()</span><br><span class=\"line\">0.5319538779267701</span><br><span class=\"line\">&gt;&gt;&gt; table_alist.argmax()</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>深度增强学习（DRL）漫谈 - 从DQN到AlphaGo - 世事难料，保持低调 - CSDN博客<br><a href=\"https://blog.csdn.net/jinzhuojun/article/details/52752561\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jinzhuojun/article/details/52752561</a></p>\n</li>\n<li><p>深度增强学习DDPG（Deep Deterministic Policy Gradient）算法源码走读 - 世事难料，保持低调 - CSDN博客<br><a href=\"https://blog.csdn.net/jinzhuojun/article/details/82556127\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jinzhuojun/article/details/82556127</a></p>\n</li>\n</ul>\n<ul>\n<li>在Windows下使用OpenAI Gym - HelloGym - 止于至玄 - CSDN博客<br><a href=\"https://blog.csdn.net/philthinker/article/details/79810249\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/philthinker/article/details/79810249</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"windows安装gym\"><a href=\"#windows安装gym\" class=\"headerlink\" title=\"windows安装gym\"></a>windows安装gym</h2><p>安装依赖包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pip install pillow ...</span><br></pre></td></tr></table></figure></p>\n<p>安装gym和游戏仿真环境Atari<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pip install gym</span><br><span class=\"line\">&gt; pip install - -no-index -f https://github.com/Kojoley/atari-py/releases atari_py</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(root) C:\\Users\\Administrator\\Desktop\\DQN-2048-master&gt;python</span><br><span class=\"line\">Python 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span>, <span class=\"string\">\"copyright\"</span>, <span class=\"string\">\"credits\"</span> or <span class=\"string\">\"license\"</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt; import pandas as pd</span><br><span class=\"line\">&gt;&gt;&gt; import numpy as np</span><br><span class=\"line\">&gt;&gt;&gt; table = pd.DataFrame(np.random.random((3,4)), index=[2,4,6], columns=[<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'d'</span>])</span><br><span class=\"line\">&gt;&gt;&gt; table</span><br><span class=\"line\">          a         c         d         d</span><br><span class=\"line\">2  0.444598  0.907250  0.629258  0.607062</span><br><span class=\"line\">4  0.531954  0.341319  0.477738  0.480921</span><br><span class=\"line\">6  0.102290  0.765902  0.923868  0.159364</span><br><span class=\"line\">&gt;&gt;&gt; table_alist = table.loc[4,:]</span><br><span class=\"line\">&gt;&gt;&gt; table_alist</span><br><span class=\"line\">a    0.531954</span><br><span class=\"line\">c    0.341319</span><br><span class=\"line\">d    0.477738</span><br><span class=\"line\">d    0.480921</span><br><span class=\"line\">Name: 4, dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; table_alist.max()</span><br><span class=\"line\">0.5319538779267701</span><br><span class=\"line\">&gt;&gt;&gt; table_alist.argmax()</span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>深度增强学习（DRL）漫谈 - 从DQN到AlphaGo - 世事难料，保持低调 - CSDN博客<br><a href=\"https://blog.csdn.net/jinzhuojun/article/details/52752561\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jinzhuojun/article/details/52752561</a></p>\n</li>\n<li><p>深度增强学习DDPG（Deep Deterministic Policy Gradient）算法源码走读 - 世事难料，保持低调 - CSDN博客<br><a href=\"https://blog.csdn.net/jinzhuojun/article/details/82556127\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jinzhuojun/article/details/82556127</a></p>\n</li>\n</ul>\n<ul>\n<li>在Windows下使用OpenAI Gym - HelloGym - 止于至玄 - CSDN博客<br><a href=\"https://blog.csdn.net/philthinker/article/details/79810249\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/philthinker/article/details/79810249</a></li>\n</ul>\n"},{"title":"git常用命令速查","date":"2019-08-20T08:01:02.000Z","_content":"\n* 521xueweihan/git-tips: Git的奇技淫巧  \nhttps://github.com/521xueweihan/git-tips\n\n* 程序员必备工具 – SadAngel的小屋  \nhttp://www.sadangel.cn/category/%e7%a8%8b%e5%ba%8f%e5%91%98%e5%bf%85%e5%a4%87%e5%b7%a5%e5%85%b7/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n已经有一个远程的Git版本库，只需要在本地克隆一份\n``` shell\ngit clone xxx.git \n```\n\n当本地创建了一个工作目录，可以进入这个目录，使用'git init'命令进行初始化\n``` shell\ngit init\n```\n\nGit以后就会对该目录下的文件进行版本控制，这时候如果需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时可以利用'git remote add'命令来增加一个远程服务器端\n``` shell\ngit remote add origin xxx.git\n```\n\n从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：'git pull origin master'就是将origin这个版本库的代码更新到本地的master主枝\n``` shell\ngit pull origin master\n```\n\n将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如'git add app/model/user.rb'就会增加app/model/user.rb文件到Git的索引中\n``` shell\ngit add .\n```\n\n\n提交当前工作空间的修改内容，例如'git commit -m story #3, add user model'，提交的时候必须用-m来输入一条提交信息\n``` shell\ngit commit -m d\n```\n\n将本地commit的代码更新到远程版本库中，例如'git push origin'就会将本地的代码更新到名为orgin的远程版本库中\n``` shell\ngit push origin master\n```\n\n\n## 利用.gitignore文件忽略指定文件\n\n* 新建.gitignore文件输入要忽略的文件\n* 清本地缓存，再提交\n``` bash\ngit rm -r --cached .\ngit add .\ngit commit -m '×××××'\n```\n\n``` bash\n.gitignore文件实例：\n   *.a       # 忽略所有 .a 结尾的文件  \n   !lib.a    # 但 lib.a 除外  \n   /TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO  \n   build/    # 忽略 build/ 目录下的所有文件  \n   doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt  \n```\n\n\n## 解决git冲突：please move or remove them before you can merge\n\n先将冲突的代码备份一下，删除本地修改，解决冲突后再还原，最后push代码。\n\n``` shell\ngit clean -d -fx \ngit pull origin master\n```\n\n\n\n\n","source":"_posts/git常用命令速查.md","raw":"---\ntitle: git常用命令速查\ndate: 2019-08-20 16:01:02\ntags:\n  - git\n---\n\n* 521xueweihan/git-tips: Git的奇技淫巧  \nhttps://github.com/521xueweihan/git-tips\n\n* 程序员必备工具 – SadAngel的小屋  \nhttp://www.sadangel.cn/category/%e7%a8%8b%e5%ba%8f%e5%91%98%e5%bf%85%e5%a4%87%e5%b7%a5%e5%85%b7/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n已经有一个远程的Git版本库，只需要在本地克隆一份\n``` shell\ngit clone xxx.git \n```\n\n当本地创建了一个工作目录，可以进入这个目录，使用'git init'命令进行初始化\n``` shell\ngit init\n```\n\nGit以后就会对该目录下的文件进行版本控制，这时候如果需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时可以利用'git remote add'命令来增加一个远程服务器端\n``` shell\ngit remote add origin xxx.git\n```\n\n从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：'git pull origin master'就是将origin这个版本库的代码更新到本地的master主枝\n``` shell\ngit pull origin master\n```\n\n将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如'git add app/model/user.rb'就会增加app/model/user.rb文件到Git的索引中\n``` shell\ngit add .\n```\n\n\n提交当前工作空间的修改内容，例如'git commit -m story #3, add user model'，提交的时候必须用-m来输入一条提交信息\n``` shell\ngit commit -m d\n```\n\n将本地commit的代码更新到远程版本库中，例如'git push origin'就会将本地的代码更新到名为orgin的远程版本库中\n``` shell\ngit push origin master\n```\n\n\n## 利用.gitignore文件忽略指定文件\n\n* 新建.gitignore文件输入要忽略的文件\n* 清本地缓存，再提交\n``` bash\ngit rm -r --cached .\ngit add .\ngit commit -m '×××××'\n```\n\n``` bash\n.gitignore文件实例：\n   *.a       # 忽略所有 .a 结尾的文件  \n   !lib.a    # 但 lib.a 除外  \n   /TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO  \n   build/    # 忽略 build/ 目录下的所有文件  \n   doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt  \n```\n\n\n## 解决git冲突：please move or remove them before you can merge\n\n先将冲突的代码备份一下，删除本地修改，解决冲突后再还原，最后push代码。\n\n``` shell\ngit clean -d -fx \ngit pull origin master\n```\n\n\n\n\n","slug":"git常用命令速查","published":1,"updated":"2020-02-26T16:39:50.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507c00184cvjkdhek6s5","content":"<ul>\n<li><p>521xueweihan/git-tips: Git的奇技淫巧<br><a href=\"https://github.com/521xueweihan/git-tips\" target=\"_blank\" rel=\"noopener\">https://github.com/521xueweihan/git-tips</a></p>\n</li>\n<li><p>程序员必备工具 – SadAngel的小屋<br><a href=\"http://www.sadangel.cn/category/%e7%a8%8b%e5%ba%8f%e5%91%98%e5%bf%85%e5%a4%87%e5%b7%a5%e5%85%b7/\" target=\"_blank\" rel=\"noopener\">http://www.sadangel.cn/category/%e7%a8%8b%e5%ba%8f%e5%91%98%e5%bf%85%e5%a4%87%e5%b7%a5%e5%85%b7/</a></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<p>已经有一个远程的Git版本库，只需要在本地克隆一份<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>当本地创建了一个工作目录，可以进入这个目录，使用’git init’命令进行初始化<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<p>Git以后就会对该目录下的文件进行版本控制，这时候如果需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时可以利用’git remote add’命令来增加一个远程服务器端<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：’git pull origin master’就是将origin这个版本库的代码更新到本地的master主枝<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure></p>\n<p>将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如’git add app/model/user.rb’就会增加app/model/user.rb文件到Git的索引中<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<p>提交当前工作空间的修改内容，例如’git commit -m story #3, add user model’，提交的时候必须用-m来输入一条提交信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m d</span><br></pre></td></tr></table></figure></p>\n<p>将本地commit的代码更新到远程版本库中，例如’git push origin’就会将本地的代码更新到名为orgin的远程版本库中<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"利用-gitignore文件忽略指定文件\"><a href=\"#利用-gitignore文件忽略指定文件\" class=\"headerlink\" title=\"利用.gitignore文件忽略指定文件\"></a>利用.gitignore文件忽略指定文件</h2><ul>\n<li>新建.gitignore文件输入要忽略的文件</li>\n<li>清本地缓存，再提交<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'×××××'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.gitignore文件实例：</span><br><span class=\"line\">   *.a       <span class=\"comment\"># 忽略所有 .a 结尾的文件  </span></span><br><span class=\"line\">   !lib.a    <span class=\"comment\"># 但 lib.a 除外  </span></span><br><span class=\"line\">   /TODO     <span class=\"comment\"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO  </span></span><br><span class=\"line\">   build/    <span class=\"comment\"># 忽略 build/ 目录下的所有文件  </span></span><br><span class=\"line\">   doc/*.txt <span class=\"comment\"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决git冲突：please-move-or-remove-them-before-you-can-merge\"><a href=\"#解决git冲突：please-move-or-remove-them-before-you-can-merge\" class=\"headerlink\" title=\"解决git冲突：please move or remove them before you can merge\"></a>解决git冲突：please move or remove them before you can merge</h2><p>先将冲突的代码备份一下，删除本地修改，解决冲突后再还原，最后push代码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -d -fx </span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n</the>","site":{"data":{}},"excerpt":"<ul>\n<li><p>521xueweihan/git-tips: Git的奇技淫巧<br><a href=\"https://github.com/521xueweihan/git-tips\" target=\"_blank\" rel=\"noopener\">https://github.com/521xueweihan/git-tips</a></p>\n</li>\n<li><p>程序员必备工具 – SadAngel的小屋<br><a href=\"http://www.sadangel.cn/category/%e7%a8%8b%e5%ba%8f%e5%91%98%e5%bf%85%e5%a4%87%e5%b7%a5%e5%85%b7/\" target=\"_blank\" rel=\"noopener\">http://www.sadangel.cn/category/%e7%a8%8b%e5%ba%8f%e5%91%98%e5%bf%85%e5%a4%87%e5%b7%a5%e5%85%b7/</a></p>\n</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n\n<p>已经有一个远程的Git版本库，只需要在本地克隆一份<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>当本地创建了一个工作目录，可以进入这个目录，使用’git init’命令进行初始化<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<p>Git以后就会对该目录下的文件进行版本控制，这时候如果需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时可以利用’git remote add’命令来增加一个远程服务器端<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin xxx.git</span><br></pre></td></tr></table></figure></p>\n<p>从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：’git pull origin master’就是将origin这个版本库的代码更新到本地的master主枝<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure></p>\n<p>将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如’git add app/model/user.rb’就会增加app/model/user.rb文件到Git的索引中<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<p>提交当前工作空间的修改内容，例如’git commit -m story #3, add user model’，提交的时候必须用-m来输入一条提交信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m d</span><br></pre></td></tr></table></figure></p>\n<p>将本地commit的代码更新到远程版本库中，例如’git push origin’就会将本地的代码更新到名为orgin的远程版本库中<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"利用-gitignore文件忽略指定文件\"><a href=\"#利用-gitignore文件忽略指定文件\" class=\"headerlink\" title=\"利用.gitignore文件忽略指定文件\"></a>利用.gitignore文件忽略指定文件</h2><ul>\n<li>新建.gitignore文件输入要忽略的文件</li>\n<li>清本地缓存，再提交<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'×××××'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.gitignore文件实例：</span><br><span class=\"line\">   *.a       <span class=\"comment\"># 忽略所有 .a 结尾的文件  </span></span><br><span class=\"line\">   !lib.a    <span class=\"comment\"># 但 lib.a 除外  </span></span><br><span class=\"line\">   /TODO     <span class=\"comment\"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO  </span></span><br><span class=\"line\">   build/    <span class=\"comment\"># 忽略 build/ 目录下的所有文件  </span></span><br><span class=\"line\">   doc/*.txt <span class=\"comment\"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决git冲突：please-move-or-remove-them-before-you-can-merge\"><a href=\"#解决git冲突：please-move-or-remove-them-before-you-can-merge\" class=\"headerlink\" title=\"解决git冲突：please move or remove them before you can merge\"></a>解决git冲突：please move or remove them before you can merge</h2><p>先将冲突的代码备份一下，删除本地修改，解决冲突后再还原，最后push代码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -d -fx </span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n</the>"},{"title":"golang学习笔记","date":"2019-06-25T11:15:09.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\nhello go!\n\nGo 语言起源于 2007 年，并在 2009 年正式对外发布。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Go语言特性\n* Go 是编译型语言，自带编译器无须单独安装，支持交叉编译\n* NextC\n* Goroutine\n``` go\ngo func() //通过go关键字启动一个协程来运行函数\n```\n* TCMalloc\n* 并发三色标记清除\n\n* 快速编译，高效执行，易于开发\n* 网络编程、系统编程、并发编程、分布式编程\n\n\n## 安装Golang\n下载\n* http://golang.org/dl/  \n\n安装文档\n* http://golang.org/doc/install。\n\nWindows - MSI installer\n\nOpen the MSI file and follow the prompts to install the Go tools. By default, the installer puts the Go distribution in c:\\Go.  \nThe installer should put the c:\\Go\\bin directory in your PATH environment variable. You may need to restart any open command prompts for the change to take effect.  \n\n\n\n\n\n\n\n\n\n","source":"_posts/golang学习笔记.md","raw":"---\ntitle: golang学习笔记\ndate: 2019-06-25 19:15:09\ntags:\n  -go\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\nhello go!\n\nGo 语言起源于 2007 年，并在 2009 年正式对外发布。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Go语言特性\n* Go 是编译型语言，自带编译器无须单独安装，支持交叉编译\n* NextC\n* Goroutine\n``` go\ngo func() //通过go关键字启动一个协程来运行函数\n```\n* TCMalloc\n* 并发三色标记清除\n\n* 快速编译，高效执行，易于开发\n* 网络编程、系统编程、并发编程、分布式编程\n\n\n## 安装Golang\n下载\n* http://golang.org/dl/  \n\n安装文档\n* http://golang.org/doc/install。\n\nWindows - MSI installer\n\nOpen the MSI file and follow the prompts to install the Go tools. By default, the installer puts the Go distribution in c:\\Go.  \nThe installer should put the c:\\Go\\bin directory in your PATH environment variable. You may need to restart any open command prompts for the change to take effect.  \n\n\n\n\n\n\n\n\n\n","slug":"golang学习笔记","published":1,"updated":"2020-01-05T19:13:24.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507d001b4cvj16hpz9rz","content":"<p><strong> golang学习笔记 </strong> <excerpt in index | 首页摘要><br>hello go!</excerpt></p>\n<p>Go 语言起源于 2007 年，并在 2009 年正式对外发布。</p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"Go语言特性\"><a href=\"#Go语言特性\" class=\"headerlink\" title=\"Go语言特性\"></a>Go语言特性</h2><ul>\n<li>Go 是编译型语言，自带编译器无须单独安装，支持交叉编译</li>\n<li>NextC</li>\n<li><p>Goroutine</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> //通过<span class=\"title\">go</span>关键字启动一个协程来运行函数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCMalloc</p>\n</li>\n<li><p>并发三色标记清除</p>\n</li>\n<li><p>快速编译，高效执行，易于开发</p>\n</li>\n<li>网络编程、系统编程、并发编程、分布式编程</li>\n</ul>\n<h2 id=\"安装Golang\"><a href=\"#安装Golang\" class=\"headerlink\" title=\"安装Golang\"></a>安装Golang</h2><p>下载</p>\n<ul>\n<li><a href=\"http://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">http://golang.org/dl/</a>  </li>\n</ul>\n<p>安装文档</p>\n<ul>\n<li><a href=\"http://golang.org/doc/install。\" target=\"_blank\" rel=\"noopener\">http://golang.org/doc/install。</a></li>\n</ul>\n<p>Windows - MSI installer</p>\n<p>Open the MSI file and follow the prompts to install the Go tools. By default, the installer puts the Go distribution in c:\\Go.<br>The installer should put the c:\\Go\\bin directory in your PATH environment variable. You may need to restart any open command prompts for the change to take effect.  </p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> golang学习笔记 </strong> <excerpt in index | 首页摘要><br>hello go!</excerpt></p>\n<p>Go 语言起源于 2007 年，并在 2009 年正式对外发布。</p>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"Go语言特性\"><a href=\"#Go语言特性\" class=\"headerlink\" title=\"Go语言特性\"></a>Go语言特性</h2><ul>\n<li>Go 是编译型语言，自带编译器无须单独安装，支持交叉编译</li>\n<li>NextC</li>\n<li><p>Goroutine</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> //通过<span class=\"title\">go</span>关键字启动一个协程来运行函数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCMalloc</p>\n</li>\n<li><p>并发三色标记清除</p>\n</li>\n<li><p>快速编译，高效执行，易于开发</p>\n</li>\n<li>网络编程、系统编程、并发编程、分布式编程</li>\n</ul>\n<h2 id=\"安装Golang\"><a href=\"#安装Golang\" class=\"headerlink\" title=\"安装Golang\"></a>安装Golang</h2><p>下载</p>\n<ul>\n<li><a href=\"http://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">http://golang.org/dl/</a>  </li>\n</ul>\n<p>安装文档</p>\n<ul>\n<li><a href=\"http://golang.org/doc/install。\" target=\"_blank\" rel=\"noopener\">http://golang.org/doc/install。</a></li>\n</ul>\n<p>Windows - MSI installer</p>\n<p>Open the MSI file and follow the prompts to install the Go tools. By default, the installer puts the Go distribution in c:\\Go.<br>The installer should put the c:\\Go\\bin directory in your PATH environment variable. You may need to restart any open command prompts for the change to take effect.  </p>\n</the>"},{"title":"Ubuntu 16.04 python3.5 编译caffe","date":"2019-08-09T14:59:00.000Z","_content":"<Excerpt in index | 首页摘要>\n\n## 参考博客\n* （ubuntu16.04）关于caffe+python3.5（非anaconda安装）编译的一些问题 - qwrqwrqwer的博客 - CSDN博客  \nhttps://blog.csdn.net/qwrqwrqwer/article/details/79224402\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 安装依赖库\n``` bash\nsudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler\nsudo apt-get install libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\nsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\nsudo apt-get install git build-essential\nsudo apt-get install python-pip python-numpy\nsudo pip install protobuf\nsudo pip install scikit-image\n```\n\n由于python版本是3.5，而scikit-image会默认安装3.1版本的matplotlib依赖包，此时会报错：\nBeginning with Matplotlib 3.1, Python 3.6 or above is required.\n故先指定3.0.1版本安装matplotlib，再安装scikit-image\n``` bash\nsudo pip install matplotlib==3.0.1\nsudo pip install scikit-image\n```\n\n## 下载源码\n``` bash\nmkdir caffe_ssd\ncd caffe-ssd\ngit clone https://github.com/weiliu89/caffe\nls\ncd caffe/\ngit checkout ssd\n```\n\n## 配置Makefile文件\n``` bash\ncp Makefile.config.example Makefile.config \nvim Makefile.config\n```\n\n``` cfg\n# Uncomment to use Python 3 (default is Python 2)\nPYTHON_LIBRARIES := boost_python3 python3.5m\nPYTHON_INCLUDE := /usr/include/python3.5m \\\n                /usr/lib/python3.5/dist-packages/numpy/core/include\n```\n\n* ### 问题1：ld cannot find lboost_python3\n``` bash\nroot@iZuf65tz0h4uslpujhakmfZ:~/Workplace/caffe_ssd/caffe# locate boost_python\n/usr/lib/x86_64-linux-gnu/libboost_python-py27.a\n/usr/lib/x86_64-linux-gnu/libboost_python-py27.so\n/usr/lib/x86_64-linux-gnu/libboost_python-py27.so.1.58.0\n/usr/lib/x86_64-linux-gnu/libboost_python-py35.a\n/usr/lib/x86_64-linux-gnu/libboost_python-py35.so\n/usr/lib/x86_64-linux-gnu/libboost_python-py35.so.1.58.0\n/usr/lib/x86_64-linux-gnu/libboost_python.a\n/usr/lib/x86_64-linux-gnu/libboost_python.so\n```\n修改Makefile.config文件\n``` cfg\nPYTHON_LIBRARIES := boost_python-py35 python3.5m\n```\n\n* ### 问题2：fatal error: hdf5.h: No such file\n``` bash\nroot@hello:~# locate hdf5.h\n/usr/include/hdf5/serial/hdf5.h\n```\n修改Makefile.config文件，增加相应路径/usr/include/hdf5/serial/\n``` cfg\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/\n```\n修改Makefile文件\n``` cfg\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n```\n\n## 编译\n``` bash\nsudo make all\nsudo make test\nsudo make runtest\nsudo make pycaffe\nsudo make pytest \n```\n\n## 修改环境变量\n最后将caffe的 python 文件夹的路径加入环境变量：\n``` bash\nsudo gedit ~/.bashrc\n```\n在文件末尾加入：\n``` cfg\nexport PYTHONPATH=/path/to/caffe/python\n```\n然后：\n``` bash\nsource ~/.bashrc\n```\n\n## 测试\n``` bash\ngit clone https://github.com/chuanqi305/MobileNet-SSD\npython demo\n\n```\n<img src=\"Ubuntu-16-04-python3-5-编译caffe\\001.jpg\">\n\n\n\n","source":"_posts/Ubuntu-16-04-python3-5-编译caffe.md","raw":"---\ntitle: Ubuntu 16.04 python3.5 编译caffe\ndate: 2019-08-09 22:59:00\ntags:\n---\n<Excerpt in index | 首页摘要>\n\n## 参考博客\n* （ubuntu16.04）关于caffe+python3.5（非anaconda安装）编译的一些问题 - qwrqwrqwer的博客 - CSDN博客  \nhttps://blog.csdn.net/qwrqwrqwer/article/details/79224402\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 安装依赖库\n``` bash\nsudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler\nsudo apt-get install libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\nsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\nsudo apt-get install git build-essential\nsudo apt-get install python-pip python-numpy\nsudo pip install protobuf\nsudo pip install scikit-image\n```\n\n由于python版本是3.5，而scikit-image会默认安装3.1版本的matplotlib依赖包，此时会报错：\nBeginning with Matplotlib 3.1, Python 3.6 or above is required.\n故先指定3.0.1版本安装matplotlib，再安装scikit-image\n``` bash\nsudo pip install matplotlib==3.0.1\nsudo pip install scikit-image\n```\n\n## 下载源码\n``` bash\nmkdir caffe_ssd\ncd caffe-ssd\ngit clone https://github.com/weiliu89/caffe\nls\ncd caffe/\ngit checkout ssd\n```\n\n## 配置Makefile文件\n``` bash\ncp Makefile.config.example Makefile.config \nvim Makefile.config\n```\n\n``` cfg\n# Uncomment to use Python 3 (default is Python 2)\nPYTHON_LIBRARIES := boost_python3 python3.5m\nPYTHON_INCLUDE := /usr/include/python3.5m \\\n                /usr/lib/python3.5/dist-packages/numpy/core/include\n```\n\n* ### 问题1：ld cannot find lboost_python3\n``` bash\nroot@iZuf65tz0h4uslpujhakmfZ:~/Workplace/caffe_ssd/caffe# locate boost_python\n/usr/lib/x86_64-linux-gnu/libboost_python-py27.a\n/usr/lib/x86_64-linux-gnu/libboost_python-py27.so\n/usr/lib/x86_64-linux-gnu/libboost_python-py27.so.1.58.0\n/usr/lib/x86_64-linux-gnu/libboost_python-py35.a\n/usr/lib/x86_64-linux-gnu/libboost_python-py35.so\n/usr/lib/x86_64-linux-gnu/libboost_python-py35.so.1.58.0\n/usr/lib/x86_64-linux-gnu/libboost_python.a\n/usr/lib/x86_64-linux-gnu/libboost_python.so\n```\n修改Makefile.config文件\n``` cfg\nPYTHON_LIBRARIES := boost_python-py35 python3.5m\n```\n\n* ### 问题2：fatal error: hdf5.h: No such file\n``` bash\nroot@hello:~# locate hdf5.h\n/usr/include/hdf5/serial/hdf5.h\n```\n修改Makefile.config文件，增加相应路径/usr/include/hdf5/serial/\n``` cfg\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/\n```\n修改Makefile文件\n``` cfg\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n```\n\n## 编译\n``` bash\nsudo make all\nsudo make test\nsudo make runtest\nsudo make pycaffe\nsudo make pytest \n```\n\n## 修改环境变量\n最后将caffe的 python 文件夹的路径加入环境变量：\n``` bash\nsudo gedit ~/.bashrc\n```\n在文件末尾加入：\n``` cfg\nexport PYTHONPATH=/path/to/caffe/python\n```\n然后：\n``` bash\nsource ~/.bashrc\n```\n\n## 测试\n``` bash\ngit clone https://github.com/chuanqi305/MobileNet-SSD\npython demo\n\n```\n<img src=\"Ubuntu-16-04-python3-5-编译caffe\\001.jpg\">\n\n\n\n","slug":"Ubuntu-16-04-python3-5-编译caffe","published":1,"updated":"2020-01-05T19:13:24.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507e001c4cvjvov304r0","content":"<excerpt in index | 首页摘要>\n\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>（ubuntu16.04）关于caffe+python3.5（非anaconda安装）编译的一些问题 - qwrqwrqwer的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qwrqwrqwer/article/details/79224402\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qwrqwrqwer/article/details/79224402</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"安装依赖库\"><a href=\"#安装依赖库\" class=\"headerlink\" title=\"安装依赖库\"></a>安装依赖库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class=\"line\">sudo apt-get install libboost-all-dev</span><br><span class=\"line\">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class=\"line\">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class=\"line\">sudo apt-get install git build-essential</span><br><span class=\"line\">sudo apt-get install python-pip python-numpy</span><br><span class=\"line\">sudo pip install protobuf</span><br><span class=\"line\">sudo pip install scikit-image</span><br></pre></td></tr></table></figure>\n<p>由于python版本是3.5，而scikit-image会默认安装3.1版本的matplotlib依赖包，此时会报错：<br>Beginning with Matplotlib 3.1, Python 3.6 or above is required.<br>故先指定3.0.1版本安装matplotlib，再安装scikit-image<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install matplotlib==3.0.1</span><br><span class=\"line\">sudo pip install scikit-image</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir caffe_ssd</span><br><span class=\"line\"><span class=\"built_in\">cd</span> caffe-ssd</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/weiliu89/caffe</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">cd</span> caffe/</span><br><span class=\"line\">git checkout ssd</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Makefile文件\"><a href=\"#配置Makefile文件\" class=\"headerlink\" title=\"配置Makefile文件\"></a>配置Makefile文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp Makefile.config.example Makefile.config </span><br><span class=\"line\">vim Makefile.config</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Uncomment to use Python 3 (default is Python 2)</span><br><span class=\"line\">PYTHON_LIBRARIES := boost_python3 python3.5m</span><br><span class=\"line\">PYTHON_INCLUDE := /usr/include/python3.5m \\</span><br><span class=\"line\">                /usr/lib/python3.5/dist-packages/numpy/core/include</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"问题1：ld-cannot-find-lboost-python3\"><a href=\"#问题1：ld-cannot-find-lboost-python3\" class=\"headerlink\" title=\"问题1：ld cannot find lboost_python3\"></a>问题1：ld cannot find lboost_python3</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@iZuf65tz0h4uslpujhakmfZ:~/Workplace/caffe_ssd/caffe<span class=\"comment\"># locate boost_python</span></span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py27.a</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py27.so</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py27.so.1.58.0</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py35.a</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py35.so</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py35.so.1.58.0</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python.a</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python.so</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改Makefile.config文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON_LIBRARIES := boost_python-py35 python3.5m</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h3 id=\"问题2：fatal-error-hdf5-h-No-such-file\"><a href=\"#问题2：fatal-error-hdf5-h-No-such-file\" class=\"headerlink\" title=\"问题2：fatal error: hdf5.h: No such file\"></a>问题2：fatal error: hdf5.h: No such file</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@hello:~<span class=\"comment\"># locate hdf5.h</span></span><br><span class=\"line\">/usr/include/hdf5/serial/hdf5.h</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改Makefile.config文件，增加相应路径/usr/include/hdf5/serial/<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/</span><br></pre></td></tr></table></figure></p>\n<p>修改Makefile文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make all</span><br><span class=\"line\">sudo make <span class=\"built_in\">test</span></span><br><span class=\"line\">sudo make runtest</span><br><span class=\"line\">sudo make pycaffe</span><br><span class=\"line\">sudo make pytest</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改环境变量\"><a href=\"#修改环境变量\" class=\"headerlink\" title=\"修改环境变量\"></a>修改环境变量</h2><p>最后将caffe的 python 文件夹的路径加入环境变量：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>在文件末尾加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PYTHONPATH=/path/to/caffe/python</span><br></pre></td></tr></table></figure></p>\n<p>然后：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/chuanqi305/MobileNet-SSD</span><br><span class=\"line\">python demo</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/09/Ubuntu-16-04-python3-5-编译caffe/001.jpg\"></p>\n</the></excerpt>","site":{"data":{}},"excerpt":"<excerpt in index | 首页摘要>\n\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>（ubuntu16.04）关于caffe+python3.5（非anaconda安装）编译的一些问题 - qwrqwrqwer的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qwrqwrqwer/article/details/79224402\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qwrqwrqwer/article/details/79224402</a></li>\n</ul></excerpt>","more":"<the rest of contents | 余下全文>\n\n\n<h2 id=\"安装依赖库\"><a href=\"#安装依赖库\" class=\"headerlink\" title=\"安装依赖库\"></a>安装依赖库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class=\"line\">sudo apt-get install libboost-all-dev</span><br><span class=\"line\">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class=\"line\">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class=\"line\">sudo apt-get install git build-essential</span><br><span class=\"line\">sudo apt-get install python-pip python-numpy</span><br><span class=\"line\">sudo pip install protobuf</span><br><span class=\"line\">sudo pip install scikit-image</span><br></pre></td></tr></table></figure>\n<p>由于python版本是3.5，而scikit-image会默认安装3.1版本的matplotlib依赖包，此时会报错：<br>Beginning with Matplotlib 3.1, Python 3.6 or above is required.<br>故先指定3.0.1版本安装matplotlib，再安装scikit-image<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install matplotlib==3.0.1</span><br><span class=\"line\">sudo pip install scikit-image</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir caffe_ssd</span><br><span class=\"line\"><span class=\"built_in\">cd</span> caffe-ssd</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/weiliu89/caffe</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">cd</span> caffe/</span><br><span class=\"line\">git checkout ssd</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Makefile文件\"><a href=\"#配置Makefile文件\" class=\"headerlink\" title=\"配置Makefile文件\"></a>配置Makefile文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp Makefile.config.example Makefile.config </span><br><span class=\"line\">vim Makefile.config</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Uncomment to use Python 3 (default is Python 2)</span><br><span class=\"line\">PYTHON_LIBRARIES := boost_python3 python3.5m</span><br><span class=\"line\">PYTHON_INCLUDE := /usr/include/python3.5m \\</span><br><span class=\"line\">                /usr/lib/python3.5/dist-packages/numpy/core/include</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"问题1：ld-cannot-find-lboost-python3\"><a href=\"#问题1：ld-cannot-find-lboost-python3\" class=\"headerlink\" title=\"问题1：ld cannot find lboost_python3\"></a>问题1：ld cannot find lboost_python3</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@iZuf65tz0h4uslpujhakmfZ:~/Workplace/caffe_ssd/caffe<span class=\"comment\"># locate boost_python</span></span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py27.a</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py27.so</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py27.so.1.58.0</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py35.a</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py35.so</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python-py35.so.1.58.0</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python.a</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libboost_python.so</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改Makefile.config文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHON_LIBRARIES := boost_python-py35 python3.5m</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h3 id=\"问题2：fatal-error-hdf5-h-No-such-file\"><a href=\"#问题2：fatal-error-hdf5-h-No-such-file\" class=\"headerlink\" title=\"问题2：fatal error: hdf5.h: No such file\"></a>问题2：fatal error: hdf5.h: No such file</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@hello:~<span class=\"comment\"># locate hdf5.h</span></span><br><span class=\"line\">/usr/include/hdf5/serial/hdf5.h</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改Makefile.config文件，增加相应路径/usr/include/hdf5/serial/<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/</span><br></pre></td></tr></table></figure></p>\n<p>修改Makefile文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make all</span><br><span class=\"line\">sudo make <span class=\"built_in\">test</span></span><br><span class=\"line\">sudo make runtest</span><br><span class=\"line\">sudo make pycaffe</span><br><span class=\"line\">sudo make pytest</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改环境变量\"><a href=\"#修改环境变量\" class=\"headerlink\" title=\"修改环境变量\"></a>修改环境变量</h2><p>最后将caffe的 python 文件夹的路径加入环境变量：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>在文件末尾加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PYTHONPATH=/path/to/caffe/python</span><br></pre></td></tr></table></figure></p>\n<p>然后：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/chuanqi305/MobileNet-SSD</span><br><span class=\"line\">python demo</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/09/Ubuntu-16-04-python3-5-编译caffe/001.jpg\"></p>\n</the>"},{"title":"leapmotion使用记录","date":"2019-09-04T15:26:36.000Z","_content":"\n最近发现leapmotion出了一款体感键盘，大体就是一个薄膜键盘加上一个leapmotion，七夕价在淘宝上才300元，要知道三代的支架都卖300多了，果断入手来学习一下。\n\n<img src=\"leapmotion使用记录\\000.png\">\n\n* Developer Support – Leap Motion Support  \nhttps://support.leapmotion.com/hc/en-us/categories/203324688-Developer-Support\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n# 配置 leapmotion 的 python3 开发环境\n\n官方提供的示例只支持Python2.7，如果在其他python版本的环境下运行，需要自行生成动态链接库文件(linux下为so文件，windows下为dll文件，python的动态模块是pyd文件，其实质为dll文件)，并进行替换。\n\n\n## 准备\n* SWIG  \nhttp://www.swig.org/exec.html  \nDownload SWIG  \nhttp://www.swig.org/download.html\n* Visual Studio\n* Leap_Motion_SDK_Windows_2.3.1  \nGet Started with Our SDK — Leap Motion Developer  \nhttps://developer.leapmotion.com/get-started\n\n## 使用 SWIG 生成 LeapPython.cpp 文件\n\n相关指令在Leap.i文件中\n``` bash\nX:\\Project>X:\\swigwin-4.0.1\\swig.exe -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i\n```\nwindows下出现“ Leap.i(991) : Error: Line indented less than expected (line 3 of %pythoncode block) as no line should be indented less than the indentation in line 1 ”的错误。  \n最终在linux下运行，生成LeapPython.h和LeapPython.cpp文件。\n\n``` bash\nsudo apt-get install swig\nswig -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i\n```\n### 参考\n* Nagasaki45/leap_python3: Build LeapMotion binaries for python3  \nhttps://github.com/Nagasaki45/leap_python3\n\n\n## 创建 C++工程，生成动态链接文件\n使用Visual Studio创建C++工程，将SDK中的Leap.h LeapMath.h和刚生成的LeapPython.h文件加入头文件，将LeapPython.cpp文件加入源文件。  \n\n解决方案配置 设置为 Release，解决方案平台 设置为 x64。  \n打开 调试->工程属性，进行如下设置\n\n配置属性->常规，目标文件名 设置为LeapPython，项目默认值->配置类型 设置为动态库(.dll);\n<img src=\"leapmotion使用记录\\001.png\">\n\n配置属性->C/C++->常规，添加python.h文件所在目录，例如\"X:\\Anaconda3\\envs\\py36\\include\";\n<img src=\"leapmotion使用记录\\002.png\">\n\n配置属性->链接器->输入，添加python36.lib Leap.lib文件的绝对路径，例如\"X:\\Anaconda3\\envs\\py36\\libs\\python36.lib\";\n<img src=\"leapmotion使用记录\\003.png\">\n\nF7创建，生成 LeapPython.dll 文件，重命名为 LeapPython.pyd 文件后进行替换。\n\n## 测试\n\n工程目录组织如下：  \n``` \nTest_project  \n│  readme.md  \n│    \n├─lib  \n│  └─x64  \n│      │  Leap.dll  \n│      │  Leap.py  \n│      └─ LeapPython.pyd  \n│                \n└─src  \n        Sample.py  \n```     \n\nSample.py 中导入leapmotion模块的语句\n\n``` python\nimport os, sys, inspect\nsrc_dir = os.path.dirname(inspect.getfile(inspect.currentframe()))\narch_dir = '../lib/x64' if sys.maxsize > 2**32 else '../lib/x86'\nsys.path.insert(0, os.path.abspath(os.path.join(src_dir, arch_dir)))\nimport Leap \n```\n\n运行Sample.py文件，即可以看到不断输出的手势信息。\n\n\n### 参考\n*  Setting Up a Project — Leap Motion Python SDK v3.2 Beta documentation  \nhttps://developer-archive.leapmotion.com/documentation/python/devguide/Project_Setup.html\n\n\n\n\n# Leapmotion 的 Web开发，使用 JavaScript\n\n* Javascript | Leap Motion Developers  \nhttps://developer-archive.leapmotion.com/javascript\n\n``` html\n<script src=\"js/leap-0.6.4.min.js\"></script>\n```\n\n运行官方JavaScript示例，结果如图\n\n<img src=\"leapmotion使用记录\\Leap Motion JavaScript Sample.png\">\n\n\n\n\n# Box2Djs\nBox2D是一个用于模拟2D刚体物体的C++引擎。它集成了大量的物理力学和运动学的计算，并将物理模拟过程封装到类对象中，将对物体的操作，以简单友好的接口提供给开发者。  \nBox2DJS是Box2D物理引擎的JavaScript端口。\n\n* Box2DJS - Physics Engine for JavaScript  \nhttp://box2d-js.sourceforge.net/\n* Box2DJS教程--目录总览 | Here. There.  \nhttps://godbasin.github.io/2017/02/17/box2d-tutorial-0-catalog/\n\n\n使用以下步骤将刚体添加到世界中:  \n* I 创建一个刚体定义，它将持有刚体信息，例如刚体的位置信息。  \n* II 创建一个形状，它将决定刚体的显示形状。\n* III. 创建一个夹具,将形状附加到刚体定义上。\n* IV. 创建刚体在世界中的实体,使用夹具。\n\n## 参考博客\n* HTML5之2D物理引擎 Box2D for javascript Games 系列 第一部分 - 池中物willian - 博客园  \nhttps://www.cnblogs.com/willian/p/5477922.html\n* HTML5之2D物理引擎 Box2D for javascript Games 系列 第二部分 - 池中物willian - 博客园  \nhttps://www.cnblogs.com/willian/p/5478539.html\n\n\n\n### 旋转关节(revolute-joint)  \n使用基类b2RevoluteJointDef创建一个旋转关节，设定铰接点，及旋转关节连接的是哪两个物体之后即可将其放入到世界里。\n``` javascript\n        var jointDef = new b2RevoluteJointDef();\n        //网上都是用anchorPoint获取anchor，web版没有这个函数，所以自己new一个，然后initialize（bodyA，bodyB，b2Vec2）定义传值就好了\n        var anchor = new b2Vec2();\n        anchor.Set(13,12);\n        jointDef.Initialize(carBody,whell,anchor);\n        world.CreateJoint(jointDef);\n```\n* box2d-jquery的b2RevoluteJointDef - OSCHINA  \nhttps://www.oschina.net/question/190778_119881\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/leapmotion使用记录.md","raw":"---\ntitle: leapmotion使用记录\ndate: 2019-09-04 23:26:36\ntags:\n  - leapmotion\\\n  - js\n  - box2d\n---\n\n最近发现leapmotion出了一款体感键盘，大体就是一个薄膜键盘加上一个leapmotion，七夕价在淘宝上才300元，要知道三代的支架都卖300多了，果断入手来学习一下。\n\n<img src=\"leapmotion使用记录\\000.png\">\n\n* Developer Support – Leap Motion Support  \nhttps://support.leapmotion.com/hc/en-us/categories/203324688-Developer-Support\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n# 配置 leapmotion 的 python3 开发环境\n\n官方提供的示例只支持Python2.7，如果在其他python版本的环境下运行，需要自行生成动态链接库文件(linux下为so文件，windows下为dll文件，python的动态模块是pyd文件，其实质为dll文件)，并进行替换。\n\n\n## 准备\n* SWIG  \nhttp://www.swig.org/exec.html  \nDownload SWIG  \nhttp://www.swig.org/download.html\n* Visual Studio\n* Leap_Motion_SDK_Windows_2.3.1  \nGet Started with Our SDK — Leap Motion Developer  \nhttps://developer.leapmotion.com/get-started\n\n## 使用 SWIG 生成 LeapPython.cpp 文件\n\n相关指令在Leap.i文件中\n``` bash\nX:\\Project>X:\\swigwin-4.0.1\\swig.exe -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i\n```\nwindows下出现“ Leap.i(991) : Error: Line indented less than expected (line 3 of %pythoncode block) as no line should be indented less than the indentation in line 1 ”的错误。  \n最终在linux下运行，生成LeapPython.h和LeapPython.cpp文件。\n\n``` bash\nsudo apt-get install swig\nswig -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i\n```\n### 参考\n* Nagasaki45/leap_python3: Build LeapMotion binaries for python3  \nhttps://github.com/Nagasaki45/leap_python3\n\n\n## 创建 C++工程，生成动态链接文件\n使用Visual Studio创建C++工程，将SDK中的Leap.h LeapMath.h和刚生成的LeapPython.h文件加入头文件，将LeapPython.cpp文件加入源文件。  \n\n解决方案配置 设置为 Release，解决方案平台 设置为 x64。  \n打开 调试->工程属性，进行如下设置\n\n配置属性->常规，目标文件名 设置为LeapPython，项目默认值->配置类型 设置为动态库(.dll);\n<img src=\"leapmotion使用记录\\001.png\">\n\n配置属性->C/C++->常规，添加python.h文件所在目录，例如\"X:\\Anaconda3\\envs\\py36\\include\";\n<img src=\"leapmotion使用记录\\002.png\">\n\n配置属性->链接器->输入，添加python36.lib Leap.lib文件的绝对路径，例如\"X:\\Anaconda3\\envs\\py36\\libs\\python36.lib\";\n<img src=\"leapmotion使用记录\\003.png\">\n\nF7创建，生成 LeapPython.dll 文件，重命名为 LeapPython.pyd 文件后进行替换。\n\n## 测试\n\n工程目录组织如下：  \n``` \nTest_project  \n│  readme.md  \n│    \n├─lib  \n│  └─x64  \n│      │  Leap.dll  \n│      │  Leap.py  \n│      └─ LeapPython.pyd  \n│                \n└─src  \n        Sample.py  \n```     \n\nSample.py 中导入leapmotion模块的语句\n\n``` python\nimport os, sys, inspect\nsrc_dir = os.path.dirname(inspect.getfile(inspect.currentframe()))\narch_dir = '../lib/x64' if sys.maxsize > 2**32 else '../lib/x86'\nsys.path.insert(0, os.path.abspath(os.path.join(src_dir, arch_dir)))\nimport Leap \n```\n\n运行Sample.py文件，即可以看到不断输出的手势信息。\n\n\n### 参考\n*  Setting Up a Project — Leap Motion Python SDK v3.2 Beta documentation  \nhttps://developer-archive.leapmotion.com/documentation/python/devguide/Project_Setup.html\n\n\n\n\n# Leapmotion 的 Web开发，使用 JavaScript\n\n* Javascript | Leap Motion Developers  \nhttps://developer-archive.leapmotion.com/javascript\n\n``` html\n<script src=\"js/leap-0.6.4.min.js\"></script>\n```\n\n运行官方JavaScript示例，结果如图\n\n<img src=\"leapmotion使用记录\\Leap Motion JavaScript Sample.png\">\n\n\n\n\n# Box2Djs\nBox2D是一个用于模拟2D刚体物体的C++引擎。它集成了大量的物理力学和运动学的计算，并将物理模拟过程封装到类对象中，将对物体的操作，以简单友好的接口提供给开发者。  \nBox2DJS是Box2D物理引擎的JavaScript端口。\n\n* Box2DJS - Physics Engine for JavaScript  \nhttp://box2d-js.sourceforge.net/\n* Box2DJS教程--目录总览 | Here. There.  \nhttps://godbasin.github.io/2017/02/17/box2d-tutorial-0-catalog/\n\n\n使用以下步骤将刚体添加到世界中:  \n* I 创建一个刚体定义，它将持有刚体信息，例如刚体的位置信息。  \n* II 创建一个形状，它将决定刚体的显示形状。\n* III. 创建一个夹具,将形状附加到刚体定义上。\n* IV. 创建刚体在世界中的实体,使用夹具。\n\n## 参考博客\n* HTML5之2D物理引擎 Box2D for javascript Games 系列 第一部分 - 池中物willian - 博客园  \nhttps://www.cnblogs.com/willian/p/5477922.html\n* HTML5之2D物理引擎 Box2D for javascript Games 系列 第二部分 - 池中物willian - 博客园  \nhttps://www.cnblogs.com/willian/p/5478539.html\n\n\n\n### 旋转关节(revolute-joint)  \n使用基类b2RevoluteJointDef创建一个旋转关节，设定铰接点，及旋转关节连接的是哪两个物体之后即可将其放入到世界里。\n``` javascript\n        var jointDef = new b2RevoluteJointDef();\n        //网上都是用anchorPoint获取anchor，web版没有这个函数，所以自己new一个，然后initialize（bodyA，bodyB，b2Vec2）定义传值就好了\n        var anchor = new b2Vec2();\n        anchor.Set(13,12);\n        jointDef.Initialize(carBody,whell,anchor);\n        world.CreateJoint(jointDef);\n```\n* box2d-jquery的b2RevoluteJointDef - OSCHINA  \nhttps://www.oschina.net/question/190778_119881\n\n\n\n\n\n\n\n\n\n\n","slug":"leapmotion使用记录","published":1,"updated":"2020-01-05T19:13:24.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507f001f4cvj7sjzsbzm","content":"<p>最近发现leapmotion出了一款体感键盘，大体就是一个薄膜键盘加上一个leapmotion，七夕价在淘宝上才300元，要知道三代的支架都卖300多了，果断入手来学习一下。</p>\n<p><img src=\"/2019/09/04/leapmotion使用记录/000.png\"></p>\n<ul>\n<li>Developer Support – Leap Motion Support<br><a href=\"https://support.leapmotion.com/hc/en-us/categories/203324688-Developer-Support\" target=\"_blank\" rel=\"noopener\">https://support.leapmotion.com/hc/en-us/categories/203324688-Developer-Support</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h1 id=\"配置-leapmotion-的-python3-开发环境\"><a href=\"#配置-leapmotion-的-python3-开发环境\" class=\"headerlink\" title=\"配置 leapmotion 的 python3 开发环境\"></a>配置 leapmotion 的 python3 开发环境</h1><p>官方提供的示例只支持Python2.7，如果在其他python版本的环境下运行，需要自行生成动态链接库文件(linux下为so文件，windows下为dll文件，python的动态模块是pyd文件，其实质为dll文件)，并进行替换。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>SWIG<br><a href=\"http://www.swig.org/exec.html\" target=\"_blank\" rel=\"noopener\">http://www.swig.org/exec.html</a><br>Download SWIG<br><a href=\"http://www.swig.org/download.html\" target=\"_blank\" rel=\"noopener\">http://www.swig.org/download.html</a></li>\n<li>Visual Studio</li>\n<li>Leap_Motion_SDK_Windows_2.3.1<br>Get Started with Our SDK — Leap Motion Developer<br><a href=\"https://developer.leapmotion.com/get-started\" target=\"_blank\" rel=\"noopener\">https://developer.leapmotion.com/get-started</a></li>\n</ul>\n<h2 id=\"使用-SWIG-生成-LeapPython-cpp-文件\"><a href=\"#使用-SWIG-生成-LeapPython-cpp-文件\" class=\"headerlink\" title=\"使用 SWIG 生成 LeapPython.cpp 文件\"></a>使用 SWIG 生成 LeapPython.cpp 文件</h2><p>相关指令在Leap.i文件中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X:\\Project&gt;X:\\swigwin-4.0.1\\swig.exe -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i</span><br></pre></td></tr></table></figure></p>\n<p>windows下出现“ Leap.i(991) : Error: Line indented less than expected (line 3 of %pythoncode block) as no line should be indented less than the indentation in line 1 ”的错误。<br>最终在linux下运行，生成LeapPython.h和LeapPython.cpp文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install swig</span><br><span class=\"line\">swig -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>Nagasaki45/leap_python3: Build LeapMotion binaries for python3<br><a href=\"https://github.com/Nagasaki45/leap_python3\" target=\"_blank\" rel=\"noopener\">https://github.com/Nagasaki45/leap_python3</a></li>\n</ul>\n<h2 id=\"创建-C-工程，生成动态链接文件\"><a href=\"#创建-C-工程，生成动态链接文件\" class=\"headerlink\" title=\"创建 C++工程，生成动态链接文件\"></a>创建 C++工程，生成动态链接文件</h2><p>使用Visual Studio创建C++工程，将SDK中的Leap.h LeapMath.h和刚生成的LeapPython.h文件加入头文件，将LeapPython.cpp文件加入源文件。  </p>\n<p>解决方案配置 设置为 Release，解决方案平台 设置为 x64。<br>打开 调试-&gt;工程属性，进行如下设置</p>\n<p>配置属性-&gt;常规，目标文件名 设置为LeapPython，项目默认值-&gt;配置类型 设置为动态库(.dll);<br><img src=\"/2019/09/04/leapmotion使用记录/001.png\"></p>\n<p>配置属性-&gt;C/C++-&gt;常规，添加python.h文件所在目录，例如”X:\\Anaconda3\\envs\\py36\\include”;<br><img src=\"/2019/09/04/leapmotion使用记录/002.png\"></p>\n<p>配置属性-&gt;链接器-&gt;输入，添加python36.lib Leap.lib文件的绝对路径，例如”X:\\Anaconda3\\envs\\py36\\libs\\python36.lib”;<br><img src=\"/2019/09/04/leapmotion使用记录/003.png\"></p>\n<p>F7创建，生成 LeapPython.dll 文件，重命名为 LeapPython.pyd 文件后进行替换。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>工程目录组织如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test_project  </span><br><span class=\"line\">│  readme.md  </span><br><span class=\"line\">│    </span><br><span class=\"line\">├─lib  </span><br><span class=\"line\">│  └─x64  </span><br><span class=\"line\">│      │  Leap.dll  </span><br><span class=\"line\">│      │  Leap.py  </span><br><span class=\"line\">│      └─ LeapPython.pyd  </span><br><span class=\"line\">│                </span><br><span class=\"line\">└─src  </span><br><span class=\"line\">        Sample.py  </span><br><span class=\"line\">```     </span><br><span class=\"line\"></span><br><span class=\"line\">Sample.py 中导入leapmotion模块的语句</span><br><span class=\"line\"></span><br><span class=\"line\">``` python</span><br><span class=\"line\">import os, sys, inspect</span><br><span class=\"line\">src_dir = os.path.dirname(inspect.getfile(inspect.currentframe()))</span><br><span class=\"line\">arch_dir = &apos;../lib/x64&apos; if sys.maxsize &gt; 2**32 else &apos;../lib/x86&apos;</span><br><span class=\"line\">sys.path.insert(0, os.path.abspath(os.path.join(src_dir, arch_dir)))</span><br><span class=\"line\">import Leap</span><br></pre></td></tr></table></figure></p>\n<p>运行Sample.py文件，即可以看到不断输出的手势信息。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>Setting Up a Project — Leap Motion Python SDK v3.2 Beta documentation<br><a href=\"https://developer-archive.leapmotion.com/documentation/python/devguide/Project_Setup.html\" target=\"_blank\" rel=\"noopener\">https://developer-archive.leapmotion.com/documentation/python/devguide/Project_Setup.html</a></li>\n</ul>\n<h1 id=\"Leapmotion-的-Web开发，使用-JavaScript\"><a href=\"#Leapmotion-的-Web开发，使用-JavaScript\" class=\"headerlink\" title=\"Leapmotion 的 Web开发，使用 JavaScript\"></a>Leapmotion 的 Web开发，使用 JavaScript</h1><ul>\n<li>Javascript | Leap Motion Developers<br><a href=\"https://developer-archive.leapmotion.com/javascript\" target=\"_blank\" rel=\"noopener\">https://developer-archive.leapmotion.com/javascript</a></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/leap-0.6.4.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行官方JavaScript示例，结果如图</p>\n<p><img src=\"/2019/09/04/leapmotion使用记录/Leap Motion JavaScript Sample.png\"></p>\n<h1 id=\"Box2Djs\"><a href=\"#Box2Djs\" class=\"headerlink\" title=\"Box2Djs\"></a>Box2Djs</h1><p>Box2D是一个用于模拟2D刚体物体的C++引擎。它集成了大量的物理力学和运动学的计算，并将物理模拟过程封装到类对象中，将对物体的操作，以简单友好的接口提供给开发者。<br>Box2DJS是Box2D物理引擎的JavaScript端口。</p>\n<ul>\n<li>Box2DJS - Physics Engine for JavaScript<br><a href=\"http://box2d-js.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">http://box2d-js.sourceforge.net/</a></li>\n<li>Box2DJS教程—目录总览 | Here. There.<br><a href=\"https://godbasin.github.io/2017/02/17/box2d-tutorial-0-catalog/\" target=\"_blank\" rel=\"noopener\">https://godbasin.github.io/2017/02/17/box2d-tutorial-0-catalog/</a></li>\n</ul>\n<p>使用以下步骤将刚体添加到世界中:  </p>\n<ul>\n<li>I 创建一个刚体定义，它将持有刚体信息，例如刚体的位置信息。  </li>\n<li>II 创建一个形状，它将决定刚体的显示形状。</li>\n<li>III. 创建一个夹具,将形状附加到刚体定义上。</li>\n<li>IV. 创建刚体在世界中的实体,使用夹具。</li>\n</ul>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>HTML5之2D物理引擎 Box2D for javascript Games 系列 第一部分 - 池中物willian - 博客园<br><a href=\"https://www.cnblogs.com/willian/p/5477922.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/willian/p/5477922.html</a></li>\n<li>HTML5之2D物理引擎 Box2D for javascript Games 系列 第二部分 - 池中物willian - 博客园<br><a href=\"https://www.cnblogs.com/willian/p/5478539.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/willian/p/5478539.html</a></li>\n</ul>\n<h3 id=\"旋转关节-revolute-joint\"><a href=\"#旋转关节-revolute-joint\" class=\"headerlink\" title=\"旋转关节(revolute-joint)\"></a>旋转关节(revolute-joint)</h3><p>使用基类b2RevoluteJointDef创建一个旋转关节，设定铰接点，及旋转关节连接的是哪两个物体之后即可将其放入到世界里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jointDef = <span class=\"keyword\">new</span> b2RevoluteJointDef();</span><br><span class=\"line\"><span class=\"comment\">//网上都是用anchorPoint获取anchor，web版没有这个函数，所以自己new一个，然后initialize（bodyA，bodyB，b2Vec2）定义传值就好了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anchor = <span class=\"keyword\">new</span> b2Vec2();</span><br><span class=\"line\">anchor.Set(<span class=\"number\">13</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\">jointDef.Initialize(carBody,whell,anchor);</span><br><span class=\"line\">world.CreateJoint(jointDef);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>box2d-jquery的b2RevoluteJointDef - OSCHINA<br><a href=\"https://www.oschina.net/question/190778_119881\" target=\"_blank\" rel=\"noopener\">https://www.oschina.net/question/190778_119881</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p>最近发现leapmotion出了一款体感键盘，大体就是一个薄膜键盘加上一个leapmotion，七夕价在淘宝上才300元，要知道三代的支架都卖300多了，果断入手来学习一下。</p>\n<p><img src=\"/2019/09/04/leapmotion使用记录/000.png\"></p>\n<ul>\n<li>Developer Support – Leap Motion Support<br><a href=\"https://support.leapmotion.com/hc/en-us/categories/203324688-Developer-Support\" target=\"_blank\" rel=\"noopener\">https://support.leapmotion.com/hc/en-us/categories/203324688-Developer-Support</a></li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n\n<h1 id=\"配置-leapmotion-的-python3-开发环境\"><a href=\"#配置-leapmotion-的-python3-开发环境\" class=\"headerlink\" title=\"配置 leapmotion 的 python3 开发环境\"></a>配置 leapmotion 的 python3 开发环境</h1><p>官方提供的示例只支持Python2.7，如果在其他python版本的环境下运行，需要自行生成动态链接库文件(linux下为so文件，windows下为dll文件，python的动态模块是pyd文件，其实质为dll文件)，并进行替换。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>SWIG<br><a href=\"http://www.swig.org/exec.html\" target=\"_blank\" rel=\"noopener\">http://www.swig.org/exec.html</a><br>Download SWIG<br><a href=\"http://www.swig.org/download.html\" target=\"_blank\" rel=\"noopener\">http://www.swig.org/download.html</a></li>\n<li>Visual Studio</li>\n<li>Leap_Motion_SDK_Windows_2.3.1<br>Get Started with Our SDK — Leap Motion Developer<br><a href=\"https://developer.leapmotion.com/get-started\" target=\"_blank\" rel=\"noopener\">https://developer.leapmotion.com/get-started</a></li>\n</ul>\n<h2 id=\"使用-SWIG-生成-LeapPython-cpp-文件\"><a href=\"#使用-SWIG-生成-LeapPython-cpp-文件\" class=\"headerlink\" title=\"使用 SWIG 生成 LeapPython.cpp 文件\"></a>使用 SWIG 生成 LeapPython.cpp 文件</h2><p>相关指令在Leap.i文件中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X:\\Project&gt;X:\\swigwin-4.0.1\\swig.exe -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i</span><br></pre></td></tr></table></figure></p>\n<p>windows下出现“ Leap.i(991) : Error: Line indented less than expected (line 3 of %pythoncode block) as no line should be indented less than the indentation in line 1 ”的错误。<br>最终在linux下运行，生成LeapPython.h和LeapPython.cpp文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install swig</span><br><span class=\"line\">swig -c++ -python -o LeapPython.cpp -interface LeapPython Leap.i</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>Nagasaki45/leap_python3: Build LeapMotion binaries for python3<br><a href=\"https://github.com/Nagasaki45/leap_python3\" target=\"_blank\" rel=\"noopener\">https://github.com/Nagasaki45/leap_python3</a></li>\n</ul>\n<h2 id=\"创建-C-工程，生成动态链接文件\"><a href=\"#创建-C-工程，生成动态链接文件\" class=\"headerlink\" title=\"创建 C++工程，生成动态链接文件\"></a>创建 C++工程，生成动态链接文件</h2><p>使用Visual Studio创建C++工程，将SDK中的Leap.h LeapMath.h和刚生成的LeapPython.h文件加入头文件，将LeapPython.cpp文件加入源文件。  </p>\n<p>解决方案配置 设置为 Release，解决方案平台 设置为 x64。<br>打开 调试-&gt;工程属性，进行如下设置</p>\n<p>配置属性-&gt;常规，目标文件名 设置为LeapPython，项目默认值-&gt;配置类型 设置为动态库(.dll);<br><img src=\"/2019/09/04/leapmotion使用记录/001.png\"></p>\n<p>配置属性-&gt;C/C++-&gt;常规，添加python.h文件所在目录，例如”X:\\Anaconda3\\envs\\py36\\include”;<br><img src=\"/2019/09/04/leapmotion使用记录/002.png\"></p>\n<p>配置属性-&gt;链接器-&gt;输入，添加python36.lib Leap.lib文件的绝对路径，例如”X:\\Anaconda3\\envs\\py36\\libs\\python36.lib”;<br><img src=\"/2019/09/04/leapmotion使用记录/003.png\"></p>\n<p>F7创建，生成 LeapPython.dll 文件，重命名为 LeapPython.pyd 文件后进行替换。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>工程目录组织如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test_project  </span><br><span class=\"line\">│  readme.md  </span><br><span class=\"line\">│    </span><br><span class=\"line\">├─lib  </span><br><span class=\"line\">│  └─x64  </span><br><span class=\"line\">│      │  Leap.dll  </span><br><span class=\"line\">│      │  Leap.py  </span><br><span class=\"line\">│      └─ LeapPython.pyd  </span><br><span class=\"line\">│                </span><br><span class=\"line\">└─src  </span><br><span class=\"line\">        Sample.py  </span><br><span class=\"line\">```     </span><br><span class=\"line\"></span><br><span class=\"line\">Sample.py 中导入leapmotion模块的语句</span><br><span class=\"line\"></span><br><span class=\"line\">``` python</span><br><span class=\"line\">import os, sys, inspect</span><br><span class=\"line\">src_dir = os.path.dirname(inspect.getfile(inspect.currentframe()))</span><br><span class=\"line\">arch_dir = &apos;../lib/x64&apos; if sys.maxsize &gt; 2**32 else &apos;../lib/x86&apos;</span><br><span class=\"line\">sys.path.insert(0, os.path.abspath(os.path.join(src_dir, arch_dir)))</span><br><span class=\"line\">import Leap</span><br></pre></td></tr></table></figure></p>\n<p>运行Sample.py文件，即可以看到不断输出的手势信息。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>Setting Up a Project — Leap Motion Python SDK v3.2 Beta documentation<br><a href=\"https://developer-archive.leapmotion.com/documentation/python/devguide/Project_Setup.html\" target=\"_blank\" rel=\"noopener\">https://developer-archive.leapmotion.com/documentation/python/devguide/Project_Setup.html</a></li>\n</ul>\n<h1 id=\"Leapmotion-的-Web开发，使用-JavaScript\"><a href=\"#Leapmotion-的-Web开发，使用-JavaScript\" class=\"headerlink\" title=\"Leapmotion 的 Web开发，使用 JavaScript\"></a>Leapmotion 的 Web开发，使用 JavaScript</h1><ul>\n<li>Javascript | Leap Motion Developers<br><a href=\"https://developer-archive.leapmotion.com/javascript\" target=\"_blank\" rel=\"noopener\">https://developer-archive.leapmotion.com/javascript</a></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/leap-0.6.4.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行官方JavaScript示例，结果如图</p>\n<p><img src=\"/2019/09/04/leapmotion使用记录/Leap Motion JavaScript Sample.png\"></p>\n<h1 id=\"Box2Djs\"><a href=\"#Box2Djs\" class=\"headerlink\" title=\"Box2Djs\"></a>Box2Djs</h1><p>Box2D是一个用于模拟2D刚体物体的C++引擎。它集成了大量的物理力学和运动学的计算，并将物理模拟过程封装到类对象中，将对物体的操作，以简单友好的接口提供给开发者。<br>Box2DJS是Box2D物理引擎的JavaScript端口。</p>\n<ul>\n<li>Box2DJS - Physics Engine for JavaScript<br><a href=\"http://box2d-js.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">http://box2d-js.sourceforge.net/</a></li>\n<li>Box2DJS教程—目录总览 | Here. There.<br><a href=\"https://godbasin.github.io/2017/02/17/box2d-tutorial-0-catalog/\" target=\"_blank\" rel=\"noopener\">https://godbasin.github.io/2017/02/17/box2d-tutorial-0-catalog/</a></li>\n</ul>\n<p>使用以下步骤将刚体添加到世界中:  </p>\n<ul>\n<li>I 创建一个刚体定义，它将持有刚体信息，例如刚体的位置信息。  </li>\n<li>II 创建一个形状，它将决定刚体的显示形状。</li>\n<li>III. 创建一个夹具,将形状附加到刚体定义上。</li>\n<li>IV. 创建刚体在世界中的实体,使用夹具。</li>\n</ul>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>HTML5之2D物理引擎 Box2D for javascript Games 系列 第一部分 - 池中物willian - 博客园<br><a href=\"https://www.cnblogs.com/willian/p/5477922.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/willian/p/5477922.html</a></li>\n<li>HTML5之2D物理引擎 Box2D for javascript Games 系列 第二部分 - 池中物willian - 博客园<br><a href=\"https://www.cnblogs.com/willian/p/5478539.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/willian/p/5478539.html</a></li>\n</ul>\n<h3 id=\"旋转关节-revolute-joint\"><a href=\"#旋转关节-revolute-joint\" class=\"headerlink\" title=\"旋转关节(revolute-joint)\"></a>旋转关节(revolute-joint)</h3><p>使用基类b2RevoluteJointDef创建一个旋转关节，设定铰接点，及旋转关节连接的是哪两个物体之后即可将其放入到世界里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jointDef = <span class=\"keyword\">new</span> b2RevoluteJointDef();</span><br><span class=\"line\"><span class=\"comment\">//网上都是用anchorPoint获取anchor，web版没有这个函数，所以自己new一个，然后initialize（bodyA，bodyB，b2Vec2）定义传值就好了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anchor = <span class=\"keyword\">new</span> b2Vec2();</span><br><span class=\"line\">anchor.Set(<span class=\"number\">13</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\">jointDef.Initialize(carBody,whell,anchor);</span><br><span class=\"line\">world.CreateJoint(jointDef);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>box2d-jquery的b2RevoluteJointDef - OSCHINA<br><a href=\"https://www.oschina.net/question/190778_119881\" target=\"_blank\" rel=\"noopener\">https://www.oschina.net/question/190778_119881</a></li>\n</ul>\n</the>"},{"title":"loomo多服务机器人开发","date":"2019-05-26T11:43:22.000Z","_content":"\n## 设计思路\n\n<div align=center>\n<img alt=\"design\" src = \"loomo多服务机器人开发\\设计思路-201905.png\" width=1000 height=800>\n</div>\n\n\n\n## 一些资料\n\n* 机器人 · 3D打印的假肢，像真手一样听你指挥！  \nhttps://mp.weixin.qq.com/s/qumdZIXXGmF-blSeHLu1tw\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/loomo多服务机器人开发.md","raw":"---\ntitle: loomo多服务机器人开发\ndate: 2019-05-26 19:43:22\ntags:\n  - loomo\n  - Android\n  - 机械手\n---\n\n## 设计思路\n\n<div align=center>\n<img alt=\"design\" src = \"loomo多服务机器人开发\\设计思路-201905.png\" width=1000 height=800>\n</div>\n\n\n\n## 一些资料\n\n* 机器人 · 3D打印的假肢，像真手一样听你指挥！  \nhttps://mp.weixin.qq.com/s/qumdZIXXGmF-blSeHLu1tw\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"loomo多服务机器人开发","published":1,"updated":"2020-01-05T19:13:24.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507g001g4cvjh78hr0zi","content":"<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h2><div align=\"center\">\n<img alt=\"design\" src=\"/2019/05/26/loomo多服务机器人开发/设计思路-201905.png\" width=\"1000\" height=\"800\">\n</div>\n\n\n\n<h2 id=\"一些资料\"><a href=\"#一些资料\" class=\"headerlink\" title=\"一些资料\"></a>一些资料</h2><ul>\n<li>机器人 · 3D打印的假肢，像真手一样听你指挥！<br><a href=\"https://mp.weixin.qq.com/s/qumdZIXXGmF-blSeHLu1tw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/qumdZIXXGmF-blSeHLu1tw</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h2><div align=\"center\">\n<img alt=\"design\" src=\"/2019/05/26/loomo多服务机器人开发/设计思路-201905.png\" width=\"1000\" height=\"800\">\n</div>\n\n\n\n<h2 id=\"一些资料\"><a href=\"#一些资料\" class=\"headerlink\" title=\"一些资料\"></a>一些资料</h2><ul>\n<li>机器人 · 3D打印的假肢，像真手一样听你指挥！<br><a href=\"https://mp.weixin.qq.com/s/qumdZIXXGmF-blSeHLu1tw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/qumdZIXXGmF-blSeHLu1tw</a></li>\n</ul>\n"},{"title":"selenium自动化测试","date":"2019-11-26T14:13:42.000Z","_content":"\n# 什么是Selemium？\n\nSelenium 是一个用于Web应用程序测试的工具。  \nSelenium测试直接运行在浏览器中，就像真正的用户在操作一样。  \n\n* Selenium 官网：http://seleniumhq.org/\n* Selenium Github 主页：https://github.com/SeleniumHQ/selenium\n\n* 文档：https://python-selenium-zh.readthedocs.io/zh_CN/latest/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 安装\n``` cmd\npip install selenium\n```\n\n## chrome driver的安装\n\n查看chrome版本\n``` title\nchrome://version/\n```\n<img src = \"selenium自动化测试\\001.png\" >\n\n按照chrome版本下载对应的driver  \n\n* http://chromedriver.storage.googleapis.com/index.html\n\n将chromedriver.exe复制到Chrome浏览器安装目录  \n\n将浏览器环境变量添加到path：打开开始菜单->我的电脑（或计算机）->系统属性->高级系统设置->环境变量，编辑用户变量里的path，\n\n\n# 测试\n\n声明并调用浏览器\n``` python\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\n```\n\n访问网页\n``` python\nfrom selenium import webdriver#导入库\nbrowser = webdriver.Chrome()#声明浏览器\nurl = 'https:www.baidu.com'\nbrowser.get(url)#打开浏览器预设网址\nprint(browser.page_source)#打印网页源代码\nbrowser.close()#关闭浏览器\n```\n\n## 实例：讲课竞赛的刷评论者\n\n\n``` python\n# -*- coding: utf-8 -*-\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.chrome.options import Options\nimport time\n\nnicks = [\"赵\", \"钱\"]\ncoms = [\"孙老师加油！\", \"李老师冲鸭！！！\"]\n\noption = Options()\noption.add_experimental_option('w3c', False)\ndriver = webdriver.Chrome(options=option)\n\nfor i in range(len(nicks)):\n\n    driver.get(\"http://348hf7.v.vote8.cn/m?Topic_2899179_Page=1\")\n    wait = WebDriverWait(driver, 9)\n    nickname = wait.until(EC.presence_of_element_located(\n        (By.CSS_SELECTOR, \"#tbNickname\")\n    ))\n    comment = wait.until(EC.presence_of_element_located(\n        (By.CSS_SELECTOR, \"#tbCommentContent\")\n    ))\n    submit = wait.until(EC.element_to_be_clickable(\n        (By.CSS_SELECTOR, \"#btnPostComment\")\n    ))\n    # 评论\n    nickname.clear()\n    comment.clear()\n    nickname.send_keys(nicks[i])\n    comment.send_keys(coms[i])\n    time.sleep(1)\n    submit.click()\n    time.sleep(10)\n    # 点击“确认”\n    sure = wait.until(EC.element_to_be_clickable(\n        (By.CSS_SELECTOR, \"#pnlAlertModal\")\n    ))\n    sure_btn = sure.find_element_by_xpath('//*[@id=\"pnlAlertModal\"]/div/div/div[2]/a')\n    sure_btn.click()\n\n    time.sleep(20)\n\ndriver.close()\n```\n\n\n* selenium使用WebDriverWait报错 Cannot call non W3C standard command while in W3C mode问题解决 - weixin_44885008的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_44885008/article/details/100523337\n\n* 基于python的selenium定位和操作页面元素的一些方法 - shuaiashuai - 博客园  \nhttps://www.cnblogs.com/jcshuaiashuai/p/10372616.html\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/selenium自动化测试.md","raw":"---\ntitle: selenium自动化测试\ndate: 2019-11-26 22:13:42\ntags:\n  - import \n---\n\n# 什么是Selemium？\n\nSelenium 是一个用于Web应用程序测试的工具。  \nSelenium测试直接运行在浏览器中，就像真正的用户在操作一样。  \n\n* Selenium 官网：http://seleniumhq.org/\n* Selenium Github 主页：https://github.com/SeleniumHQ/selenium\n\n* 文档：https://python-selenium-zh.readthedocs.io/zh_CN/latest/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 安装\n``` cmd\npip install selenium\n```\n\n## chrome driver的安装\n\n查看chrome版本\n``` title\nchrome://version/\n```\n<img src = \"selenium自动化测试\\001.png\" >\n\n按照chrome版本下载对应的driver  \n\n* http://chromedriver.storage.googleapis.com/index.html\n\n将chromedriver.exe复制到Chrome浏览器安装目录  \n\n将浏览器环境变量添加到path：打开开始菜单->我的电脑（或计算机）->系统属性->高级系统设置->环境变量，编辑用户变量里的path，\n\n\n# 测试\n\n声明并调用浏览器\n``` python\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\n```\n\n访问网页\n``` python\nfrom selenium import webdriver#导入库\nbrowser = webdriver.Chrome()#声明浏览器\nurl = 'https:www.baidu.com'\nbrowser.get(url)#打开浏览器预设网址\nprint(browser.page_source)#打印网页源代码\nbrowser.close()#关闭浏览器\n```\n\n## 实例：讲课竞赛的刷评论者\n\n\n``` python\n# -*- coding: utf-8 -*-\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.chrome.options import Options\nimport time\n\nnicks = [\"赵\", \"钱\"]\ncoms = [\"孙老师加油！\", \"李老师冲鸭！！！\"]\n\noption = Options()\noption.add_experimental_option('w3c', False)\ndriver = webdriver.Chrome(options=option)\n\nfor i in range(len(nicks)):\n\n    driver.get(\"http://348hf7.v.vote8.cn/m?Topic_2899179_Page=1\")\n    wait = WebDriverWait(driver, 9)\n    nickname = wait.until(EC.presence_of_element_located(\n        (By.CSS_SELECTOR, \"#tbNickname\")\n    ))\n    comment = wait.until(EC.presence_of_element_located(\n        (By.CSS_SELECTOR, \"#tbCommentContent\")\n    ))\n    submit = wait.until(EC.element_to_be_clickable(\n        (By.CSS_SELECTOR, \"#btnPostComment\")\n    ))\n    # 评论\n    nickname.clear()\n    comment.clear()\n    nickname.send_keys(nicks[i])\n    comment.send_keys(coms[i])\n    time.sleep(1)\n    submit.click()\n    time.sleep(10)\n    # 点击“确认”\n    sure = wait.until(EC.element_to_be_clickable(\n        (By.CSS_SELECTOR, \"#pnlAlertModal\")\n    ))\n    sure_btn = sure.find_element_by_xpath('//*[@id=\"pnlAlertModal\"]/div/div/div[2]/a')\n    sure_btn.click()\n\n    time.sleep(20)\n\ndriver.close()\n```\n\n\n* selenium使用WebDriverWait报错 Cannot call non W3C standard command while in W3C mode问题解决 - weixin_44885008的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_44885008/article/details/100523337\n\n* 基于python的selenium定位和操作页面元素的一些方法 - shuaiashuai - 博客园  \nhttps://www.cnblogs.com/jcshuaiashuai/p/10372616.html\n\n\n\n\n\n\n\n\n\n\n","slug":"selenium自动化测试","published":1,"updated":"2020-01-05T19:13:24.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507h001j4cvjvqlheh8p","content":"<h1 id=\"什么是Selemium？\"><a href=\"#什么是Selemium？\" class=\"headerlink\" title=\"什么是Selemium？\"></a>什么是Selemium？</h1><p>Selenium 是一个用于Web应用程序测试的工具。<br>Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。  </p>\n<ul>\n<li>Selenium 官网：<a href=\"http://seleniumhq.org/\" target=\"_blank\" rel=\"noopener\">http://seleniumhq.org/</a></li>\n<li><p>Selenium Github 主页：<a href=\"https://github.com/SeleniumHQ/selenium\" target=\"_blank\" rel=\"noopener\">https://github.com/SeleniumHQ/selenium</a></p>\n</li>\n<li><p>文档：<a href=\"https://python-selenium-zh.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">https://python-selenium-zh.readthedocs.io/zh_CN/latest/</a></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install selenium</span><br></pre></td></tr></table></figure>\n<h2 id=\"chrome-driver的安装\"><a href=\"#chrome-driver的安装\" class=\"headerlink\" title=\"chrome driver的安装\"></a>chrome driver的安装</h2><p>查看chrome版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome://version/</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/11/26/selenium自动化测试/001.png\"></p>\n<p>按照chrome版本下载对应的driver  </p>\n<ul>\n<li><a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">http://chromedriver.storage.googleapis.com/index.html</a></li>\n</ul>\n<p>将chromedriver.exe复制到Chrome浏览器安装目录  </p>\n<p>将浏览器环境变量添加到path：打开开始菜单-&gt;我的电脑（或计算机）-&gt;系统属性-&gt;高级系统设置-&gt;环境变量，编辑用户变量里的path，</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>声明并调用浏览器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">browser = webdriver.Chrome()</span><br></pre></td></tr></table></figure></p>\n<p>访问网页<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver<span class=\"comment\">#导入库</span></span><br><span class=\"line\">browser = webdriver.Chrome()<span class=\"comment\">#声明浏览器</span></span><br><span class=\"line\">url = <span class=\"string\">'https:www.baidu.com'</span></span><br><span class=\"line\">browser.get(url)<span class=\"comment\">#打开浏览器预设网址</span></span><br><span class=\"line\">print(browser.page_source)<span class=\"comment\">#打印网页源代码</span></span><br><span class=\"line\">browser.close()<span class=\"comment\">#关闭浏览器</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实例：讲课竞赛的刷评论者\"><a href=\"#实例：讲课竞赛的刷评论者\" class=\"headerlink\" title=\"实例：讲课竞赛的刷评论者\"></a>实例：讲课竞赛的刷评论者</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.options <span class=\"keyword\">import</span> Options</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">nicks = [<span class=\"string\">\"赵\"</span>, <span class=\"string\">\"钱\"</span>]</span><br><span class=\"line\">coms = [<span class=\"string\">\"孙老师加油！\"</span>, <span class=\"string\">\"李老师冲鸭！！！\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">option = Options()</span><br><span class=\"line\">option.add_experimental_option(<span class=\"string\">'w3c'</span>, <span class=\"literal\">False</span>)</span><br><span class=\"line\">driver = webdriver.Chrome(options=option)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nicks)):</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.get(<span class=\"string\">\"http://348hf7.v.vote8.cn/m?Topic_2899179_Page=1\"</span>)</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">9</span>)</span><br><span class=\"line\">    nickname = wait.until(EC.presence_of_element_located(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#tbNickname\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    comment = wait.until(EC.presence_of_element_located(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#tbCommentContent\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    submit = wait.until(EC.element_to_be_clickable(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#btnPostComment\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    <span class=\"comment\"># 评论</span></span><br><span class=\"line\">    nickname.clear()</span><br><span class=\"line\">    comment.clear()</span><br><span class=\"line\">    nickname.send_keys(nicks[i])</span><br><span class=\"line\">    comment.send_keys(coms[i])</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    submit.click()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 点击“确认”</span></span><br><span class=\"line\">    sure = wait.until(EC.element_to_be_clickable(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#pnlAlertModal\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    sure_btn = sure.find_element_by_xpath(<span class=\"string\">'//*[@id=\"pnlAlertModal\"]/div/div/div[2]/a'</span>)</span><br><span class=\"line\">    sure_btn.click()</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">driver.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>selenium使用WebDriverWait报错 Cannot call non W3C standard command while in W3C mode问题解决 - weixin_44885008的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_44885008/article/details/100523337\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_44885008/article/details/100523337</a></p>\n</li>\n<li><p>基于python的selenium定位和操作页面元素的一些方法 - shuaiashuai - 博客园<br><a href=\"https://www.cnblogs.com/jcshuaiashuai/p/10372616.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jcshuaiashuai/p/10372616.html</a></p>\n</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<h1 id=\"什么是Selemium？\"><a href=\"#什么是Selemium？\" class=\"headerlink\" title=\"什么是Selemium？\"></a>什么是Selemium？</h1><p>Selenium 是一个用于Web应用程序测试的工具。<br>Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。  </p>\n<ul>\n<li>Selenium 官网：<a href=\"http://seleniumhq.org/\" target=\"_blank\" rel=\"noopener\">http://seleniumhq.org/</a></li>\n<li><p>Selenium Github 主页：<a href=\"https://github.com/SeleniumHQ/selenium\" target=\"_blank\" rel=\"noopener\">https://github.com/SeleniumHQ/selenium</a></p>\n</li>\n<li><p>文档：<a href=\"https://python-selenium-zh.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">https://python-selenium-zh.readthedocs.io/zh_CN/latest/</a></p>\n</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install selenium</span><br></pre></td></tr></table></figure>\n<h2 id=\"chrome-driver的安装\"><a href=\"#chrome-driver的安装\" class=\"headerlink\" title=\"chrome driver的安装\"></a>chrome driver的安装</h2><p>查看chrome版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome://version/</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/11/26/selenium自动化测试/001.png\"></p>\n<p>按照chrome版本下载对应的driver  </p>\n<ul>\n<li><a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">http://chromedriver.storage.googleapis.com/index.html</a></li>\n</ul>\n<p>将chromedriver.exe复制到Chrome浏览器安装目录  </p>\n<p>将浏览器环境变量添加到path：打开开始菜单-&gt;我的电脑（或计算机）-&gt;系统属性-&gt;高级系统设置-&gt;环境变量，编辑用户变量里的path，</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>声明并调用浏览器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">browser = webdriver.Chrome()</span><br></pre></td></tr></table></figure></p>\n<p>访问网页<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver<span class=\"comment\">#导入库</span></span><br><span class=\"line\">browser = webdriver.Chrome()<span class=\"comment\">#声明浏览器</span></span><br><span class=\"line\">url = <span class=\"string\">'https:www.baidu.com'</span></span><br><span class=\"line\">browser.get(url)<span class=\"comment\">#打开浏览器预设网址</span></span><br><span class=\"line\">print(browser.page_source)<span class=\"comment\">#打印网页源代码</span></span><br><span class=\"line\">browser.close()<span class=\"comment\">#关闭浏览器</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实例：讲课竞赛的刷评论者\"><a href=\"#实例：讲课竞赛的刷评论者\" class=\"headerlink\" title=\"实例：讲课竞赛的刷评论者\"></a>实例：讲课竞赛的刷评论者</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.options <span class=\"keyword\">import</span> Options</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">nicks = [<span class=\"string\">\"赵\"</span>, <span class=\"string\">\"钱\"</span>]</span><br><span class=\"line\">coms = [<span class=\"string\">\"孙老师加油！\"</span>, <span class=\"string\">\"李老师冲鸭！！！\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">option = Options()</span><br><span class=\"line\">option.add_experimental_option(<span class=\"string\">'w3c'</span>, <span class=\"literal\">False</span>)</span><br><span class=\"line\">driver = webdriver.Chrome(options=option)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nicks)):</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.get(<span class=\"string\">\"http://348hf7.v.vote8.cn/m?Topic_2899179_Page=1\"</span>)</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">9</span>)</span><br><span class=\"line\">    nickname = wait.until(EC.presence_of_element_located(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#tbNickname\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    comment = wait.until(EC.presence_of_element_located(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#tbCommentContent\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    submit = wait.until(EC.element_to_be_clickable(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#btnPostComment\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    <span class=\"comment\"># 评论</span></span><br><span class=\"line\">    nickname.clear()</span><br><span class=\"line\">    comment.clear()</span><br><span class=\"line\">    nickname.send_keys(nicks[i])</span><br><span class=\"line\">    comment.send_keys(coms[i])</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    submit.click()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 点击“确认”</span></span><br><span class=\"line\">    sure = wait.until(EC.element_to_be_clickable(</span><br><span class=\"line\">        (By.CSS_SELECTOR, <span class=\"string\">\"#pnlAlertModal\"</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    sure_btn = sure.find_element_by_xpath(<span class=\"string\">'//*[@id=\"pnlAlertModal\"]/div/div/div[2]/a'</span>)</span><br><span class=\"line\">    sure_btn.click()</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">driver.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>selenium使用WebDriverWait报错 Cannot call non W3C standard command while in W3C mode问题解决 - weixin_44885008的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_44885008/article/details/100523337\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_44885008/article/details/100523337</a></p>\n</li>\n<li><p>基于python的selenium定位和操作页面元素的一些方法 - shuaiashuai - 博客园<br><a href=\"https://www.cnblogs.com/jcshuaiashuai/p/10372616.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jcshuaiashuai/p/10372616.html</a></p>\n</li>\n</ul>\n</the>"},{"title":"web学习笔记","date":"2019-10-26T08:21:18.000Z","_content":"\n\n\n## TCP 三次握手四次分手过程\n* 动画：用动画给面试官解释 TCP 三次握手过程 - 一个不甘平凡的码农 - CSDN博客  \nhttps://blog.csdn.net/qq_36903042/article/details/102513465\n* 动画：用动画给女朋友讲解 TCP 四次分手过程 - 一个不甘平凡的码农 - CSDN博客  \nhttps://blog.csdn.net/qq_36903042/article/details/102656641\n\n\n\n\n\n\n\n\n","source":"_posts/web学习笔记.md","raw":"---\ntitle: web学习笔记\ndate: 2019-10-26 16:21:18\ntags:\n   - web\n\n---\n\n\n\n## TCP 三次握手四次分手过程\n* 动画：用动画给面试官解释 TCP 三次握手过程 - 一个不甘平凡的码农 - CSDN博客  \nhttps://blog.csdn.net/qq_36903042/article/details/102513465\n* 动画：用动画给女朋友讲解 TCP 四次分手过程 - 一个不甘平凡的码农 - CSDN博客  \nhttps://blog.csdn.net/qq_36903042/article/details/102656641\n\n\n\n\n\n\n\n\n","slug":"web学习笔记","published":1,"updated":"2020-01-05T19:13:24.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507i001k4cvj2j2j00br","content":"<h2 id=\"TCP-三次握手四次分手过程\"><a href=\"#TCP-三次握手四次分手过程\" class=\"headerlink\" title=\"TCP 三次握手四次分手过程\"></a>TCP 三次握手四次分手过程</h2><ul>\n<li>动画：用动画给面试官解释 TCP 三次握手过程 - 一个不甘平凡的码农 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36903042/article/details/102513465\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36903042/article/details/102513465</a></li>\n<li>动画：用动画给女朋友讲解 TCP 四次分手过程 - 一个不甘平凡的码农 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36903042/article/details/102656641\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36903042/article/details/102656641</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TCP-三次握手四次分手过程\"><a href=\"#TCP-三次握手四次分手过程\" class=\"headerlink\" title=\"TCP 三次握手四次分手过程\"></a>TCP 三次握手四次分手过程</h2><ul>\n<li>动画：用动画给面试官解释 TCP 三次握手过程 - 一个不甘平凡的码农 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36903042/article/details/102513465\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36903042/article/details/102513465</a></li>\n<li>动画：用动画给女朋友讲解 TCP 四次分手过程 - 一个不甘平凡的码农 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36903042/article/details/102656641\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36903042/article/details/102656641</a></li>\n</ul>\n"},{"title":"tkinter学习笔记","date":"2019-05-11T06:28:52.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n## tkinter 可以使用的颜色\n\n<div align=center>\n<img src = \"tkinter学习笔记/color.png\" width=600 height=300>\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## tkinter python（图形开发界面）\nTkinter 是 Python 的标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。Tk和Tkinter可以在大多数的Unix平台下使用，同样可以应用在Windows和Macintosh系统里。由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter 库、而且 IDLE 也是用 Tkinter 编写而成、对于简单的图形界面 Tkinter 还是能应付自如。\n``` python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport tkinter as tk\ntop = tk.Tk()\n# 进入消息循环\ntop.mainloop()\n```\n\n## tkinter 常用控件\n\n• tk.Tk()  \n• tk.Lable()   \n• tk.button()   \n• tk.Entry()  \n• tk.Text()  \n• tk.Radiobutton()  \n• tk.Scale()  \n• tk.Canvas()  \n\n### 标签\n可以显示文本和位图\n\n### 按键\n按钮组件用于在 Python 应用程序中添加按钮，按钮上可以放上文本或图像，按钮可用于监听用户行为，能够与一个 Python 函数关联，当按钮被按下时，自动调用该函数。\n``` python\nwindows = tk.Tk()\nwindows.title('hello')\nwindows.geometry('200x100')\n\nvar = tk.StringVar()\nlable = tk.Label(windows, textvariable=var, bg='green', font=('Arial', 15), width=15, height=2)\nlable.pack()\n\non_hit = False\ndef hit_me():\n    global on_hit\n    if on_hit == False:\n        var.set('u hit me')\n        on_hit = True\n    else:\n        on_hit = False\n        var.set('')\n\nbutton = tk.Button(windows, text='hit me', command=hit_me, width=15, height=2)\nbutton.pack()\n\nwindows.mainloop()\n```\n\n### 画布\n``` python\nwindows = tk.Tk()\nwindows.title('hey')\nwindows.geometry(\"200x200\")\n\nconvas = tk.Canvas(windows, bg='blue', height=100, width=200).pack()\nimage_file = tk.PhotoImage(file='ins.gif')\nimage = canvas.creat_image(10, 10, anchor='nw', image=image_file)\ndef hi():\n    pass\n\nbutton = tk.Button(windows, text='hi', command=hi).pack()\n\nwindows.mainloop()\n```\n\n\n\n\n* Python Tkinter教程（GUI图形界面开发教程）  \nhttp://c.biancheng.net/python/tkinter/\n* Tkinter GUI 教程系列 | 莫烦Python  \nhttps://morvanzhou.github.io/tutorials/python-basic/tkinter/","source":"_posts/tkinter学习笔记.md","raw":"---\ntitle: tkinter学习笔记\ndate: 2019-05-11 14:28:52\ntags:\n  - tkinter\n  - python\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n## tkinter 可以使用的颜色\n\n<div align=center>\n<img src = \"tkinter学习笔记/color.png\" width=600 height=300>\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## tkinter python（图形开发界面）\nTkinter 是 Python 的标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。Tk和Tkinter可以在大多数的Unix平台下使用，同样可以应用在Windows和Macintosh系统里。由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter 库、而且 IDLE 也是用 Tkinter 编写而成、对于简单的图形界面 Tkinter 还是能应付自如。\n``` python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport tkinter as tk\ntop = tk.Tk()\n# 进入消息循环\ntop.mainloop()\n```\n\n## tkinter 常用控件\n\n• tk.Tk()  \n• tk.Lable()   \n• tk.button()   \n• tk.Entry()  \n• tk.Text()  \n• tk.Radiobutton()  \n• tk.Scale()  \n• tk.Canvas()  \n\n### 标签\n可以显示文本和位图\n\n### 按键\n按钮组件用于在 Python 应用程序中添加按钮，按钮上可以放上文本或图像，按钮可用于监听用户行为，能够与一个 Python 函数关联，当按钮被按下时，自动调用该函数。\n``` python\nwindows = tk.Tk()\nwindows.title('hello')\nwindows.geometry('200x100')\n\nvar = tk.StringVar()\nlable = tk.Label(windows, textvariable=var, bg='green', font=('Arial', 15), width=15, height=2)\nlable.pack()\n\non_hit = False\ndef hit_me():\n    global on_hit\n    if on_hit == False:\n        var.set('u hit me')\n        on_hit = True\n    else:\n        on_hit = False\n        var.set('')\n\nbutton = tk.Button(windows, text='hit me', command=hit_me, width=15, height=2)\nbutton.pack()\n\nwindows.mainloop()\n```\n\n### 画布\n``` python\nwindows = tk.Tk()\nwindows.title('hey')\nwindows.geometry(\"200x200\")\n\nconvas = tk.Canvas(windows, bg='blue', height=100, width=200).pack()\nimage_file = tk.PhotoImage(file='ins.gif')\nimage = canvas.creat_image(10, 10, anchor='nw', image=image_file)\ndef hi():\n    pass\n\nbutton = tk.Button(windows, text='hi', command=hi).pack()\n\nwindows.mainloop()\n```\n\n\n\n\n* Python Tkinter教程（GUI图形界面开发教程）  \nhttp://c.biancheng.net/python/tkinter/\n* Tkinter GUI 教程系列 | 莫烦Python  \nhttps://morvanzhou.github.io/tutorials/python-basic/tkinter/","slug":"tkinter学习笔记","published":1,"updated":"2020-01-05T19:13:24.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507j001n4cvjfqte8y5v","content":"<p><strong> tkinter学习笔记 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"tkinter-可以使用的颜色\"><a href=\"#tkinter-可以使用的颜色\" class=\"headerlink\" title=\"tkinter 可以使用的颜色\"></a>tkinter 可以使用的颜色</h2><div align=\"center\">\n<img src=\"/2019/05/11/tkinter学习笔记/color.png\" width=\"600\" height=\"300\">\n</div>\n\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"tkinter-python（图形开发界面）\"><a href=\"#tkinter-python（图形开发界面）\" class=\"headerlink\" title=\"tkinter python（图形开发界面）\"></a>tkinter python（图形开发界面）</h2><p>Tkinter 是 Python 的标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。Tk和Tkinter可以在大多数的Unix平台下使用，同样可以应用在Windows和Macintosh系统里。由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter 库、而且 IDLE 也是用 Tkinter 编写而成、对于简单的图形界面 Tkinter 还是能应付自如。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\">top = tk.Tk()</span><br><span class=\"line\"><span class=\"comment\"># 进入消息循环</span></span><br><span class=\"line\">top.mainloop()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"tkinter-常用控件\"><a href=\"#tkinter-常用控件\" class=\"headerlink\" title=\"tkinter 常用控件\"></a>tkinter 常用控件</h2><p>• tk.Tk()<br>• tk.Lable()<br>• tk.button()<br>• tk.Entry()<br>• tk.Text()<br>• tk.Radiobutton()<br>• tk.Scale()<br>• tk.Canvas()  </p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>可以显示文本和位图</p>\n<h3 id=\"按键\"><a href=\"#按键\" class=\"headerlink\" title=\"按键\"></a>按键</h3><p>按钮组件用于在 Python 应用程序中添加按钮，按钮上可以放上文本或图像，按钮可用于监听用户行为，能够与一个 Python 函数关联，当按钮被按下时，自动调用该函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows = tk.Tk()</span><br><span class=\"line\">windows.title(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">windows.geometry(<span class=\"string\">'200x100'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">var = tk.StringVar()</span><br><span class=\"line\">lable = tk.Label(windows, textvariable=var, bg=<span class=\"string\">'green'</span>, font=(<span class=\"string\">'Arial'</span>, <span class=\"number\">15</span>), width=<span class=\"number\">15</span>, height=<span class=\"number\">2</span>)</span><br><span class=\"line\">lable.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">on_hit = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hit_me</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> on_hit</span><br><span class=\"line\">    <span class=\"keyword\">if</span> on_hit == <span class=\"literal\">False</span>:</span><br><span class=\"line\">        var.set(<span class=\"string\">'u hit me'</span>)</span><br><span class=\"line\">        on_hit = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        on_hit = <span class=\"literal\">False</span></span><br><span class=\"line\">        var.set(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">button = tk.Button(windows, text=<span class=\"string\">'hit me'</span>, command=hit_me, width=<span class=\"number\">15</span>, height=<span class=\"number\">2</span>)</span><br><span class=\"line\">button.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">windows.mainloop()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"画布\"><a href=\"#画布\" class=\"headerlink\" title=\"画布\"></a>画布</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows = tk.Tk()</span><br><span class=\"line\">windows.title(<span class=\"string\">'hey'</span>)</span><br><span class=\"line\">windows.geometry(<span class=\"string\">\"200x200\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">convas = tk.Canvas(windows, bg=<span class=\"string\">'blue'</span>, height=<span class=\"number\">100</span>, width=<span class=\"number\">200</span>).pack()</span><br><span class=\"line\">image_file = tk.PhotoImage(file=<span class=\"string\">'ins.gif'</span>)</span><br><span class=\"line\">image = canvas.creat_image(<span class=\"number\">10</span>, <span class=\"number\">10</span>, anchor=<span class=\"string\">'nw'</span>, image=image_file)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hi</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">button = tk.Button(windows, text=<span class=\"string\">'hi'</span>, command=hi).pack()</span><br><span class=\"line\"></span><br><span class=\"line\">windows.mainloop()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Python Tkinter教程（GUI图形界面开发教程）<br><a href=\"http://c.biancheng.net/python/tkinter/\" target=\"_blank\" rel=\"noopener\">http://c.biancheng.net/python/tkinter/</a></li>\n<li>Tkinter GUI 教程系列 | 莫烦Python<br><a href=\"https://morvanzhou.github.io/tutorials/python-basic/tkinter/\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/tutorials/python-basic/tkinter/</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> tkinter学习笔记 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"tkinter-可以使用的颜色\"><a href=\"#tkinter-可以使用的颜色\" class=\"headerlink\" title=\"tkinter 可以使用的颜色\"></a>tkinter 可以使用的颜色</h2><div align=\"center\">\n<img src=\"/2019/05/11/tkinter学习笔记/color.png\" width=\"600\" height=\"300\">\n</div>","more":"<the rest of contents | 余下全文>\n\n\n<h2 id=\"tkinter-python（图形开发界面）\"><a href=\"#tkinter-python（图形开发界面）\" class=\"headerlink\" title=\"tkinter python（图形开发界面）\"></a>tkinter python（图形开发界面）</h2><p>Tkinter 是 Python 的标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。Tk和Tkinter可以在大多数的Unix平台下使用，同样可以应用在Windows和Macintosh系统里。由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter 库、而且 IDLE 也是用 Tkinter 编写而成、对于简单的图形界面 Tkinter 还是能应付自如。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\">top = tk.Tk()</span><br><span class=\"line\"><span class=\"comment\"># 进入消息循环</span></span><br><span class=\"line\">top.mainloop()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"tkinter-常用控件\"><a href=\"#tkinter-常用控件\" class=\"headerlink\" title=\"tkinter 常用控件\"></a>tkinter 常用控件</h2><p>• tk.Tk()<br>• tk.Lable()<br>• tk.button()<br>• tk.Entry()<br>• tk.Text()<br>• tk.Radiobutton()<br>• tk.Scale()<br>• tk.Canvas()  </p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>可以显示文本和位图</p>\n<h3 id=\"按键\"><a href=\"#按键\" class=\"headerlink\" title=\"按键\"></a>按键</h3><p>按钮组件用于在 Python 应用程序中添加按钮，按钮上可以放上文本或图像，按钮可用于监听用户行为，能够与一个 Python 函数关联，当按钮被按下时，自动调用该函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows = tk.Tk()</span><br><span class=\"line\">windows.title(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">windows.geometry(<span class=\"string\">'200x100'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">var = tk.StringVar()</span><br><span class=\"line\">lable = tk.Label(windows, textvariable=var, bg=<span class=\"string\">'green'</span>, font=(<span class=\"string\">'Arial'</span>, <span class=\"number\">15</span>), width=<span class=\"number\">15</span>, height=<span class=\"number\">2</span>)</span><br><span class=\"line\">lable.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">on_hit = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hit_me</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> on_hit</span><br><span class=\"line\">    <span class=\"keyword\">if</span> on_hit == <span class=\"literal\">False</span>:</span><br><span class=\"line\">        var.set(<span class=\"string\">'u hit me'</span>)</span><br><span class=\"line\">        on_hit = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        on_hit = <span class=\"literal\">False</span></span><br><span class=\"line\">        var.set(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">button = tk.Button(windows, text=<span class=\"string\">'hit me'</span>, command=hit_me, width=<span class=\"number\">15</span>, height=<span class=\"number\">2</span>)</span><br><span class=\"line\">button.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">windows.mainloop()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"画布\"><a href=\"#画布\" class=\"headerlink\" title=\"画布\"></a>画布</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows = tk.Tk()</span><br><span class=\"line\">windows.title(<span class=\"string\">'hey'</span>)</span><br><span class=\"line\">windows.geometry(<span class=\"string\">\"200x200\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">convas = tk.Canvas(windows, bg=<span class=\"string\">'blue'</span>, height=<span class=\"number\">100</span>, width=<span class=\"number\">200</span>).pack()</span><br><span class=\"line\">image_file = tk.PhotoImage(file=<span class=\"string\">'ins.gif'</span>)</span><br><span class=\"line\">image = canvas.creat_image(<span class=\"number\">10</span>, <span class=\"number\">10</span>, anchor=<span class=\"string\">'nw'</span>, image=image_file)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hi</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">button = tk.Button(windows, text=<span class=\"string\">'hi'</span>, command=hi).pack()</span><br><span class=\"line\"></span><br><span class=\"line\">windows.mainloop()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Python Tkinter教程（GUI图形界面开发教程）<br><a href=\"http://c.biancheng.net/python/tkinter/\" target=\"_blank\" rel=\"noopener\">http://c.biancheng.net/python/tkinter/</a></li>\n<li>Tkinter GUI 教程系列 | 莫烦Python<br><a href=\"https://morvanzhou.github.io/tutorials/python-basic/tkinter/\" target=\"_blank\" rel=\"noopener\">https://morvanzhou.github.io/tutorials/python-basic/tkinter/</a></li>\n</ul>\n</the>"},{"title":"作业检查机器人","date":"2019-06-10T02:55:10.000Z","_content":"\n# 100以内加减法（小学二年级）算数机器人\n\n## 当前的功能\n拍一张答题纸，画四个点，透射变换为标准尺寸后进行算式分割，对每张算式图片检测识别数字后进行计算，并打印结果;  \n手指指到相应算式下方，语音播报该计算结果。\n\n## 待解决的问题\n* 阴影下识别出错\n\n## 接下来的工作\n* 写字机器人接入?\n* 更复杂的算式？\n\n## Demo\n<div align=center>\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNDIyNzA4NDM0MA==\">\n</iframe>\n</div>\n\n* 算数-其他-高清完整正版视频在线观看-优酷  \nhttps://v.youku.com/v_show/id_XNDIyNzA4NDM0MA==.html\n\n\n\n## 愉快地一天\nQ: 如何才能有很多作品，参加很多比赛？\n<div align=center>\n<img src='作业检查机器人/002.png' width=700 height=450>\n</div>\n","source":"_posts/作业检查机器人.md","raw":"---\ntitle: 作业检查机器人 \ndate: 2019-06-10 10:55:10\ntags:\n - python\n - opencv\n---\n\n# 100以内加减法（小学二年级）算数机器人\n\n## 当前的功能\n拍一张答题纸，画四个点，透射变换为标准尺寸后进行算式分割，对每张算式图片检测识别数字后进行计算，并打印结果;  \n手指指到相应算式下方，语音播报该计算结果。\n\n## 待解决的问题\n* 阴影下识别出错\n\n## 接下来的工作\n* 写字机器人接入?\n* 更复杂的算式？\n\n## Demo\n<div align=center>\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNDIyNzA4NDM0MA==\">\n</iframe>\n</div>\n\n* 算数-其他-高清完整正版视频在线观看-优酷  \nhttps://v.youku.com/v_show/id_XNDIyNzA4NDM0MA==.html\n\n\n\n## 愉快地一天\nQ: 如何才能有很多作品，参加很多比赛？\n<div align=center>\n<img src='作业检查机器人/002.png' width=700 height=450>\n</div>\n","slug":"作业检查机器人","published":1,"updated":"2020-01-05T19:13:24.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507j001o4cvjhiojrgkn","content":"<h1 id=\"100以内加减法（小学二年级）算数机器人\"><a href=\"#100以内加减法（小学二年级）算数机器人\" class=\"headerlink\" title=\"100以内加减法（小学二年级）算数机器人\"></a>100以内加减法（小学二年级）算数机器人</h1><h2 id=\"当前的功能\"><a href=\"#当前的功能\" class=\"headerlink\" title=\"当前的功能\"></a>当前的功能</h2><p>拍一张答题纸，画四个点，透射变换为标准尺寸后进行算式分割，对每张算式图片检测识别数字后进行计算，并打印结果;<br>手指指到相应算式下方，语音播报该计算结果。</p>\n<h2 id=\"待解决的问题\"><a href=\"#待解决的问题\" class=\"headerlink\" title=\"待解决的问题\"></a>待解决的问题</h2><ul>\n<li>阴影下识别出错</li>\n</ul>\n<h2 id=\"接下来的工作\"><a href=\"#接下来的工作\" class=\"headerlink\" title=\"接下来的工作\"></a>接下来的工作</h2><ul>\n<li>写字机器人接入?</li>\n<li>更复杂的算式？</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><div align=\"center\">\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNDIyNzA4NDM0MA==\">\n</iframe>\n</div>\n\n<ul>\n<li>算数-其他-高清完整正版视频在线观看-优酷<br><a href=\"https://v.youku.com/v_show/id_XNDIyNzA4NDM0MA==.html\" target=\"_blank\" rel=\"noopener\">https://v.youku.com/v_show/id_XNDIyNzA4NDM0MA==.html</a></li>\n</ul>\n<h2 id=\"愉快地一天\"><a href=\"#愉快地一天\" class=\"headerlink\" title=\"愉快地一天\"></a>愉快地一天</h2><p>Q: 如何才能有很多作品，参加很多比赛？</p>\n<div align=\"center\">\n<img src=\"/2019/06/10/作业检查机器人/002.png\" width=\"700\" height=\"450\">\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"100以内加减法（小学二年级）算数机器人\"><a href=\"#100以内加减法（小学二年级）算数机器人\" class=\"headerlink\" title=\"100以内加减法（小学二年级）算数机器人\"></a>100以内加减法（小学二年级）算数机器人</h1><h2 id=\"当前的功能\"><a href=\"#当前的功能\" class=\"headerlink\" title=\"当前的功能\"></a>当前的功能</h2><p>拍一张答题纸，画四个点，透射变换为标准尺寸后进行算式分割，对每张算式图片检测识别数字后进行计算，并打印结果;<br>手指指到相应算式下方，语音播报该计算结果。</p>\n<h2 id=\"待解决的问题\"><a href=\"#待解决的问题\" class=\"headerlink\" title=\"待解决的问题\"></a>待解决的问题</h2><ul>\n<li>阴影下识别出错</li>\n</ul>\n<h2 id=\"接下来的工作\"><a href=\"#接下来的工作\" class=\"headerlink\" title=\"接下来的工作\"></a>接下来的工作</h2><ul>\n<li>写字机器人接入?</li>\n<li>更复杂的算式？</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><div align=\"center\">\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNDIyNzA4NDM0MA==\">\n</iframe>\n</div>\n\n<ul>\n<li>算数-其他-高清完整正版视频在线观看-优酷<br><a href=\"https://v.youku.com/v_show/id_XNDIyNzA4NDM0MA==.html\" target=\"_blank\" rel=\"noopener\">https://v.youku.com/v_show/id_XNDIyNzA4NDM0MA==.html</a></li>\n</ul>\n<h2 id=\"愉快地一天\"><a href=\"#愉快地一天\" class=\"headerlink\" title=\"愉快地一天\"></a>愉快地一天</h2><p>Q: 如何才能有很多作品，参加很多比赛？</p>\n<div align=\"center\">\n<img src=\"/2019/06/10/作业检查机器人/002.png\" width=\"700\" height=\"450\">\n</div>\n"},{"title":"unity学习笔记","date":"2019-11-01T11:18:29.000Z","_content":"\n## 下载\n\nhttps://unity3d.com/cn/get-unity/download\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n* Unity Hub  \n是一个用于管理Unity项目、简化下载、查找、卸载以及安装管理多个Unity版本的工具。\n\n### 问题记录：sentinel key not found (h0007) Unity\n1.删除文件 C:\\ProgramData\\SafeNet Sentinel\n2.在Unity.exe的Editor目录下打开命令行工具cmd，输入\n``` shell\nhasp_update.exe u unity-sl.v2c\n```\n\n\n\n## test\n\n``` c#\npublic class TestCross : MonoBehaviour\n{\n    public Gameobject cross;\n\n    void Start()\n    {\n\n    }\n\n\n    void Update()\n    {\n        // Vector3 i = new Vector3(1.0f, 1.0f, 1.0f);\n        Vector3 i = new Vector3(\n            cross.GetComent<Tranform>().position.x,\n            cross.GetComent<Tranform>().position.y,\n            cross.GetComent<Tranform>().position.z + 0.1f);\n        \n        cross.GetComent<Tranform>().position = i;\n    }\n}\n\n```\n\n\n\n\n\n","source":"_posts/unity学习笔记.md","raw":"---\ntitle: unity学习笔记\ndate: 2019-11-01 19:18:29\ntags:\n---\n\n## 下载\n\nhttps://unity3d.com/cn/get-unity/download\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n* Unity Hub  \n是一个用于管理Unity项目、简化下载、查找、卸载以及安装管理多个Unity版本的工具。\n\n### 问题记录：sentinel key not found (h0007) Unity\n1.删除文件 C:\\ProgramData\\SafeNet Sentinel\n2.在Unity.exe的Editor目录下打开命令行工具cmd，输入\n``` shell\nhasp_update.exe u unity-sl.v2c\n```\n\n\n\n## test\n\n``` c#\npublic class TestCross : MonoBehaviour\n{\n    public Gameobject cross;\n\n    void Start()\n    {\n\n    }\n\n\n    void Update()\n    {\n        // Vector3 i = new Vector3(1.0f, 1.0f, 1.0f);\n        Vector3 i = new Vector3(\n            cross.GetComent<Tranform>().position.x,\n            cross.GetComent<Tranform>().position.y,\n            cross.GetComent<Tranform>().position.z + 0.1f);\n        \n        cross.GetComent<Tranform>().position = i;\n    }\n}\n\n```\n\n\n\n\n\n","slug":"unity学习笔记","published":1,"updated":"2020-01-05T19:13:24.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507k001r4cvjy5u1ete9","content":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p><a href=\"https://unity3d.com/cn/get-unity/download\" target=\"_blank\" rel=\"noopener\">https://unity3d.com/cn/get-unity/download</a></p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<ul>\n<li>Unity Hub<br>是一个用于管理Unity项目、简化下载、查找、卸载以及安装管理多个Unity版本的工具。</li>\n</ul>\n<h3 id=\"问题记录：sentinel-key-not-found-h0007-Unity\"><a href=\"#问题记录：sentinel-key-not-found-h0007-Unity\" class=\"headerlink\" title=\"问题记录：sentinel key not found (h0007) Unity\"></a>问题记录：sentinel key not found (h0007) Unity</h3><p>1.删除文件 C:\\ProgramData\\SafeNet Sentinel<br>2.在Unity.exe的Editor目录下打开命令行工具cmd，输入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hasp_update.exe u unity-sl.v2c</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestCross : MonoBehaviour</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public Gameobject cross;</span><br><span class=\"line\"></span><br><span class=\"line\">    void Start()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    void Update()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // Vector3 i = new Vector3(1.0f, 1.0f, 1.0f);</span><br><span class=\"line\">        Vector3 i = new Vector3(</span><br><span class=\"line\">            cross.GetComent&lt;Tranform&gt;().position.x,</span><br><span class=\"line\">            cross.GetComent&lt;Tranform&gt;().position.y,</span><br><span class=\"line\">            cross.GetComent&lt;Tranform&gt;().position.z + 0.1f);</span><br><span class=\"line\">        </span><br><span class=\"line\">        cross.GetComent&lt;Tranform&gt;().position = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</the>","site":{"data":{}},"excerpt":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p><a href=\"https://unity3d.com/cn/get-unity/download\" target=\"_blank\" rel=\"noopener\">https://unity3d.com/cn/get-unity/download</a></p>","more":"<the rest of contents | 余下全文>\n\n<ul>\n<li>Unity Hub<br>是一个用于管理Unity项目、简化下载、查找、卸载以及安装管理多个Unity版本的工具。</li>\n</ul>\n<h3 id=\"问题记录：sentinel-key-not-found-h0007-Unity\"><a href=\"#问题记录：sentinel-key-not-found-h0007-Unity\" class=\"headerlink\" title=\"问题记录：sentinel key not found (h0007) Unity\"></a>问题记录：sentinel key not found (h0007) Unity</h3><p>1.删除文件 C:\\ProgramData\\SafeNet Sentinel<br>2.在Unity.exe的Editor目录下打开命令行工具cmd，输入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hasp_update.exe u unity-sl.v2c</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestCross : MonoBehaviour</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public Gameobject cross;</span><br><span class=\"line\"></span><br><span class=\"line\">    void Start()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    void Update()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // Vector3 i = new Vector3(1.0f, 1.0f, 1.0f);</span><br><span class=\"line\">        Vector3 i = new Vector3(</span><br><span class=\"line\">            cross.GetComent&lt;Tranform&gt;().position.x,</span><br><span class=\"line\">            cross.GetComent&lt;Tranform&gt;().position.y,</span><br><span class=\"line\">            cross.GetComent&lt;Tranform&gt;().position.z + 0.1f);</span><br><span class=\"line\">        </span><br><span class=\"line\">        cross.GetComent&lt;Tranform&gt;().position = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</the>"},{"title":"win10 python3.7 安装dlib19.17","date":"2019-07-06T03:17:54.000Z","_content":"\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n最近使用了dlib识别人脸68个特征点，教研室的win7很早之前就装的dlib当时没遇到什么坑，回家里在win10上安装“大礼包”竟然把电脑弄蓝屏了，在此记录一下。  \n\n<div align=center>\n<img src = \"win10-python37-安装dlib19-17/00.png\" width=300 height=500>\n</div>\n\n搜索还原点->点击“配置”启用保护->创建还原点。  \n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 步骤\n* 安装python\n* 安装VS2017\n* 安装cmake\n* 安装dlib/;\n## 安装python\n安装Anaconda环境，顺便安装VScode  \n* Home - Anaconda  \nhttps://www.anaconda.com/\n\n## 安装VS2017\n安装Visual Studio2017，社区版  \n* 下载 | IDE、Code 和 Team Foundation Server | Visual Studio  \nhttps://visualstudio.microsoft.com/zh-hans/downloads/\n\n注意勾选“Visual C++ tool for Cmake and linux”  \n<div align=center>\n<img src = \"win10-python37-安装dlib19-17/01.png\">\n</div>\n否则会出现下面的问题    \n<div>\n<img src = \"win10-python37-安装dlib19-17/02.png\">\n</div>\n\n## 安装cmake\n``` bash\npip install cmake\n```\n\n## 安装dlib\n方法一：直接使用pip\n``` bash\npip install dlib\n```\n\n方法二：下载dlib源代码，编译、安装\n* dlib C++ Library  \nhttp://dlib.net/\n``` bash\npython setup.py install\n```\n\n\n\n\n\n","source":"_posts/win10-python37-安装dlib19-17.md","raw":"---\ntitle: win10 python3.7 安装dlib19.17\ndate: 2019-07-06 11:17:54\ntags:\n  - dlib\n---\n\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n最近使用了dlib识别人脸68个特征点，教研室的win7很早之前就装的dlib当时没遇到什么坑，回家里在win10上安装“大礼包”竟然把电脑弄蓝屏了，在此记录一下。  \n\n<div align=center>\n<img src = \"win10-python37-安装dlib19-17/00.png\" width=300 height=500>\n</div>\n\n搜索还原点->点击“配置”启用保护->创建还原点。  \n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 步骤\n* 安装python\n* 安装VS2017\n* 安装cmake\n* 安装dlib/;\n## 安装python\n安装Anaconda环境，顺便安装VScode  \n* Home - Anaconda  \nhttps://www.anaconda.com/\n\n## 安装VS2017\n安装Visual Studio2017，社区版  \n* 下载 | IDE、Code 和 Team Foundation Server | Visual Studio  \nhttps://visualstudio.microsoft.com/zh-hans/downloads/\n\n注意勾选“Visual C++ tool for Cmake and linux”  \n<div align=center>\n<img src = \"win10-python37-安装dlib19-17/01.png\">\n</div>\n否则会出现下面的问题    \n<div>\n<img src = \"win10-python37-安装dlib19-17/02.png\">\n</div>\n\n## 安装cmake\n``` bash\npip install cmake\n```\n\n## 安装dlib\n方法一：直接使用pip\n``` bash\npip install dlib\n```\n\n方法二：下载dlib源代码，编译、安装\n* dlib C++ Library  \nhttp://dlib.net/\n``` bash\npython setup.py install\n```\n\n\n\n\n\n","slug":"win10-python37-安装dlib19-17","published":1,"updated":"2020-01-05T19:13:24.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507l001s4cvj6rwy8qod","content":"<p><strong> win10 python3.7 安装dlib19.17 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>最近使用了dlib识别人脸68个特征点，教研室的win7很早之前就装的dlib当时没遇到什么坑，回家里在win10上安装“大礼包”竟然把电脑弄蓝屏了，在此记录一下。  </p>\n<div align=\"center\">\n<img src=\"/2019/07/06/win10-python37-安装dlib19-17/00.png\" width=\"300\" height=\"500\">\n</div>\n\n<p>搜索还原点-&gt;点击“配置”启用保护-&gt;创建还原点。  </p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>安装python</li>\n<li>安装VS2017</li>\n<li>安装cmake</li>\n<li>安装dlib/;<h2 id=\"安装python\"><a href=\"#安装python\" class=\"headerlink\" title=\"安装python\"></a>安装python</h2>安装Anaconda环境，顺便安装VScode  </li>\n<li>Home - Anaconda<br><a href=\"https://www.anaconda.com/\" target=\"_blank\" rel=\"noopener\">https://www.anaconda.com/</a></li>\n</ul>\n<h2 id=\"安装VS2017\"><a href=\"#安装VS2017\" class=\"headerlink\" title=\"安装VS2017\"></a>安装VS2017</h2><p>安装Visual Studio2017，社区版  </p>\n<ul>\n<li>下载 | IDE、Code 和 Team Foundation Server | Visual Studio<br><a href=\"https://visualstudio.microsoft.com/zh-hans/downloads/\" target=\"_blank\" rel=\"noopener\">https://visualstudio.microsoft.com/zh-hans/downloads/</a></li>\n</ul>\n<p>注意勾选“Visual C++ tool for Cmake and linux”  </p>\n<div align=\"center\">\n<img src=\"/2019/07/06/win10-python37-安装dlib19-17/01.png\">\n</div>\n否则会出现下面的问题    \n<div>\n<img src=\"/2019/07/06/win10-python37-安装dlib19-17/02.png\">\n</div>\n\n<h2 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install cmake</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装dlib\"><a href=\"#安装dlib\" class=\"headerlink\" title=\"安装dlib\"></a>安装dlib</h2><p>方法一：直接使用pip<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install dlib</span><br></pre></td></tr></table></figure></p>\n<p>方法二：下载dlib源代码，编译、安装</p>\n<ul>\n<li>dlib C++ Library<br><a href=\"http://dlib.net/\" target=\"_blank\" rel=\"noopener\">http://dlib.net/</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> win10 python3.7 安装dlib19.17 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>最近使用了dlib识别人脸68个特征点，教研室的win7很早之前就装的dlib当时没遇到什么坑，回家里在win10上安装“大礼包”竟然把电脑弄蓝屏了，在此记录一下。  </p>\n<div align=\"center\">\n<img src=\"/2019/07/06/win10-python37-安装dlib19-17/00.png\" width=\"300\" height=\"500\">\n</div>\n\n<p>搜索还原点-&gt;点击“配置”启用保护-&gt;创建还原点。  </p>","more":"<the rest of contents | 余下全文>\n\n\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>安装python</li>\n<li>安装VS2017</li>\n<li>安装cmake</li>\n<li>安装dlib/;<h2 id=\"安装python\"><a href=\"#安装python\" class=\"headerlink\" title=\"安装python\"></a>安装python</h2>安装Anaconda环境，顺便安装VScode  </li>\n<li>Home - Anaconda<br><a href=\"https://www.anaconda.com/\" target=\"_blank\" rel=\"noopener\">https://www.anaconda.com/</a></li>\n</ul>\n<h2 id=\"安装VS2017\"><a href=\"#安装VS2017\" class=\"headerlink\" title=\"安装VS2017\"></a>安装VS2017</h2><p>安装Visual Studio2017，社区版  </p>\n<ul>\n<li>下载 | IDE、Code 和 Team Foundation Server | Visual Studio<br><a href=\"https://visualstudio.microsoft.com/zh-hans/downloads/\" target=\"_blank\" rel=\"noopener\">https://visualstudio.microsoft.com/zh-hans/downloads/</a></li>\n</ul>\n<p>注意勾选“Visual C++ tool for Cmake and linux”  </p>\n<div align=\"center\">\n<img src=\"/2019/07/06/win10-python37-安装dlib19-17/01.png\">\n</div>\n否则会出现下面的问题    \n<div>\n<img src=\"/2019/07/06/win10-python37-安装dlib19-17/02.png\">\n</div>\n\n<h2 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install cmake</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装dlib\"><a href=\"#安装dlib\" class=\"headerlink\" title=\"安装dlib\"></a>安装dlib</h2><p>方法一：直接使用pip<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install dlib</span><br></pre></td></tr></table></figure></p>\n<p>方法二：下载dlib源代码，编译、安装</p>\n<ul>\n<li>dlib C++ Library<br><a href=\"http://dlib.net/\" target=\"_blank\" rel=\"noopener\">http://dlib.net/</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</the>"},{"title":"使用VSCode编写LaTeX","date":"2019-07-11T06:40:08.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 安装 texlive\n\n* TeX Live - TeX Users Group  \nhttp://tug.org/texlive/\n\n* LaTeX学习：Texlive 2019和TeX studio的安装及使用 - Mikchy的博客 - CSDN博客  \nhttps://blog.csdn.net/mikchy/article/details/94448707\n\n<img src=\"使用VSCode编写LaTeX/00.png\">\n\n安装时间很长，得一个多小时。\n\n<img src=\"使用VSCode编写LaTeX/01.png\">\n\n## VScode安装插件\n\n在扩展商店安装两个插件\n> * LaTeX Workshop \n> * LaTeX language support\n\n配置VScode的Latex插件，将下面代码放入VScode的setting.json配置文件中。\n\n``` json   \n    \"editor.wordWrap\": \"on\",\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"latex-workshop.latex.clean.enabled\": true,\n    \"latex-workshop.latex.clean.fileTypes\": [\n        \"*.aux\",\n        \"*.bbl\",\n        \"*.blg\",\n        \"*.idx\",\n        \"*.ind\",\n        \"*.lof\",\n        \"*.lot\",\n        \"*.out\",\n        \"*.toc\",\n        \"*.acn\",\n        \"*.acr\",\n        \"*.alg\",\n        \"*.glg\",\n        \"*.glo\",\n        \"*.gls\",\n        \"*.ist\",\n        \"*.fls\",\n        \"*.log\",\n        \"*.fdb_latexmk\",\n        \"*.gz\"\n    ],\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n    \"latex-workshop.latex.recipes\": [\n    {\n            \"name\": \"xelatex\",\n            \"tools\": [\n              \"xelatex\",\n              \"xelatex\"\n            ]\n          },\n        {\n            \"name\": \"xelatexb\",\n            \"tools\": [\n              \"xelatex\",\n              \"bibtex\",\n              \"xelatex\",\n              \"xelatex\"\n            ]\n          },\n        {\n          \"name\": \"latexmk\",\n          \"tools\": [\n            \"latexmk\"\n          ]\n        },\n        {\n          \"name\": \"pdflatex -> bibtex -> pdflatex*2\",\n          \"tools\": [\n            \"pdflatex\",\n            \"bibtex\",\n            \"pdflatex\",\n            \"pdflatex\"\n          ]\n        }\n      ],\n      \"latex-workshop.latex.tools\": [\n        {\n            \"name\": \"xelatex\",\n            \"command\": \"xelatex\",\n            \"args\": [\n                \"-synctex=1\",\n                \"-interaction=nonstopmode\",\n                \"-file-line-error\",\n                \"%DOC%\"\n            ]\n        },\n        {\n          \"name\": \"latexmk\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-synctex=1\",\n            \"-interaction=nonstopmode\",\n            \"-file-line-error\",\n            \"-pdf\",\n            \"%DOC%\"\n          ]\n        },\n        {\n          \"name\": \"pdflatex\",\n          \"command\": \"pdflatex\",\n          \"args\": [\n            \"-synctex=1\",\n            \"-interaction=nonstopmode\",\n            \"-file-line-error\",\n            \"%DOC%\"\n          ]\n        },\n        {\n          \"name\": \"bibtex\",\n          \"command\": \"bibtex\",\n          \"args\": [\n            \"%DOCFILE%\"\n          ]\n        }\n      ],\n      \"latex-workshop.latex.autoClean.run\": \"onBuilt\",\n```\n\n\n\n\n### 编译时提示缺少字体 kpathsea:make_tex: Invalid filename `Adobe Song Std/OT', contains ' '\n\nxeltex默认编译时需要使用到四种adobe的中文字体，系统没有自带，需要手动安装\n\n* /Resources/Fonts - 版本库 - Nd World - CS Projects  \nhttps://cs.fit.edu/code/projects/ndworld/repository/revisions/12/show/Resources/Fonts\n\n* 黑体(AdobeHeitiStd-Regular)\n* 宋体(AdobeSongStd-Light)\n* 仿宋(AdobeFangsongStd-Regular)\n* 楷体(AdobeKaitiStd-Regular)\n\n目录\n* C:\\Windows\\Fonts\n ","source":"_posts/使用VSCode编写LaTeX.md","raw":"---\ntitle: 使用VSCode编写LaTeX\ndate: 2019-07-11 14:40:08\ntags:\n  - Latex\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 安装 texlive\n\n* TeX Live - TeX Users Group  \nhttp://tug.org/texlive/\n\n* LaTeX学习：Texlive 2019和TeX studio的安装及使用 - Mikchy的博客 - CSDN博客  \nhttps://blog.csdn.net/mikchy/article/details/94448707\n\n<img src=\"使用VSCode编写LaTeX/00.png\">\n\n安装时间很长，得一个多小时。\n\n<img src=\"使用VSCode编写LaTeX/01.png\">\n\n## VScode安装插件\n\n在扩展商店安装两个插件\n> * LaTeX Workshop \n> * LaTeX language support\n\n配置VScode的Latex插件，将下面代码放入VScode的setting.json配置文件中。\n\n``` json   \n    \"editor.wordWrap\": \"on\",\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"latex-workshop.latex.clean.enabled\": true,\n    \"latex-workshop.latex.clean.fileTypes\": [\n        \"*.aux\",\n        \"*.bbl\",\n        \"*.blg\",\n        \"*.idx\",\n        \"*.ind\",\n        \"*.lof\",\n        \"*.lot\",\n        \"*.out\",\n        \"*.toc\",\n        \"*.acn\",\n        \"*.acr\",\n        \"*.alg\",\n        \"*.glg\",\n        \"*.glo\",\n        \"*.gls\",\n        \"*.ist\",\n        \"*.fls\",\n        \"*.log\",\n        \"*.fdb_latexmk\",\n        \"*.gz\"\n    ],\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n    \"latex-workshop.latex.recipes\": [\n    {\n            \"name\": \"xelatex\",\n            \"tools\": [\n              \"xelatex\",\n              \"xelatex\"\n            ]\n          },\n        {\n            \"name\": \"xelatexb\",\n            \"tools\": [\n              \"xelatex\",\n              \"bibtex\",\n              \"xelatex\",\n              \"xelatex\"\n            ]\n          },\n        {\n          \"name\": \"latexmk\",\n          \"tools\": [\n            \"latexmk\"\n          ]\n        },\n        {\n          \"name\": \"pdflatex -> bibtex -> pdflatex*2\",\n          \"tools\": [\n            \"pdflatex\",\n            \"bibtex\",\n            \"pdflatex\",\n            \"pdflatex\"\n          ]\n        }\n      ],\n      \"latex-workshop.latex.tools\": [\n        {\n            \"name\": \"xelatex\",\n            \"command\": \"xelatex\",\n            \"args\": [\n                \"-synctex=1\",\n                \"-interaction=nonstopmode\",\n                \"-file-line-error\",\n                \"%DOC%\"\n            ]\n        },\n        {\n          \"name\": \"latexmk\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-synctex=1\",\n            \"-interaction=nonstopmode\",\n            \"-file-line-error\",\n            \"-pdf\",\n            \"%DOC%\"\n          ]\n        },\n        {\n          \"name\": \"pdflatex\",\n          \"command\": \"pdflatex\",\n          \"args\": [\n            \"-synctex=1\",\n            \"-interaction=nonstopmode\",\n            \"-file-line-error\",\n            \"%DOC%\"\n          ]\n        },\n        {\n          \"name\": \"bibtex\",\n          \"command\": \"bibtex\",\n          \"args\": [\n            \"%DOCFILE%\"\n          ]\n        }\n      ],\n      \"latex-workshop.latex.autoClean.run\": \"onBuilt\",\n```\n\n\n\n\n### 编译时提示缺少字体 kpathsea:make_tex: Invalid filename `Adobe Song Std/OT', contains ' '\n\nxeltex默认编译时需要使用到四种adobe的中文字体，系统没有自带，需要手动安装\n\n* /Resources/Fonts - 版本库 - Nd World - CS Projects  \nhttps://cs.fit.edu/code/projects/ndworld/repository/revisions/12/show/Resources/Fonts\n\n* 黑体(AdobeHeitiStd-Regular)\n* 宋体(AdobeSongStd-Light)\n* 仿宋(AdobeFangsongStd-Regular)\n* 楷体(AdobeKaitiStd-Regular)\n\n目录\n* C:\\Windows\\Fonts\n ","slug":"使用VSCode编写LaTeX","published":1,"updated":"2020-01-05T19:13:24.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507m001u4cvj4k5nmjjp","content":"<p><strong> 使用VSCode编写LaTeX </strong> <excerpt in index | 首页摘要></excerpt></p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"安装-texlive\"><a href=\"#安装-texlive\" class=\"headerlink\" title=\"安装 texlive\"></a>安装 texlive</h2><ul>\n<li><p>TeX Live - TeX Users Group<br><a href=\"http://tug.org/texlive/\" target=\"_blank\" rel=\"noopener\">http://tug.org/texlive/</a></p>\n</li>\n<li><p>LaTeX学习：Texlive 2019和TeX studio的安装及使用 - Mikchy的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/mikchy/article/details/94448707\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mikchy/article/details/94448707</a></p>\n</li>\n</ul>\n<p><img src=\"/2019/07/11/使用VSCode编写LaTeX/00.png\"></p>\n<p>安装时间很长，得一个多小时。</p>\n<p><img src=\"/2019/07/11/使用VSCode编写LaTeX/01.png\"></p>\n<h2 id=\"VScode安装插件\"><a href=\"#VScode安装插件\" class=\"headerlink\" title=\"VScode安装插件\"></a>VScode安装插件</h2><p>在扩展商店安装两个插件</p>\n<blockquote>\n<ul>\n<li>LaTeX Workshop </li>\n<li>LaTeX language support</li>\n</ul>\n</blockquote>\n<p>配置VScode的Latex插件，将下面代码放入VScode的setting.json配置文件中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"editor.wordWrap\": \"on\",</span><br><span class=\"line\">\"workbench.startupEditor\": \"newUntitledFile\",</span><br><span class=\"line\">\"latex-workshop.latex.clean.enabled\": true,</span><br><span class=\"line\">\"latex-workshop.latex.clean.fileTypes\": [</span><br><span class=\"line\">    \"*.aux\",</span><br><span class=\"line\">    \"*.bbl\",</span><br><span class=\"line\">    \"*.blg\",</span><br><span class=\"line\">    \"*.idx\",</span><br><span class=\"line\">    \"*.ind\",</span><br><span class=\"line\">    \"*.lof\",</span><br><span class=\"line\">    \"*.lot\",</span><br><span class=\"line\">    \"*.out\",</span><br><span class=\"line\">    \"*.toc\",</span><br><span class=\"line\">    \"*.acn\",</span><br><span class=\"line\">    \"*.acr\",</span><br><span class=\"line\">    \"*.alg\",</span><br><span class=\"line\">    \"*.glg\",</span><br><span class=\"line\">    \"*.glo\",</span><br><span class=\"line\">    \"*.gls\",</span><br><span class=\"line\">    \"*.ist\",</span><br><span class=\"line\">    \"*.fls\",</span><br><span class=\"line\">    \"*.log\",</span><br><span class=\"line\">    \"*.fdb_latexmk\",</span><br><span class=\"line\">    <span class=\"string\">\"*.gz\"</span></span><br><span class=\"line\">],</span><br><span class=\"line\">\"latex-workshop.view.pdf.viewer\": \"tab\",</span><br><span class=\"line\">\"latex-workshop.latex.recipes\": [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xelatexb\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"latexmk\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"latexmk\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"pdflatex -&gt; bibtex -&gt; pdflatex*2\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pdflatex\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  \"latex-workshop.latex.tools\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"-synctex=1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"-interaction=nonstopmode\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"-file-line-error\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"%DOC%\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"latexmk\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"latexmk\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"-synctex=1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-interaction=nonstopmode\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-file-line-error\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-pdf\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"%DOC%\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"-synctex=1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-interaction=nonstopmode\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-file-line-error\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"%DOC%\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"%DOCFILE%\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  \"latex-workshop.latex.autoClean.run\": \"onBuilt\",</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译时提示缺少字体-kpathsea-make-tex-Invalid-filename-Adobe-Song-Std-OT’-contains-‘-‘\"><a href=\"#编译时提示缺少字体-kpathsea-make-tex-Invalid-filename-Adobe-Song-Std-OT’-contains-‘-‘\" class=\"headerlink\" title=\"编译时提示缺少字体 kpathsea:make_tex: Invalid filename `Adobe Song Std/OT’, contains ‘ ‘\"></a>编译时提示缺少字体 kpathsea:make_tex: Invalid filename `Adobe Song Std/OT’, contains ‘ ‘</h3><p>xeltex默认编译时需要使用到四种adobe的中文字体，系统没有自带，需要手动安装</p>\n<ul>\n<li><p>/Resources/Fonts - 版本库 - Nd World - CS Projects<br><a href=\"https://cs.fit.edu/code/projects/ndworld/repository/revisions/12/show/Resources/Fonts\" target=\"_blank\" rel=\"noopener\">https://cs.fit.edu/code/projects/ndworld/repository/revisions/12/show/Resources/Fonts</a></p>\n</li>\n<li><p>黑体(AdobeHeitiStd-Regular)</p>\n</li>\n<li>宋体(AdobeSongStd-Light)</li>\n<li>仿宋(AdobeFangsongStd-Regular)</li>\n<li>楷体(AdobeKaitiStd-Regular)</li>\n</ul>\n<p>目录</p>\n<ul>\n<li>C:\\Windows\\Fonts</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 使用VSCode编写LaTeX </strong> <excerpt in index | 首页摘要></excerpt></p>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"安装-texlive\"><a href=\"#安装-texlive\" class=\"headerlink\" title=\"安装 texlive\"></a>安装 texlive</h2><ul>\n<li><p>TeX Live - TeX Users Group<br><a href=\"http://tug.org/texlive/\" target=\"_blank\" rel=\"noopener\">http://tug.org/texlive/</a></p>\n</li>\n<li><p>LaTeX学习：Texlive 2019和TeX studio的安装及使用 - Mikchy的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/mikchy/article/details/94448707\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mikchy/article/details/94448707</a></p>\n</li>\n</ul>\n<p><img src=\"/2019/07/11/使用VSCode编写LaTeX/00.png\"></p>\n<p>安装时间很长，得一个多小时。</p>\n<p><img src=\"/2019/07/11/使用VSCode编写LaTeX/01.png\"></p>\n<h2 id=\"VScode安装插件\"><a href=\"#VScode安装插件\" class=\"headerlink\" title=\"VScode安装插件\"></a>VScode安装插件</h2><p>在扩展商店安装两个插件</p>\n<blockquote>\n<ul>\n<li>LaTeX Workshop </li>\n<li>LaTeX language support</li>\n</ul>\n</blockquote>\n<p>配置VScode的Latex插件，将下面代码放入VScode的setting.json配置文件中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"editor.wordWrap\": \"on\",</span><br><span class=\"line\">\"workbench.startupEditor\": \"newUntitledFile\",</span><br><span class=\"line\">\"latex-workshop.latex.clean.enabled\": true,</span><br><span class=\"line\">\"latex-workshop.latex.clean.fileTypes\": [</span><br><span class=\"line\">    \"*.aux\",</span><br><span class=\"line\">    \"*.bbl\",</span><br><span class=\"line\">    \"*.blg\",</span><br><span class=\"line\">    \"*.idx\",</span><br><span class=\"line\">    \"*.ind\",</span><br><span class=\"line\">    \"*.lof\",</span><br><span class=\"line\">    \"*.lot\",</span><br><span class=\"line\">    \"*.out\",</span><br><span class=\"line\">    \"*.toc\",</span><br><span class=\"line\">    \"*.acn\",</span><br><span class=\"line\">    \"*.acr\",</span><br><span class=\"line\">    \"*.alg\",</span><br><span class=\"line\">    \"*.glg\",</span><br><span class=\"line\">    \"*.glo\",</span><br><span class=\"line\">    \"*.gls\",</span><br><span class=\"line\">    \"*.ist\",</span><br><span class=\"line\">    \"*.fls\",</span><br><span class=\"line\">    \"*.log\",</span><br><span class=\"line\">    \"*.fdb_latexmk\",</span><br><span class=\"line\">    <span class=\"string\">\"*.gz\"</span></span><br><span class=\"line\">],</span><br><span class=\"line\">\"latex-workshop.view.pdf.viewer\": \"tab\",</span><br><span class=\"line\">\"latex-workshop.latex.recipes\": [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xelatexb\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"xelatex\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"latexmk\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"latexmk\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"pdflatex -&gt; bibtex -&gt; pdflatex*2\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"tools\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pdflatex\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  \"latex-workshop.latex.tools\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"xelatex\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"-synctex=1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"-interaction=nonstopmode\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"-file-line-error\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"%DOC%\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"latexmk\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"latexmk\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"-synctex=1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-interaction=nonstopmode\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-file-line-error\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-pdf\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"%DOC%\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"pdflatex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"-synctex=1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-interaction=nonstopmode\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"-file-line-error\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"%DOC%\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"bibtex\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"%DOCFILE%\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  \"latex-workshop.latex.autoClean.run\": \"onBuilt\",</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译时提示缺少字体-kpathsea-make-tex-Invalid-filename-Adobe-Song-Std-OT’-contains-‘-‘\"><a href=\"#编译时提示缺少字体-kpathsea-make-tex-Invalid-filename-Adobe-Song-Std-OT’-contains-‘-‘\" class=\"headerlink\" title=\"编译时提示缺少字体 kpathsea:make_tex: Invalid filename `Adobe Song Std/OT’, contains ‘ ‘\"></a>编译时提示缺少字体 kpathsea:make_tex: Invalid filename `Adobe Song Std/OT’, contains ‘ ‘</h3><p>xeltex默认编译时需要使用到四种adobe的中文字体，系统没有自带，需要手动安装</p>\n<ul>\n<li><p>/Resources/Fonts - 版本库 - Nd World - CS Projects<br><a href=\"https://cs.fit.edu/code/projects/ndworld/repository/revisions/12/show/Resources/Fonts\" target=\"_blank\" rel=\"noopener\">https://cs.fit.edu/code/projects/ndworld/repository/revisions/12/show/Resources/Fonts</a></p>\n</li>\n<li><p>黑体(AdobeHeitiStd-Regular)</p>\n</li>\n<li>宋体(AdobeSongStd-Light)</li>\n<li>仿宋(AdobeFangsongStd-Regular)</li>\n<li>楷体(AdobeKaitiStd-Regular)</li>\n</ul>\n<p>目录</p>\n<ul>\n<li>C:\\Windows\\Fonts</li>\n</ul>\n</the>"},{"title":"使用dlib的imglab工具制作训练集与测试","date":"2019-07-06T14:30:06.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n在使用dlib进行人脸识别和关键点检测的demo中，官方提供了训练好的数据：正脸检测器dlib.get_frontal_face_detector()\n和特征点的训练库shape_predictor_68_face_landmarks.dat，如果想对自己的图形进行识别和关键点检测，可以使用dlib自带的imglab数据库标准工具制作训练集，再通过dlib的官方代码训练出模型，最后对模型进行测试。\n\n* dlib train_object_detector  \nhttp://dlib.net/train_object_detector.py.html\n\n* dlib train_shape_predictor  \nhttp://dlib.net/train_shape_predictor.py.html\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 使用dlib的imglab工具标注数据集\n下载官方源码  \n* dlib C++ Library  \nhttp://dlib.net/\n\n在下载好的dlib官方文件.\\tools\\imglab目录下，新建文件夹build并进入  \n``` bash\n.\\dlib-19.17\\tools\\imglab> mkdir build\n>cd build\n```\ncmake\n``` bash\n.\\dlib-19.17\\tools\\imglab\\build> cmake ..\n> cmake --build . --config Release \n```\n\n在images文件夹下放入需要标注的图像，生成mydataset.xml文件  \n``` bash\n.\\dlib-19.17\\tools\\imglab\\build> Release\\imglab.exe -c mydataset.xml images\n```\n打开imglab标注软件，进行标注\n``` bash\n> imglab mydataset.xml\n```\n<div align=center>\n<img src = \"使用dlib的imglab工具制作训练集与测试/01.png\">\n</div>\n\n## imglab工具使用\n| 功能 | 操作 |\n| :-----| :--- | \n| 标注物体 | 在Next Label输入标记值，shift+左键画框 |\n| 特征点标注 | 先选中长方形的框，再shift+左键依次标记 |\n|  上/下一张图片| 键盘的up和down     |\n| 放大或者缩小 |ctrl+滚动轴                  |\n| 删除标记框 |  选中框 + delete |                    \n## 标注好后的mydataset.xml文件\n``` xml\n<?xml version='1.0' encoding='ISO-8859-1'?>\n<?xml-stylesheet type='text/xsl' href='image_metadata_stylesheet.xsl'?>\n<dataset>\n<name>imglab dataset</name>\n<comment>Created by imglab tool.</comment>\n<images>\n  <image file='.\\data\\0000.jpg'>\n    <box top='47' left='196' width='261' height='302'>\n      <label>magic cube</label>\n      <part name='0' x='207' y='63'/>\n      <part name='1' x='415' y='58'/>\n      <part name='2' x='207' y='245'/>\n      <part name='3' x='443' y='238'/>\n      <part name='4' x='224' y='339'/>\n      <part name='5' x='409' y='333'/>\n    </box>\n  </image>\n  ...\n</images>\n</dataset> \n```\n\n## 训练\n\n使用dlib提供的官方代码train_object_detector.py训练检测器模型，得到detector.svm模型文件，该检测原理基于滑窗、HOG和SVM  \n\n* dlib train_object_detector  \nhttp://dlib.net/train_object_detector.py.html\n\n``` python\noptions = dlib.simple_object_detector_training_options()\n# 左右对称\noptions.add_left_right_image_flips = True\n# SVM γ\noptions.C = 5\n\noptions.num_threads = 4\noptions.be_verbose = True\n\ntraining_xml_path = os.path.join(faces_folder, \"mydataset.xml\")\ndlib.train_simple_object_detector(training_xml_path, \"detector.svm\", options)\n\n```\n\n\n使用dlib提供的官方代码train_shape_predictor.py训练关键点检测模型，得到predictor.dat模型文件\n\n* dlib train_shape_predictor  \nhttp://dlib.net/train_shape_predictor.py.html\n\n算法基于《One Millisecond Face Alignment with an Ensemble of Regression Trees》这篇论文实现的，以gbdt为基础  \n* GBDT的那些事儿 - 知乎  \nhttps://zhuanlan.zhihu.com/p/30711812\n\n``` bash\noptions = dlib.shape_predictor_training_options()\n# 对训练样本随机变形扩大样本的倍数，通常大一点会好\noptions.oversampling_amount = 300\n# 正则项\noptions.nu = 0.05\n# 树的深度\noptions.tree_depth = 2\noptions.be_verbose = True\n\ntraining_xml_path = os.path.join(faces_folder, \"mydataset.xml\")\ndlib.train_shape_predictor(training_xml_path, \"predictor.dat\", options)\n```\n\n## 测试\n\n```python\nimport numpy as np\nimport cv2\nimport dlib\n\ndetector = dlib.simple_object_detector(\"detector.svm\")\npredictor = dlib.shape_predictor('predictor.dat')\n\ncap = cv2.VideoCapture(0)\nret, img = cap.read()\n\nwhile ret:\n    ret, img = cap.read()\n    # 灰度\n    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    # 识别结果rects\n    rects = detector(img_gray, 0)\n    for (i,rect) in enumerate(rects):\n        x1, y1, x2, y2, w, h = rect.left(), rect.top(), rect.right() + \\\n            1, rect.bottom() + 1, rect.width(), rect.height()\n        cv2.rectangle(img, (x1, y1), (x1 + w, y1 + h), (205, 92, 92), 2)\n        cv2.putText(img, \"magic cube\", (x1 - 20, y1 - 20), cv2.FONT_HERSHEY_TRIPLEX, 0.6, (205, 92, 92), 2)\n\n        landmarks = np.matrix([[p.x, p.y] for p in predictor(img,rects[i]).parts()])\n        for idx, point in enumerate(landmarks):\n            # 六个点的坐标\n            pos = (point[0, 0], point[0, 1])\n            print(idx, pos)\n\n            # 利用cv2.circle给每个特征点画一个圈，共6个\n            cv2.circle(img, pos, 5, color=(0, 255, 0))\n            # 利用cv2.putText输出1-6\n            font = cv2.FONT_HERSHEY_SIMPLEX\n            cv2.putText(img, str(idx+1), pos, font, 0.8, (0, 0, 255), 1,cv2.LINE_AA)\n\n    cv2.namedWindow(\"img\", 2)\n    cv2.imshow(\"img\", img)\n    key = cv2.waitKey(2)\n\n    if key == ord(\"q\"):\n        break\n\n```\n<div align=center>\n<img src = \"使用dlib的imglab工具制作训练集与测试/00.png\">\n</div>\n\n## 参考博客\n\n* win10下使用dlib的imglab工具标注数据集 - 叶扬llq - CSDN博客  \nhttps://blog.csdn.net/qq_15715657/article/details/81504253\n\n\n\n","source":"_posts/使用dlib的imglab工具制作训练集与测试.md","raw":"---\ntitle: 使用dlib的imglab工具制作训练集与测试\ndate: 2019-07-06 22:30:06\ntags:\n  - dlib\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n在使用dlib进行人脸识别和关键点检测的demo中，官方提供了训练好的数据：正脸检测器dlib.get_frontal_face_detector()\n和特征点的训练库shape_predictor_68_face_landmarks.dat，如果想对自己的图形进行识别和关键点检测，可以使用dlib自带的imglab数据库标准工具制作训练集，再通过dlib的官方代码训练出模型，最后对模型进行测试。\n\n* dlib train_object_detector  \nhttp://dlib.net/train_object_detector.py.html\n\n* dlib train_shape_predictor  \nhttp://dlib.net/train_shape_predictor.py.html\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 使用dlib的imglab工具标注数据集\n下载官方源码  \n* dlib C++ Library  \nhttp://dlib.net/\n\n在下载好的dlib官方文件.\\tools\\imglab目录下，新建文件夹build并进入  \n``` bash\n.\\dlib-19.17\\tools\\imglab> mkdir build\n>cd build\n```\ncmake\n``` bash\n.\\dlib-19.17\\tools\\imglab\\build> cmake ..\n> cmake --build . --config Release \n```\n\n在images文件夹下放入需要标注的图像，生成mydataset.xml文件  \n``` bash\n.\\dlib-19.17\\tools\\imglab\\build> Release\\imglab.exe -c mydataset.xml images\n```\n打开imglab标注软件，进行标注\n``` bash\n> imglab mydataset.xml\n```\n<div align=center>\n<img src = \"使用dlib的imglab工具制作训练集与测试/01.png\">\n</div>\n\n## imglab工具使用\n| 功能 | 操作 |\n| :-----| :--- | \n| 标注物体 | 在Next Label输入标记值，shift+左键画框 |\n| 特征点标注 | 先选中长方形的框，再shift+左键依次标记 |\n|  上/下一张图片| 键盘的up和down     |\n| 放大或者缩小 |ctrl+滚动轴                  |\n| 删除标记框 |  选中框 + delete |                    \n## 标注好后的mydataset.xml文件\n``` xml\n<?xml version='1.0' encoding='ISO-8859-1'?>\n<?xml-stylesheet type='text/xsl' href='image_metadata_stylesheet.xsl'?>\n<dataset>\n<name>imglab dataset</name>\n<comment>Created by imglab tool.</comment>\n<images>\n  <image file='.\\data\\0000.jpg'>\n    <box top='47' left='196' width='261' height='302'>\n      <label>magic cube</label>\n      <part name='0' x='207' y='63'/>\n      <part name='1' x='415' y='58'/>\n      <part name='2' x='207' y='245'/>\n      <part name='3' x='443' y='238'/>\n      <part name='4' x='224' y='339'/>\n      <part name='5' x='409' y='333'/>\n    </box>\n  </image>\n  ...\n</images>\n</dataset> \n```\n\n## 训练\n\n使用dlib提供的官方代码train_object_detector.py训练检测器模型，得到detector.svm模型文件，该检测原理基于滑窗、HOG和SVM  \n\n* dlib train_object_detector  \nhttp://dlib.net/train_object_detector.py.html\n\n``` python\noptions = dlib.simple_object_detector_training_options()\n# 左右对称\noptions.add_left_right_image_flips = True\n# SVM γ\noptions.C = 5\n\noptions.num_threads = 4\noptions.be_verbose = True\n\ntraining_xml_path = os.path.join(faces_folder, \"mydataset.xml\")\ndlib.train_simple_object_detector(training_xml_path, \"detector.svm\", options)\n\n```\n\n\n使用dlib提供的官方代码train_shape_predictor.py训练关键点检测模型，得到predictor.dat模型文件\n\n* dlib train_shape_predictor  \nhttp://dlib.net/train_shape_predictor.py.html\n\n算法基于《One Millisecond Face Alignment with an Ensemble of Regression Trees》这篇论文实现的，以gbdt为基础  \n* GBDT的那些事儿 - 知乎  \nhttps://zhuanlan.zhihu.com/p/30711812\n\n``` bash\noptions = dlib.shape_predictor_training_options()\n# 对训练样本随机变形扩大样本的倍数，通常大一点会好\noptions.oversampling_amount = 300\n# 正则项\noptions.nu = 0.05\n# 树的深度\noptions.tree_depth = 2\noptions.be_verbose = True\n\ntraining_xml_path = os.path.join(faces_folder, \"mydataset.xml\")\ndlib.train_shape_predictor(training_xml_path, \"predictor.dat\", options)\n```\n\n## 测试\n\n```python\nimport numpy as np\nimport cv2\nimport dlib\n\ndetector = dlib.simple_object_detector(\"detector.svm\")\npredictor = dlib.shape_predictor('predictor.dat')\n\ncap = cv2.VideoCapture(0)\nret, img = cap.read()\n\nwhile ret:\n    ret, img = cap.read()\n    # 灰度\n    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    # 识别结果rects\n    rects = detector(img_gray, 0)\n    for (i,rect) in enumerate(rects):\n        x1, y1, x2, y2, w, h = rect.left(), rect.top(), rect.right() + \\\n            1, rect.bottom() + 1, rect.width(), rect.height()\n        cv2.rectangle(img, (x1, y1), (x1 + w, y1 + h), (205, 92, 92), 2)\n        cv2.putText(img, \"magic cube\", (x1 - 20, y1 - 20), cv2.FONT_HERSHEY_TRIPLEX, 0.6, (205, 92, 92), 2)\n\n        landmarks = np.matrix([[p.x, p.y] for p in predictor(img,rects[i]).parts()])\n        for idx, point in enumerate(landmarks):\n            # 六个点的坐标\n            pos = (point[0, 0], point[0, 1])\n            print(idx, pos)\n\n            # 利用cv2.circle给每个特征点画一个圈，共6个\n            cv2.circle(img, pos, 5, color=(0, 255, 0))\n            # 利用cv2.putText输出1-6\n            font = cv2.FONT_HERSHEY_SIMPLEX\n            cv2.putText(img, str(idx+1), pos, font, 0.8, (0, 0, 255), 1,cv2.LINE_AA)\n\n    cv2.namedWindow(\"img\", 2)\n    cv2.imshow(\"img\", img)\n    key = cv2.waitKey(2)\n\n    if key == ord(\"q\"):\n        break\n\n```\n<div align=center>\n<img src = \"使用dlib的imglab工具制作训练集与测试/00.png\">\n</div>\n\n## 参考博客\n\n* win10下使用dlib的imglab工具标注数据集 - 叶扬llq - CSDN博客  \nhttps://blog.csdn.net/qq_15715657/article/details/81504253\n\n\n\n","slug":"使用dlib的imglab工具制作训练集与测试","published":1,"updated":"2020-01-05T19:13:24.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507n001w4cvjxauk4qii","content":"<p><strong> 使用dlib的imglab工具制作训练集与测试 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>在使用dlib进行人脸识别和关键点检测的demo中，官方提供了训练好的数据：正脸检测器dlib.get_frontal_face_detector()<br>和特征点的训练库shape_predictor_68_face_landmarks.dat，如果想对自己的图形进行识别和关键点检测，可以使用dlib自带的imglab数据库标准工具制作训练集，再通过dlib的官方代码训练出模型，最后对模型进行测试。</p>\n<ul>\n<li><p>dlib train_object_detector<br><a href=\"http://dlib.net/train_object_detector.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_object_detector.py.html</a></p>\n</li>\n<li><p>dlib train_shape_predictor<br><a href=\"http://dlib.net/train_shape_predictor.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_shape_predictor.py.html</a></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"使用dlib的imglab工具标注数据集\"><a href=\"#使用dlib的imglab工具标注数据集\" class=\"headerlink\" title=\"使用dlib的imglab工具标注数据集\"></a>使用dlib的imglab工具标注数据集</h2><p>下载官方源码  </p>\n<ul>\n<li>dlib C++ Library<br><a href=\"http://dlib.net/\" target=\"_blank\" rel=\"noopener\">http://dlib.net/</a></li>\n</ul>\n<p>在下载好的dlib官方文件.\\tools\\imglab目录下，新建文件夹build并进入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\dlib-19.17\\tools\\imglab&gt; mkdir build</span><br><span class=\"line\">&gt;<span class=\"built_in\">cd</span> build</span><br></pre></td></tr></table></figure></p>\n<p>cmake<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\dlib-19.17\\tools\\imglab\\build&gt; cmake ..</span><br><span class=\"line\">&gt; cmake --build . --config Release</span><br></pre></td></tr></table></figure></p>\n<p>在images文件夹下放入需要标注的图像，生成mydataset.xml文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\dlib-19.17\\tools\\imglab\\build&gt; Release\\imglab.exe -c mydataset.xml images</span><br></pre></td></tr></table></figure></p>\n<p>打开imglab标注软件，进行标注<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; imglab mydataset.xml</span><br></pre></td></tr></table></figure></p>\n<div align=\"center\">\n<img src=\"/2019/07/06/使用dlib的imglab工具制作训练集与测试/01.png\">\n</div>\n\n<h2 id=\"imglab工具使用\"><a href=\"#imglab工具使用\" class=\"headerlink\" title=\"imglab工具使用\"></a>imglab工具使用</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">标注物体</td>\n<td style=\"text-align:left\">在Next Label输入标记值，shift+左键画框</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">特征点标注</td>\n<td style=\"text-align:left\">先选中长方形的框，再shift+左键依次标记</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">上/下一张图片</td>\n<td style=\"text-align:left\">键盘的up和down</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">放大或者缩小</td>\n<td style=\"text-align:left\">ctrl+滚动轴</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除标记框</td>\n<td style=\"text-align:left\">选中框 + delete</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"标注好后的mydataset-xml文件\"><a href=\"#标注好后的mydataset-xml文件\" class=\"headerlink\" title=\"标注好后的mydataset.xml文件\"></a>标注好后的mydataset.xml文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml-stylesheet type='text/xsl' href='image_metadata_stylesheet.xsl'?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>imglab dataset<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comment</span>&gt;</span>Created by imglab tool.<span class=\"tag\">&lt;/<span class=\"name\">comment</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">images</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">file</span>=<span class=\"string\">'.\\data\\0000.jpg'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">box</span> <span class=\"attr\">top</span>=<span class=\"string\">'47'</span> <span class=\"attr\">left</span>=<span class=\"string\">'196'</span> <span class=\"attr\">width</span>=<span class=\"string\">'261'</span> <span class=\"attr\">height</span>=<span class=\"string\">'302'</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>magic cube<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'0'</span> <span class=\"attr\">x</span>=<span class=\"string\">'207'</span> <span class=\"attr\">y</span>=<span class=\"string\">'63'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'1'</span> <span class=\"attr\">x</span>=<span class=\"string\">'415'</span> <span class=\"attr\">y</span>=<span class=\"string\">'58'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'2'</span> <span class=\"attr\">x</span>=<span class=\"string\">'207'</span> <span class=\"attr\">y</span>=<span class=\"string\">'245'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'3'</span> <span class=\"attr\">x</span>=<span class=\"string\">'443'</span> <span class=\"attr\">y</span>=<span class=\"string\">'238'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'4'</span> <span class=\"attr\">x</span>=<span class=\"string\">'224'</span> <span class=\"attr\">y</span>=<span class=\"string\">'339'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'5'</span> <span class=\"attr\">x</span>=<span class=\"string\">'409'</span> <span class=\"attr\">y</span>=<span class=\"string\">'333'</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">box</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">images</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><p>使用dlib提供的官方代码train_object_detector.py训练检测器模型，得到detector.svm模型文件，该检测原理基于滑窗、HOG和SVM  </p>\n<ul>\n<li>dlib train_object_detector<br><a href=\"http://dlib.net/train_object_detector.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_object_detector.py.html</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = dlib.simple_object_detector_training_options()</span><br><span class=\"line\"><span class=\"comment\"># 左右对称</span></span><br><span class=\"line\">options.add_left_right_image_flips = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\"># SVM γ</span></span><br><span class=\"line\">options.C = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">options.num_threads = <span class=\"number\">4</span></span><br><span class=\"line\">options.be_verbose = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = os.path.join(faces_folder, <span class=\"string\">\"mydataset.xml\"</span>)</span><br><span class=\"line\">dlib.train_simple_object_detector(training_xml_path, <span class=\"string\">\"detector.svm\"</span>, options)</span><br></pre></td></tr></table></figure>\n<p>使用dlib提供的官方代码train_shape_predictor.py训练关键点检测模型，得到predictor.dat模型文件</p>\n<ul>\n<li>dlib train_shape_predictor<br><a href=\"http://dlib.net/train_shape_predictor.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_shape_predictor.py.html</a></li>\n</ul>\n<p>算法基于《One Millisecond Face Alignment with an Ensemble of Regression Trees》这篇论文实现的，以gbdt为基础  </p>\n<ul>\n<li>GBDT的那些事儿 - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/30711812\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/30711812</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = dlib.shape_predictor_training_options()</span><br><span class=\"line\"><span class=\"comment\"># 对训练样本随机变形扩大样本的倍数，通常大一点会好</span></span><br><span class=\"line\">options.oversampling_amount = 300</span><br><span class=\"line\"><span class=\"comment\"># 正则项</span></span><br><span class=\"line\">options.nu = 0.05</span><br><span class=\"line\"><span class=\"comment\"># 树的深度</span></span><br><span class=\"line\">options.tree_depth = 2</span><br><span class=\"line\">options.be_verbose = True</span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = os.path.join(faces_folder, <span class=\"string\">\"mydataset.xml\"</span>)</span><br><span class=\"line\">dlib.train_shape_predictor(training_xml_path, <span class=\"string\">\"predictor.dat\"</span>, options)</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> dlib</span><br><span class=\"line\"></span><br><span class=\"line\">detector = dlib.simple_object_detector(<span class=\"string\">\"detector.svm\"</span>)</span><br><span class=\"line\">predictor = dlib.shape_predictor(<span class=\"string\">'predictor.dat'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cap = cv2.VideoCapture(<span class=\"number\">0</span>)</span><br><span class=\"line\">ret, img = cap.read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ret:</span><br><span class=\"line\">    ret, img = cap.read()</span><br><span class=\"line\">    <span class=\"comment\"># 灰度</span></span><br><span class=\"line\">    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)</span><br><span class=\"line\">    <span class=\"comment\"># 识别结果rects</span></span><br><span class=\"line\">    rects = detector(img_gray, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i,rect) <span class=\"keyword\">in</span> enumerate(rects):</span><br><span class=\"line\">        x1, y1, x2, y2, w, h = rect.left(), rect.top(), rect.right() + \\</span><br><span class=\"line\">            <span class=\"number\">1</span>, rect.bottom() + <span class=\"number\">1</span>, rect.width(), rect.height()</span><br><span class=\"line\">        cv2.rectangle(img, (x1, y1), (x1 + w, y1 + h), (<span class=\"number\">205</span>, <span class=\"number\">92</span>, <span class=\"number\">92</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">\"magic cube\"</span>, (x1 - <span class=\"number\">20</span>, y1 - <span class=\"number\">20</span>), cv2.FONT_HERSHEY_TRIPLEX, <span class=\"number\">0.6</span>, (<span class=\"number\">205</span>, <span class=\"number\">92</span>, <span class=\"number\">92</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        landmarks = np.matrix([[p.x, p.y] <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> predictor(img,rects[i]).parts()])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, point <span class=\"keyword\">in</span> enumerate(landmarks):</span><br><span class=\"line\">            <span class=\"comment\"># 六个点的坐标</span></span><br><span class=\"line\">            pos = (point[<span class=\"number\">0</span>, <span class=\"number\">0</span>], point[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">            print(idx, pos)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 利用cv2.circle给每个特征点画一个圈，共6个</span></span><br><span class=\"line\">            cv2.circle(img, pos, <span class=\"number\">5</span>, color=(<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">            <span class=\"comment\"># 利用cv2.putText输出1-6</span></span><br><span class=\"line\">            font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class=\"line\">            cv2.putText(img, str(idx+<span class=\"number\">1</span>), pos, font, <span class=\"number\">0.8</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">1</span>,cv2.LINE_AA)</span><br><span class=\"line\"></span><br><span class=\"line\">    cv2.namedWindow(<span class=\"string\">\"img\"</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">\"img\"</span>, img)</span><br><span class=\"line\">    key = cv2.waitKey(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> key == ord(<span class=\"string\">\"q\"</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\">\n<img src=\"/2019/07/06/使用dlib的imglab工具制作训练集与测试/00.png\">\n</div>\n\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>win10下使用dlib的imglab工具标注数据集 - 叶扬llq - CSDN博客<br><a href=\"https://blog.csdn.net/qq_15715657/article/details/81504253\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_15715657/article/details/81504253</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 使用dlib的imglab工具制作训练集与测试 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>在使用dlib进行人脸识别和关键点检测的demo中，官方提供了训练好的数据：正脸检测器dlib.get_frontal_face_detector()<br>和特征点的训练库shape_predictor_68_face_landmarks.dat，如果想对自己的图形进行识别和关键点检测，可以使用dlib自带的imglab数据库标准工具制作训练集，再通过dlib的官方代码训练出模型，最后对模型进行测试。</p>\n<ul>\n<li><p>dlib train_object_detector<br><a href=\"http://dlib.net/train_object_detector.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_object_detector.py.html</a></p>\n</li>\n<li><p>dlib train_shape_predictor<br><a href=\"http://dlib.net/train_shape_predictor.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_shape_predictor.py.html</a></p>\n</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"使用dlib的imglab工具标注数据集\"><a href=\"#使用dlib的imglab工具标注数据集\" class=\"headerlink\" title=\"使用dlib的imglab工具标注数据集\"></a>使用dlib的imglab工具标注数据集</h2><p>下载官方源码  </p>\n<ul>\n<li>dlib C++ Library<br><a href=\"http://dlib.net/\" target=\"_blank\" rel=\"noopener\">http://dlib.net/</a></li>\n</ul>\n<p>在下载好的dlib官方文件.\\tools\\imglab目录下，新建文件夹build并进入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\dlib-19.17\\tools\\imglab&gt; mkdir build</span><br><span class=\"line\">&gt;<span class=\"built_in\">cd</span> build</span><br></pre></td></tr></table></figure></p>\n<p>cmake<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\dlib-19.17\\tools\\imglab\\build&gt; cmake ..</span><br><span class=\"line\">&gt; cmake --build . --config Release</span><br></pre></td></tr></table></figure></p>\n<p>在images文件夹下放入需要标注的图像，生成mydataset.xml文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\dlib-19.17\\tools\\imglab\\build&gt; Release\\imglab.exe -c mydataset.xml images</span><br></pre></td></tr></table></figure></p>\n<p>打开imglab标注软件，进行标注<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; imglab mydataset.xml</span><br></pre></td></tr></table></figure></p>\n<div align=\"center\">\n<img src=\"/2019/07/06/使用dlib的imglab工具制作训练集与测试/01.png\">\n</div>\n\n<h2 id=\"imglab工具使用\"><a href=\"#imglab工具使用\" class=\"headerlink\" title=\"imglab工具使用\"></a>imglab工具使用</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">标注物体</td>\n<td style=\"text-align:left\">在Next Label输入标记值，shift+左键画框</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">特征点标注</td>\n<td style=\"text-align:left\">先选中长方形的框，再shift+左键依次标记</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">上/下一张图片</td>\n<td style=\"text-align:left\">键盘的up和down</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">放大或者缩小</td>\n<td style=\"text-align:left\">ctrl+滚动轴</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除标记框</td>\n<td style=\"text-align:left\">选中框 + delete</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"标注好后的mydataset-xml文件\"><a href=\"#标注好后的mydataset-xml文件\" class=\"headerlink\" title=\"标注好后的mydataset.xml文件\"></a>标注好后的mydataset.xml文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml-stylesheet type='text/xsl' href='image_metadata_stylesheet.xsl'?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>imglab dataset<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comment</span>&gt;</span>Created by imglab tool.<span class=\"tag\">&lt;/<span class=\"name\">comment</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">images</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">file</span>=<span class=\"string\">'.\\data\\0000.jpg'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">box</span> <span class=\"attr\">top</span>=<span class=\"string\">'47'</span> <span class=\"attr\">left</span>=<span class=\"string\">'196'</span> <span class=\"attr\">width</span>=<span class=\"string\">'261'</span> <span class=\"attr\">height</span>=<span class=\"string\">'302'</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>magic cube<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'0'</span> <span class=\"attr\">x</span>=<span class=\"string\">'207'</span> <span class=\"attr\">y</span>=<span class=\"string\">'63'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'1'</span> <span class=\"attr\">x</span>=<span class=\"string\">'415'</span> <span class=\"attr\">y</span>=<span class=\"string\">'58'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'2'</span> <span class=\"attr\">x</span>=<span class=\"string\">'207'</span> <span class=\"attr\">y</span>=<span class=\"string\">'245'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'3'</span> <span class=\"attr\">x</span>=<span class=\"string\">'443'</span> <span class=\"attr\">y</span>=<span class=\"string\">'238'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'4'</span> <span class=\"attr\">x</span>=<span class=\"string\">'224'</span> <span class=\"attr\">y</span>=<span class=\"string\">'339'</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">part</span> <span class=\"attr\">name</span>=<span class=\"string\">'5'</span> <span class=\"attr\">x</span>=<span class=\"string\">'409'</span> <span class=\"attr\">y</span>=<span class=\"string\">'333'</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">box</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">images</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><p>使用dlib提供的官方代码train_object_detector.py训练检测器模型，得到detector.svm模型文件，该检测原理基于滑窗、HOG和SVM  </p>\n<ul>\n<li>dlib train_object_detector<br><a href=\"http://dlib.net/train_object_detector.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_object_detector.py.html</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = dlib.simple_object_detector_training_options()</span><br><span class=\"line\"><span class=\"comment\"># 左右对称</span></span><br><span class=\"line\">options.add_left_right_image_flips = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\"># SVM γ</span></span><br><span class=\"line\">options.C = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">options.num_threads = <span class=\"number\">4</span></span><br><span class=\"line\">options.be_verbose = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = os.path.join(faces_folder, <span class=\"string\">\"mydataset.xml\"</span>)</span><br><span class=\"line\">dlib.train_simple_object_detector(training_xml_path, <span class=\"string\">\"detector.svm\"</span>, options)</span><br></pre></td></tr></table></figure>\n<p>使用dlib提供的官方代码train_shape_predictor.py训练关键点检测模型，得到predictor.dat模型文件</p>\n<ul>\n<li>dlib train_shape_predictor<br><a href=\"http://dlib.net/train_shape_predictor.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_shape_predictor.py.html</a></li>\n</ul>\n<p>算法基于《One Millisecond Face Alignment with an Ensemble of Regression Trees》这篇论文实现的，以gbdt为基础  </p>\n<ul>\n<li>GBDT的那些事儿 - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/30711812\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/30711812</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = dlib.shape_predictor_training_options()</span><br><span class=\"line\"><span class=\"comment\"># 对训练样本随机变形扩大样本的倍数，通常大一点会好</span></span><br><span class=\"line\">options.oversampling_amount = 300</span><br><span class=\"line\"><span class=\"comment\"># 正则项</span></span><br><span class=\"line\">options.nu = 0.05</span><br><span class=\"line\"><span class=\"comment\"># 树的深度</span></span><br><span class=\"line\">options.tree_depth = 2</span><br><span class=\"line\">options.be_verbose = True</span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = os.path.join(faces_folder, <span class=\"string\">\"mydataset.xml\"</span>)</span><br><span class=\"line\">dlib.train_shape_predictor(training_xml_path, <span class=\"string\">\"predictor.dat\"</span>, options)</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> dlib</span><br><span class=\"line\"></span><br><span class=\"line\">detector = dlib.simple_object_detector(<span class=\"string\">\"detector.svm\"</span>)</span><br><span class=\"line\">predictor = dlib.shape_predictor(<span class=\"string\">'predictor.dat'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cap = cv2.VideoCapture(<span class=\"number\">0</span>)</span><br><span class=\"line\">ret, img = cap.read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ret:</span><br><span class=\"line\">    ret, img = cap.read()</span><br><span class=\"line\">    <span class=\"comment\"># 灰度</span></span><br><span class=\"line\">    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)</span><br><span class=\"line\">    <span class=\"comment\"># 识别结果rects</span></span><br><span class=\"line\">    rects = detector(img_gray, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i,rect) <span class=\"keyword\">in</span> enumerate(rects):</span><br><span class=\"line\">        x1, y1, x2, y2, w, h = rect.left(), rect.top(), rect.right() + \\</span><br><span class=\"line\">            <span class=\"number\">1</span>, rect.bottom() + <span class=\"number\">1</span>, rect.width(), rect.height()</span><br><span class=\"line\">        cv2.rectangle(img, (x1, y1), (x1 + w, y1 + h), (<span class=\"number\">205</span>, <span class=\"number\">92</span>, <span class=\"number\">92</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">\"magic cube\"</span>, (x1 - <span class=\"number\">20</span>, y1 - <span class=\"number\">20</span>), cv2.FONT_HERSHEY_TRIPLEX, <span class=\"number\">0.6</span>, (<span class=\"number\">205</span>, <span class=\"number\">92</span>, <span class=\"number\">92</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        landmarks = np.matrix([[p.x, p.y] <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> predictor(img,rects[i]).parts()])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, point <span class=\"keyword\">in</span> enumerate(landmarks):</span><br><span class=\"line\">            <span class=\"comment\"># 六个点的坐标</span></span><br><span class=\"line\">            pos = (point[<span class=\"number\">0</span>, <span class=\"number\">0</span>], point[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">            print(idx, pos)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 利用cv2.circle给每个特征点画一个圈，共6个</span></span><br><span class=\"line\">            cv2.circle(img, pos, <span class=\"number\">5</span>, color=(<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">            <span class=\"comment\"># 利用cv2.putText输出1-6</span></span><br><span class=\"line\">            font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class=\"line\">            cv2.putText(img, str(idx+<span class=\"number\">1</span>), pos, font, <span class=\"number\">0.8</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">1</span>,cv2.LINE_AA)</span><br><span class=\"line\"></span><br><span class=\"line\">    cv2.namedWindow(<span class=\"string\">\"img\"</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">\"img\"</span>, img)</span><br><span class=\"line\">    key = cv2.waitKey(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> key == ord(<span class=\"string\">\"q\"</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\">\n<img src=\"/2019/07/06/使用dlib的imglab工具制作训练集与测试/00.png\">\n</div>\n\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>win10下使用dlib的imglab工具标注数据集 - 叶扬llq - CSDN博客<br><a href=\"https://blog.csdn.net/qq_15715657/article/details/81504253\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_15715657/article/details/81504253</a></li>\n</ul>\n</the>"},{"title":"使用labelImg制作数据集","date":"2019-10-09T12:21:20.000Z","_content":"\n## 安装\n\n\n下载源码\n``` cmd \ngit clone https://github.com/tzutalin/labelImg.git\n```\n* tzutalin/labelImg: LabelImg is a graphical image annotation tool and label object bounding boxes in images  \nhttps://github.com/tzutalin/labelImg\n\n\n我使用的Python版本是Python3.6\n\n安装依赖包\n``` cmd\npip install pyqt5 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pyqt5-tools -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n在文件夹中，pyrcc编译资源文件\n``` cmd\nC:\\Users\\Administrator\\Desktop\\labelImg-master>pyrcc5 -o libs/resources.py resources.qrc\n```\n在libs文件夹中生成resources.py文件，或生成resource.py文件后移动到libs文件夹，否则会报下面的错\n``` cmd\nTraceback (most recent call last):\n  File \"labelImg.py\", line 29, in <module>\n    from libs.resources import *\nModuleNotFoundError: No module named 'libs.resources'\n```\n\n运行\n``` cmd\nC:\\Users\\Administrator\\Desktop\\labelImg-master>python labelImg.py\n```\n\n\n\n\n\n\n","source":"_posts/使用labelImg制作数据集.md","raw":"---\ntitle: 使用labelImg制作数据集\ndate: 2019-10-09 20:21:20\ntags:\n---\n\n## 安装\n\n\n下载源码\n``` cmd \ngit clone https://github.com/tzutalin/labelImg.git\n```\n* tzutalin/labelImg: LabelImg is a graphical image annotation tool and label object bounding boxes in images  \nhttps://github.com/tzutalin/labelImg\n\n\n我使用的Python版本是Python3.6\n\n安装依赖包\n``` cmd\npip install pyqt5 -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install pyqt5-tools -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n在文件夹中，pyrcc编译资源文件\n``` cmd\nC:\\Users\\Administrator\\Desktop\\labelImg-master>pyrcc5 -o libs/resources.py resources.qrc\n```\n在libs文件夹中生成resources.py文件，或生成resource.py文件后移动到libs文件夹，否则会报下面的错\n``` cmd\nTraceback (most recent call last):\n  File \"labelImg.py\", line 29, in <module>\n    from libs.resources import *\nModuleNotFoundError: No module named 'libs.resources'\n```\n\n运行\n``` cmd\nC:\\Users\\Administrator\\Desktop\\labelImg-master>python labelImg.py\n```\n\n\n\n\n\n\n","slug":"使用labelImg制作数据集","published":1,"updated":"2020-01-05T19:13:24.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507o001y4cvjxdhfoo85","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载源码<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/tzutalin/labelImg.git</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>tzutalin/labelImg: LabelImg is a graphical image annotation tool and label object bounding boxes in images<br><a href=\"https://github.com/tzutalin/labelImg\" target=\"_blank\" rel=\"noopener\">https://github.com/tzutalin/labelImg</a></li>\n</ul>\n<p>我使用的Python版本是Python3.6</p>\n<p>安装依赖包<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyqt5 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip install pyqt5-tools -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n<p>在文件夹中，pyrcc编译资源文件<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">Users</span>\\<span class=\"title\">Administrator</span>\\<span class=\"title\">Desktop</span>\\<span class=\"title\">labelImg</span>-<span class=\"title\">master</span>&gt;<span class=\"title\">pyrcc5</span> -<span class=\"title\">o</span> <span class=\"title\">libs</span>/<span class=\"title\">resources.py</span> <span class=\"title\">resources.qrc</span></span></span><br></pre></td></tr></table></figure></p>\n<p>在libs文件夹中生成resources.py文件，或生成resource.py文件后移动到libs文件夹，否则会报下面的错<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent <span class=\"keyword\">call</span> last):</span><br><span class=\"line\">  File \"labelImg.py\", line <span class=\"number\">29</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from libs.resources import *</span><br><span class=\"line\"><span class=\"function\">ModuleNotFoundError: <span class=\"title\">No</span> <span class=\"title\">module</span> <span class=\"title\">named</span> '<span class=\"title\">libs.resources</span>'</span></span><br></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">Users</span>\\<span class=\"title\">Administrator</span>\\<span class=\"title\">Desktop</span>\\<span class=\"title\">labelImg</span>-<span class=\"title\">master</span>&gt;<span class=\"title\">python</span> <span class=\"title\">labelImg.py</span></span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载源码<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/tzutalin/labelImg.git</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>tzutalin/labelImg: LabelImg is a graphical image annotation tool and label object bounding boxes in images<br><a href=\"https://github.com/tzutalin/labelImg\" target=\"_blank\" rel=\"noopener\">https://github.com/tzutalin/labelImg</a></li>\n</ul>\n<p>我使用的Python版本是Python3.6</p>\n<p>安装依赖包<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyqt5 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip install pyqt5-tools -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">pip install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n<p>在文件夹中，pyrcc编译资源文件<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">Users</span>\\<span class=\"title\">Administrator</span>\\<span class=\"title\">Desktop</span>\\<span class=\"title\">labelImg</span>-<span class=\"title\">master</span>&gt;<span class=\"title\">pyrcc5</span> -<span class=\"title\">o</span> <span class=\"title\">libs</span>/<span class=\"title\">resources.py</span> <span class=\"title\">resources.qrc</span></span></span><br></pre></td></tr></table></figure></p>\n<p>在libs文件夹中生成resources.py文件，或生成resource.py文件后移动到libs文件夹，否则会报下面的错<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent <span class=\"keyword\">call</span> last):</span><br><span class=\"line\">  File \"labelImg.py\", line <span class=\"number\">29</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from libs.resources import *</span><br><span class=\"line\"><span class=\"function\">ModuleNotFoundError: <span class=\"title\">No</span> <span class=\"title\">module</span> <span class=\"title\">named</span> '<span class=\"title\">libs.resources</span>'</span></span><br></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">Users</span>\\<span class=\"title\">Administrator</span>\\<span class=\"title\">Desktop</span>\\<span class=\"title\">labelImg</span>-<span class=\"title\">master</span>&gt;<span class=\"title\">python</span> <span class=\"title\">labelImg.py</span></span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"元胞自动机","date":"2019-11-11T16:51:18.000Z","toc":true,"_content":"\n# Cellular Automata & Monte Carlo （元胞自动机及蒙特卡罗方法）\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 概述\n* 时间、空间都离散的动力系统\n* 不同于数学方程模型，由一系列模型构造的规则构成的方法框架。\n* 特点：时间、空间、状态离散。\n* 用简单的逻辑规则，给出一种随时间演化的动力学模型，使之能模拟复杂系统。\n\n## 元胞自动机\n### 历史\n* 20世纪50年代，John von Neumann 最早提出；\n* 1970年，John Conway 提出生命游戏 (Conway, J. (1970). In M. Gardner, (Ed.), Scientific American, 223(4), pp. 120-123.)\n* 1983年，Stephen Wolfram 初等元胞自动机(Stephen Wolfram. Reviews of Modern Physics,1983, Vol.55)\n* 1986年至今，理论及应用\n\n### 一维元胞自动机\n\n一维格子：长为$L$的线段，$L$等份，得$L$个格子，构成一维格子。\n\n格子的状态\n* 每个格子有两种状态，且状态是随时间变化的。     \n* 将$i$格子在$t$时刻的状态记为 $x_{i}^{t}$ ，规定\n$$\nx_{i}^{t}=\\left\\{\\begin{array}{l}{0} \\\\ {1}\\end{array}, i=1,2, \\cdots \\cdots, L\\right.\n$$\n\n状态的更新机制\n\n$$\nx_{i}^{t+1}=f\\left(x_{i-1}^{t}, x_{i}^{t}, x_{i+1}^{t}\\right), \\quad i=1,2, \\cdots \\cdots, L\n$$\n\n采用周期边界\n\n\n### 时空图\nL=100， 初值取$x_{i}^{0}=\\left\\{\\begin{array}{ll}{1} & {i=50} \\\\ {0} & {i \\neq 50}\\end{array}\\right.$  \n用白色表示0状态，用黑色表示1状态。  \n对给定规则，演化100时间步，可得如下结构时空图\n\n<img src=\"元胞自动机\\01.png\">\n\n\n### 二维元胞自动机\n\n二维格子：将边长为L的正方形，每边L等份得到的L*L个格子。\n\n格子状态：将$(i,j)$格子在$t$时刻的状态记为 $x_{i, j}^{t}$, $(i,j)$ 格子状态的种类由具体问题确定\n\n格子的邻居\n* Von Neumann 邻居   \n* Moore邻居\n\n状态更新机制：\n\n$$\nx_{i, j}^{t+1}=f\\left(x_{i-1, j}^{t}, x_{i+1, j}^{t} x_{i, j}^{t}, x_{i, j-1}^{t}, x_{i, j+1}^{t}\\right)\n$$  \n其中 $i, j=1,2, \\cdots \\cdots, L$\n\n采用周期边界  \n\n元胞自动机方法\n* 对每个格子，制定状态改变的局部规则。\n* 采用同步更新的方法，进行状态更新。\n\n## 蒙特卡洛方法\n随机选定格子\n* 对格子及其邻居制定状态改变的局部规则。\n* 采用异步更新的方法，进行状态更新。\n* Monte-Carlo步与时间步\n* Monte-Carlo步：按局部规则完成的一次更新为一个Monte-Carlo步\n* 时间步：对 $L*L$ 格子，一般 $L^2$ 个Monte-Carlo步为一个时间步\n\n## 总结\n* 在$L*L$格子上，规定每个格子的状态种类数\n* 根据具体问题背景，通过制定局部规则，建立格子状态的更新机制，通过计算机模拟研究相应系统的演化规律。\n* 局部规则可采用元胞自动机方法或蒙特卡洛方法。\n* 元胞自动机方法通过局部规则改变一个格子的状态，且所有格子同步更新。\n* 蒙特卡洛方法通过局部规则以随机确定格子的方法，改变该格子及其局部的状态。\n\n## 实验：元胞自动机时空图\n\nCODE\n``` python\n\"\"\"\n元胞自动机时空图 Python 实现\n\"\"\"\n%matplotlib inline\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n\nclass CellularAutomata(object):\n \n    def __init__(self, cells_lenth, rules=None):\n        \"\"\"\n        Parameters\n        ----------\n        cells_lenth : 一维元胞自动机长度\n\n        Examples\n        --------\n        创建一个长度为100的一位格子\n        ca =  CellularAutomata(100)\n\n        \"\"\"\n\n        # 矩阵的四周不参与运算\n        self.lenth = cells_lenth\n        self.n_iter = 101 # 演化次数\n        self.timer = 0    # 当前迭代次数\n        if rules:\n            self.rules = rules\n        else:\n            self.rules = {(0,0,0):1, (0,0,1):1, (1,1,0):1, (1,0,1):1,\n                          (1,1,1):0, (0,1,0):0, (0,1,1):0, (1,0,0):0} # 定义演化规则\n        self.cells = np.zeros((cells_lenth, self.n_iter))\n        self.cells[0, int(cells_lenth/2)] = 1 \n        \n    def update_state(self):\n        \"\"\"更新一次状态\"\"\"\n        i = self.timer + 1 # 当前要更新的行\n        for j in range(self.lenth):\n            # 计算该细胞周围的存活细胞数\n            (x, y, z) = (self.cells[i-1, (j-1+self.lenth)%self.lenth],\n                         self.cells[i-1, j],\n                         self.cells[i-1, (j+1+self.lenth)%self.lenth])\n            self.cells[i, j] = self.rules[(x,y,z)]\n        self.timer += 1\n   \n    def plot_state(self):\n        \"\"\"画出当前的状态\"\"\"\n        plt.title('Iter :{}'.format(self.timer))\n        plt.imshow(self.cells)\n        plt.show()\n \n    def update_and_plot(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        plt.ion()\n        for _ in range(n_iter):\n            plt.title('Iter :{}'.format(self.timer))\n            plt.imshow(self.cells)\n            self.update_state()\n            plt.pause(0.000001)\n        plt.ioff()\n        \n    def update(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        for _ in range(n_iter):\n            self.update_state()\n\nif __name__ == '__main__':\n    plt.figure(figsize=(16,8))\n\n    rules_list = [\n        {(0,0,0):1, (0,0,1):1, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):0, (0,1,1):0, (1,0,0):0}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):1, (0,1,1):0, (1,0,0):0}, \n        {(0,0,0):0, (0,0,1):1, (1,1,0):0, (1,0,1):0,\n         (1,1,1):0, (0,1,0):1, (0,1,1):0, (1,0,0):1}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):0, (0,1,1):1, (1,0,0):0}, \n        {(0,0,0):0, (0,0,1):1, (1,1,0):1, (1,0,1):0,\n         (1,1,1):0, (0,1,0):1, (0,1,1):0, (1,0,0):1}, \n        {(0,0,0):0, (0,0,1):0, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):1, (0,1,1):1, (1,0,0):1}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):0, (1,0,1):1,\n         (1,1,1):1, (0,1,0):1, (0,1,1):0, (1,0,0):1}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):1, (1,0,1):0,\n         (1,1,1):0, (0,1,0):0, (0,1,1):1, (1,0,0):0}, \n    ]\n    cas = [CellularAutomata(100, rules) for rules in rules_list]\n    for i,ca in enumerate(cas):\n        ca.update(99)\n        plt.subplot(2,4,i+1)\n        plt.imshow(ca.cells)\n        plt.axis('off')  #去掉坐标轴\n```\n\n结果\n<img src=\"元胞自动机\\02.png\">\n\n\n","source":"_posts/元胞自动机.md","raw":"---\ntitle: 元胞自动机\ndate: 2019-11-12 00:51:18\ntags:\n  - 数模\ntoc: true\n---\n\n# Cellular Automata & Monte Carlo （元胞自动机及蒙特卡罗方法）\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 概述\n* 时间、空间都离散的动力系统\n* 不同于数学方程模型，由一系列模型构造的规则构成的方法框架。\n* 特点：时间、空间、状态离散。\n* 用简单的逻辑规则，给出一种随时间演化的动力学模型，使之能模拟复杂系统。\n\n## 元胞自动机\n### 历史\n* 20世纪50年代，John von Neumann 最早提出；\n* 1970年，John Conway 提出生命游戏 (Conway, J. (1970). In M. Gardner, (Ed.), Scientific American, 223(4), pp. 120-123.)\n* 1983年，Stephen Wolfram 初等元胞自动机(Stephen Wolfram. Reviews of Modern Physics,1983, Vol.55)\n* 1986年至今，理论及应用\n\n### 一维元胞自动机\n\n一维格子：长为$L$的线段，$L$等份，得$L$个格子，构成一维格子。\n\n格子的状态\n* 每个格子有两种状态，且状态是随时间变化的。     \n* 将$i$格子在$t$时刻的状态记为 $x_{i}^{t}$ ，规定\n$$\nx_{i}^{t}=\\left\\{\\begin{array}{l}{0} \\\\ {1}\\end{array}, i=1,2, \\cdots \\cdots, L\\right.\n$$\n\n状态的更新机制\n\n$$\nx_{i}^{t+1}=f\\left(x_{i-1}^{t}, x_{i}^{t}, x_{i+1}^{t}\\right), \\quad i=1,2, \\cdots \\cdots, L\n$$\n\n采用周期边界\n\n\n### 时空图\nL=100， 初值取$x_{i}^{0}=\\left\\{\\begin{array}{ll}{1} & {i=50} \\\\ {0} & {i \\neq 50}\\end{array}\\right.$  \n用白色表示0状态，用黑色表示1状态。  \n对给定规则，演化100时间步，可得如下结构时空图\n\n<img src=\"元胞自动机\\01.png\">\n\n\n### 二维元胞自动机\n\n二维格子：将边长为L的正方形，每边L等份得到的L*L个格子。\n\n格子状态：将$(i,j)$格子在$t$时刻的状态记为 $x_{i, j}^{t}$, $(i,j)$ 格子状态的种类由具体问题确定\n\n格子的邻居\n* Von Neumann 邻居   \n* Moore邻居\n\n状态更新机制：\n\n$$\nx_{i, j}^{t+1}=f\\left(x_{i-1, j}^{t}, x_{i+1, j}^{t} x_{i, j}^{t}, x_{i, j-1}^{t}, x_{i, j+1}^{t}\\right)\n$$  \n其中 $i, j=1,2, \\cdots \\cdots, L$\n\n采用周期边界  \n\n元胞自动机方法\n* 对每个格子，制定状态改变的局部规则。\n* 采用同步更新的方法，进行状态更新。\n\n## 蒙特卡洛方法\n随机选定格子\n* 对格子及其邻居制定状态改变的局部规则。\n* 采用异步更新的方法，进行状态更新。\n* Monte-Carlo步与时间步\n* Monte-Carlo步：按局部规则完成的一次更新为一个Monte-Carlo步\n* 时间步：对 $L*L$ 格子，一般 $L^2$ 个Monte-Carlo步为一个时间步\n\n## 总结\n* 在$L*L$格子上，规定每个格子的状态种类数\n* 根据具体问题背景，通过制定局部规则，建立格子状态的更新机制，通过计算机模拟研究相应系统的演化规律。\n* 局部规则可采用元胞自动机方法或蒙特卡洛方法。\n* 元胞自动机方法通过局部规则改变一个格子的状态，且所有格子同步更新。\n* 蒙特卡洛方法通过局部规则以随机确定格子的方法，改变该格子及其局部的状态。\n\n## 实验：元胞自动机时空图\n\nCODE\n``` python\n\"\"\"\n元胞自动机时空图 Python 实现\n\"\"\"\n%matplotlib inline\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n\nclass CellularAutomata(object):\n \n    def __init__(self, cells_lenth, rules=None):\n        \"\"\"\n        Parameters\n        ----------\n        cells_lenth : 一维元胞自动机长度\n\n        Examples\n        --------\n        创建一个长度为100的一位格子\n        ca =  CellularAutomata(100)\n\n        \"\"\"\n\n        # 矩阵的四周不参与运算\n        self.lenth = cells_lenth\n        self.n_iter = 101 # 演化次数\n        self.timer = 0    # 当前迭代次数\n        if rules:\n            self.rules = rules\n        else:\n            self.rules = {(0,0,0):1, (0,0,1):1, (1,1,0):1, (1,0,1):1,\n                          (1,1,1):0, (0,1,0):0, (0,1,1):0, (1,0,0):0} # 定义演化规则\n        self.cells = np.zeros((cells_lenth, self.n_iter))\n        self.cells[0, int(cells_lenth/2)] = 1 \n        \n    def update_state(self):\n        \"\"\"更新一次状态\"\"\"\n        i = self.timer + 1 # 当前要更新的行\n        for j in range(self.lenth):\n            # 计算该细胞周围的存活细胞数\n            (x, y, z) = (self.cells[i-1, (j-1+self.lenth)%self.lenth],\n                         self.cells[i-1, j],\n                         self.cells[i-1, (j+1+self.lenth)%self.lenth])\n            self.cells[i, j] = self.rules[(x,y,z)]\n        self.timer += 1\n   \n    def plot_state(self):\n        \"\"\"画出当前的状态\"\"\"\n        plt.title('Iter :{}'.format(self.timer))\n        plt.imshow(self.cells)\n        plt.show()\n \n    def update_and_plot(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        plt.ion()\n        for _ in range(n_iter):\n            plt.title('Iter :{}'.format(self.timer))\n            plt.imshow(self.cells)\n            self.update_state()\n            plt.pause(0.000001)\n        plt.ioff()\n        \n    def update(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        for _ in range(n_iter):\n            self.update_state()\n\nif __name__ == '__main__':\n    plt.figure(figsize=(16,8))\n\n    rules_list = [\n        {(0,0,0):1, (0,0,1):1, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):0, (0,1,1):0, (1,0,0):0}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):1, (0,1,1):0, (1,0,0):0}, \n        {(0,0,0):0, (0,0,1):1, (1,1,0):0, (1,0,1):0,\n         (1,1,1):0, (0,1,0):1, (0,1,1):0, (1,0,0):1}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):0, (0,1,1):1, (1,0,0):0}, \n        {(0,0,0):0, (0,0,1):1, (1,1,0):1, (1,0,1):0,\n         (1,1,1):0, (0,1,0):1, (0,1,1):0, (1,0,0):1}, \n        {(0,0,0):0, (0,0,1):0, (1,1,0):1, (1,0,1):1,\n         (1,1,1):0, (0,1,0):1, (0,1,1):1, (1,0,0):1}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):0, (1,0,1):1,\n         (1,1,1):1, (0,1,0):1, (0,1,1):0, (1,0,0):1}, \n        {(0,0,0):1, (0,0,1):0, (1,1,0):1, (1,0,1):0,\n         (1,1,1):0, (0,1,0):0, (0,1,1):1, (1,0,0):0}, \n    ]\n    cas = [CellularAutomata(100, rules) for rules in rules_list]\n    for i,ca in enumerate(cas):\n        ca.update(99)\n        plt.subplot(2,4,i+1)\n        plt.imshow(ca.cells)\n        plt.axis('off')  #去掉坐标轴\n```\n\n结果\n<img src=\"元胞自动机\\02.png\">\n\n\n","slug":"元胞自动机","published":1,"updated":"2020-01-05T19:13:24.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507p00204cvjv317k5b4","content":"<h1 id=\"Cellular-Automata-amp-Monte-Carlo-（元胞自动机及蒙特卡罗方法）\"><a href=\"#Cellular-Automata-amp-Monte-Carlo-（元胞自动机及蒙特卡罗方法）\" class=\"headerlink\" title=\"Cellular Automata &amp; Monte Carlo （元胞自动机及蒙特卡罗方法）\"></a>Cellular Automata &amp; Monte Carlo （元胞自动机及蒙特卡罗方法）</h1><a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li>时间、空间都离散的动力系统</li>\n<li>不同于数学方程模型，由一系列模型构造的规则构成的方法框架。</li>\n<li>特点：时间、空间、状态离散。</li>\n<li>用简单的逻辑规则，给出一种随时间演化的动力学模型，使之能模拟复杂系统。</li>\n</ul>\n<h2 id=\"元胞自动机\"><a href=\"#元胞自动机\" class=\"headerlink\" title=\"元胞自动机\"></a>元胞自动机</h2><h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><ul>\n<li>20世纪50年代，John von Neumann 最早提出；</li>\n<li>1970年，John Conway 提出生命游戏 (Conway, J. (1970). In M. Gardner, (Ed.), Scientific American, 223(4), pp. 120-123.)</li>\n<li>1983年，Stephen Wolfram 初等元胞自动机(Stephen Wolfram. Reviews of Modern Physics,1983, Vol.55)</li>\n<li>1986年至今，理论及应用</li>\n</ul>\n<h3 id=\"一维元胞自动机\"><a href=\"#一维元胞自动机\" class=\"headerlink\" title=\"一维元胞自动机\"></a>一维元胞自动机</h3><p>一维格子：长为$L$的线段，$L$等份，得$L$个格子，构成一维格子。</p>\n<p>格子的状态</p>\n<ul>\n<li>每个格子有两种状态，且状态是随时间变化的。     </li>\n<li>将$i$格子在$t$时刻的状态记为 $x_{i}^{t}$ ，规定<script type=\"math/tex; mode=display\">\nx_{i}^{t}=\\left\\{\\begin{array}{l}{0} \\\\ {1}\\end{array}, i=1,2, \\cdots \\cdots, L\\right.</script></li>\n</ul>\n<p>状态的更新机制</p>\n<script type=\"math/tex; mode=display\">\nx_{i}^{t+1}=f\\left(x_{i-1}^{t}, x_{i}^{t}, x_{i+1}^{t}\\right), \\quad i=1,2, \\cdots \\cdots, L</script><p>采用周期边界</p>\n<h3 id=\"时空图\"><a href=\"#时空图\" class=\"headerlink\" title=\"时空图\"></a>时空图</h3><p>L=100， 初值取$x_{i}^{0}=\\left\\{\\begin{array}{ll}{1} &amp; {i=50} \\ {0} &amp; {i \\neq 50}\\end{array}\\right.$<br>用白色表示0状态，用黑色表示1状态。<br>对给定规则，演化100时间步，可得如下结构时空图</p>\n<p><img src=\"/2019/11/12/元胞自动机/01.png\"></p>\n<h3 id=\"二维元胞自动机\"><a href=\"#二维元胞自动机\" class=\"headerlink\" title=\"二维元胞自动机\"></a>二维元胞自动机</h3><p>二维格子：将边长为L的正方形，每边L等份得到的L*L个格子。</p>\n<p>格子状态：将$(i,j)$格子在$t$时刻的状态记为 $x_{i, j}^{t}$, $(i,j)$ 格子状态的种类由具体问题确定</p>\n<p>格子的邻居</p>\n<ul>\n<li>Von Neumann 邻居   </li>\n<li>Moore邻居</li>\n</ul>\n<p>状态更新机制：</p>\n<script type=\"math/tex; mode=display\">\nx_{i, j}^{t+1}=f\\left(x_{i-1, j}^{t}, x_{i+1, j}^{t} x_{i, j}^{t}, x_{i, j-1}^{t}, x_{i, j+1}^{t}\\right)</script><p>其中 $i, j=1,2, \\cdots \\cdots, L$</p>\n<p>采用周期边界  </p>\n<p>元胞自动机方法</p>\n<ul>\n<li>对每个格子，制定状态改变的局部规则。</li>\n<li>采用同步更新的方法，进行状态更新。</li>\n</ul>\n<h2 id=\"蒙特卡洛方法\"><a href=\"#蒙特卡洛方法\" class=\"headerlink\" title=\"蒙特卡洛方法\"></a>蒙特卡洛方法</h2><p>随机选定格子</p>\n<ul>\n<li>对格子及其邻居制定状态改变的局部规则。</li>\n<li>采用异步更新的方法，进行状态更新。</li>\n<li>Monte-Carlo步与时间步</li>\n<li>Monte-Carlo步：按局部规则完成的一次更新为一个Monte-Carlo步</li>\n<li>时间步：对 $L*L$ 格子，一般 $L^2$ 个Monte-Carlo步为一个时间步</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>在$L*L$格子上，规定每个格子的状态种类数</li>\n<li>根据具体问题背景，通过制定局部规则，建立格子状态的更新机制，通过计算机模拟研究相应系统的演化规律。</li>\n<li>局部规则可采用元胞自动机方法或蒙特卡洛方法。</li>\n<li>元胞自动机方法通过局部规则改变一个格子的状态，且所有格子同步更新。</li>\n<li>蒙特卡洛方法通过局部规则以随机确定格子的方法，改变该格子及其局部的状态。</li>\n</ul>\n<h2 id=\"实验：元胞自动机时空图\"><a href=\"#实验：元胞自动机时空图\" class=\"headerlink\" title=\"实验：元胞自动机时空图\"></a>实验：元胞自动机时空图</h2><p>CODE<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">元胞自动机时空图 Python 实现</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CellularAutomata</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cells_lenth, rules=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        cells_lenth : 一维元胞自动机长度</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Examples</span></span><br><span class=\"line\"><span class=\"string\">        --------</span></span><br><span class=\"line\"><span class=\"string\">        创建一个长度为100的一位格子</span></span><br><span class=\"line\"><span class=\"string\">        ca =  CellularAutomata(100)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的四周不参与运算</span></span><br><span class=\"line\">        self.lenth = cells_lenth</span><br><span class=\"line\">        self.n_iter = <span class=\"number\">101</span> <span class=\"comment\"># 演化次数</span></span><br><span class=\"line\">        self.timer = <span class=\"number\">0</span>    <span class=\"comment\"># 当前迭代次数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> rules:</span><br><span class=\"line\">            self.rules = rules</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.rules = &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">                          (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125; <span class=\"comment\"># 定义演化规则</span></span><br><span class=\"line\">        self.cells = np.zeros((cells_lenth, self.n_iter))</span><br><span class=\"line\">        self.cells[<span class=\"number\">0</span>, int(cells_lenth/<span class=\"number\">2</span>)] = <span class=\"number\">1</span> </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新一次状态\"\"\"</span></span><br><span class=\"line\">        i = self.timer + <span class=\"number\">1</span> <span class=\"comment\"># 当前要更新的行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(self.lenth):</span><br><span class=\"line\">            <span class=\"comment\"># 计算该细胞周围的存活细胞数</span></span><br><span class=\"line\">            (x, y, z) = (self.cells[i<span class=\"number\">-1</span>, (j<span class=\"number\">-1</span>+self.lenth)%self.lenth],</span><br><span class=\"line\">                         self.cells[i<span class=\"number\">-1</span>, j],</span><br><span class=\"line\">                         self.cells[i<span class=\"number\">-1</span>, (j+<span class=\"number\">1</span>+self.lenth)%self.lenth])</span><br><span class=\"line\">            self.cells[i, j] = self.rules[(x,y,z)]</span><br><span class=\"line\">        self.timer += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"画出当前的状态\"\"\"</span></span><br><span class=\"line\">        plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">        plt.imshow(self.cells)</span><br><span class=\"line\">        plt.show()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_and_plot</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        plt.ion()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">            plt.imshow(self.cells)</span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\">            plt.pause(<span class=\"number\">0.000001</span>)</span><br><span class=\"line\">        plt.ioff()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    plt.figure(figsize=(<span class=\"number\">16</span>,<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    rules_list = [</span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">    ]</span><br><span class=\"line\">    cas = [CellularAutomata(<span class=\"number\">100</span>, rules) <span class=\"keyword\">for</span> rules <span class=\"keyword\">in</span> rules_list]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,ca <span class=\"keyword\">in</span> enumerate(cas):</span><br><span class=\"line\">        ca.update(<span class=\"number\">99</span>)</span><br><span class=\"line\">        plt.subplot(<span class=\"number\">2</span>,<span class=\"number\">4</span>,i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        plt.imshow(ca.cells)</span><br><span class=\"line\">        plt.axis(<span class=\"string\">'off'</span>)  <span class=\"comment\">#去掉坐标轴</span></span><br></pre></td></tr></table></figure></p>\n<p>结果<br><img src=\"/2019/11/12/元胞自动机/02.png\"></p>\n</the>","site":{"data":{}},"excerpt":"<h1 id=\"Cellular-Automata-amp-Monte-Carlo-（元胞自动机及蒙特卡罗方法）\"><a href=\"#Cellular-Automata-amp-Monte-Carlo-（元胞自动机及蒙特卡罗方法）\" class=\"headerlink\" title=\"Cellular Automata &amp; Monte Carlo （元胞自动机及蒙特卡罗方法）\"></a>Cellular Automata &amp; Monte Carlo （元胞自动机及蒙特卡罗方法）</h1>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li>时间、空间都离散的动力系统</li>\n<li>不同于数学方程模型，由一系列模型构造的规则构成的方法框架。</li>\n<li>特点：时间、空间、状态离散。</li>\n<li>用简单的逻辑规则，给出一种随时间演化的动力学模型，使之能模拟复杂系统。</li>\n</ul>\n<h2 id=\"元胞自动机\"><a href=\"#元胞自动机\" class=\"headerlink\" title=\"元胞自动机\"></a>元胞自动机</h2><h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><ul>\n<li>20世纪50年代，John von Neumann 最早提出；</li>\n<li>1970年，John Conway 提出生命游戏 (Conway, J. (1970). In M. Gardner, (Ed.), Scientific American, 223(4), pp. 120-123.)</li>\n<li>1983年，Stephen Wolfram 初等元胞自动机(Stephen Wolfram. Reviews of Modern Physics,1983, Vol.55)</li>\n<li>1986年至今，理论及应用</li>\n</ul>\n<h3 id=\"一维元胞自动机\"><a href=\"#一维元胞自动机\" class=\"headerlink\" title=\"一维元胞自动机\"></a>一维元胞自动机</h3><p>一维格子：长为$L$的线段，$L$等份，得$L$个格子，构成一维格子。</p>\n<p>格子的状态</p>\n<ul>\n<li>每个格子有两种状态，且状态是随时间变化的。     </li>\n<li>将$i$格子在$t$时刻的状态记为 $x_{i}^{t}$ ，规定<script type=\"math/tex; mode=display\">\nx_{i}^{t}=\\left\\{\\begin{array}{l}{0} \\\\ {1}\\end{array}, i=1,2, \\cdots \\cdots, L\\right.</script></li>\n</ul>\n<p>状态的更新机制</p>\n<script type=\"math/tex; mode=display\">\nx_{i}^{t+1}=f\\left(x_{i-1}^{t}, x_{i}^{t}, x_{i+1}^{t}\\right), \\quad i=1,2, \\cdots \\cdots, L</script><p>采用周期边界</p>\n<h3 id=\"时空图\"><a href=\"#时空图\" class=\"headerlink\" title=\"时空图\"></a>时空图</h3><p>L=100， 初值取$x_{i}^{0}=\\left\\{\\begin{array}{ll}{1} &amp; {i=50} \\ {0} &amp; {i \\neq 50}\\end{array}\\right.$<br>用白色表示0状态，用黑色表示1状态。<br>对给定规则，演化100时间步，可得如下结构时空图</p>\n<p><img src=\"/2019/11/12/元胞自动机/01.png\"></p>\n<h3 id=\"二维元胞自动机\"><a href=\"#二维元胞自动机\" class=\"headerlink\" title=\"二维元胞自动机\"></a>二维元胞自动机</h3><p>二维格子：将边长为L的正方形，每边L等份得到的L*L个格子。</p>\n<p>格子状态：将$(i,j)$格子在$t$时刻的状态记为 $x_{i, j}^{t}$, $(i,j)$ 格子状态的种类由具体问题确定</p>\n<p>格子的邻居</p>\n<ul>\n<li>Von Neumann 邻居   </li>\n<li>Moore邻居</li>\n</ul>\n<p>状态更新机制：</p>\n<script type=\"math/tex; mode=display\">\nx_{i, j}^{t+1}=f\\left(x_{i-1, j}^{t}, x_{i+1, j}^{t} x_{i, j}^{t}, x_{i, j-1}^{t}, x_{i, j+1}^{t}\\right)</script><p>其中 $i, j=1,2, \\cdots \\cdots, L$</p>\n<p>采用周期边界  </p>\n<p>元胞自动机方法</p>\n<ul>\n<li>对每个格子，制定状态改变的局部规则。</li>\n<li>采用同步更新的方法，进行状态更新。</li>\n</ul>\n<h2 id=\"蒙特卡洛方法\"><a href=\"#蒙特卡洛方法\" class=\"headerlink\" title=\"蒙特卡洛方法\"></a>蒙特卡洛方法</h2><p>随机选定格子</p>\n<ul>\n<li>对格子及其邻居制定状态改变的局部规则。</li>\n<li>采用异步更新的方法，进行状态更新。</li>\n<li>Monte-Carlo步与时间步</li>\n<li>Monte-Carlo步：按局部规则完成的一次更新为一个Monte-Carlo步</li>\n<li>时间步：对 $L*L$ 格子，一般 $L^2$ 个Monte-Carlo步为一个时间步</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>在$L*L$格子上，规定每个格子的状态种类数</li>\n<li>根据具体问题背景，通过制定局部规则，建立格子状态的更新机制，通过计算机模拟研究相应系统的演化规律。</li>\n<li>局部规则可采用元胞自动机方法或蒙特卡洛方法。</li>\n<li>元胞自动机方法通过局部规则改变一个格子的状态，且所有格子同步更新。</li>\n<li>蒙特卡洛方法通过局部规则以随机确定格子的方法，改变该格子及其局部的状态。</li>\n</ul>\n<h2 id=\"实验：元胞自动机时空图\"><a href=\"#实验：元胞自动机时空图\" class=\"headerlink\" title=\"实验：元胞自动机时空图\"></a>实验：元胞自动机时空图</h2><p>CODE<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">元胞自动机时空图 Python 实现</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CellularAutomata</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cells_lenth, rules=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        cells_lenth : 一维元胞自动机长度</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Examples</span></span><br><span class=\"line\"><span class=\"string\">        --------</span></span><br><span class=\"line\"><span class=\"string\">        创建一个长度为100的一位格子</span></span><br><span class=\"line\"><span class=\"string\">        ca =  CellularAutomata(100)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的四周不参与运算</span></span><br><span class=\"line\">        self.lenth = cells_lenth</span><br><span class=\"line\">        self.n_iter = <span class=\"number\">101</span> <span class=\"comment\"># 演化次数</span></span><br><span class=\"line\">        self.timer = <span class=\"number\">0</span>    <span class=\"comment\"># 当前迭代次数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> rules:</span><br><span class=\"line\">            self.rules = rules</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.rules = &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">                          (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125; <span class=\"comment\"># 定义演化规则</span></span><br><span class=\"line\">        self.cells = np.zeros((cells_lenth, self.n_iter))</span><br><span class=\"line\">        self.cells[<span class=\"number\">0</span>, int(cells_lenth/<span class=\"number\">2</span>)] = <span class=\"number\">1</span> </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新一次状态\"\"\"</span></span><br><span class=\"line\">        i = self.timer + <span class=\"number\">1</span> <span class=\"comment\"># 当前要更新的行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(self.lenth):</span><br><span class=\"line\">            <span class=\"comment\"># 计算该细胞周围的存活细胞数</span></span><br><span class=\"line\">            (x, y, z) = (self.cells[i<span class=\"number\">-1</span>, (j<span class=\"number\">-1</span>+self.lenth)%self.lenth],</span><br><span class=\"line\">                         self.cells[i<span class=\"number\">-1</span>, j],</span><br><span class=\"line\">                         self.cells[i<span class=\"number\">-1</span>, (j+<span class=\"number\">1</span>+self.lenth)%self.lenth])</span><br><span class=\"line\">            self.cells[i, j] = self.rules[(x,y,z)]</span><br><span class=\"line\">        self.timer += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"画出当前的状态\"\"\"</span></span><br><span class=\"line\">        plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">        plt.imshow(self.cells)</span><br><span class=\"line\">        plt.show()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_and_plot</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        plt.ion()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">            plt.imshow(self.cells)</span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\">            plt.pause(<span class=\"number\">0.000001</span>)</span><br><span class=\"line\">        plt.ioff()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    plt.figure(figsize=(<span class=\"number\">16</span>,<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    rules_list = [</span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">        &#123;(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>,</span><br><span class=\"line\">         (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">1</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">    ]</span><br><span class=\"line\">    cas = [CellularAutomata(<span class=\"number\">100</span>, rules) <span class=\"keyword\">for</span> rules <span class=\"keyword\">in</span> rules_list]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,ca <span class=\"keyword\">in</span> enumerate(cas):</span><br><span class=\"line\">        ca.update(<span class=\"number\">99</span>)</span><br><span class=\"line\">        plt.subplot(<span class=\"number\">2</span>,<span class=\"number\">4</span>,i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        plt.imshow(ca.cells)</span><br><span class=\"line\">        plt.axis(<span class=\"string\">'off'</span>)  <span class=\"comment\">#去掉坐标轴</span></span><br></pre></td></tr></table></figure></p>\n<p>结果<br><img src=\"/2019/11/12/元胞自动机/02.png\"></p>\n</the>"},{"title":"天猫精灵：绑定贝壳物联设备","date":"2019-04-27T16:39:24.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n## 整体方案\n目前天猫精灵绑定贝壳物联账号后，即可使用天猫精灵控制贝壳物联账号下设备；\nesp8266开机自动连接路由器，连接贝壳物联服务器，登陆设备，监听服务器发送消息，根据不同消息控制gpio引脚输出高低电平，从而达到给出控制信号的目的；\nMCU接受esp8266引脚信号，完成控制步进电机拉窗帘等动作。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 准备\n* NodeMcu 物联网开发板 ESP8266无线收发模块\n* 天猫精灵\n\n## 天猫精灵绑定贝壳物联设备\n登录贝壳物联，创建智能设备\n* 首页-贝壳物联，让你与智能设备沟通更方便的物联网云平台</br>https://www.bigiot.net/\n下载天猫精灵APP，添加智能设备，绑定贝壳物联账号，选择设备\n\n## esp8266配置\n\n* [NodeMCU固件](https://www.bigiot.net/Public/upload/UEditor/file/20160322/1458642990199254.rar)\n* 烧录工具 ESP8266Flasher\n* IDE NodeMCU Studio 2015  \n\n刷写固件，并写入启动脚本（LED=4）\n登录用户中心对话设备，遥控设备输入play、stop验证，LED灯是否有变化。\n\n## 参考资料\n\n* 贝壳物联平台通讯协议-贝壳物联，让你与智能设备沟通更方便的物联网云平台</br>https://www.bigiot.net/help/1.html\n* 远程控制通讯——基于NodeMCU固件的ESP8266控制LED灯并返回控制结果-贝壳物联，让你与智能设备沟通更方便的物联网云平台</br>https://www.bigiot.net/help/20.html\n* 天猫精灵绑定控制贝壳物联设备方法-贝壳物联，让你与智能设备沟通更方便的物联网云平台 </br>https://www.bigiot.net/talk/359.html\n","source":"_posts/天猫精灵：绑定贝壳物联设备.md","raw":"---\ntitle: 天猫精灵：绑定贝壳物联设备\ndate: 2019-04-28 00:39:24\ntags:\n  - 天猫精灵\n  - esp8266\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n## 整体方案\n目前天猫精灵绑定贝壳物联账号后，即可使用天猫精灵控制贝壳物联账号下设备；\nesp8266开机自动连接路由器，连接贝壳物联服务器，登陆设备，监听服务器发送消息，根据不同消息控制gpio引脚输出高低电平，从而达到给出控制信号的目的；\nMCU接受esp8266引脚信号，完成控制步进电机拉窗帘等动作。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 准备\n* NodeMcu 物联网开发板 ESP8266无线收发模块\n* 天猫精灵\n\n## 天猫精灵绑定贝壳物联设备\n登录贝壳物联，创建智能设备\n* 首页-贝壳物联，让你与智能设备沟通更方便的物联网云平台</br>https://www.bigiot.net/\n下载天猫精灵APP，添加智能设备，绑定贝壳物联账号，选择设备\n\n## esp8266配置\n\n* [NodeMCU固件](https://www.bigiot.net/Public/upload/UEditor/file/20160322/1458642990199254.rar)\n* 烧录工具 ESP8266Flasher\n* IDE NodeMCU Studio 2015  \n\n刷写固件，并写入启动脚本（LED=4）\n登录用户中心对话设备，遥控设备输入play、stop验证，LED灯是否有变化。\n\n## 参考资料\n\n* 贝壳物联平台通讯协议-贝壳物联，让你与智能设备沟通更方便的物联网云平台</br>https://www.bigiot.net/help/1.html\n* 远程控制通讯——基于NodeMCU固件的ESP8266控制LED灯并返回控制结果-贝壳物联，让你与智能设备沟通更方便的物联网云平台</br>https://www.bigiot.net/help/20.html\n* 天猫精灵绑定控制贝壳物联设备方法-贝壳物联，让你与智能设备沟通更方便的物联网云平台 </br>https://www.bigiot.net/talk/359.html\n","slug":"天猫精灵：绑定贝壳物联设备","published":1,"updated":"2020-01-05T19:13:24.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507q00224cvjfzkqz29c","content":"<p><strong> 天猫精灵：绑定贝壳物联设备 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"整体方案\"><a href=\"#整体方案\" class=\"headerlink\" title=\"整体方案\"></a>整体方案</h2><p>目前天猫精灵绑定贝壳物联账号后，即可使用天猫精灵控制贝壳物联账号下设备；<br>esp8266开机自动连接路由器，连接贝壳物联服务器，登陆设备，监听服务器发送消息，根据不同消息控制gpio引脚输出高低电平，从而达到给出控制信号的目的；<br>MCU接受esp8266引脚信号，完成控制步进电机拉窗帘等动作。<br><a id=\"more\"></a></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>NodeMcu 物联网开发板 ESP8266无线收发模块</li>\n<li>天猫精灵</li>\n</ul>\n<h2 id=\"天猫精灵绑定贝壳物联设备\"><a href=\"#天猫精灵绑定贝壳物联设备\" class=\"headerlink\" title=\"天猫精灵绑定贝壳物联设备\"></a>天猫精灵绑定贝壳物联设备</h2><p>登录贝壳物联，创建智能设备</p>\n<ul>\n<li>首页-贝壳物联，让你与智能设备沟通更方便的物联网云平台&lt;/br&gt;<a href=\"https://www.bigiot.net/\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/</a><br>下载天猫精灵APP，添加智能设备，绑定贝壳物联账号，选择设备</li>\n</ul>\n<h2 id=\"esp8266配置\"><a href=\"#esp8266配置\" class=\"headerlink\" title=\"esp8266配置\"></a>esp8266配置</h2><ul>\n<li><a href=\"https://www.bigiot.net/Public/upload/UEditor/file/20160322/1458642990199254.rar\" target=\"_blank\" rel=\"noopener\">NodeMCU固件</a></li>\n<li>烧录工具 ESP8266Flasher</li>\n<li>IDE NodeMCU Studio 2015  </li>\n</ul>\n<p>刷写固件，并写入启动脚本（LED=4）<br>登录用户中心对话设备，遥控设备输入play、stop验证，LED灯是否有变化。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>贝壳物联平台通讯协议-贝壳物联，让你与智能设备沟通更方便的物联网云平台&lt;/br&gt;<a href=\"https://www.bigiot.net/help/1.html\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/help/1.html</a></li>\n<li>远程控制通讯——基于NodeMCU固件的ESP8266控制LED灯并返回控制结果-贝壳物联，让你与智能设备沟通更方便的物联网云平台&lt;/br&gt;<a href=\"https://www.bigiot.net/help/20.html\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/help/20.html</a></li>\n<li>天猫精灵绑定控制贝壳物联设备方法-贝壳物联，让你与智能设备沟通更方便的物联网云平台 &lt;/br&gt;<a href=\"https://www.bigiot.net/talk/359.html\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/talk/359.html</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 天猫精灵：绑定贝壳物联设备 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"整体方案\"><a href=\"#整体方案\" class=\"headerlink\" title=\"整体方案\"></a>整体方案</h2><p>目前天猫精灵绑定贝壳物联账号后，即可使用天猫精灵控制贝壳物联账号下设备；<br>esp8266开机自动连接路由器，连接贝壳物联服务器，登陆设备，监听服务器发送消息，根据不同消息控制gpio引脚输出高低电平，从而达到给出控制信号的目的；<br>MCU接受esp8266引脚信号，完成控制步进电机拉窗帘等动作。<br></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>NodeMcu 物联网开发板 ESP8266无线收发模块</li>\n<li>天猫精灵</li>\n</ul>\n<h2 id=\"天猫精灵绑定贝壳物联设备\"><a href=\"#天猫精灵绑定贝壳物联设备\" class=\"headerlink\" title=\"天猫精灵绑定贝壳物联设备\"></a>天猫精灵绑定贝壳物联设备</h2><p>登录贝壳物联，创建智能设备</p>\n<ul>\n<li>首页-贝壳物联，让你与智能设备沟通更方便的物联网云平台&lt;/br&gt;<a href=\"https://www.bigiot.net/\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/</a><br>下载天猫精灵APP，添加智能设备，绑定贝壳物联账号，选择设备</li>\n</ul>\n<h2 id=\"esp8266配置\"><a href=\"#esp8266配置\" class=\"headerlink\" title=\"esp8266配置\"></a>esp8266配置</h2><ul>\n<li><a href=\"https://www.bigiot.net/Public/upload/UEditor/file/20160322/1458642990199254.rar\" target=\"_blank\" rel=\"noopener\">NodeMCU固件</a></li>\n<li>烧录工具 ESP8266Flasher</li>\n<li>IDE NodeMCU Studio 2015  </li>\n</ul>\n<p>刷写固件，并写入启动脚本（LED=4）<br>登录用户中心对话设备，遥控设备输入play、stop验证，LED灯是否有变化。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>贝壳物联平台通讯协议-贝壳物联，让你与智能设备沟通更方便的物联网云平台&lt;/br&gt;<a href=\"https://www.bigiot.net/help/1.html\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/help/1.html</a></li>\n<li>远程控制通讯——基于NodeMCU固件的ESP8266控制LED灯并返回控制结果-贝壳物联，让你与智能设备沟通更方便的物联网云平台&lt;/br&gt;<a href=\"https://www.bigiot.net/help/20.html\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/help/20.html</a></li>\n<li>天猫精灵绑定控制贝壳物联设备方法-贝壳物联，让你与智能设备沟通更方便的物联网云平台 &lt;/br&gt;<a href=\"https://www.bigiot.net/talk/359.html\" target=\"_blank\" rel=\"noopener\">https://www.bigiot.net/talk/359.html</a></li>\n</ul>\n</the>"},{"title":"奥比中光ORBBEC 3D体感摄像头","date":"2019-08-13T02:36:01.000Z","_content":"\n最近在淘宝上150元捡漏3D摄像头，乐视三合一体感摄像头，测试效果如下。\n\n<img src=\"奥比中光ORBBEC-3D体感摄像头\\000.png\">\n\n* 奥比中光 | 3D传感 - 3D人脸识别 - 3D感知 - 人工智能视觉  \nhttp://www.orbbec.com.cn/\n\n* orbbec3d \nhttps://orbbec3d.com/develop/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n目前市面上常有的 3D 相机方案：\n* 结构光(Structured-light)，代表公司有奥比中光，苹果(Prime Sense)，微软 Kinect-1，英特尔 RealSense, Mantis Vision 等\n* 双目视觉(Stereo)，代表公司 Leap Motion， ZED， 大疆\n* 光飞行时间法(TOF)，代表公司微软 Kinect-2，PMD，SoftKinect， 联想 Phab\n\n## 奥比中光采用的是散斑结构光的 3D 相机方案\n\n结构光，英文叫做 Structured light，通常采用特定波长的不可见的红外激光作为光源，它发射出来的光经过 一定的编码投影在物体上，通过一定算法来计算返回的编码图案的畸变来得到物体的位置和深度信息。  \n\n根据编码图案不同一般有:\n* 条纹结构光 —— 代表产品: enshape\n* 编码结构光 —— 代表产品：Mantis Vision, Realsense(F200)\n* 散斑结构光 —— 代表产品：apple(primesense), 奥比中光\n\n奥比中光采用的是散斑结构光的技术，所谓散斑就是是激光照射到粗糙物体或穿透毛玻璃后随机形成的衍射斑点。这些散斑具有高度的随机性，而且会随着距离的不同而变换图案。也就是说空间中任意两处的散斑图案都是不同的。只要在空间中打上这样的结构光，整个空间就都被做了标记，把一个物体放进这个空间，只要看看物体上面的散斑图案，就可以知道这个物体在什么位置了。当然，在这之前要把整个空间的散斑图案都记录下来，所以要先做一次光源标定，通过对比标定平面的光斑分布，就能精确计算出当前物体距离相机的距离。\n\n\n结构光（散斑）的优点主要有：\n* 方案成熟，相机基线可以做的比较小，方便小型化。 \n* 资源消耗较低，单帧 IR 图就可计算出深度图，功耗低。\n* 主动光源，夜晚也可使用。 \n* 在一定范围内精度高，分辨率高，分辨率可达 1280x1024，帧率可达 60FPS。\n\n散斑结构光的缺点与结构光类似：\n* 容易受环境光干扰，室外体验差。\n* 随检测距离增加，精度会变差。\n\n\n## 相机参数\n\n<img src=\"奥比中光ORBBEC-3D体感摄像头\\001.png\">\n\n\n\n\n\n","source":"_posts/奥比中光ORBBEC-3D体感摄像头.md","raw":"---\ntitle: 奥比中光ORBBEC 3D体感摄像头\ndate: 2019-08-13 10:36:01\ntags:\n---\n\n最近在淘宝上150元捡漏3D摄像头，乐视三合一体感摄像头，测试效果如下。\n\n<img src=\"奥比中光ORBBEC-3D体感摄像头\\000.png\">\n\n* 奥比中光 | 3D传感 - 3D人脸识别 - 3D感知 - 人工智能视觉  \nhttp://www.orbbec.com.cn/\n\n* orbbec3d \nhttps://orbbec3d.com/develop/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n目前市面上常有的 3D 相机方案：\n* 结构光(Structured-light)，代表公司有奥比中光，苹果(Prime Sense)，微软 Kinect-1，英特尔 RealSense, Mantis Vision 等\n* 双目视觉(Stereo)，代表公司 Leap Motion， ZED， 大疆\n* 光飞行时间法(TOF)，代表公司微软 Kinect-2，PMD，SoftKinect， 联想 Phab\n\n## 奥比中光采用的是散斑结构光的 3D 相机方案\n\n结构光，英文叫做 Structured light，通常采用特定波长的不可见的红外激光作为光源，它发射出来的光经过 一定的编码投影在物体上，通过一定算法来计算返回的编码图案的畸变来得到物体的位置和深度信息。  \n\n根据编码图案不同一般有:\n* 条纹结构光 —— 代表产品: enshape\n* 编码结构光 —— 代表产品：Mantis Vision, Realsense(F200)\n* 散斑结构光 —— 代表产品：apple(primesense), 奥比中光\n\n奥比中光采用的是散斑结构光的技术，所谓散斑就是是激光照射到粗糙物体或穿透毛玻璃后随机形成的衍射斑点。这些散斑具有高度的随机性，而且会随着距离的不同而变换图案。也就是说空间中任意两处的散斑图案都是不同的。只要在空间中打上这样的结构光，整个空间就都被做了标记，把一个物体放进这个空间，只要看看物体上面的散斑图案，就可以知道这个物体在什么位置了。当然，在这之前要把整个空间的散斑图案都记录下来，所以要先做一次光源标定，通过对比标定平面的光斑分布，就能精确计算出当前物体距离相机的距离。\n\n\n结构光（散斑）的优点主要有：\n* 方案成熟，相机基线可以做的比较小，方便小型化。 \n* 资源消耗较低，单帧 IR 图就可计算出深度图，功耗低。\n* 主动光源，夜晚也可使用。 \n* 在一定范围内精度高，分辨率高，分辨率可达 1280x1024，帧率可达 60FPS。\n\n散斑结构光的缺点与结构光类似：\n* 容易受环境光干扰，室外体验差。\n* 随检测距离增加，精度会变差。\n\n\n## 相机参数\n\n<img src=\"奥比中光ORBBEC-3D体感摄像头\\001.png\">\n\n\n\n\n\n","slug":"奥比中光ORBBEC-3D体感摄像头","published":1,"updated":"2020-01-05T19:13:24.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507q00244cvj7fqn9cym","content":"<p>最近在淘宝上150元捡漏3D摄像头，乐视三合一体感摄像头，测试效果如下。</p>\n<p><img src=\"/2019/08/13/奥比中光ORBBEC-3D体感摄像头/000.png\"></p>\n<ul>\n<li><p>奥比中光 | 3D传感 - 3D人脸识别 - 3D感知 - 人工智能视觉<br><a href=\"http://www.orbbec.com.cn/\" target=\"_blank\" rel=\"noopener\">http://www.orbbec.com.cn/</a></p>\n</li>\n<li><p>orbbec3d<br><a href=\"https://orbbec3d.com/develop/\" target=\"_blank\" rel=\"noopener\">https://orbbec3d.com/develop/</a></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<p>目前市面上常有的 3D 相机方案：</p>\n<ul>\n<li>结构光(Structured-light)，代表公司有奥比中光，苹果(Prime Sense)，微软 Kinect-1，英特尔 RealSense, Mantis Vision 等</li>\n<li>双目视觉(Stereo)，代表公司 Leap Motion， ZED， 大疆</li>\n<li>光飞行时间法(TOF)，代表公司微软 Kinect-2，PMD，SoftKinect， 联想 Phab</li>\n</ul>\n<h2 id=\"奥比中光采用的是散斑结构光的-3D-相机方案\"><a href=\"#奥比中光采用的是散斑结构光的-3D-相机方案\" class=\"headerlink\" title=\"奥比中光采用的是散斑结构光的 3D 相机方案\"></a>奥比中光采用的是散斑结构光的 3D 相机方案</h2><p>结构光，英文叫做 Structured light，通常采用特定波长的不可见的红外激光作为光源，它发射出来的光经过 一定的编码投影在物体上，通过一定算法来计算返回的编码图案的畸变来得到物体的位置和深度信息。  </p>\n<p>根据编码图案不同一般有:</p>\n<ul>\n<li>条纹结构光 —— 代表产品: enshape</li>\n<li>编码结构光 —— 代表产品：Mantis Vision, Realsense(F200)</li>\n<li>散斑结构光 —— 代表产品：apple(primesense), 奥比中光</li>\n</ul>\n<p>奥比中光采用的是散斑结构光的技术，所谓散斑就是是激光照射到粗糙物体或穿透毛玻璃后随机形成的衍射斑点。这些散斑具有高度的随机性，而且会随着距离的不同而变换图案。也就是说空间中任意两处的散斑图案都是不同的。只要在空间中打上这样的结构光，整个空间就都被做了标记，把一个物体放进这个空间，只要看看物体上面的散斑图案，就可以知道这个物体在什么位置了。当然，在这之前要把整个空间的散斑图案都记录下来，所以要先做一次光源标定，通过对比标定平面的光斑分布，就能精确计算出当前物体距离相机的距离。</p>\n<p>结构光（散斑）的优点主要有：</p>\n<ul>\n<li>方案成熟，相机基线可以做的比较小，方便小型化。 </li>\n<li>资源消耗较低，单帧 IR 图就可计算出深度图，功耗低。</li>\n<li>主动光源，夜晚也可使用。 </li>\n<li>在一定范围内精度高，分辨率高，分辨率可达 1280x1024，帧率可达 60FPS。</li>\n</ul>\n<p>散斑结构光的缺点与结构光类似：</p>\n<ul>\n<li>容易受环境光干扰，室外体验差。</li>\n<li>随检测距离增加，精度会变差。</li>\n</ul>\n<h2 id=\"相机参数\"><a href=\"#相机参数\" class=\"headerlink\" title=\"相机参数\"></a>相机参数</h2><p><img src=\"/2019/08/13/奥比中光ORBBEC-3D体感摄像头/001.png\"></p>\n</the>","site":{"data":{}},"excerpt":"<p>最近在淘宝上150元捡漏3D摄像头，乐视三合一体感摄像头，测试效果如下。</p>\n<p><img src=\"/2019/08/13/奥比中光ORBBEC-3D体感摄像头/000.png\"></p>\n<ul>\n<li><p>奥比中光 | 3D传感 - 3D人脸识别 - 3D感知 - 人工智能视觉<br><a href=\"http://www.orbbec.com.cn/\" target=\"_blank\" rel=\"noopener\">http://www.orbbec.com.cn/</a></p>\n</li>\n<li><p>orbbec3d<br><a href=\"https://orbbec3d.com/develop/\" target=\"_blank\" rel=\"noopener\">https://orbbec3d.com/develop/</a></p>\n</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<p>目前市面上常有的 3D 相机方案：</p>\n<ul>\n<li>结构光(Structured-light)，代表公司有奥比中光，苹果(Prime Sense)，微软 Kinect-1，英特尔 RealSense, Mantis Vision 等</li>\n<li>双目视觉(Stereo)，代表公司 Leap Motion， ZED， 大疆</li>\n<li>光飞行时间法(TOF)，代表公司微软 Kinect-2，PMD，SoftKinect， 联想 Phab</li>\n</ul>\n<h2 id=\"奥比中光采用的是散斑结构光的-3D-相机方案\"><a href=\"#奥比中光采用的是散斑结构光的-3D-相机方案\" class=\"headerlink\" title=\"奥比中光采用的是散斑结构光的 3D 相机方案\"></a>奥比中光采用的是散斑结构光的 3D 相机方案</h2><p>结构光，英文叫做 Structured light，通常采用特定波长的不可见的红外激光作为光源，它发射出来的光经过 一定的编码投影在物体上，通过一定算法来计算返回的编码图案的畸变来得到物体的位置和深度信息。  </p>\n<p>根据编码图案不同一般有:</p>\n<ul>\n<li>条纹结构光 —— 代表产品: enshape</li>\n<li>编码结构光 —— 代表产品：Mantis Vision, Realsense(F200)</li>\n<li>散斑结构光 —— 代表产品：apple(primesense), 奥比中光</li>\n</ul>\n<p>奥比中光采用的是散斑结构光的技术，所谓散斑就是是激光照射到粗糙物体或穿透毛玻璃后随机形成的衍射斑点。这些散斑具有高度的随机性，而且会随着距离的不同而变换图案。也就是说空间中任意两处的散斑图案都是不同的。只要在空间中打上这样的结构光，整个空间就都被做了标记，把一个物体放进这个空间，只要看看物体上面的散斑图案，就可以知道这个物体在什么位置了。当然，在这之前要把整个空间的散斑图案都记录下来，所以要先做一次光源标定，通过对比标定平面的光斑分布，就能精确计算出当前物体距离相机的距离。</p>\n<p>结构光（散斑）的优点主要有：</p>\n<ul>\n<li>方案成熟，相机基线可以做的比较小，方便小型化。 </li>\n<li>资源消耗较低，单帧 IR 图就可计算出深度图，功耗低。</li>\n<li>主动光源，夜晚也可使用。 </li>\n<li>在一定范围内精度高，分辨率高，分辨率可达 1280x1024，帧率可达 60FPS。</li>\n</ul>\n<p>散斑结构光的缺点与结构光类似：</p>\n<ul>\n<li>容易受环境光干扰，室外体验差。</li>\n<li>随检测距离增加，精度会变差。</li>\n</ul>\n<h2 id=\"相机参数\"><a href=\"#相机参数\" class=\"headerlink\" title=\"相机参数\"></a>相机参数</h2><p><img src=\"/2019/08/13/奥比中光ORBBEC-3D体感摄像头/001.png\"></p>\n</the>"},{"title":"好玩的：日常","date":"2019-07-09T09:25:32.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 风格迁移生产头像的网页\n* https://artbreeder.com/browse  \nhttps://artbreeder.com/browse\n\n### 一个反人类的智障网页\n* User Inyerface - A worst-practice UI experiment  \nhttps://userinyerface.com/game.html\n\n\n### 画画的地方\n* Silk – Interactive Generative Art  \nhttp://weavesilk.com/\n\n* 涂鸦秒变动画  \nhttps://doodle-place-server-2.glitch.me/\n\n\n* 拯救灵魂画手 AutoDraw  \nhttps://www.autodraw.com/\n\n\n### 显卡性能天梯图\nhttps://www.mydrivers.com/zhuanti/tianti/gpu/\n\n### 桌面CPU性能天梯图  \nhttp://www.mydrivers.com/zhuanti/tianti/cpu/\n\n### 手机CPU性能天梯图  \nhttp://www.mydrivers.com/zhuanti/tianti/01/\n\n### 日历\n* 极客编程日历2018桌面壁纸 - 简书  \nhttps://www.jianshu.com/p/912ce01d4752\n\n\n\n### 魔方\n\n* Solving Rubik’s Cube with a Robot Hand  \nhttps://openai.com/blog/solving-rubiks-cube/\n\n* 能自己恢复自己的魔方\nhttps://hackaday.com/2018/09/24/self-solving-rubiks-cube/\n\n\n### 机器人\n\n* Petoi Nybble - Rongzhong Li\nhttps://www.hackster.io/RzLi/petoi-nybble-944867\n\n\n\n\n### 灯光\n\n* ElectroMage Pixelblaze V2+ WiFi LED Controller\nhttps://www.tindie.com/products/electromage/electromage-pixelblaze-v2-wifi-led-controller/?utm_source=hackaday&utm_medium=link&utm_campaign=fromstore\n\n### 嵌入式AI\n\n* 关于MaixPy · MaixPy 文档  \nhttps://maixpy.sipeed.com/zh/\n","source":"_posts/好玩的：日常.md","raw":"---\ntitle: 好玩的：日常\ndate: 2019-07-09 17:25:32\ntags:\n  - today is a happy day\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 风格迁移生产头像的网页\n* https://artbreeder.com/browse  \nhttps://artbreeder.com/browse\n\n### 一个反人类的智障网页\n* User Inyerface - A worst-practice UI experiment  \nhttps://userinyerface.com/game.html\n\n\n### 画画的地方\n* Silk – Interactive Generative Art  \nhttp://weavesilk.com/\n\n* 涂鸦秒变动画  \nhttps://doodle-place-server-2.glitch.me/\n\n\n* 拯救灵魂画手 AutoDraw  \nhttps://www.autodraw.com/\n\n\n### 显卡性能天梯图\nhttps://www.mydrivers.com/zhuanti/tianti/gpu/\n\n### 桌面CPU性能天梯图  \nhttp://www.mydrivers.com/zhuanti/tianti/cpu/\n\n### 手机CPU性能天梯图  \nhttp://www.mydrivers.com/zhuanti/tianti/01/\n\n### 日历\n* 极客编程日历2018桌面壁纸 - 简书  \nhttps://www.jianshu.com/p/912ce01d4752\n\n\n\n### 魔方\n\n* Solving Rubik’s Cube with a Robot Hand  \nhttps://openai.com/blog/solving-rubiks-cube/\n\n* 能自己恢复自己的魔方\nhttps://hackaday.com/2018/09/24/self-solving-rubiks-cube/\n\n\n### 机器人\n\n* Petoi Nybble - Rongzhong Li\nhttps://www.hackster.io/RzLi/petoi-nybble-944867\n\n\n\n\n### 灯光\n\n* ElectroMage Pixelblaze V2+ WiFi LED Controller\nhttps://www.tindie.com/products/electromage/electromage-pixelblaze-v2-wifi-led-controller/?utm_source=hackaday&utm_medium=link&utm_campaign=fromstore\n\n### 嵌入式AI\n\n* 关于MaixPy · MaixPy 文档  \nhttps://maixpy.sipeed.com/zh/\n","slug":"好玩的：日常","published":1,"updated":"2020-02-27T13:07:26.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507r00264cvjb1mex8j6","content":"<p><strong> 好玩的：日常 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h3 id=\"风格迁移生产头像的网页\"><a href=\"#风格迁移生产头像的网页\" class=\"headerlink\" title=\"风格迁移生产头像的网页\"></a>风格迁移生产头像的网页</h3><ul>\n<li><a href=\"https://artbreeder.com/browse\" target=\"_blank\" rel=\"noopener\">https://artbreeder.com/browse</a><br><a href=\"https://artbreeder.com/browse\" target=\"_blank\" rel=\"noopener\">https://artbreeder.com/browse</a></li>\n</ul>\n<h3 id=\"一个反人类的智障网页\"><a href=\"#一个反人类的智障网页\" class=\"headerlink\" title=\"一个反人类的智障网页\"></a>一个反人类的智障网页</h3><ul>\n<li>User Inyerface - A worst-practice UI experiment<br><a href=\"https://userinyerface.com/game.html\" target=\"_blank\" rel=\"noopener\">https://userinyerface.com/game.html</a></li>\n</ul>\n<h3 id=\"画画的地方\"><a href=\"#画画的地方\" class=\"headerlink\" title=\"画画的地方\"></a>画画的地方</h3><ul>\n<li><p>Silk – Interactive Generative Art<br><a href=\"http://weavesilk.com/\" target=\"_blank\" rel=\"noopener\">http://weavesilk.com/</a></p>\n</li>\n<li><p>涂鸦秒变动画<br><a href=\"https://doodle-place-server-2.glitch.me/\" target=\"_blank\" rel=\"noopener\">https://doodle-place-server-2.glitch.me/</a></p>\n</li>\n</ul>\n<ul>\n<li>拯救灵魂画手 AutoDraw<br><a href=\"https://www.autodraw.com/\" target=\"_blank\" rel=\"noopener\">https://www.autodraw.com/</a></li>\n</ul>\n<h3 id=\"显卡性能天梯图\"><a href=\"#显卡性能天梯图\" class=\"headerlink\" title=\"显卡性能天梯图\"></a>显卡性能天梯图</h3><p><a href=\"https://www.mydrivers.com/zhuanti/tianti/gpu/\" target=\"_blank\" rel=\"noopener\">https://www.mydrivers.com/zhuanti/tianti/gpu/</a></p>\n<h3 id=\"桌面CPU性能天梯图\"><a href=\"#桌面CPU性能天梯图\" class=\"headerlink\" title=\"桌面CPU性能天梯图\"></a>桌面CPU性能天梯图</h3><p><a href=\"http://www.mydrivers.com/zhuanti/tianti/cpu/\" target=\"_blank\" rel=\"noopener\">http://www.mydrivers.com/zhuanti/tianti/cpu/</a></p>\n<h3 id=\"手机CPU性能天梯图\"><a href=\"#手机CPU性能天梯图\" class=\"headerlink\" title=\"手机CPU性能天梯图\"></a>手机CPU性能天梯图</h3><p><a href=\"http://www.mydrivers.com/zhuanti/tianti/01/\" target=\"_blank\" rel=\"noopener\">http://www.mydrivers.com/zhuanti/tianti/01/</a></p>\n<h3 id=\"日历\"><a href=\"#日历\" class=\"headerlink\" title=\"日历\"></a>日历</h3><ul>\n<li>极客编程日历2018桌面壁纸 - 简书<br><a href=\"https://www.jianshu.com/p/912ce01d4752\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/912ce01d4752</a></li>\n</ul>\n<h3 id=\"魔方\"><a href=\"#魔方\" class=\"headerlink\" title=\"魔方\"></a>魔方</h3><ul>\n<li><p>Solving Rubik’s Cube with a Robot Hand<br><a href=\"https://openai.com/blog/solving-rubiks-cube/\" target=\"_blank\" rel=\"noopener\">https://openai.com/blog/solving-rubiks-cube/</a></p>\n</li>\n<li><p>能自己恢复自己的魔方<br><a href=\"https://hackaday.com/2018/09/24/self-solving-rubiks-cube/\" target=\"_blank\" rel=\"noopener\">https://hackaday.com/2018/09/24/self-solving-rubiks-cube/</a></p>\n</li>\n</ul>\n<h3 id=\"机器人\"><a href=\"#机器人\" class=\"headerlink\" title=\"机器人\"></a>机器人</h3><ul>\n<li>Petoi Nybble - Rongzhong Li<br><a href=\"https://www.hackster.io/RzLi/petoi-nybble-944867\" target=\"_blank\" rel=\"noopener\">https://www.hackster.io/RzLi/petoi-nybble-944867</a></li>\n</ul>\n<h3 id=\"灯光\"><a href=\"#灯光\" class=\"headerlink\" title=\"灯光\"></a>灯光</h3><ul>\n<li>ElectroMage Pixelblaze V2+ WiFi LED Controller<br><a href=\"https://www.tindie.com/products/electromage/electromage-pixelblaze-v2-wifi-led-controller/?utm_source=hackaday&amp;utm_medium=link&amp;utm_campaign=fromstore\" target=\"_blank\" rel=\"noopener\">https://www.tindie.com/products/electromage/electromage-pixelblaze-v2-wifi-led-controller/?utm_source=hackaday&amp;utm_medium=link&amp;utm_campaign=fromstore</a></li>\n</ul>\n<h3 id=\"嵌入式AI\"><a href=\"#嵌入式AI\" class=\"headerlink\" title=\"嵌入式AI\"></a>嵌入式AI</h3><ul>\n<li>关于MaixPy · MaixPy 文档<br><a href=\"https://maixpy.sipeed.com/zh/\" target=\"_blank\" rel=\"noopener\">https://maixpy.sipeed.com/zh/</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 好玩的：日常 </strong> <excerpt in index | 首页摘要></excerpt></p>","more":"<the rest of contents | 余下全文>\n\n<h3 id=\"风格迁移生产头像的网页\"><a href=\"#风格迁移生产头像的网页\" class=\"headerlink\" title=\"风格迁移生产头像的网页\"></a>风格迁移生产头像的网页</h3><ul>\n<li><a href=\"https://artbreeder.com/browse\" target=\"_blank\" rel=\"noopener\">https://artbreeder.com/browse</a><br><a href=\"https://artbreeder.com/browse\" target=\"_blank\" rel=\"noopener\">https://artbreeder.com/browse</a></li>\n</ul>\n<h3 id=\"一个反人类的智障网页\"><a href=\"#一个反人类的智障网页\" class=\"headerlink\" title=\"一个反人类的智障网页\"></a>一个反人类的智障网页</h3><ul>\n<li>User Inyerface - A worst-practice UI experiment<br><a href=\"https://userinyerface.com/game.html\" target=\"_blank\" rel=\"noopener\">https://userinyerface.com/game.html</a></li>\n</ul>\n<h3 id=\"画画的地方\"><a href=\"#画画的地方\" class=\"headerlink\" title=\"画画的地方\"></a>画画的地方</h3><ul>\n<li><p>Silk – Interactive Generative Art<br><a href=\"http://weavesilk.com/\" target=\"_blank\" rel=\"noopener\">http://weavesilk.com/</a></p>\n</li>\n<li><p>涂鸦秒变动画<br><a href=\"https://doodle-place-server-2.glitch.me/\" target=\"_blank\" rel=\"noopener\">https://doodle-place-server-2.glitch.me/</a></p>\n</li>\n</ul>\n<ul>\n<li>拯救灵魂画手 AutoDraw<br><a href=\"https://www.autodraw.com/\" target=\"_blank\" rel=\"noopener\">https://www.autodraw.com/</a></li>\n</ul>\n<h3 id=\"显卡性能天梯图\"><a href=\"#显卡性能天梯图\" class=\"headerlink\" title=\"显卡性能天梯图\"></a>显卡性能天梯图</h3><p><a href=\"https://www.mydrivers.com/zhuanti/tianti/gpu/\" target=\"_blank\" rel=\"noopener\">https://www.mydrivers.com/zhuanti/tianti/gpu/</a></p>\n<h3 id=\"桌面CPU性能天梯图\"><a href=\"#桌面CPU性能天梯图\" class=\"headerlink\" title=\"桌面CPU性能天梯图\"></a>桌面CPU性能天梯图</h3><p><a href=\"http://www.mydrivers.com/zhuanti/tianti/cpu/\" target=\"_blank\" rel=\"noopener\">http://www.mydrivers.com/zhuanti/tianti/cpu/</a></p>\n<h3 id=\"手机CPU性能天梯图\"><a href=\"#手机CPU性能天梯图\" class=\"headerlink\" title=\"手机CPU性能天梯图\"></a>手机CPU性能天梯图</h3><p><a href=\"http://www.mydrivers.com/zhuanti/tianti/01/\" target=\"_blank\" rel=\"noopener\">http://www.mydrivers.com/zhuanti/tianti/01/</a></p>\n<h3 id=\"日历\"><a href=\"#日历\" class=\"headerlink\" title=\"日历\"></a>日历</h3><ul>\n<li>极客编程日历2018桌面壁纸 - 简书<br><a href=\"https://www.jianshu.com/p/912ce01d4752\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/912ce01d4752</a></li>\n</ul>\n<h3 id=\"魔方\"><a href=\"#魔方\" class=\"headerlink\" title=\"魔方\"></a>魔方</h3><ul>\n<li><p>Solving Rubik’s Cube with a Robot Hand<br><a href=\"https://openai.com/blog/solving-rubiks-cube/\" target=\"_blank\" rel=\"noopener\">https://openai.com/blog/solving-rubiks-cube/</a></p>\n</li>\n<li><p>能自己恢复自己的魔方<br><a href=\"https://hackaday.com/2018/09/24/self-solving-rubiks-cube/\" target=\"_blank\" rel=\"noopener\">https://hackaday.com/2018/09/24/self-solving-rubiks-cube/</a></p>\n</li>\n</ul>\n<h3 id=\"机器人\"><a href=\"#机器人\" class=\"headerlink\" title=\"机器人\"></a>机器人</h3><ul>\n<li>Petoi Nybble - Rongzhong Li<br><a href=\"https://www.hackster.io/RzLi/petoi-nybble-944867\" target=\"_blank\" rel=\"noopener\">https://www.hackster.io/RzLi/petoi-nybble-944867</a></li>\n</ul>\n<h3 id=\"灯光\"><a href=\"#灯光\" class=\"headerlink\" title=\"灯光\"></a>灯光</h3><ul>\n<li>ElectroMage Pixelblaze V2+ WiFi LED Controller<br><a href=\"https://www.tindie.com/products/electromage/electromage-pixelblaze-v2-wifi-led-controller/?utm_source=hackaday&amp;utm_medium=link&amp;utm_campaign=fromstore\" target=\"_blank\" rel=\"noopener\">https://www.tindie.com/products/electromage/electromage-pixelblaze-v2-wifi-led-controller/?utm_source=hackaday&amp;utm_medium=link&amp;utm_campaign=fromstore</a></li>\n</ul>\n<h3 id=\"嵌入式AI\"><a href=\"#嵌入式AI\" class=\"headerlink\" title=\"嵌入式AI\"></a>嵌入式AI</h3><ul>\n<li>关于MaixPy · MaixPy 文档<br><a href=\"https://maixpy.sipeed.com/zh/\" target=\"_blank\" rel=\"noopener\">https://maixpy.sipeed.com/zh/</a></li>\n</ul>\n</the>"},{"title":"晚安","date":"2019-08-01T17:30:01.000Z","_content":"睡前常点开。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<img src=\"晚安/001.png\">\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/晚安.md","raw":"---\ntitle: 晚安\ndate: 2019-08-02 01:30:01\ntags:\n---\n睡前常点开。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<img src=\"晚安/001.png\">\n\n\n\n\n\n\n\n\n\n\n\n","slug":"晚安","published":1,"updated":"2020-01-05T19:13:24.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507s00284cvjy9e8cae5","content":"<p>睡前常点开。<br><a id=\"more\"></a></p>\n<the rest of contents | 余下全文>\n\n<p><img src=\"/2019/08/02/晚安/001.png\"></p>\n</the>","site":{"data":{}},"excerpt":"<p>睡前常点开。<br></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<p><img src=\"/2019/08/02/晚安/001.png\"></p>\n</the>"},{"title":"树莓派 制作复古游戏机","date":"2019-08-04T15:21:20.000Z","_content":"\nRaspberry pi 常见的游戏机有以下三种：\n>* lakka \n>* recalbox \n>* retropie\n\n其中lakka和recalbox支持设置简体中文。\n\n\n## RETROPIE\n\n* RetroPie - Retro-gaming on the Raspberry Pi  \nhttps://retropie.org.uk/\n\n* 树莓派 Retropie 4.4中文版使用说明 含roms资源 - 漫步云端服务器 - JOYIST的博客 - chdong.top - CSDN博客  \nhttps://blog.csdn.net/JOYIST/article/details/90692593\n\n\n\n## RECALBOX\n\n* Recalbox  \nhttps://www.recalbox.com/\n\n* recalbox树莓派复古模拟器系统 - 使用手册 v1.0.8 - 综合版块 - 树莓派论坛    \nhttp://bbs.shumeipaiba.com/thread-59-1-1.html\n\n## LAKKA\n\n* Get Lakka - From GNU/linux  \nhttps://www.lakka.tv/get/linux/\n\n\n### Let's play\n* 格式化SD卡，烧录相应镜像文件，推荐使用balenaEtcher\n* 插电启动树莓派\n* 设置系统，设置USB手柄控制器，键位设置，热键设置\n* 可以通过局域网拷贝Bios和游戏ROM到树莓派\n\n\n\n\n\n\n","source":"_posts/树莓派 制作复古游戏机.md","raw":"---\ntitle: 树莓派 制作复古游戏机\ndate: 2019-08-04 23:21:20\ntags:\n  - raspberry\n---\n\nRaspberry pi 常见的游戏机有以下三种：\n>* lakka \n>* recalbox \n>* retropie\n\n其中lakka和recalbox支持设置简体中文。\n\n\n## RETROPIE\n\n* RetroPie - Retro-gaming on the Raspberry Pi  \nhttps://retropie.org.uk/\n\n* 树莓派 Retropie 4.4中文版使用说明 含roms资源 - 漫步云端服务器 - JOYIST的博客 - chdong.top - CSDN博客  \nhttps://blog.csdn.net/JOYIST/article/details/90692593\n\n\n\n## RECALBOX\n\n* Recalbox  \nhttps://www.recalbox.com/\n\n* recalbox树莓派复古模拟器系统 - 使用手册 v1.0.8 - 综合版块 - 树莓派论坛    \nhttp://bbs.shumeipaiba.com/thread-59-1-1.html\n\n## LAKKA\n\n* Get Lakka - From GNU/linux  \nhttps://www.lakka.tv/get/linux/\n\n\n### Let's play\n* 格式化SD卡，烧录相应镜像文件，推荐使用balenaEtcher\n* 插电启动树莓派\n* 设置系统，设置USB手柄控制器，键位设置，热键设置\n* 可以通过局域网拷贝Bios和游戏ROM到树莓派\n\n\n\n\n\n\n","slug":"树莓派 制作复古游戏机","published":1,"updated":"2020-01-05T19:13:24.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507t002a4cvj9l0cyzom","content":"<p>Raspberry pi 常见的游戏机有以下三种：</p>\n<blockquote>\n<ul>\n<li>lakka </li>\n<li>recalbox </li>\n<li>retropie</li>\n</ul>\n</blockquote>\n<p>其中lakka和recalbox支持设置简体中文。</p>\n<h2 id=\"RETROPIE\"><a href=\"#RETROPIE\" class=\"headerlink\" title=\"RETROPIE\"></a>RETROPIE</h2><ul>\n<li><p>RetroPie - Retro-gaming on the Raspberry Pi<br><a href=\"https://retropie.org.uk/\" target=\"_blank\" rel=\"noopener\">https://retropie.org.uk/</a></p>\n</li>\n<li><p>树莓派 Retropie 4.4中文版使用说明 含roms资源 - 漫步云端服务器 - JOYIST的博客 - chdong.top - CSDN博客<br><a href=\"https://blog.csdn.net/JOYIST/article/details/90692593\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/JOYIST/article/details/90692593</a></p>\n</li>\n</ul>\n<h2 id=\"RECALBOX\"><a href=\"#RECALBOX\" class=\"headerlink\" title=\"RECALBOX\"></a>RECALBOX</h2><ul>\n<li><p>Recalbox<br><a href=\"https://www.recalbox.com/\" target=\"_blank\" rel=\"noopener\">https://www.recalbox.com/</a></p>\n</li>\n<li><p>recalbox树莓派复古模拟器系统 - 使用手册 v1.0.8 - 综合版块 - 树莓派论坛<br><a href=\"http://bbs.shumeipaiba.com/thread-59-1-1.html\" target=\"_blank\" rel=\"noopener\">http://bbs.shumeipaiba.com/thread-59-1-1.html</a></p>\n</li>\n</ul>\n<h2 id=\"LAKKA\"><a href=\"#LAKKA\" class=\"headerlink\" title=\"LAKKA\"></a>LAKKA</h2><ul>\n<li>Get Lakka - From GNU/linux<br><a href=\"https://www.lakka.tv/get/linux/\" target=\"_blank\" rel=\"noopener\">https://www.lakka.tv/get/linux/</a></li>\n</ul>\n<h3 id=\"Let’s-play\"><a href=\"#Let’s-play\" class=\"headerlink\" title=\"Let’s play\"></a>Let’s play</h3><ul>\n<li>格式化SD卡，烧录相应镜像文件，推荐使用balenaEtcher</li>\n<li>插电启动树莓派</li>\n<li>设置系统，设置USB手柄控制器，键位设置，热键设置</li>\n<li>可以通过局域网拷贝Bios和游戏ROM到树莓派</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Raspberry pi 常见的游戏机有以下三种：</p>\n<blockquote>\n<ul>\n<li>lakka </li>\n<li>recalbox </li>\n<li>retropie</li>\n</ul>\n</blockquote>\n<p>其中lakka和recalbox支持设置简体中文。</p>\n<h2 id=\"RETROPIE\"><a href=\"#RETROPIE\" class=\"headerlink\" title=\"RETROPIE\"></a>RETROPIE</h2><ul>\n<li><p>RetroPie - Retro-gaming on the Raspberry Pi<br><a href=\"https://retropie.org.uk/\" target=\"_blank\" rel=\"noopener\">https://retropie.org.uk/</a></p>\n</li>\n<li><p>树莓派 Retropie 4.4中文版使用说明 含roms资源 - 漫步云端服务器 - JOYIST的博客 - chdong.top - CSDN博客<br><a href=\"https://blog.csdn.net/JOYIST/article/details/90692593\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/JOYIST/article/details/90692593</a></p>\n</li>\n</ul>\n<h2 id=\"RECALBOX\"><a href=\"#RECALBOX\" class=\"headerlink\" title=\"RECALBOX\"></a>RECALBOX</h2><ul>\n<li><p>Recalbox<br><a href=\"https://www.recalbox.com/\" target=\"_blank\" rel=\"noopener\">https://www.recalbox.com/</a></p>\n</li>\n<li><p>recalbox树莓派复古模拟器系统 - 使用手册 v1.0.8 - 综合版块 - 树莓派论坛<br><a href=\"http://bbs.shumeipaiba.com/thread-59-1-1.html\" target=\"_blank\" rel=\"noopener\">http://bbs.shumeipaiba.com/thread-59-1-1.html</a></p>\n</li>\n</ul>\n<h2 id=\"LAKKA\"><a href=\"#LAKKA\" class=\"headerlink\" title=\"LAKKA\"></a>LAKKA</h2><ul>\n<li>Get Lakka - From GNU/linux<br><a href=\"https://www.lakka.tv/get/linux/\" target=\"_blank\" rel=\"noopener\">https://www.lakka.tv/get/linux/</a></li>\n</ul>\n<h3 id=\"Let’s-play\"><a href=\"#Let’s-play\" class=\"headerlink\" title=\"Let’s play\"></a>Let’s play</h3><ul>\n<li>格式化SD卡，烧录相应镜像文件，推荐使用balenaEtcher</li>\n<li>插电启动树莓派</li>\n<li>设置系统，设置USB手柄控制器，键位设置，热键设置</li>\n<li>可以通过局域网拷贝Bios和游戏ROM到树莓派</li>\n</ul>\n"},{"title":"树莓派3b 编译安装OpenCV-4.0.0 for Python3","date":"2019-04-20T13:14:22.000Z","_content":"\n## 准备\n\n### 调整SWAP分区\n\n``` bash\n$ cd /var && ls\n```\n卸载swap文件\n``` bash\n$ sudo swapoff swap\n```\n查看一下\n``` bash\n$ htop\n```\n创建一个更大的swap文件\n``` bash\n$ sudo dd if=/dev/zero of=swap bs=1M count=2048\n```\n装载新的swap文件\n``` bash\n$ sudo mkswap swap \n$ sudo swapon swap \n```\n可以在htop中看到新的swap分区大小为2GB，完成\n\n### 相关依赖\n\n``` bash\n$ sudo apt-get install build-essential cmake pkg-config\n$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\n$ sudo apt-get install libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk2.0-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python2.7-dev python3-dev\n```\n\n安装numpy\n``` bash\n$ pip3 install numpy\n```\n\n### 下载opencv源码\n``` bash\n$ cd Documents/\n$ wget https://github.com/opencv/opencv/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n```\n\n## 编译\n\n### 进入虚拟环境\n``` bash\n$ cd python-env\n$ pyvenv py35\n$ source python-env/py35/bin/activate\n```\n\n### 设置编译环境\n安装cmake-qt-gui，使用图形界面\n``` bash\n$ cd Documents/opencv-4.0.0/\n$ mkdir build\n$ cd build/\n$ sudo apt-get install cmake-qt-gui\n$ (venv) pi@raspberrypi:~/Documents/opencv-4.0.0/build $ cmake-gui\n```\n\n选择源文件路径，编译文件夹选择刚才新建的build文件夹\n点击左下角Configure，第一次完成是红色的，再点一次就变成白色了，如图  \n\n<img src = \"树莓派3b 编译安装OpenCV-4.0.0 for Python3/01.png\" width=600 height=300>\n\n然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0的路径填进去，点击Configure，如图\n\n<img src = \"树莓派3b 编译安装OpenCV-4.0.0 for Python3/02.png\" width=600 height=300>\n\n这样OpenCV_Contrib-4.0.0就被添加进去了，然后我们修改关于Python的参数，在查找栏键入PYTHON：取消BIULD_opencv_python2，勾选INSTALL_PYTHON_EXMAPLES，这样就设置为编译Python3的版本了，再次点击Configure，如图：\n<img src = \"树莓派3b 编译安装OpenCV-4.0.0 for Python3/03.png\" width=600 height=300>\n\n然后就可以生成编译文件了，点击Generate  \n\n### 编译\n键入下述命令开始编译，有风扇-j4，没风扇-j2-j3\n``` bash\n$ make -j4\n```\n安装\n``` bash\n$ sudo make install \n$ sudo ldconfig\n```\n因编译后的库文件cv2.so被输出为 cv2.cpython-35m-arm-linux-gnueabihf.so，这将导致该模块在Python3中无法import进来\n``` bash\n$ sudo cp /usr/local/python/cv2/python-3.5/cv2.cpython-35m-arm-linux-gnueabihf.so /usr/local/lib/python3.5/dist-packages\n$ cd /usr/local/lib/python3.5/dist-packages/\n$ sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv.so\n$ ln -s /usr/local/lib/python3.5/dist-packages/cv2.so cv2.so\n```\n\n## 参考博客 \n\n* Raspberry Pi-树莓派搭建基于Python3和OpenCV实现的解魔方机器人-爱板网论坛 - 电子工程师学习交流园地  \nhttp://www.eeboard.com/bbs/thread-99451-1-1.html\n* 树莓派3b编译安装完整OpenCV-3.4.1 for Python3 - 爱板网经验频道 - Eeboard爱板网  \nhttps://jingyan.eeboard.com/article/76476\n* 树莓派安装opencv调用cv2时提示ModuleNotFoundError: NO module named 'cv'的解决方法 - Mrkinte的博客 - CSDN博客  \nhttps://blog.csdn.net/Mrkinte/article/details/85058507\n* Ubuntu 16.04: How to install OpenCV - PyImageSearch  \nhttps://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/\n\n","source":"_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3.md","raw":"---\ntitle: 树莓派3b 编译安装OpenCV-4.0.0 for Python3\ndate: 2019-04-20 21:14:22\ntags: \n  - opencv\n  - raspberry\n  - python\n---\n\n## 准备\n\n### 调整SWAP分区\n\n``` bash\n$ cd /var && ls\n```\n卸载swap文件\n``` bash\n$ sudo swapoff swap\n```\n查看一下\n``` bash\n$ htop\n```\n创建一个更大的swap文件\n``` bash\n$ sudo dd if=/dev/zero of=swap bs=1M count=2048\n```\n装载新的swap文件\n``` bash\n$ sudo mkswap swap \n$ sudo swapon swap \n```\n可以在htop中看到新的swap分区大小为2GB，完成\n\n### 相关依赖\n\n``` bash\n$ sudo apt-get install build-essential cmake pkg-config\n$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\n$ sudo apt-get install libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk2.0-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get install python2.7-dev python3-dev\n```\n\n安装numpy\n``` bash\n$ pip3 install numpy\n```\n\n### 下载opencv源码\n``` bash\n$ cd Documents/\n$ wget https://github.com/opencv/opencv/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip\n$ unzip 4.0.0.zip\n```\n\n## 编译\n\n### 进入虚拟环境\n``` bash\n$ cd python-env\n$ pyvenv py35\n$ source python-env/py35/bin/activate\n```\n\n### 设置编译环境\n安装cmake-qt-gui，使用图形界面\n``` bash\n$ cd Documents/opencv-4.0.0/\n$ mkdir build\n$ cd build/\n$ sudo apt-get install cmake-qt-gui\n$ (venv) pi@raspberrypi:~/Documents/opencv-4.0.0/build $ cmake-gui\n```\n\n选择源文件路径，编译文件夹选择刚才新建的build文件夹\n点击左下角Configure，第一次完成是红色的，再点一次就变成白色了，如图  \n\n<img src = \"树莓派3b 编译安装OpenCV-4.0.0 for Python3/01.png\" width=600 height=300>\n\n然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0的路径填进去，点击Configure，如图\n\n<img src = \"树莓派3b 编译安装OpenCV-4.0.0 for Python3/02.png\" width=600 height=300>\n\n这样OpenCV_Contrib-4.0.0就被添加进去了，然后我们修改关于Python的参数，在查找栏键入PYTHON：取消BIULD_opencv_python2，勾选INSTALL_PYTHON_EXMAPLES，这样就设置为编译Python3的版本了，再次点击Configure，如图：\n<img src = \"树莓派3b 编译安装OpenCV-4.0.0 for Python3/03.png\" width=600 height=300>\n\n然后就可以生成编译文件了，点击Generate  \n\n### 编译\n键入下述命令开始编译，有风扇-j4，没风扇-j2-j3\n``` bash\n$ make -j4\n```\n安装\n``` bash\n$ sudo make install \n$ sudo ldconfig\n```\n因编译后的库文件cv2.so被输出为 cv2.cpython-35m-arm-linux-gnueabihf.so，这将导致该模块在Python3中无法import进来\n``` bash\n$ sudo cp /usr/local/python/cv2/python-3.5/cv2.cpython-35m-arm-linux-gnueabihf.so /usr/local/lib/python3.5/dist-packages\n$ cd /usr/local/lib/python3.5/dist-packages/\n$ sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv.so\n$ ln -s /usr/local/lib/python3.5/dist-packages/cv2.so cv2.so\n```\n\n## 参考博客 \n\n* Raspberry Pi-树莓派搭建基于Python3和OpenCV实现的解魔方机器人-爱板网论坛 - 电子工程师学习交流园地  \nhttp://www.eeboard.com/bbs/thread-99451-1-1.html\n* 树莓派3b编译安装完整OpenCV-3.4.1 for Python3 - 爱板网经验频道 - Eeboard爱板网  \nhttps://jingyan.eeboard.com/article/76476\n* 树莓派安装opencv调用cv2时提示ModuleNotFoundError: NO module named 'cv'的解决方法 - Mrkinte的博客 - CSDN博客  \nhttps://blog.csdn.net/Mrkinte/article/details/85058507\n* Ubuntu 16.04: How to install OpenCV - PyImageSearch  \nhttps://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/\n\n","slug":"树莓派3b 编译安装OpenCV-4.0.0 for Python3","published":1,"updated":"2020-01-05T19:13:24.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507t002c4cvjeurbmhb8","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"调整SWAP分区\"><a href=\"#调整SWAP分区\" class=\"headerlink\" title=\"调整SWAP分区\"></a>调整SWAP分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var &amp;&amp; ls</span><br></pre></td></tr></table></figure>\n<p>卸载swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo swapoff swap</span><br></pre></td></tr></table></figure></p>\n<p>查看一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ htop</span><br></pre></td></tr></table></figure></p>\n<p>创建一个更大的swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swap bs=1M count=2048</span><br></pre></td></tr></table></figure></p>\n<p>装载新的swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkswap swap </span><br><span class=\"line\">$ sudo swapon swap</span><br></pre></td></tr></table></figure></p>\n<p>可以在htop中看到新的swap分区大小为2GB，完成</p>\n<h3 id=\"相关依赖\"><a href=\"#相关依赖\" class=\"headerlink\" title=\"相关依赖\"></a>相关依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential cmake pkg-config</span><br><span class=\"line\">$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev</span><br><span class=\"line\">$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev</span><br><span class=\"line\">$ sudo apt-get install libxvidcore-dev libx264-dev</span><br><span class=\"line\">$ sudo apt-get install libgtk2.0-dev</span><br><span class=\"line\">$ sudo apt-get install libatlas-base-dev gfortran</span><br><span class=\"line\">$ sudo apt-get install python2.7-dev python3-dev</span><br></pre></td></tr></table></figure>\n<p>安装numpy<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install numpy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载opencv源码\"><a href=\"#下载opencv源码\" class=\"headerlink\" title=\"下载opencv源码\"></a>下载opencv源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Documents/</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><h3 id=\"进入虚拟环境\"><a href=\"#进入虚拟环境\" class=\"headerlink\" title=\"进入虚拟环境\"></a>进入虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> python-env</span><br><span class=\"line\">$ pyvenv py35</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> python-env/py35/bin/activate</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置编译环境\"><a href=\"#设置编译环境\" class=\"headerlink\" title=\"设置编译环境\"></a>设置编译环境</h3><p>安装cmake-qt-gui，使用图形界面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Documents/opencv-4.0.0/</span><br><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build/</span><br><span class=\"line\">$ sudo apt-get install cmake-qt-gui</span><br><span class=\"line\">$ (venv) pi@raspberrypi:~/Documents/opencv-4.0.0/build $ cmake-gui</span><br></pre></td></tr></table></figure></p>\n<p>选择源文件路径，编译文件夹选择刚才新建的build文件夹<br>点击左下角Configure，第一次完成是红色的，再点一次就变成白色了，如图  </p>\n<p><img src=\"/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/01.png\" width=\"600\" height=\"300\"></p>\n<p>然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0的路径填进去，点击Configure，如图</p>\n<p><img src=\"/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/02.png\" width=\"600\" height=\"300\"></p>\n<p>这样OpenCV_Contrib-4.0.0就被添加进去了，然后我们修改关于Python的参数，在查找栏键入PYTHON：取消BIULD_opencv_python2，勾选INSTALL_PYTHON_EXMAPLES，这样就设置为编译Python3的版本了，再次点击Configure，如图：<br><img src=\"/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/03.png\" width=\"600\" height=\"300\"></p>\n<p>然后就可以生成编译文件了，点击Generate  </p>\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>键入下述命令开始编译，有风扇-j4，没风扇-j2-j3<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make -j4</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo make install </span><br><span class=\"line\">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p>\n<p>因编译后的库文件cv2.so被输出为 cv2.cpython-35m-arm-linux-gnueabihf.so，这将导致该模块在Python3中无法import进来<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp /usr/<span class=\"built_in\">local</span>/python/cv2/python-3.5/cv2.cpython-35m-arm-linux-gnueabihf.so /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages/</span><br><span class=\"line\">$ sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv.so</span><br><span class=\"line\">$ ln -s /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages/cv2.so cv2.so</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>Raspberry Pi-树莓派搭建基于Python3和OpenCV实现的解魔方机器人-爱板网论坛 - 电子工程师学习交流园地<br><a href=\"http://www.eeboard.com/bbs/thread-99451-1-1.html\" target=\"_blank\" rel=\"noopener\">http://www.eeboard.com/bbs/thread-99451-1-1.html</a></li>\n<li>树莓派3b编译安装完整OpenCV-3.4.1 for Python3 - 爱板网经验频道 - Eeboard爱板网<br><a href=\"https://jingyan.eeboard.com/article/76476\" target=\"_blank\" rel=\"noopener\">https://jingyan.eeboard.com/article/76476</a></li>\n<li>树莓派安装opencv调用cv2时提示ModuleNotFoundError: NO module named ‘cv’的解决方法 - Mrkinte的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/Mrkinte/article/details/85058507\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Mrkinte/article/details/85058507</a></li>\n<li>Ubuntu 16.04: How to install OpenCV - PyImageSearch<br><a href=\"https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/\" target=\"_blank\" rel=\"noopener\">https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"调整SWAP分区\"><a href=\"#调整SWAP分区\" class=\"headerlink\" title=\"调整SWAP分区\"></a>调整SWAP分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var &amp;&amp; ls</span><br></pre></td></tr></table></figure>\n<p>卸载swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo swapoff swap</span><br></pre></td></tr></table></figure></p>\n<p>查看一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ htop</span><br></pre></td></tr></table></figure></p>\n<p>创建一个更大的swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dd <span class=\"keyword\">if</span>=/dev/zero of=swap bs=1M count=2048</span><br></pre></td></tr></table></figure></p>\n<p>装载新的swap文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkswap swap </span><br><span class=\"line\">$ sudo swapon swap</span><br></pre></td></tr></table></figure></p>\n<p>可以在htop中看到新的swap分区大小为2GB，完成</p>\n<h3 id=\"相关依赖\"><a href=\"#相关依赖\" class=\"headerlink\" title=\"相关依赖\"></a>相关依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential cmake pkg-config</span><br><span class=\"line\">$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev</span><br><span class=\"line\">$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev</span><br><span class=\"line\">$ sudo apt-get install libxvidcore-dev libx264-dev</span><br><span class=\"line\">$ sudo apt-get install libgtk2.0-dev</span><br><span class=\"line\">$ sudo apt-get install libatlas-base-dev gfortran</span><br><span class=\"line\">$ sudo apt-get install python2.7-dev python3-dev</span><br></pre></td></tr></table></figure>\n<p>安装numpy<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install numpy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载opencv源码\"><a href=\"#下载opencv源码\" class=\"headerlink\" title=\"下载opencv源码\"></a>下载opencv源码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Documents/</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br><span class=\"line\">$ wget https://github.com/opencv/opencv_contrib/archive/4.0.0.zip</span><br><span class=\"line\">$ unzip 4.0.0.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><h3 id=\"进入虚拟环境\"><a href=\"#进入虚拟环境\" class=\"headerlink\" title=\"进入虚拟环境\"></a>进入虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> python-env</span><br><span class=\"line\">$ pyvenv py35</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> python-env/py35/bin/activate</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置编译环境\"><a href=\"#设置编译环境\" class=\"headerlink\" title=\"设置编译环境\"></a>设置编译环境</h3><p>安装cmake-qt-gui，使用图形界面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Documents/opencv-4.0.0/</span><br><span class=\"line\">$ mkdir build</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build/</span><br><span class=\"line\">$ sudo apt-get install cmake-qt-gui</span><br><span class=\"line\">$ (venv) pi@raspberrypi:~/Documents/opencv-4.0.0/build $ cmake-gui</span><br></pre></td></tr></table></figure></p>\n<p>选择源文件路径，编译文件夹选择刚才新建的build文件夹<br>点击左下角Configure，第一次完成是红色的，再点一次就变成白色了，如图  </p>\n<p><img src=\"/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/01.png\" width=\"600\" height=\"300\"></p>\n<p>然后查找OPENCV_EXTRA_MODULES_PATH项，将OpenCV_Contrib-4.0.0的路径填进去，点击Configure，如图</p>\n<p><img src=\"/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/02.png\" width=\"600\" height=\"300\"></p>\n<p>这样OpenCV_Contrib-4.0.0就被添加进去了，然后我们修改关于Python的参数，在查找栏键入PYTHON：取消BIULD_opencv_python2，勾选INSTALL_PYTHON_EXMAPLES，这样就设置为编译Python3的版本了，再次点击Configure，如图：<br><img src=\"/2019/04/20/树莓派3b 编译安装OpenCV-4.0.0 for Python3/03.png\" width=\"600\" height=\"300\"></p>\n<p>然后就可以生成编译文件了，点击Generate  </p>\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>键入下述命令开始编译，有风扇-j4，没风扇-j2-j3<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make -j4</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo make install </span><br><span class=\"line\">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p>\n<p>因编译后的库文件cv2.so被输出为 cv2.cpython-35m-arm-linux-gnueabihf.so，这将导致该模块在Python3中无法import进来<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp /usr/<span class=\"built_in\">local</span>/python/cv2/python-3.5/cv2.cpython-35m-arm-linux-gnueabihf.so /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages/</span><br><span class=\"line\">$ sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv.so</span><br><span class=\"line\">$ ln -s /usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages/cv2.so cv2.so</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>Raspberry Pi-树莓派搭建基于Python3和OpenCV实现的解魔方机器人-爱板网论坛 - 电子工程师学习交流园地<br><a href=\"http://www.eeboard.com/bbs/thread-99451-1-1.html\" target=\"_blank\" rel=\"noopener\">http://www.eeboard.com/bbs/thread-99451-1-1.html</a></li>\n<li>树莓派3b编译安装完整OpenCV-3.4.1 for Python3 - 爱板网经验频道 - Eeboard爱板网<br><a href=\"https://jingyan.eeboard.com/article/76476\" target=\"_blank\" rel=\"noopener\">https://jingyan.eeboard.com/article/76476</a></li>\n<li>树莓派安装opencv调用cv2时提示ModuleNotFoundError: NO module named ‘cv’的解决方法 - Mrkinte的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/Mrkinte/article/details/85058507\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Mrkinte/article/details/85058507</a></li>\n<li>Ubuntu 16.04: How to install OpenCV - PyImageSearch<br><a href=\"https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/\" target=\"_blank\" rel=\"noopener\">https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/</a></li>\n</ul>\n"},{"title":"桌面冰球机器人","date":"2019-06-06T16:48:20.000Z","_content":"\n## 说明\n* 桌上冰球机器人 opencv3 + arduino mega2560  \nhttps://blog.csdn.net/x_a_little_story/article/details/88747280\n\n在闲鱼上面发现这个机器人感觉得很有趣，如果使用强化学习做人机对战是一个很好的项目。  \n查到了资料发现代码模型都很全，就按开源项目的设计和代码在端午小假期DIY了一个。  \n目前还是个人工智障，主要有以下问题待解决：\n* 笔记本性能不够，帧数最多只到9，反应速度不够快；\n* 电机没有加Y轴，所以理论上只能防守；\n* 机械结构上做了一些trick，比如倾斜“场地”和封死机器人的“球门”；\n* 算法上还是常规几何推理的方法，并没有想好怎么使用RL，大概可以参考一下gym里的breakout？\n\n## Demo\n<div align=center>\n<img src = \"桌面冰球机器人\\001.gif\" width=600 height=350>\n</div>\n\n## 参考资料\n感谢故里草木深和JJulio两位前辈提供的资料。  \n\n* 桌上冰球机器人 opencv3 + arduino mega2560  \nhttps://blog.csdn.net/x_a_little_story/article/details/88747280\n* JJulio/AHRobot: Air Hockey Robot Project  \nhttps://github.com/JJulio/AHRobot\n\n","source":"_posts/桌面冰球机器人.md","raw":"---\ntitle: 桌面冰球机器人\ndate: 2019-06-07 00:48:20\ntags:\n  - opencv\n  - arduino\n---\n\n## 说明\n* 桌上冰球机器人 opencv3 + arduino mega2560  \nhttps://blog.csdn.net/x_a_little_story/article/details/88747280\n\n在闲鱼上面发现这个机器人感觉得很有趣，如果使用强化学习做人机对战是一个很好的项目。  \n查到了资料发现代码模型都很全，就按开源项目的设计和代码在端午小假期DIY了一个。  \n目前还是个人工智障，主要有以下问题待解决：\n* 笔记本性能不够，帧数最多只到9，反应速度不够快；\n* 电机没有加Y轴，所以理论上只能防守；\n* 机械结构上做了一些trick，比如倾斜“场地”和封死机器人的“球门”；\n* 算法上还是常规几何推理的方法，并没有想好怎么使用RL，大概可以参考一下gym里的breakout？\n\n## Demo\n<div align=center>\n<img src = \"桌面冰球机器人\\001.gif\" width=600 height=350>\n</div>\n\n## 参考资料\n感谢故里草木深和JJulio两位前辈提供的资料。  \n\n* 桌上冰球机器人 opencv3 + arduino mega2560  \nhttps://blog.csdn.net/x_a_little_story/article/details/88747280\n* JJulio/AHRobot: Air Hockey Robot Project  \nhttps://github.com/JJulio/AHRobot\n\n","slug":"桌面冰球机器人","published":1,"updated":"2020-01-05T19:13:24.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507u002e4cvjtta6gxz3","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>桌上冰球机器人 opencv3 + arduino mega2560<br><a href=\"https://blog.csdn.net/x_a_little_story/article/details/88747280\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/x_a_little_story/article/details/88747280</a></li>\n</ul>\n<p>在闲鱼上面发现这个机器人感觉得很有趣，如果使用强化学习做人机对战是一个很好的项目。<br>查到了资料发现代码模型都很全，就按开源项目的设计和代码在端午小假期DIY了一个。<br>目前还是个人工智障，主要有以下问题待解决：</p>\n<ul>\n<li>笔记本性能不够，帧数最多只到9，反应速度不够快；</li>\n<li>电机没有加Y轴，所以理论上只能防守；</li>\n<li>机械结构上做了一些trick，比如倾斜“场地”和封死机器人的“球门”；</li>\n<li>算法上还是常规几何推理的方法，并没有想好怎么使用RL，大概可以参考一下gym里的breakout？</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><div align=\"center\">\n<img src=\"/2019/06/07/桌面冰球机器人/001.gif\" width=\"600\" height=\"350\">\n</div>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>感谢故里草木深和JJulio两位前辈提供的资料。  </p>\n<ul>\n<li>桌上冰球机器人 opencv3 + arduino mega2560<br><a href=\"https://blog.csdn.net/x_a_little_story/article/details/88747280\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/x_a_little_story/article/details/88747280</a></li>\n<li>JJulio/AHRobot: Air Hockey Robot Project<br><a href=\"https://github.com/JJulio/AHRobot\" target=\"_blank\" rel=\"noopener\">https://github.com/JJulio/AHRobot</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>桌上冰球机器人 opencv3 + arduino mega2560<br><a href=\"https://blog.csdn.net/x_a_little_story/article/details/88747280\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/x_a_little_story/article/details/88747280</a></li>\n</ul>\n<p>在闲鱼上面发现这个机器人感觉得很有趣，如果使用强化学习做人机对战是一个很好的项目。<br>查到了资料发现代码模型都很全，就按开源项目的设计和代码在端午小假期DIY了一个。<br>目前还是个人工智障，主要有以下问题待解决：</p>\n<ul>\n<li>笔记本性能不够，帧数最多只到9，反应速度不够快；</li>\n<li>电机没有加Y轴，所以理论上只能防守；</li>\n<li>机械结构上做了一些trick，比如倾斜“场地”和封死机器人的“球门”；</li>\n<li>算法上还是常规几何推理的方法，并没有想好怎么使用RL，大概可以参考一下gym里的breakout？</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><div align=\"center\">\n<img src=\"/2019/06/07/桌面冰球机器人/001.gif\" width=\"600\" height=\"350\">\n</div>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>感谢故里草木深和JJulio两位前辈提供的资料。  </p>\n<ul>\n<li>桌上冰球机器人 opencv3 + arduino mega2560<br><a href=\"https://blog.csdn.net/x_a_little_story/article/details/88747280\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/x_a_little_story/article/details/88747280</a></li>\n<li>JJulio/AHRobot: Air Hockey Robot Project<br><a href=\"https://github.com/JJulio/AHRobot\" target=\"_blank\" rel=\"noopener\">https://github.com/JJulio/AHRobot</a></li>\n</ul>\n"},{"title":"打磨工具的日常","date":"2019-04-26T01:57:47.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n* MobaXterm\n* cloc\n* Mathpix Snip \n* Chrome插件\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 终端工具：MobaXterm\n\nMobaXterm这个软件很低调，一直没有发现这个软件，直到有一天它出现在了知乎的一个角落，下载试用一下，发现它是一款令人痴迷的终端神器，很全能，很Geek。它支持SSH、VNC、Serial、FTP、X11、RDP、MOSH等等协议的连接，于是，我的电脑上原有的XShell、XFTP、VNC Viewer都退役了。同时，它又是一个X服务器和Unix工具箱，它支持以X服务器为基础的X.org，可以轻松地模拟GNU Unix的指令，甚至可以集成一些插件之后 Emacs、Gcc, G++ and development tools、MPlayer、Perl、Curl等程序，拥有极强的拓展性。同时，它还有很舒适的用户界面和诸多个性化的配置选项，用户体验极佳。\n\n* MobaXterm官网  \nhttps://mobaxterm.mobatek.net/\n* MobaXterm下载链接  \nhttps://mobaxterm.mobatek.net/download.html\n\n\n\n## VScode Remote 远程调试\n\nVScode发布的远程编程与调试的插件Remote Development，使用这个插件可以在很多情况下代替vim直接远程修改与调试服务器上的代码，同时具备代码高亮与补全功能，就和在本地使用VScode一样。\n\n\n## 命令行\n\n将目录下所有文件生成树结构\n``` bash\n$ tree . >contest.txt /f\n```\n\n使用pip命令自动生成项目安装依赖清单\n``` bash\n$ pip freeze > requirements.txt\n```\n\n使用cloc进行代码统计  \nCloc官网下载exe文件，放于当前目标文件夹下\n``` bash\n$ cloc.exe .\n```\n\n\n* 推荐九个堪称神器的命令行工具给程序员们-技术圈-程序员客栈  \nhttps://www.proginn.com/community/topics/3555?tdsourcetag=s_pcqq_aiomsg\n\n\n* 【必须收藏】那些酷炫的深度学习网络图怎么画出来的？ - 知乎  \nhttps://zhuanlan.zhihu.com/p/68007906\n\n\n## 公式输入工具：Mathpix Snip \n只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  \n\n* Mathpix Snip  \nhttps://mathpix.com/\n\n\n## Chrome插件\n* Momentum\n漂亮的背景图片、时间显示、天气预报、收藏夹、待办事项的功能\n* Vimium \nVimium 这个名字其实是 Vim 和 Chromium 的合体。她继承了Vim的常用操作，完全脱离鼠标来控制浏览器，是一款黑客级别的Chrome插件。对熟悉linux的同学来说，简直是神器。  \n* OneTab\n将许多Tab合并在一个页面。  \n我之前的常用方法是不关闭浏览器重启电脑。\n* octotree\n浏览github项目结构。\n\n* chrome上有哪些牛逼的插件？ - 知乎  \nhttps://www.zhihu.com/question/64829125\n","source":"_posts/打磨工具的日常.md","raw":"---\ntitle: 打磨工具的日常\ndate: 2019-04-26 09:57:47\ntags:\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n* MobaXterm\n* cloc\n* Mathpix Snip \n* Chrome插件\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 终端工具：MobaXterm\n\nMobaXterm这个软件很低调，一直没有发现这个软件，直到有一天它出现在了知乎的一个角落，下载试用一下，发现它是一款令人痴迷的终端神器，很全能，很Geek。它支持SSH、VNC、Serial、FTP、X11、RDP、MOSH等等协议的连接，于是，我的电脑上原有的XShell、XFTP、VNC Viewer都退役了。同时，它又是一个X服务器和Unix工具箱，它支持以X服务器为基础的X.org，可以轻松地模拟GNU Unix的指令，甚至可以集成一些插件之后 Emacs、Gcc, G++ and development tools、MPlayer、Perl、Curl等程序，拥有极强的拓展性。同时，它还有很舒适的用户界面和诸多个性化的配置选项，用户体验极佳。\n\n* MobaXterm官网  \nhttps://mobaxterm.mobatek.net/\n* MobaXterm下载链接  \nhttps://mobaxterm.mobatek.net/download.html\n\n\n\n## VScode Remote 远程调试\n\nVScode发布的远程编程与调试的插件Remote Development，使用这个插件可以在很多情况下代替vim直接远程修改与调试服务器上的代码，同时具备代码高亮与补全功能，就和在本地使用VScode一样。\n\n\n## 命令行\n\n将目录下所有文件生成树结构\n``` bash\n$ tree . >contest.txt /f\n```\n\n使用pip命令自动生成项目安装依赖清单\n``` bash\n$ pip freeze > requirements.txt\n```\n\n使用cloc进行代码统计  \nCloc官网下载exe文件，放于当前目标文件夹下\n``` bash\n$ cloc.exe .\n```\n\n\n* 推荐九个堪称神器的命令行工具给程序员们-技术圈-程序员客栈  \nhttps://www.proginn.com/community/topics/3555?tdsourcetag=s_pcqq_aiomsg\n\n\n* 【必须收藏】那些酷炫的深度学习网络图怎么画出来的？ - 知乎  \nhttps://zhuanlan.zhihu.com/p/68007906\n\n\n## 公式输入工具：Mathpix Snip \n只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  \n\n* Mathpix Snip  \nhttps://mathpix.com/\n\n\n## Chrome插件\n* Momentum\n漂亮的背景图片、时间显示、天气预报、收藏夹、待办事项的功能\n* Vimium \nVimium 这个名字其实是 Vim 和 Chromium 的合体。她继承了Vim的常用操作，完全脱离鼠标来控制浏览器，是一款黑客级别的Chrome插件。对熟悉linux的同学来说，简直是神器。  \n* OneTab\n将许多Tab合并在一个页面。  \n我之前的常用方法是不关闭浏览器重启电脑。\n* octotree\n浏览github项目结构。\n\n* chrome上有哪些牛逼的插件？ - 知乎  \nhttps://www.zhihu.com/question/64829125\n","slug":"打磨工具的日常","published":1,"updated":"2020-01-05T19:13:24.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507v002g4cvjybdoms0u","content":"<p><strong> 打磨工具的日常 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>MobaXterm</li>\n<li>cloc</li>\n<li>Mathpix Snip </li>\n<li>Chrome插件</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"终端工具：MobaXterm\"><a href=\"#终端工具：MobaXterm\" class=\"headerlink\" title=\"终端工具：MobaXterm\"></a>终端工具：MobaXterm</h2><p>MobaXterm这个软件很低调，一直没有发现这个软件，直到有一天它出现在了知乎的一个角落，下载试用一下，发现它是一款令人痴迷的终端神器，很全能，很Geek。它支持SSH、VNC、Serial、FTP、X11、RDP、MOSH等等协议的连接，于是，我的电脑上原有的XShell、XFTP、VNC Viewer都退役了。同时，它又是一个X服务器和Unix工具箱，它支持以X服务器为基础的X.org，可以轻松地模拟GNU Unix的指令，甚至可以集成一些插件之后 Emacs、Gcc, G++ and development tools、MPlayer、Perl、Curl等程序，拥有极强的拓展性。同时，它还有很舒适的用户界面和诸多个性化的配置选项，用户体验极佳。</p>\n<ul>\n<li>MobaXterm官网<br><a href=\"https://mobaxterm.mobatek.net/\" target=\"_blank\" rel=\"noopener\">https://mobaxterm.mobatek.net/</a></li>\n<li>MobaXterm下载链接<br><a href=\"https://mobaxterm.mobatek.net/download.html\" target=\"_blank\" rel=\"noopener\">https://mobaxterm.mobatek.net/download.html</a></li>\n</ul>\n<h2 id=\"VScode-Remote-远程调试\"><a href=\"#VScode-Remote-远程调试\" class=\"headerlink\" title=\"VScode Remote 远程调试\"></a>VScode Remote 远程调试</h2><p>VScode发布的远程编程与调试的插件Remote Development，使用这个插件可以在很多情况下代替vim直接远程修改与调试服务器上的代码，同时具备代码高亮与补全功能，就和在本地使用VScode一样。</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>将目录下所有文件生成树结构<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree . &gt;contest.txt /f</span><br></pre></td></tr></table></figure></p>\n<p>使用pip命令自动生成项目安装依赖清单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>使用cloc进行代码统计<br>Cloc官网下载exe文件，放于当前目标文件夹下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cloc.exe .</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>推荐九个堪称神器的命令行工具给程序员们-技术圈-程序员客栈<br><a href=\"https://www.proginn.com/community/topics/3555?tdsourcetag=s_pcqq_aiomsg\" target=\"_blank\" rel=\"noopener\">https://www.proginn.com/community/topics/3555?tdsourcetag=s_pcqq_aiomsg</a></li>\n</ul>\n<ul>\n<li>【必须收藏】那些酷炫的深度学习网络图怎么画出来的？ - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/68007906\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/68007906</a></li>\n</ul>\n<h2 id=\"公式输入工具：Mathpix-Snip\"><a href=\"#公式输入工具：Mathpix-Snip\" class=\"headerlink\" title=\"公式输入工具：Mathpix Snip\"></a>公式输入工具：Mathpix Snip</h2><p>只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  </p>\n<ul>\n<li>Mathpix Snip<br><a href=\"https://mathpix.com/\" target=\"_blank\" rel=\"noopener\">https://mathpix.com/</a></li>\n</ul>\n<h2 id=\"Chrome插件\"><a href=\"#Chrome插件\" class=\"headerlink\" title=\"Chrome插件\"></a>Chrome插件</h2><ul>\n<li>Momentum<br>漂亮的背景图片、时间显示、天气预报、收藏夹、待办事项的功能</li>\n<li>Vimium<br>Vimium 这个名字其实是 Vim 和 Chromium 的合体。她继承了Vim的常用操作，完全脱离鼠标来控制浏览器，是一款黑客级别的Chrome插件。对熟悉linux的同学来说，简直是神器。  </li>\n<li>OneTab<br>将许多Tab合并在一个页面。<br>我之前的常用方法是不关闭浏览器重启电脑。</li>\n<li><p>octotree<br>浏览github项目结构。</p>\n</li>\n<li><p>chrome上有哪些牛逼的插件？ - 知乎<br><a href=\"https://www.zhihu.com/question/64829125\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/64829125</a></p>\n</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 打磨工具的日常 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>MobaXterm</li>\n<li>cloc</li>\n<li>Mathpix Snip </li>\n<li>Chrome插件</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n\n<h2 id=\"终端工具：MobaXterm\"><a href=\"#终端工具：MobaXterm\" class=\"headerlink\" title=\"终端工具：MobaXterm\"></a>终端工具：MobaXterm</h2><p>MobaXterm这个软件很低调，一直没有发现这个软件，直到有一天它出现在了知乎的一个角落，下载试用一下，发现它是一款令人痴迷的终端神器，很全能，很Geek。它支持SSH、VNC、Serial、FTP、X11、RDP、MOSH等等协议的连接，于是，我的电脑上原有的XShell、XFTP、VNC Viewer都退役了。同时，它又是一个X服务器和Unix工具箱，它支持以X服务器为基础的X.org，可以轻松地模拟GNU Unix的指令，甚至可以集成一些插件之后 Emacs、Gcc, G++ and development tools、MPlayer、Perl、Curl等程序，拥有极强的拓展性。同时，它还有很舒适的用户界面和诸多个性化的配置选项，用户体验极佳。</p>\n<ul>\n<li>MobaXterm官网<br><a href=\"https://mobaxterm.mobatek.net/\" target=\"_blank\" rel=\"noopener\">https://mobaxterm.mobatek.net/</a></li>\n<li>MobaXterm下载链接<br><a href=\"https://mobaxterm.mobatek.net/download.html\" target=\"_blank\" rel=\"noopener\">https://mobaxterm.mobatek.net/download.html</a></li>\n</ul>\n<h2 id=\"VScode-Remote-远程调试\"><a href=\"#VScode-Remote-远程调试\" class=\"headerlink\" title=\"VScode Remote 远程调试\"></a>VScode Remote 远程调试</h2><p>VScode发布的远程编程与调试的插件Remote Development，使用这个插件可以在很多情况下代替vim直接远程修改与调试服务器上的代码，同时具备代码高亮与补全功能，就和在本地使用VScode一样。</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>将目录下所有文件生成树结构<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree . &gt;contest.txt /f</span><br></pre></td></tr></table></figure></p>\n<p>使用pip命令自动生成项目安装依赖清单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>使用cloc进行代码统计<br>Cloc官网下载exe文件，放于当前目标文件夹下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cloc.exe .</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>推荐九个堪称神器的命令行工具给程序员们-技术圈-程序员客栈<br><a href=\"https://www.proginn.com/community/topics/3555?tdsourcetag=s_pcqq_aiomsg\" target=\"_blank\" rel=\"noopener\">https://www.proginn.com/community/topics/3555?tdsourcetag=s_pcqq_aiomsg</a></li>\n</ul>\n<ul>\n<li>【必须收藏】那些酷炫的深度学习网络图怎么画出来的？ - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/68007906\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/68007906</a></li>\n</ul>\n<h2 id=\"公式输入工具：Mathpix-Snip\"><a href=\"#公式输入工具：Mathpix-Snip\" class=\"headerlink\" title=\"公式输入工具：Mathpix Snip\"></a>公式输入工具：Mathpix Snip</h2><p>只要截图就能识别公式，手写的公式都能识别，可以方便转换图片的公式到word、markdown和latex文件。  </p>\n<ul>\n<li>Mathpix Snip<br><a href=\"https://mathpix.com/\" target=\"_blank\" rel=\"noopener\">https://mathpix.com/</a></li>\n</ul>\n<h2 id=\"Chrome插件\"><a href=\"#Chrome插件\" class=\"headerlink\" title=\"Chrome插件\"></a>Chrome插件</h2><ul>\n<li>Momentum<br>漂亮的背景图片、时间显示、天气预报、收藏夹、待办事项的功能</li>\n<li>Vimium<br>Vimium 这个名字其实是 Vim 和 Chromium 的合体。她继承了Vim的常用操作，完全脱离鼠标来控制浏览器，是一款黑客级别的Chrome插件。对熟悉linux的同学来说，简直是神器。  </li>\n<li>OneTab<br>将许多Tab合并在一个页面。<br>我之前的常用方法是不关闭浏览器重启电脑。</li>\n<li><p>octotree<br>浏览github项目结构。</p>\n</li>\n<li><p>chrome上有哪些牛逼的插件？ - 知乎<br><a href=\"https://www.zhihu.com/question/64829125\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/64829125</a></p>\n</li>\n</ul>\n</the>"},{"title":"眼动追踪推荐眼镜一：硬件篇","date":"2019-09-23T17:04:25.000Z","_content":"\n硬件组成部分主要就是眼镜架、摄像头和供电系统。\n\n可以参考的开源方案有\n* Pupil Labs  \nhttps://pupil-labs.com/\n\n\n当前设计使用的是USB摄像头直接连接电脑的方案：240°鱼眼摄像头被固定在眼镜框正前方负责采集用户视野图像，720P摄像头则固定在右前方伸出的支架上负责采集右眼图像，摄像头通过USB与计算机连接完成图像传输。\n\n以下是对ip摄像头的测试，计划下一步用于眼镜的改进。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<html>\n<head>\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n## ip摄像头\n\n45元的WIFI摄像头模块，能玩出什么花样？ - 知乎  \nhttps://zhuanlan.zhihu.com/p/60565132\n\nip摄像头选用ESP32-CAM模块，包括ESP32wifi模块和一个OV2640的200W像素摄像头。\n\n### 烧录固件\n\n硬件连接，注意需要将GPIO0和边上的GND短接进入烧录模式\n\n| USB-TTL    |   ESP32-CAM    |\n|  :----:    | :----:         |\n| 3.3V       |   VCC          |\n| GND        |   GND          |\n| RX         |   U0T          |\n| TX         |   U0R          |\n|            |   IO0和GND短接  |\n\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\01.jpg\">\n\n烧录工具我们用的是Arduino IDE，首先需要添加ESP32的芯片支持  \n打开首选项，在附加开发板管理器网址里填上：https://dl.espressif.com/dl/package_esp32_index.json ，然后单击 好 。\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\04.png\">\n\n\n然后在工具里打开开发板管理器，等待索引做完之后找到ESP32并安装。\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\00.png\">\n\n在github下载示例代码。  \n* RuiSantosdotme/arduino-esp32-CameraWebServer: CameraWebServer for ESP32-CAM in Arduino IDE  \nhttps://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer\n\n\n打开CameraWebServer.ino文件，进行一些设置\n``` c\n// Select camera model\n//#define CAMERA_MODEL_WROVER_KIT\n//#define CAMERA_MODEL_M5STACK_PSRAM\n#define CAMERA_MODEL_AI_THINKER\n\nconst char* ssid = \"REPLACE_WITH_YOUR_SSID\";\nconst char* password = \"REPLACE_WITH_YOUR_PASSWORD\";\n```\n\n\n\n在开发板里面选对我们需要的开发板和相关设置，然后点击上传就好。\n\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\02.png\">\n\n\n### 测试\n\n通过浏览器输入ESP32-CAM的IP地址，就能看到设置页面了。\n\n点击Start Stream就能看到实时影像了。\n\n通过python脚本读取图像。\n\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n```python  \nimport cv2\nimport urllib.request\nimport numpy as np\nhost = \"192.168.0.100:81\" # 在这里记得修改ip，否则是无法调用的，刚刚浏览器输入的地址\nhoststr = 'http://' + host + '/stream'\nprint('Streaming ' + hoststr)\nprint('Print Esc to quit')\nstream=urllib.request.urlopen(hoststr)\nbytes=bytes()\nwhile True:\n    bytes+=stream.read(1024)\n    a = bytes.find(b'\\xff\\xd8')\n    b = bytes.find(b'\\xff\\xd9')\n    i = 0\n    if a!=-1 and b!=-1:\n        jpg = bytes[a:b+2]\n        bytes= bytes[b+2:]\n        #flags = 1 for color image\n        try:\n            i = cv2.imdecode(np.fromstring(jpg, dtype=np.uint8),flags=1)\n            # print i.shape\n            cv2.imshow(\"wjw\",i)\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                exit(0)\n        except Exception as e:\n            print('保存失败', e)\n```\n</div>\n</div>\n</body>\n\n<div align=center>\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\06.png\">\n</div>\n\n\n\n\n### 问题记录\n\n* 编译项目报错 “sketch\\app_httpd.cpp:23:20: fatal error: dl_lib.h: No such file or directory”\n\napp_httpd.cpp 中注释相应库\n``` c\n//#include \"dl_lib.h\"\n```\n\n* 编译项目报错 “ \"WiFi.h\" 对应多个库\n 已使用： C:\\Users\\Administrator\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.3\\libraries\\WiFi\n 未使用：H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi\nexit status 1 ”\n\n移除文件夹 H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi\n\n* 点击Start Stream没有反应。\n\n<div align=center>\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\03.png\">\n</div>\n使用Chrome浏览器。\n\n* 注意供电。\n\n\n","source":"_posts/眼动追踪推荐眼镜一：硬件篇.md","raw":"---\ntitle: 眼动追踪推荐眼镜一：硬件篇\ndate: 2019-09-24 01:04:25\ntags:\n---\n\n硬件组成部分主要就是眼镜架、摄像头和供电系统。\n\n可以参考的开源方案有\n* Pupil Labs  \nhttps://pupil-labs.com/\n\n\n当前设计使用的是USB摄像头直接连接电脑的方案：240°鱼眼摄像头被固定在眼镜框正前方负责采集用户视野图像，720P摄像头则固定在右前方伸出的支架上负责采集右眼图像，摄像头通过USB与计算机连接完成图像传输。\n\n以下是对ip摄像头的测试，计划下一步用于眼镜的改进。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<html>\n<head>\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n## ip摄像头\n\n45元的WIFI摄像头模块，能玩出什么花样？ - 知乎  \nhttps://zhuanlan.zhihu.com/p/60565132\n\nip摄像头选用ESP32-CAM模块，包括ESP32wifi模块和一个OV2640的200W像素摄像头。\n\n### 烧录固件\n\n硬件连接，注意需要将GPIO0和边上的GND短接进入烧录模式\n\n| USB-TTL    |   ESP32-CAM    |\n|  :----:    | :----:         |\n| 3.3V       |   VCC          |\n| GND        |   GND          |\n| RX         |   U0T          |\n| TX         |   U0R          |\n|            |   IO0和GND短接  |\n\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\01.jpg\">\n\n烧录工具我们用的是Arduino IDE，首先需要添加ESP32的芯片支持  \n打开首选项，在附加开发板管理器网址里填上：https://dl.espressif.com/dl/package_esp32_index.json ，然后单击 好 。\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\04.png\">\n\n\n然后在工具里打开开发板管理器，等待索引做完之后找到ESP32并安装。\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\00.png\">\n\n在github下载示例代码。  \n* RuiSantosdotme/arduino-esp32-CameraWebServer: CameraWebServer for ESP32-CAM in Arduino IDE  \nhttps://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer\n\n\n打开CameraWebServer.ino文件，进行一些设置\n``` c\n// Select camera model\n//#define CAMERA_MODEL_WROVER_KIT\n//#define CAMERA_MODEL_M5STACK_PSRAM\n#define CAMERA_MODEL_AI_THINKER\n\nconst char* ssid = \"REPLACE_WITH_YOUR_SSID\";\nconst char* password = \"REPLACE_WITH_YOUR_PASSWORD\";\n```\n\n\n\n在开发板里面选对我们需要的开发板和相关设置，然后点击上传就好。\n\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\02.png\">\n\n\n### 测试\n\n通过浏览器输入ESP32-CAM的IP地址，就能看到设置页面了。\n\n点击Start Stream就能看到实时影像了。\n\n通过python脚本读取图像。\n\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n```python  \nimport cv2\nimport urllib.request\nimport numpy as np\nhost = \"192.168.0.100:81\" # 在这里记得修改ip，否则是无法调用的，刚刚浏览器输入的地址\nhoststr = 'http://' + host + '/stream'\nprint('Streaming ' + hoststr)\nprint('Print Esc to quit')\nstream=urllib.request.urlopen(hoststr)\nbytes=bytes()\nwhile True:\n    bytes+=stream.read(1024)\n    a = bytes.find(b'\\xff\\xd8')\n    b = bytes.find(b'\\xff\\xd9')\n    i = 0\n    if a!=-1 and b!=-1:\n        jpg = bytes[a:b+2]\n        bytes= bytes[b+2:]\n        #flags = 1 for color image\n        try:\n            i = cv2.imdecode(np.fromstring(jpg, dtype=np.uint8),flags=1)\n            # print i.shape\n            cv2.imshow(\"wjw\",i)\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                exit(0)\n        except Exception as e:\n            print('保存失败', e)\n```\n</div>\n</div>\n</body>\n\n<div align=center>\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\06.png\">\n</div>\n\n\n\n\n### 问题记录\n\n* 编译项目报错 “sketch\\app_httpd.cpp:23:20: fatal error: dl_lib.h: No such file or directory”\n\napp_httpd.cpp 中注释相应库\n``` c\n//#include \"dl_lib.h\"\n```\n\n* 编译项目报错 “ \"WiFi.h\" 对应多个库\n 已使用： C:\\Users\\Administrator\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.3\\libraries\\WiFi\n 未使用：H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi\nexit status 1 ”\n\n移除文件夹 H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi\n\n* 点击Start Stream没有反应。\n\n<div align=center>\n<img src = \"眼动追踪推荐眼镜一：硬件篇\\03.png\">\n</div>\n使用Chrome浏览器。\n\n* 注意供电。\n\n\n","slug":"眼动追踪推荐眼镜一：硬件篇","published":1,"updated":"2020-01-05T19:13:24.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507w002h4cvj9tm20e1w","content":"<p>硬件组成部分主要就是眼镜架、摄像头和供电系统。</p>\n<p>可以参考的开源方案有</p>\n<ul>\n<li>Pupil Labs<br><a href=\"https://pupil-labs.com/\" target=\"_blank\" rel=\"noopener\">https://pupil-labs.com/</a></li>\n</ul>\n<p>当前设计使用的是USB摄像头直接连接电脑的方案：240°鱼眼摄像头被固定在眼镜框正前方负责采集用户视野图像，720P摄像头则固定在右前方伸出的支架上负责采集右眼图像，摄像头通过USB与计算机连接完成图像传输。</p>\n<p>以下是对ip摄像头的测试，计划下一步用于眼镜的改进。</p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n<h2 id=\"ip摄像头\"><a href=\"#ip摄像头\" class=\"headerlink\" title=\"ip摄像头\"></a>ip摄像头</h2><p>45元的WIFI摄像头模块，能玩出什么花样？ - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/60565132\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/60565132</a></p>\n<p>ip摄像头选用ESP32-CAM模块，包括ESP32wifi模块和一个OV2640的200W像素摄像头。</p>\n<h3 id=\"烧录固件\"><a href=\"#烧录固件\" class=\"headerlink\" title=\"烧录固件\"></a>烧录固件</h3><p>硬件连接，注意需要将GPIO0和边上的GND短接进入烧录模式</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">USB-TTL</th>\n<th style=\"text-align:center\">ESP32-CAM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">3.3V</td>\n<td style=\"text-align:center\">VCC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GND</td>\n<td style=\"text-align:center\">GND</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RX</td>\n<td style=\"text-align:center\">U0T</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TX</td>\n<td style=\"text-align:center\">U0R</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">IO0和GND短接</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/01.jpg\"></p>\n<p>烧录工具我们用的是Arduino IDE，首先需要添加ESP32的芯片支持<br>打开首选项，在附加开发板管理器网址里填上：<a href=\"https://dl.espressif.com/dl/package_esp32_index.json\" target=\"_blank\" rel=\"noopener\">https://dl.espressif.com/dl/package_esp32_index.json</a> ，然后单击 好 。<br><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/04.png\"></p>\n<p>然后在工具里打开开发板管理器，等待索引做完之后找到ESP32并安装。<br><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/00.png\"></p>\n<p>在github下载示例代码。  </p>\n<ul>\n<li>RuiSantosdotme/arduino-esp32-CameraWebServer: CameraWebServer for ESP32-CAM in Arduino IDE<br><a href=\"https://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer\" target=\"_blank\" rel=\"noopener\">https://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer</a></li>\n</ul>\n<p>打开CameraWebServer.ino文件，进行一些设置<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Select camera model</span></span><br><span class=\"line\"><span class=\"comment\">//#define CAMERA_MODEL_WROVER_KIT</span></span><br><span class=\"line\"><span class=\"comment\">//#define CAMERA_MODEL_M5STACK_PSRAM</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CAMERA_MODEL_AI_THINKER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ssid = <span class=\"string\">\"REPLACE_WITH_YOUR_SSID\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* password = <span class=\"string\">\"REPLACE_WITH_YOUR_PASSWORD\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>在开发板里面选对我们需要的开发板和相关设置，然后点击上传就好。</p>\n<p><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/02.png\"></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>通过浏览器输入ESP32-CAM的IP地址，就能看到设置页面了。</p>\n<p>点击Start Stream就能看到实时影像了。</p>\n<p>通过python脚本读取图像。</p>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">host = <span class=\"string\">\"192.168.0.100:81\"</span> <span class=\"comment\"># 在这里记得修改ip，否则是无法调用的，刚刚浏览器输入的地址</span></span><br><span class=\"line\">hoststr = <span class=\"string\">'http://'</span> + host + <span class=\"string\">'/stream'</span></span><br><span class=\"line\">print(<span class=\"string\">'Streaming '</span> + hoststr)</span><br><span class=\"line\">print(<span class=\"string\">'Print Esc to quit'</span>)</span><br><span class=\"line\">stream=urllib.request.urlopen(hoststr)</span><br><span class=\"line\">bytes=bytes()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    bytes+=stream.read(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    a = bytes.find(<span class=\"string\">b'\\xff\\xd8'</span>)</span><br><span class=\"line\">    b = bytes.find(<span class=\"string\">b'\\xff\\xd9'</span>)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a!=<span class=\"number\">-1</span> <span class=\"keyword\">and</span> b!=<span class=\"number\">-1</span>:</span><br><span class=\"line\">        jpg = bytes[a:b+<span class=\"number\">2</span>]</span><br><span class=\"line\">        bytes= bytes[b+<span class=\"number\">2</span>:]</span><br><span class=\"line\">        <span class=\"comment\">#flags = 1 for color image</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            i = cv2.imdecode(np.fromstring(jpg, dtype=np.uint8),flags=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\"># print i.shape</span></span><br><span class=\"line\">            cv2.imshow(<span class=\"string\">\"wjw\"</span>,i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cv2.waitKey(<span class=\"number\">1</span>) &amp; <span class=\"number\">0xFF</span> == ord(<span class=\"string\">'q'</span>):</span><br><span class=\"line\">                exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(<span class=\"string\">'保存失败'</span>, e)</span><br></pre></td></tr></table></figure>\n\n</div>\n</div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n\n<div align=\"center\">\n<img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/06.png\">\n</div>\n\n\n\n\n<h3 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h3><ul>\n<li>编译项目报错 “sketch\\app_httpd.cpp:23:20: fatal error: dl_lib.h: No such file or directory”</li>\n</ul>\n<p>app_httpd.cpp 中注释相应库<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include \"dl_lib.h\"</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>编译项目报错 “ “WiFi.h” 对应多个库<br>已使用： C:\\Users\\Administrator\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.3\\libraries\\WiFi<br>未使用：H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi<br>exit status 1 ”</li>\n</ul>\n<p>移除文件夹 H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi</p>\n<ul>\n<li>点击Start Stream没有反应。</li>\n</ul>\n<p><div align=\"center\">\n<img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/03.png\">\n</div><br>使用Chrome浏览器。</p>\n<ul>\n<li>注意供电。</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p>硬件组成部分主要就是眼镜架、摄像头和供电系统。</p>\n<p>可以参考的开源方案有</p>\n<ul>\n<li>Pupil Labs<br><a href=\"https://pupil-labs.com/\" target=\"_blank\" rel=\"noopener\">https://pupil-labs.com/</a></li>\n</ul>\n<p>当前设计使用的是USB摄像头直接连接电脑的方案：240°鱼眼摄像头被固定在眼镜框正前方负责采集用户视野图像，720P摄像头则固定在右前方伸出的支架上负责采集右眼图像，摄像头通过USB与计算机连接完成图像传输。</p>\n<p>以下是对ip摄像头的测试，计划下一步用于眼镜的改进。</p>","more":"<the rest of contents | 余下全文>\n\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\"> \n<title>title_test</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n<h2 id=\"ip摄像头\"><a href=\"#ip摄像头\" class=\"headerlink\" title=\"ip摄像头\"></a>ip摄像头</h2><p>45元的WIFI摄像头模块，能玩出什么花样？ - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/60565132\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/60565132</a></p>\n<p>ip摄像头选用ESP32-CAM模块，包括ESP32wifi模块和一个OV2640的200W像素摄像头。</p>\n<h3 id=\"烧录固件\"><a href=\"#烧录固件\" class=\"headerlink\" title=\"烧录固件\"></a>烧录固件</h3><p>硬件连接，注意需要将GPIO0和边上的GND短接进入烧录模式</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">USB-TTL</th>\n<th style=\"text-align:center\">ESP32-CAM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">3.3V</td>\n<td style=\"text-align:center\">VCC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GND</td>\n<td style=\"text-align:center\">GND</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RX</td>\n<td style=\"text-align:center\">U0T</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TX</td>\n<td style=\"text-align:center\">U0R</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">IO0和GND短接</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/01.jpg\"></p>\n<p>烧录工具我们用的是Arduino IDE，首先需要添加ESP32的芯片支持<br>打开首选项，在附加开发板管理器网址里填上：<a href=\"https://dl.espressif.com/dl/package_esp32_index.json\" target=\"_blank\" rel=\"noopener\">https://dl.espressif.com/dl/package_esp32_index.json</a> ，然后单击 好 。<br><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/04.png\"></p>\n<p>然后在工具里打开开发板管理器，等待索引做完之后找到ESP32并安装。<br><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/00.png\"></p>\n<p>在github下载示例代码。  </p>\n<ul>\n<li>RuiSantosdotme/arduino-esp32-CameraWebServer: CameraWebServer for ESP32-CAM in Arduino IDE<br><a href=\"https://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer\" target=\"_blank\" rel=\"noopener\">https://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer</a></li>\n</ul>\n<p>打开CameraWebServer.ino文件，进行一些设置<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Select camera model</span></span><br><span class=\"line\"><span class=\"comment\">//#define CAMERA_MODEL_WROVER_KIT</span></span><br><span class=\"line\"><span class=\"comment\">//#define CAMERA_MODEL_M5STACK_PSRAM</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CAMERA_MODEL_AI_THINKER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ssid = <span class=\"string\">\"REPLACE_WITH_YOUR_SSID\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* password = <span class=\"string\">\"REPLACE_WITH_YOUR_PASSWORD\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>在开发板里面选对我们需要的开发板和相关设置，然后点击上传就好。</p>\n<p><img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/02.png\"></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>通过浏览器输入ESP32-CAM的IP地址，就能看到设置页面了。</p>\n<p>点击Start Stream就能看到实时影像了。</p>\n<p>通过python脚本读取图像。</p>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">host = <span class=\"string\">\"192.168.0.100:81\"</span> <span class=\"comment\"># 在这里记得修改ip，否则是无法调用的，刚刚浏览器输入的地址</span></span><br><span class=\"line\">hoststr = <span class=\"string\">'http://'</span> + host + <span class=\"string\">'/stream'</span></span><br><span class=\"line\">print(<span class=\"string\">'Streaming '</span> + hoststr)</span><br><span class=\"line\">print(<span class=\"string\">'Print Esc to quit'</span>)</span><br><span class=\"line\">stream=urllib.request.urlopen(hoststr)</span><br><span class=\"line\">bytes=bytes()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    bytes+=stream.read(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    a = bytes.find(<span class=\"string\">b'\\xff\\xd8'</span>)</span><br><span class=\"line\">    b = bytes.find(<span class=\"string\">b'\\xff\\xd9'</span>)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a!=<span class=\"number\">-1</span> <span class=\"keyword\">and</span> b!=<span class=\"number\">-1</span>:</span><br><span class=\"line\">        jpg = bytes[a:b+<span class=\"number\">2</span>]</span><br><span class=\"line\">        bytes= bytes[b+<span class=\"number\">2</span>:]</span><br><span class=\"line\">        <span class=\"comment\">#flags = 1 for color image</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            i = cv2.imdecode(np.fromstring(jpg, dtype=np.uint8),flags=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\"># print i.shape</span></span><br><span class=\"line\">            cv2.imshow(<span class=\"string\">\"wjw\"</span>,i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cv2.waitKey(<span class=\"number\">1</span>) &amp; <span class=\"number\">0xFF</span> == ord(<span class=\"string\">'q'</span>):</span><br><span class=\"line\">                exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(<span class=\"string\">'保存失败'</span>, e)</span><br></pre></td></tr></table></figure>\n\n</div>\n</div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n\n<div align=\"center\">\n<img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/06.png\">\n</div>\n\n\n\n\n<h3 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h3><ul>\n<li>编译项目报错 “sketch\\app_httpd.cpp:23:20: fatal error: dl_lib.h: No such file or directory”</li>\n</ul>\n<p>app_httpd.cpp 中注释相应库<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include \"dl_lib.h\"</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>编译项目报错 “ “WiFi.h” 对应多个库<br>已使用： C:\\Users\\Administrator\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.3\\libraries\\WiFi<br>未使用：H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi<br>exit status 1 ”</li>\n</ul>\n<p>移除文件夹 H:\\Program Files\\arduino-1.8.3\\libraries\\WiFi</p>\n<ul>\n<li>点击Start Stream没有反应。</li>\n</ul>\n<p><div align=\"center\">\n<img src=\"/2019/09/24/眼动追踪推荐眼镜一：硬件篇/03.png\">\n</div><br>使用Chrome浏览器。</p>\n<ul>\n<li>注意供电。</li>\n</ul>\n</the>"},{"title":"眼动追踪推荐眼镜","date":"2019-09-19T11:09:09.000Z","_content":"<div align=center>\n<img src = \"眼动追踪推荐眼镜\\00.png\" >\n</div>\n\n## WHY  \n\n眼睛是人类面部最为显著的特征之一，眼睛及其运动在用户的认知、兴趣、情绪表达等过程中有着至关重要的作用。  \n\n眼动追踪技术通过追踪人体眼球运动，来识别用户所处的环境，预测用户的需求及状态，并进行响应，以实现用眼睛控制设备、完成一些操作。\n\nAR眼镜自诞生起就为人类更加直观地理解眼前的世界提供了诸多便利。结合眼动追踪技术，AR眼镜可以更加了解用户的兴趣点和需求，提供更精准的信息推荐，为用户带来更加自然的交互体验。\n\n\n## WHAT  \n本文涉及一种人眼注视点的实时估计眼镜，该系统通过提取人眼信息，建立人眼与兴趣点映射关系，实现用户关注信息的实时推荐功能。\n\n本文主要从以下三个方面进行研究：\n* 首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  \n* 其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  \n* 最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。\n\n## HOW\n\nstep1. 眼镜上部署两个ip摄像头，camera1获取用户视野图像，camera2获取用户眼睛图像，图像实时回传至中央处理器cpu；  \nstep2.1 眼动信息处理，提取camera2中用户眼眶和眼球的关键点信息；  \nstep2.2 兴趣点估计，由step2中的关键点特征估算camera1中人眼注视点；  \nstep3. 用户视野图像目标检测，实时检测camera1中的待推荐目标，记录相应位置信息；  \nstep4. 识别与信息推荐，判断step2中计算的兴趣点是否落在step3中计算的识别框中，进行语音信息推荐。\n\n\n\n\n<div align=center>\n<img src = \"眼动追踪推荐眼镜\\detect.gif\" width=500 height=150>\n</div>\n\n\n\n\n## 参考资料\n\n* 一文读懂眼动追踪技术及应用  \nhttps://mp.weixin.qq.com/s?src=11&timestamp=1569225062&ver=1869&signature=ML2J84rjyrwpwNWYIXxrqaJIq7YZdGRAfzd8*q-v2vtSxIpREhSF0MpcjruTuYEFfgRR15F9IfmkCg1iQ1HY4hZtzFGT3gOF8LGyVoxKTtr89LIuel9h6XbniBG2y-w0&new=1   \n\n\n\n\n","source":"_posts/眼动追踪推荐眼镜.md","raw":"---\ntitle: 眼动追踪推荐眼镜\ndate: 2019-09-19 19:09:09\ntags:\n---\n<div align=center>\n<img src = \"眼动追踪推荐眼镜\\00.png\" >\n</div>\n\n## WHY  \n\n眼睛是人类面部最为显著的特征之一，眼睛及其运动在用户的认知、兴趣、情绪表达等过程中有着至关重要的作用。  \n\n眼动追踪技术通过追踪人体眼球运动，来识别用户所处的环境，预测用户的需求及状态，并进行响应，以实现用眼睛控制设备、完成一些操作。\n\nAR眼镜自诞生起就为人类更加直观地理解眼前的世界提供了诸多便利。结合眼动追踪技术，AR眼镜可以更加了解用户的兴趣点和需求，提供更精准的信息推荐，为用户带来更加自然的交互体验。\n\n\n## WHAT  \n本文涉及一种人眼注视点的实时估计眼镜，该系统通过提取人眼信息，建立人眼与兴趣点映射关系，实现用户关注信息的实时推荐功能。\n\n本文主要从以下三个方面进行研究：\n* 首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  \n* 其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  \n* 最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。\n\n## HOW\n\nstep1. 眼镜上部署两个ip摄像头，camera1获取用户视野图像，camera2获取用户眼睛图像，图像实时回传至中央处理器cpu；  \nstep2.1 眼动信息处理，提取camera2中用户眼眶和眼球的关键点信息；  \nstep2.2 兴趣点估计，由step2中的关键点特征估算camera1中人眼注视点；  \nstep3. 用户视野图像目标检测，实时检测camera1中的待推荐目标，记录相应位置信息；  \nstep4. 识别与信息推荐，判断step2中计算的兴趣点是否落在step3中计算的识别框中，进行语音信息推荐。\n\n\n\n\n<div align=center>\n<img src = \"眼动追踪推荐眼镜\\detect.gif\" width=500 height=150>\n</div>\n\n\n\n\n## 参考资料\n\n* 一文读懂眼动追踪技术及应用  \nhttps://mp.weixin.qq.com/s?src=11&timestamp=1569225062&ver=1869&signature=ML2J84rjyrwpwNWYIXxrqaJIq7YZdGRAfzd8*q-v2vtSxIpREhSF0MpcjruTuYEFfgRR15F9IfmkCg1iQ1HY4hZtzFGT3gOF8LGyVoxKTtr89LIuel9h6XbniBG2y-w0&new=1   \n\n\n\n\n","slug":"眼动追踪推荐眼镜","published":1,"updated":"2020-01-05T19:13:24.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an507x002k4cvj14t8xwsd","content":"<div align=\"center\">\n<img src=\"/2019/09/19/眼动追踪推荐眼镜/00.png\">\n</div>\n\n<h2 id=\"WHY\"><a href=\"#WHY\" class=\"headerlink\" title=\"WHY\"></a>WHY</h2><p>眼睛是人类面部最为显著的特征之一，眼睛及其运动在用户的认知、兴趣、情绪表达等过程中有着至关重要的作用。  </p>\n<p>眼动追踪技术通过追踪人体眼球运动，来识别用户所处的环境，预测用户的需求及状态，并进行响应，以实现用眼睛控制设备、完成一些操作。</p>\n<p>AR眼镜自诞生起就为人类更加直观地理解眼前的世界提供了诸多便利。结合眼动追踪技术，AR眼镜可以更加了解用户的兴趣点和需求，提供更精准的信息推荐，为用户带来更加自然的交互体验。</p>\n<h2 id=\"WHAT\"><a href=\"#WHAT\" class=\"headerlink\" title=\"WHAT\"></a>WHAT</h2><p>本文涉及一种人眼注视点的实时估计眼镜，该系统通过提取人眼信息，建立人眼与兴趣点映射关系，实现用户关注信息的实时推荐功能。</p>\n<p>本文主要从以下三个方面进行研究：</p>\n<ul>\n<li>首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  </li>\n<li>其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  </li>\n<li>最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。</li>\n</ul>\n<h2 id=\"HOW\"><a href=\"#HOW\" class=\"headerlink\" title=\"HOW\"></a>HOW</h2><p>step1. 眼镜上部署两个ip摄像头，camera1获取用户视野图像，camera2获取用户眼睛图像，图像实时回传至中央处理器cpu；<br>step2.1 眼动信息处理，提取camera2中用户眼眶和眼球的关键点信息；<br>step2.2 兴趣点估计，由step2中的关键点特征估算camera1中人眼注视点；<br>step3. 用户视野图像目标检测，实时检测camera1中的待推荐目标，记录相应位置信息；<br>step4. 识别与信息推荐，判断step2中计算的兴趣点是否落在step3中计算的识别框中，进行语音信息推荐。</p>\n<div align=\"center\">\n<img src=\"/2019/09/19/眼动追踪推荐眼镜/detect.gif\" width=\"500\" height=\"150\">\n</div>\n\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>一文读懂眼动追踪技术及应用<br><a href=\"https://mp.weixin.qq.com/s?src=11&amp;timestamp=1569225062&amp;ver=1869&amp;signature=ML2J84rjyrwpwNWYIXxrqaJIq7YZdGRAfzd8*q-v2vtSxIpREhSF0MpcjruTuYEFfgRR15F9IfmkCg1iQ1HY4hZtzFGT3gOF8LGyVoxKTtr89LIuel9h6XbniBG2y-w0&amp;new=1\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1569225062&amp;ver=1869&amp;signature=ML2J84rjyrwpwNWYIXxrqaJIq7YZdGRAfzd8*q-v2vtSxIpREhSF0MpcjruTuYEFfgRR15F9IfmkCg1iQ1HY4hZtzFGT3gOF8LGyVoxKTtr89LIuel9h6XbniBG2y-w0&amp;new=1</a>   </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\">\n<img src=\"/2019/09/19/眼动追踪推荐眼镜/00.png\">\n</div>\n\n<h2 id=\"WHY\"><a href=\"#WHY\" class=\"headerlink\" title=\"WHY\"></a>WHY</h2><p>眼睛是人类面部最为显著的特征之一，眼睛及其运动在用户的认知、兴趣、情绪表达等过程中有着至关重要的作用。  </p>\n<p>眼动追踪技术通过追踪人体眼球运动，来识别用户所处的环境，预测用户的需求及状态，并进行响应，以实现用眼睛控制设备、完成一些操作。</p>\n<p>AR眼镜自诞生起就为人类更加直观地理解眼前的世界提供了诸多便利。结合眼动追踪技术，AR眼镜可以更加了解用户的兴趣点和需求，提供更精准的信息推荐，为用户带来更加自然的交互体验。</p>\n<h2 id=\"WHAT\"><a href=\"#WHAT\" class=\"headerlink\" title=\"WHAT\"></a>WHAT</h2><p>本文涉及一种人眼注视点的实时估计眼镜，该系统通过提取人眼信息，建立人眼与兴趣点映射关系，实现用户关注信息的实时推荐功能。</p>\n<p>本文主要从以下三个方面进行研究：</p>\n<ul>\n<li>首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  </li>\n<li>其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  </li>\n<li>最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。</li>\n</ul>\n<h2 id=\"HOW\"><a href=\"#HOW\" class=\"headerlink\" title=\"HOW\"></a>HOW</h2><p>step1. 眼镜上部署两个ip摄像头，camera1获取用户视野图像，camera2获取用户眼睛图像，图像实时回传至中央处理器cpu；<br>step2.1 眼动信息处理，提取camera2中用户眼眶和眼球的关键点信息；<br>step2.2 兴趣点估计，由step2中的关键点特征估算camera1中人眼注视点；<br>step3. 用户视野图像目标检测，实时检测camera1中的待推荐目标，记录相应位置信息；<br>step4. 识别与信息推荐，判断step2中计算的兴趣点是否落在step3中计算的识别框中，进行语音信息推荐。</p>\n<div align=\"center\">\n<img src=\"/2019/09/19/眼动追踪推荐眼镜/detect.gif\" width=\"500\" height=\"150\">\n</div>\n\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>一文读懂眼动追踪技术及应用<br><a href=\"https://mp.weixin.qq.com/s?src=11&amp;timestamp=1569225062&amp;ver=1869&amp;signature=ML2J84rjyrwpwNWYIXxrqaJIq7YZdGRAfzd8*q-v2vtSxIpREhSF0MpcjruTuYEFfgRR15F9IfmkCg1iQ1HY4hZtzFGT3gOF8LGyVoxKTtr89LIuel9h6XbniBG2y-w0&amp;new=1\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1569225062&amp;ver=1869&amp;signature=ML2J84rjyrwpwNWYIXxrqaJIq7YZdGRAfzd8*q-v2vtSxIpREhSF0MpcjruTuYEFfgRR15F9IfmkCg1iQ1HY4hZtzFGT3gOF8LGyVoxKTtr89LIuel9h6XbniBG2y-w0&amp;new=1</a>   </li>\n</ul>\n"},{"title":"眼动追踪推荐眼镜二：软件篇","date":"2019-09-24T11:45:30.000Z","_content":"\n软件部分主要解决下面三个问题：\n* 首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  \n* 其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  \n* 最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 人眼关键点检测\n\n首先使用人眼摄像头采集人眼图像数据，然后使用dlib自带的image数据库标注工具制作数据集，最后通过dlib的官方代码训练出模型，并对模型进行测试。\n\n模型分别对眼眶和眼珠进行识别，并检测它们的位置。\n\n* dlib train_object_detector  \nhttp://dlib.net/train_object_detector.py.html\n\n``` python\nimport os\nimport sys\nimport glob\nimport dlib\n\noptions = dlib.simple_object_detector_training_options()\n# 单个眼睛不是左右对称的\n# options.add_left_right_image_flips = True\n# 支持向量机的C参数，通常默认取为5.自己适当更改参数以达到最好的效果\noptions.C = 5\n# 线程数，你电脑有4核的话就填4\noptions.num_threads = 4\noptions.be_verbose = True\n\ntraining_xml_path = \"pupil.xml\"\ndlib.train_simple_object_detector(training_xml_path, \"pupil.svm\", options)\nprint(\"Training accuracy: {}\".format(\n    dlib.test_simple_object_detector(training_xml_path, \"pupil.svm\")))\n\ntraining_xml_path = \"eye.xml\"\ndlib.train_simple_object_detector(training_xml_path, \"eye.svm\", options)\nprint(\"Training accuracy: {}\".format(\n    dlib.test_simple_object_detector(training_xml_path, \"eye.svm\")))\n\n```\n\n\n## 兴趣点映射估计\n\n分别采集人眼图像中眼眶和眼珠的坐标数据和视野图像中目标点的坐标数据，通过sklearn中的梯度提升回归算法建立人眼关键点数据和兴趣点数据的映射关系。  \n\n``` python\n# 读取数据\npoint = pd.read_csv(\"csv_data/points_p.csv\")\nworld_x = point[\"world_x\"]\nworld_y = point[\"world_y\"]\n\n# 读取数据中的标签列\neye = point[['eye_x', 'eye_y', 'pipil_x', 'pupil_y', 'pupil_w', 'pupil_h']]\nprint(eye)\n\nclf = GBR(max_depth=10)\n# clf = SGDR(loss='huber',penalty='l2',alpha=0.9,max_iter=1000)\n# clf = KNeighborsRegressor(n_neighbors=20, weights=\"distance\", algorithm=\"ball_tree\", leaf_size=50)\n\nclf.fit(eye, world_x)\njoblib.dump(clf, \"model/world_x.pkl\")\nprint('得分：',clf.score(eye, world_x))\n\nclf.fit(eye, world_y)\njoblib.dump(clf, \"model/world_y.pkl\")\nprint('得分：',clf.score(eye, world_y))\n\n```\n\n## 目标检测\n\n### yolov3\n\n制作voc格式数据集，使用keras版本yolov3训练识别模型\n\n### ImageAI\n\n使用ImageAI提供的方法对视野图像进行目标检测。\n\n``` python\n# coding:utf-8\n#  imageai下载地址：https://github.com/OlafenwaMoses/ImageAI\n#  resnet50_coco_best_v2.1.0.h5 模型下载地址：https://github.com/fizyr/keras-retinanet/releases/\nfrom imageai.Detection import ObjectDetection  # 导入了 ImageAI 目标检测类\nimport cv2\nimport os\nimport time\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\nimport matplotlib.pyplot as plt\n\ndef targetDetection(imgArray,model_path):\n    \"\"\"\n    :param imgArray: 图片数据，类型为ndarray\n    :param model_path: retinanet模型路径\n    :return:\n    \"\"\"\n    path = os.path.abspath(model_path)\n    detector = ObjectDetection()  # 定义了目标检测类\n    detector.setModelTypeAsRetinaNet()  # 模型的类型设置为 RetinaNet\n    detector.setModelPath(path)  # 将模型路径设置为 RetinaNet 模型的路径\n    detector.loadModel()  # 模型加载到的目标检测类\n    # 调用目标检测函数，解析输入的和输出的图像路径。\n    detections = detector.detectObjectsFromImage(input_image=imgArray,\n                                                 input_type='array',output_type='array')\n    return detections\n\ndata = plt.imread('../img_classify/05-30.jpg')\nmodel_path = ('../model/resnet50_coco_best_v2.1.0.h5')\nt1 = time.time()\nimgInfo = targetDetection(data,model_path)\nt2 = time.time()\nprint(t2-t1)\nplt.imshow(imgInfo[0])\nplt.show()\n```\n\n### dlib（hog+svm）\n\n首先使用dlib自带的image数据库标注工具制作数据集，然后通过dlib的官方代码对每一个待检测目标依次训练模型，最后将模型合并进行测试。\n\n``` python\n\ndf = pd.DataFrame(\n    100*np.ones((6, 6)),\n    columns=[\"name\", \"x\", \"y\", \"w\", \"h\", \"confidences\"],\n)\n\ndetector1 = dlib.fhog_object_detector(\"../model/sz.svm\")\ndetector2 = dlib.fhog_object_detector(\"../model/cz.svm\")\ndetector3 = dlib.fhog_object_detector(\"../model/dp.svm\")\ndetector4 = dlib.fhog_object_detector(\"../model/pb.svm\")\ndetector5 = dlib.fhog_object_detector(\"../model/zb.svm\")\ndetector6 = dlib.fhog_object_detector(\"../model/mf.svm\")\n\ndetectors = [detector1, detector2,detector3, detector4,detector5, detector6]\n\n[boxes, confidences, detector_idxs] = dlib.fhog_object_detector.run_multiple(detectors, image, upsample_num_times=1, adjust_threshold=0.0)\n\nfor i in range(len(boxes)):\n    # print(\"detector {} found box {} with confidence {}.\".format(detector_idxs[i], boxes[i], confidences[i]))\n    df.iloc[i, 0] = detector_idxs[i]\n    df.iloc[i, 1] = boxes[i].left()\n    df.iloc[i, 2] = boxes[i].top()\n    df.iloc[i, 3] = boxes[i].right() - boxes[i].left()\n    df.iloc[i, 4] = boxes[i].bottom() - boxes[i].top()\n    df.iloc[i, 5] = round(confidences[i], 6)\n\n```\n","source":"_posts/眼动追踪推荐眼镜二：软件篇.md","raw":"---\ntitle: 眼动追踪推荐眼镜二：软件篇\ndate: 2019-09-24 19:45:30\ntags:\n---\n\n软件部分主要解决下面三个问题：\n* 首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  \n* 其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  \n* 最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 人眼关键点检测\n\n首先使用人眼摄像头采集人眼图像数据，然后使用dlib自带的image数据库标注工具制作数据集，最后通过dlib的官方代码训练出模型，并对模型进行测试。\n\n模型分别对眼眶和眼珠进行识别，并检测它们的位置。\n\n* dlib train_object_detector  \nhttp://dlib.net/train_object_detector.py.html\n\n``` python\nimport os\nimport sys\nimport glob\nimport dlib\n\noptions = dlib.simple_object_detector_training_options()\n# 单个眼睛不是左右对称的\n# options.add_left_right_image_flips = True\n# 支持向量机的C参数，通常默认取为5.自己适当更改参数以达到最好的效果\noptions.C = 5\n# 线程数，你电脑有4核的话就填4\noptions.num_threads = 4\noptions.be_verbose = True\n\ntraining_xml_path = \"pupil.xml\"\ndlib.train_simple_object_detector(training_xml_path, \"pupil.svm\", options)\nprint(\"Training accuracy: {}\".format(\n    dlib.test_simple_object_detector(training_xml_path, \"pupil.svm\")))\n\ntraining_xml_path = \"eye.xml\"\ndlib.train_simple_object_detector(training_xml_path, \"eye.svm\", options)\nprint(\"Training accuracy: {}\".format(\n    dlib.test_simple_object_detector(training_xml_path, \"eye.svm\")))\n\n```\n\n\n## 兴趣点映射估计\n\n分别采集人眼图像中眼眶和眼珠的坐标数据和视野图像中目标点的坐标数据，通过sklearn中的梯度提升回归算法建立人眼关键点数据和兴趣点数据的映射关系。  \n\n``` python\n# 读取数据\npoint = pd.read_csv(\"csv_data/points_p.csv\")\nworld_x = point[\"world_x\"]\nworld_y = point[\"world_y\"]\n\n# 读取数据中的标签列\neye = point[['eye_x', 'eye_y', 'pipil_x', 'pupil_y', 'pupil_w', 'pupil_h']]\nprint(eye)\n\nclf = GBR(max_depth=10)\n# clf = SGDR(loss='huber',penalty='l2',alpha=0.9,max_iter=1000)\n# clf = KNeighborsRegressor(n_neighbors=20, weights=\"distance\", algorithm=\"ball_tree\", leaf_size=50)\n\nclf.fit(eye, world_x)\njoblib.dump(clf, \"model/world_x.pkl\")\nprint('得分：',clf.score(eye, world_x))\n\nclf.fit(eye, world_y)\njoblib.dump(clf, \"model/world_y.pkl\")\nprint('得分：',clf.score(eye, world_y))\n\n```\n\n## 目标检测\n\n### yolov3\n\n制作voc格式数据集，使用keras版本yolov3训练识别模型\n\n### ImageAI\n\n使用ImageAI提供的方法对视野图像进行目标检测。\n\n``` python\n# coding:utf-8\n#  imageai下载地址：https://github.com/OlafenwaMoses/ImageAI\n#  resnet50_coco_best_v2.1.0.h5 模型下载地址：https://github.com/fizyr/keras-retinanet/releases/\nfrom imageai.Detection import ObjectDetection  # 导入了 ImageAI 目标检测类\nimport cv2\nimport os\nimport time\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\nimport matplotlib.pyplot as plt\n\ndef targetDetection(imgArray,model_path):\n    \"\"\"\n    :param imgArray: 图片数据，类型为ndarray\n    :param model_path: retinanet模型路径\n    :return:\n    \"\"\"\n    path = os.path.abspath(model_path)\n    detector = ObjectDetection()  # 定义了目标检测类\n    detector.setModelTypeAsRetinaNet()  # 模型的类型设置为 RetinaNet\n    detector.setModelPath(path)  # 将模型路径设置为 RetinaNet 模型的路径\n    detector.loadModel()  # 模型加载到的目标检测类\n    # 调用目标检测函数，解析输入的和输出的图像路径。\n    detections = detector.detectObjectsFromImage(input_image=imgArray,\n                                                 input_type='array',output_type='array')\n    return detections\n\ndata = plt.imread('../img_classify/05-30.jpg')\nmodel_path = ('../model/resnet50_coco_best_v2.1.0.h5')\nt1 = time.time()\nimgInfo = targetDetection(data,model_path)\nt2 = time.time()\nprint(t2-t1)\nplt.imshow(imgInfo[0])\nplt.show()\n```\n\n### dlib（hog+svm）\n\n首先使用dlib自带的image数据库标注工具制作数据集，然后通过dlib的官方代码对每一个待检测目标依次训练模型，最后将模型合并进行测试。\n\n``` python\n\ndf = pd.DataFrame(\n    100*np.ones((6, 6)),\n    columns=[\"name\", \"x\", \"y\", \"w\", \"h\", \"confidences\"],\n)\n\ndetector1 = dlib.fhog_object_detector(\"../model/sz.svm\")\ndetector2 = dlib.fhog_object_detector(\"../model/cz.svm\")\ndetector3 = dlib.fhog_object_detector(\"../model/dp.svm\")\ndetector4 = dlib.fhog_object_detector(\"../model/pb.svm\")\ndetector5 = dlib.fhog_object_detector(\"../model/zb.svm\")\ndetector6 = dlib.fhog_object_detector(\"../model/mf.svm\")\n\ndetectors = [detector1, detector2,detector3, detector4,detector5, detector6]\n\n[boxes, confidences, detector_idxs] = dlib.fhog_object_detector.run_multiple(detectors, image, upsample_num_times=1, adjust_threshold=0.0)\n\nfor i in range(len(boxes)):\n    # print(\"detector {} found box {} with confidence {}.\".format(detector_idxs[i], boxes[i], confidences[i]))\n    df.iloc[i, 0] = detector_idxs[i]\n    df.iloc[i, 1] = boxes[i].left()\n    df.iloc[i, 2] = boxes[i].top()\n    df.iloc[i, 3] = boxes[i].right() - boxes[i].left()\n    df.iloc[i, 4] = boxes[i].bottom() - boxes[i].top()\n    df.iloc[i, 5] = round(confidences[i], 6)\n\n```\n","slug":"眼动追踪推荐眼镜二：软件篇","published":1,"updated":"2020-01-05T19:13:24.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an508v00494cvjjmvaqdbg","content":"<p>软件部分主要解决下面三个问题：</p>\n<ul>\n<li>首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  </li>\n<li>其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  </li>\n<li>最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"人眼关键点检测\"><a href=\"#人眼关键点检测\" class=\"headerlink\" title=\"人眼关键点检测\"></a>人眼关键点检测</h2><p>首先使用人眼摄像头采集人眼图像数据，然后使用dlib自带的image数据库标注工具制作数据集，最后通过dlib的官方代码训练出模型，并对模型进行测试。</p>\n<p>模型分别对眼眶和眼珠进行识别，并检测它们的位置。</p>\n<ul>\n<li>dlib train_object_detector<br><a href=\"http://dlib.net/train_object_detector.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_object_detector.py.html</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> dlib</span><br><span class=\"line\"></span><br><span class=\"line\">options = dlib.simple_object_detector_training_options()</span><br><span class=\"line\"><span class=\"comment\"># 单个眼睛不是左右对称的</span></span><br><span class=\"line\"><span class=\"comment\"># options.add_left_right_image_flips = True</span></span><br><span class=\"line\"><span class=\"comment\"># 支持向量机的C参数，通常默认取为5.自己适当更改参数以达到最好的效果</span></span><br><span class=\"line\">options.C = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\"># 线程数，你电脑有4核的话就填4</span></span><br><span class=\"line\">options.num_threads = <span class=\"number\">4</span></span><br><span class=\"line\">options.be_verbose = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = <span class=\"string\">\"pupil.xml\"</span></span><br><span class=\"line\">dlib.train_simple_object_detector(training_xml_path, <span class=\"string\">\"pupil.svm\"</span>, options)</span><br><span class=\"line\">print(<span class=\"string\">\"Training accuracy: &#123;&#125;\"</span>.format(</span><br><span class=\"line\">    dlib.test_simple_object_detector(training_xml_path, <span class=\"string\">\"pupil.svm\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = <span class=\"string\">\"eye.xml\"</span></span><br><span class=\"line\">dlib.train_simple_object_detector(training_xml_path, <span class=\"string\">\"eye.svm\"</span>, options)</span><br><span class=\"line\">print(<span class=\"string\">\"Training accuracy: &#123;&#125;\"</span>.format(</span><br><span class=\"line\">    dlib.test_simple_object_detector(training_xml_path, <span class=\"string\">\"eye.svm\"</span>)))</span><br></pre></td></tr></table></figure>\n<h2 id=\"兴趣点映射估计\"><a href=\"#兴趣点映射估计\" class=\"headerlink\" title=\"兴趣点映射估计\"></a>兴趣点映射估计</h2><p>分别采集人眼图像中眼眶和眼珠的坐标数据和视野图像中目标点的坐标数据，通过sklearn中的梯度提升回归算法建立人眼关键点数据和兴趣点数据的映射关系。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取数据</span></span><br><span class=\"line\">point = pd.read_csv(<span class=\"string\">\"csv_data/points_p.csv\"</span>)</span><br><span class=\"line\">world_x = point[<span class=\"string\">\"world_x\"</span>]</span><br><span class=\"line\">world_y = point[<span class=\"string\">\"world_y\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取数据中的标签列</span></span><br><span class=\"line\">eye = point[[<span class=\"string\">'eye_x'</span>, <span class=\"string\">'eye_y'</span>, <span class=\"string\">'pipil_x'</span>, <span class=\"string\">'pupil_y'</span>, <span class=\"string\">'pupil_w'</span>, <span class=\"string\">'pupil_h'</span>]]</span><br><span class=\"line\">print(eye)</span><br><span class=\"line\"></span><br><span class=\"line\">clf = GBR(max_depth=<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># clf = SGDR(loss='huber',penalty='l2',alpha=0.9,max_iter=1000)</span></span><br><span class=\"line\"><span class=\"comment\"># clf = KNeighborsRegressor(n_neighbors=20, weights=\"distance\", algorithm=\"ball_tree\", leaf_size=50)</span></span><br><span class=\"line\"></span><br><span class=\"line\">clf.fit(eye, world_x)</span><br><span class=\"line\">joblib.dump(clf, <span class=\"string\">\"model/world_x.pkl\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'得分：'</span>,clf.score(eye, world_x))</span><br><span class=\"line\"></span><br><span class=\"line\">clf.fit(eye, world_y)</span><br><span class=\"line\">joblib.dump(clf, <span class=\"string\">\"model/world_y.pkl\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'得分：'</span>,clf.score(eye, world_y))</span><br></pre></td></tr></table></figure>\n<h2 id=\"目标检测\"><a href=\"#目标检测\" class=\"headerlink\" title=\"目标检测\"></a>目标检测</h2><h3 id=\"yolov3\"><a href=\"#yolov3\" class=\"headerlink\" title=\"yolov3\"></a>yolov3</h3><p>制作voc格式数据集，使用keras版本yolov3训练识别模型</p>\n<h3 id=\"ImageAI\"><a href=\"#ImageAI\" class=\"headerlink\" title=\"ImageAI\"></a>ImageAI</h3><p>使用ImageAI提供的方法对视野图像进行目标检测。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#  imageai下载地址：https://github.com/OlafenwaMoses/ImageAI</span></span><br><span class=\"line\"><span class=\"comment\">#  resnet50_coco_best_v2.1.0.h5 模型下载地址：https://github.com/fizyr/keras-retinanet/releases/</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> imageai.Detection <span class=\"keyword\">import</span> ObjectDetection  <span class=\"comment\"># 导入了 ImageAI 目标检测类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">os.environ[<span class=\"string\">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">targetDetection</span><span class=\"params\">(imgArray,model_path)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :param imgArray: 图片数据，类型为ndarray</span></span><br><span class=\"line\"><span class=\"string\">    :param model_path: retinanet模型路径</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    path = os.path.abspath(model_path)</span><br><span class=\"line\">    detector = ObjectDetection()  <span class=\"comment\"># 定义了目标检测类</span></span><br><span class=\"line\">    detector.setModelTypeAsRetinaNet()  <span class=\"comment\"># 模型的类型设置为 RetinaNet</span></span><br><span class=\"line\">    detector.setModelPath(path)  <span class=\"comment\"># 将模型路径设置为 RetinaNet 模型的路径</span></span><br><span class=\"line\">    detector.loadModel()  <span class=\"comment\"># 模型加载到的目标检测类</span></span><br><span class=\"line\">    <span class=\"comment\"># 调用目标检测函数，解析输入的和输出的图像路径。</span></span><br><span class=\"line\">    detections = detector.detectObjectsFromImage(input_image=imgArray,</span><br><span class=\"line\">                                                 input_type=<span class=\"string\">'array'</span>,output_type=<span class=\"string\">'array'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> detections</span><br><span class=\"line\"></span><br><span class=\"line\">data = plt.imread(<span class=\"string\">'../img_classify/05-30.jpg'</span>)</span><br><span class=\"line\">model_path = (<span class=\"string\">'../model/resnet50_coco_best_v2.1.0.h5'</span>)</span><br><span class=\"line\">t1 = time.time()</span><br><span class=\"line\">imgInfo = targetDetection(data,model_path)</span><br><span class=\"line\">t2 = time.time()</span><br><span class=\"line\">print(t2-t1)</span><br><span class=\"line\">plt.imshow(imgInfo[<span class=\"number\">0</span>])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"dlib（hog-svm）\"><a href=\"#dlib（hog-svm）\" class=\"headerlink\" title=\"dlib（hog+svm）\"></a>dlib（hog+svm）</h3><p>首先使用dlib自带的image数据库标注工具制作数据集，然后通过dlib的官方代码对每一个待检测目标依次训练模型，最后将模型合并进行测试。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">df = pd.DataFrame(</span><br><span class=\"line\">    <span class=\"number\">100</span>*np.ones((<span class=\"number\">6</span>, <span class=\"number\">6</span>)),</span><br><span class=\"line\">    columns=[<span class=\"string\">\"name\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"confidences\"</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">detector1 = dlib.fhog_object_detector(<span class=\"string\">\"../model/sz.svm\"</span>)</span><br><span class=\"line\">detector2 = dlib.fhog_object_detector(<span class=\"string\">\"../model/cz.svm\"</span>)</span><br><span class=\"line\">detector3 = dlib.fhog_object_detector(<span class=\"string\">\"../model/dp.svm\"</span>)</span><br><span class=\"line\">detector4 = dlib.fhog_object_detector(<span class=\"string\">\"../model/pb.svm\"</span>)</span><br><span class=\"line\">detector5 = dlib.fhog_object_detector(<span class=\"string\">\"../model/zb.svm\"</span>)</span><br><span class=\"line\">detector6 = dlib.fhog_object_detector(<span class=\"string\">\"../model/mf.svm\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">detectors = [detector1, detector2,detector3, detector4,detector5, detector6]</span><br><span class=\"line\"></span><br><span class=\"line\">[boxes, confidences, detector_idxs] = dlib.fhog_object_detector.run_multiple(detectors, image, upsample_num_times=<span class=\"number\">1</span>, adjust_threshold=<span class=\"number\">0.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(boxes)):</span><br><span class=\"line\">    <span class=\"comment\"># print(\"detector &#123;&#125; found box &#123;&#125; with confidence &#123;&#125;.\".format(detector_idxs[i], boxes[i], confidences[i]))</span></span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">0</span>] = detector_idxs[i]</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">1</span>] = boxes[i].left()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">2</span>] = boxes[i].top()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">3</span>] = boxes[i].right() - boxes[i].left()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">4</span>] = boxes[i].bottom() - boxes[i].top()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">5</span>] = round(confidences[i], <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n</the>","site":{"data":{}},"excerpt":"<p>软件部分主要解决下面三个问题：</p>\n<ul>\n<li>首先是人眼关键点的检测问题，通过多级级联的回归树进行眼眶和通孔的检测，得到关键点特征信息；  </li>\n<li>其次是兴趣点的估计问题，通过梯度提升回归算法建立人眼关键点和兴趣点的映射关系；  </li>\n<li>最后是兴趣点处的目标识别问题，通过yolo目标检测网络对检测视野中的待推荐目标，判断兴趣点是否落在识别框中。</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n\n<h2 id=\"人眼关键点检测\"><a href=\"#人眼关键点检测\" class=\"headerlink\" title=\"人眼关键点检测\"></a>人眼关键点检测</h2><p>首先使用人眼摄像头采集人眼图像数据，然后使用dlib自带的image数据库标注工具制作数据集，最后通过dlib的官方代码训练出模型，并对模型进行测试。</p>\n<p>模型分别对眼眶和眼珠进行识别，并检测它们的位置。</p>\n<ul>\n<li>dlib train_object_detector<br><a href=\"http://dlib.net/train_object_detector.py.html\" target=\"_blank\" rel=\"noopener\">http://dlib.net/train_object_detector.py.html</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> dlib</span><br><span class=\"line\"></span><br><span class=\"line\">options = dlib.simple_object_detector_training_options()</span><br><span class=\"line\"><span class=\"comment\"># 单个眼睛不是左右对称的</span></span><br><span class=\"line\"><span class=\"comment\"># options.add_left_right_image_flips = True</span></span><br><span class=\"line\"><span class=\"comment\"># 支持向量机的C参数，通常默认取为5.自己适当更改参数以达到最好的效果</span></span><br><span class=\"line\">options.C = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\"># 线程数，你电脑有4核的话就填4</span></span><br><span class=\"line\">options.num_threads = <span class=\"number\">4</span></span><br><span class=\"line\">options.be_verbose = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = <span class=\"string\">\"pupil.xml\"</span></span><br><span class=\"line\">dlib.train_simple_object_detector(training_xml_path, <span class=\"string\">\"pupil.svm\"</span>, options)</span><br><span class=\"line\">print(<span class=\"string\">\"Training accuracy: &#123;&#125;\"</span>.format(</span><br><span class=\"line\">    dlib.test_simple_object_detector(training_xml_path, <span class=\"string\">\"pupil.svm\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">training_xml_path = <span class=\"string\">\"eye.xml\"</span></span><br><span class=\"line\">dlib.train_simple_object_detector(training_xml_path, <span class=\"string\">\"eye.svm\"</span>, options)</span><br><span class=\"line\">print(<span class=\"string\">\"Training accuracy: &#123;&#125;\"</span>.format(</span><br><span class=\"line\">    dlib.test_simple_object_detector(training_xml_path, <span class=\"string\">\"eye.svm\"</span>)))</span><br></pre></td></tr></table></figure>\n<h2 id=\"兴趣点映射估计\"><a href=\"#兴趣点映射估计\" class=\"headerlink\" title=\"兴趣点映射估计\"></a>兴趣点映射估计</h2><p>分别采集人眼图像中眼眶和眼珠的坐标数据和视野图像中目标点的坐标数据，通过sklearn中的梯度提升回归算法建立人眼关键点数据和兴趣点数据的映射关系。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取数据</span></span><br><span class=\"line\">point = pd.read_csv(<span class=\"string\">\"csv_data/points_p.csv\"</span>)</span><br><span class=\"line\">world_x = point[<span class=\"string\">\"world_x\"</span>]</span><br><span class=\"line\">world_y = point[<span class=\"string\">\"world_y\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取数据中的标签列</span></span><br><span class=\"line\">eye = point[[<span class=\"string\">'eye_x'</span>, <span class=\"string\">'eye_y'</span>, <span class=\"string\">'pipil_x'</span>, <span class=\"string\">'pupil_y'</span>, <span class=\"string\">'pupil_w'</span>, <span class=\"string\">'pupil_h'</span>]]</span><br><span class=\"line\">print(eye)</span><br><span class=\"line\"></span><br><span class=\"line\">clf = GBR(max_depth=<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># clf = SGDR(loss='huber',penalty='l2',alpha=0.9,max_iter=1000)</span></span><br><span class=\"line\"><span class=\"comment\"># clf = KNeighborsRegressor(n_neighbors=20, weights=\"distance\", algorithm=\"ball_tree\", leaf_size=50)</span></span><br><span class=\"line\"></span><br><span class=\"line\">clf.fit(eye, world_x)</span><br><span class=\"line\">joblib.dump(clf, <span class=\"string\">\"model/world_x.pkl\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'得分：'</span>,clf.score(eye, world_x))</span><br><span class=\"line\"></span><br><span class=\"line\">clf.fit(eye, world_y)</span><br><span class=\"line\">joblib.dump(clf, <span class=\"string\">\"model/world_y.pkl\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'得分：'</span>,clf.score(eye, world_y))</span><br></pre></td></tr></table></figure>\n<h2 id=\"目标检测\"><a href=\"#目标检测\" class=\"headerlink\" title=\"目标检测\"></a>目标检测</h2><h3 id=\"yolov3\"><a href=\"#yolov3\" class=\"headerlink\" title=\"yolov3\"></a>yolov3</h3><p>制作voc格式数据集，使用keras版本yolov3训练识别模型</p>\n<h3 id=\"ImageAI\"><a href=\"#ImageAI\" class=\"headerlink\" title=\"ImageAI\"></a>ImageAI</h3><p>使用ImageAI提供的方法对视野图像进行目标检测。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#  imageai下载地址：https://github.com/OlafenwaMoses/ImageAI</span></span><br><span class=\"line\"><span class=\"comment\">#  resnet50_coco_best_v2.1.0.h5 模型下载地址：https://github.com/fizyr/keras-retinanet/releases/</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> imageai.Detection <span class=\"keyword\">import</span> ObjectDetection  <span class=\"comment\"># 导入了 ImageAI 目标检测类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">os.environ[<span class=\"string\">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">targetDetection</span><span class=\"params\">(imgArray,model_path)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :param imgArray: 图片数据，类型为ndarray</span></span><br><span class=\"line\"><span class=\"string\">    :param model_path: retinanet模型路径</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    path = os.path.abspath(model_path)</span><br><span class=\"line\">    detector = ObjectDetection()  <span class=\"comment\"># 定义了目标检测类</span></span><br><span class=\"line\">    detector.setModelTypeAsRetinaNet()  <span class=\"comment\"># 模型的类型设置为 RetinaNet</span></span><br><span class=\"line\">    detector.setModelPath(path)  <span class=\"comment\"># 将模型路径设置为 RetinaNet 模型的路径</span></span><br><span class=\"line\">    detector.loadModel()  <span class=\"comment\"># 模型加载到的目标检测类</span></span><br><span class=\"line\">    <span class=\"comment\"># 调用目标检测函数，解析输入的和输出的图像路径。</span></span><br><span class=\"line\">    detections = detector.detectObjectsFromImage(input_image=imgArray,</span><br><span class=\"line\">                                                 input_type=<span class=\"string\">'array'</span>,output_type=<span class=\"string\">'array'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> detections</span><br><span class=\"line\"></span><br><span class=\"line\">data = plt.imread(<span class=\"string\">'../img_classify/05-30.jpg'</span>)</span><br><span class=\"line\">model_path = (<span class=\"string\">'../model/resnet50_coco_best_v2.1.0.h5'</span>)</span><br><span class=\"line\">t1 = time.time()</span><br><span class=\"line\">imgInfo = targetDetection(data,model_path)</span><br><span class=\"line\">t2 = time.time()</span><br><span class=\"line\">print(t2-t1)</span><br><span class=\"line\">plt.imshow(imgInfo[<span class=\"number\">0</span>])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"dlib（hog-svm）\"><a href=\"#dlib（hog-svm）\" class=\"headerlink\" title=\"dlib（hog+svm）\"></a>dlib（hog+svm）</h3><p>首先使用dlib自带的image数据库标注工具制作数据集，然后通过dlib的官方代码对每一个待检测目标依次训练模型，最后将模型合并进行测试。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">df = pd.DataFrame(</span><br><span class=\"line\">    <span class=\"number\">100</span>*np.ones((<span class=\"number\">6</span>, <span class=\"number\">6</span>)),</span><br><span class=\"line\">    columns=[<span class=\"string\">\"name\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"confidences\"</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">detector1 = dlib.fhog_object_detector(<span class=\"string\">\"../model/sz.svm\"</span>)</span><br><span class=\"line\">detector2 = dlib.fhog_object_detector(<span class=\"string\">\"../model/cz.svm\"</span>)</span><br><span class=\"line\">detector3 = dlib.fhog_object_detector(<span class=\"string\">\"../model/dp.svm\"</span>)</span><br><span class=\"line\">detector4 = dlib.fhog_object_detector(<span class=\"string\">\"../model/pb.svm\"</span>)</span><br><span class=\"line\">detector5 = dlib.fhog_object_detector(<span class=\"string\">\"../model/zb.svm\"</span>)</span><br><span class=\"line\">detector6 = dlib.fhog_object_detector(<span class=\"string\">\"../model/mf.svm\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">detectors = [detector1, detector2,detector3, detector4,detector5, detector6]</span><br><span class=\"line\"></span><br><span class=\"line\">[boxes, confidences, detector_idxs] = dlib.fhog_object_detector.run_multiple(detectors, image, upsample_num_times=<span class=\"number\">1</span>, adjust_threshold=<span class=\"number\">0.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(boxes)):</span><br><span class=\"line\">    <span class=\"comment\"># print(\"detector &#123;&#125; found box &#123;&#125; with confidence &#123;&#125;.\".format(detector_idxs[i], boxes[i], confidences[i]))</span></span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">0</span>] = detector_idxs[i]</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">1</span>] = boxes[i].left()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">2</span>] = boxes[i].top()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">3</span>] = boxes[i].right() - boxes[i].left()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">4</span>] = boxes[i].bottom() - boxes[i].top()</span><br><span class=\"line\">    df.iloc[i, <span class=\"number\">5</span>] = round(confidences[i], <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n</the>"},{"title":"简单手势分类器","date":"2019-04-24T12:41:48.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n树莓派作为一个视觉传感器，串口实时返回手势分类结果。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 准备\n\n### 安装tensorflow\n维护树莓派交叉编译版本的github项目\n* samjabrahams/tensorflow-on-raspberry-pi: TensorFlow for Raspberry Pi  \nhttps://github.com/samjabrahams/tensorflow-on-raspberry-pi\n``` bash\nsudo apt install libatlas-base-dev\npip3 install tensorflow\n``` \n安装旧版本\n``` bash \n$ wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/releases/download/v0.11.0/tensorflow-0.11.0-py3-none-any.whl\n$ sudo pip3 install tensorflow-0.11.0-py3-none-any.whl\n```\n### 安装serial\n\n安装串口模块\n``` bash\n$ sudo apt-get install python-serial\n$ pip install serial\n$ pip install pyserial\n```\n如果需要指定位置\n``` bash\n$ sudo pip install --target=/usr/local/lib/python3.5/dist-packages pyserial\n```\n\n### 一些包\n``` bash\npip install pillow\npip install matplotlib\n```\n\n## 数据处理\n使用OpenCV的BackgroundSubtractor类，分割前景和背景，获得手势灰度图\n``` python\ncamera = cv2.VideoCapture(0) # 参数0表示第一个摄像头\nbs = cv2.createBackgroundSubtractorKNN(detectShadows=True)\nes = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))\nwhile True:\n    grabbed, frame_lwpCV = camera.read()\n    fgmask = bs.apply(frame_lwpCV) # 背景分割器，该函数计算了前景掩码\n    # 二值化阈值处理，前景掩码含有前景的白色值以及阴影的灰色值，在阈值化图像中，将非纯白色（244~255）的所有像素都设为0，而不是255\n    th = cv2.threshold(fgmask.copy(), 244, 255, cv2.THRESH_BINARY)[1]\n    # 下面就跟基本运动检测中方法相同，识别目标，检测轮廓，在原始帧上绘制检测结果\n    dilated = cv2.dilate(th, es, iterations=2) # 形态学膨胀\n    image, contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # 该函数计算一幅图像中目标的轮廓\n    # rasp\n    # contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # 该函数计算一幅图像中目标的轮廓\n    for c in contours:\n        if cv2.contourArea(c) > 2000: #1600:\n            (x, y, w, h) = cv2.boundingRect(c)\n            cv2.rectangle(frame_lwpCV, (x, y), (x + w, y + h), (255, 255, 0), 2)\n    cv2.imshow('detection', frame_lwpCV)\n    # 按'q'健退出循环\n# When everything done, release the capture\n```\n\n## 模型和训练\n通过一个小的卷积网络来实现分类，两层卷积+两层全连接\n``` python\ndef model(x, keep_prob):\n    '''Build the classify model\n    Args:\n      x: Input, tf.placeholder, the dimension is [-1, 784]\n      keep_prob: \n    Returns:\n      y: Classification probability\n    '''\n    x_image = tf.reshape(x, [-1, w, h, 1])\n    # Conv1\n    with tf.name_scope('conv1'):\n        W_conv1 = weight_variable([3, 3, 1, 16], name=\"weight\")\n        b_conv1 = bias_variable([16], name='bias')\n        h_conv1 = tf.nn.relu(tf.nn.conv2d(x_image, W_conv1, strides=[1,1,1,1], padding=\"SAME\", name='conv')+ b_conv1)\n        h_pool1 = tf.nn.max_pool(h_conv1, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\", name=\"pool\")\n    # Conv2\n    with tf.name_scope('conv2'):\n        W_conv2 = weight_variable([3, 3, 16, 32], name=\"weight\")\n        b_conv2 = bias_variable([32], name='bias')\n        h_conv2 = tf.nn.relu(tf.nn.conv2d(h_pool1, W_conv2, strides=[1,1,1,1], padding=\"SAME\", name='conv')+ b_conv2)\n        h_pool2 = tf.nn.max_pool(h_conv2, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\", name=\"pool\")\n    # fc1\n    with tf.name_scope('fc1'):\n        W_fc1 = weight_variable([7*7*32, 256], name=\"weight\")\n        b_fc1 = bias_variable([256], name='bias')\n        h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*32])\n        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1)+b_fc1)\n    # Dropout\n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n    # fc2\n    with tf.name_scope('fc2'):\n        W_fc2 = weight_variable([256, 4], name=\"weight\")\n        b_fc2 = bias_variable([4], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2)+b_fc2, name=\"output\")\n    return y\n```\n\n## HC-05蓝牙串口\n\n### 蓝牙配对\n\n连接(rt反接)\n* usb-ttl ---------- bluetooth\n* RXD &nbsp;&nbsp;&nbsp;&nbsp;---------- TXD\n* TXD &nbsp;&nbsp;&nbsp;&nbsp;---------- RXD\n\n按住复位键插USB，进入AT模式\n打开串口助手，设置波特率38400，数据位8位，停止位1位，无校验位，加回车换行(发送消息包含换行符)\n修改名称\n``` bash\n→ AT+ NAME=xxx\n→ AT+ NAME?\n```\n设置蓝牙密码，注意两块蓝牙的密码都要一样\n``` bash\n→ AT+ PSWD=1234\n→ AT+ PSWD?\n```\n设置主从模式\n串口调试助手A，将蓝牙A配置为主机模式\n``` bash\n→ AT+ ROLE=1\n→ AT+ ROLE?\n```\n串口调试助手B，将蓝牙B配置为从机模式\n``` bash\n→ AT+ ROLE=0\n```\n设置波特率9600，无校验位，1停止位\n``` bash\n→ AT+ UART:9600,0,0\n→ AT+ UART?\n```\n设置连接模式\n``` bash\n→ AT+ CMODE=0\n→ AT+ CMODE?\n```\n查询蓝牙地址，并相互绑定，注意把地址的冒号换成逗号\n``` bash\n→ AT+ ADDR?\n→ AT+ BIND=98d3,32,307440\n```\n\n\n## 结果\n查看端口\n``` bash\n$ ls /dev/tty*\n```\n运行\n``` bash\n$ python run.py --serial /dev/ttyUSB0\n```\n<img src = \"简单手势分类器\\02.png\" width=600 height=300>\n<img src = \"简单手势分类器\\01.png\" width=600 height=300>\n\n\n## 参考博客\n* 【Python+OpenCV】目标跟踪-背景分割器：KNN、MOG2和GMG - CSDN博客  \nhttps://blog.csdn.net/lwplwf/article/details/73551648\n* Tensorflow+树莓派，自制“猜拳神器” - Lauyeed的博客 - CSDN博客  \nhttps://blog.csdn.net/Lauyeed/article/details/79345685\n* 蓝牙模块HC-05使用说明_图文_百度文库  \nhttp://wenku.baidu.com/link?url=tDhQ1eN2RBFS4-iA9dFZuuYUUb21nx3ZpahLARbDaesVM0HkHMeiLc0NzfR7W6NVqc5F57p0x8t6c_3T3JN4ne9NCEB540mwEYV5kLpFSfq\n* AttributeError: module 'serial' has no attribute 'Serial' - m0_37827405的博客 - CSDN博客  \nhttps://blog.csdn.net/m0_37827405/article/details/80879678\n","source":"_posts/简单手势分类器.md","raw":"---\ntitle: 简单手势分类器\ndate: 2019-04-24 20:41:48\ntags:\n  - raspberry \n  - tf\n  - opencv\n  - python\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n树莓派作为一个视觉传感器，串口实时返回手势分类结果。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 准备\n\n### 安装tensorflow\n维护树莓派交叉编译版本的github项目\n* samjabrahams/tensorflow-on-raspberry-pi: TensorFlow for Raspberry Pi  \nhttps://github.com/samjabrahams/tensorflow-on-raspberry-pi\n``` bash\nsudo apt install libatlas-base-dev\npip3 install tensorflow\n``` \n安装旧版本\n``` bash \n$ wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/releases/download/v0.11.0/tensorflow-0.11.0-py3-none-any.whl\n$ sudo pip3 install tensorflow-0.11.0-py3-none-any.whl\n```\n### 安装serial\n\n安装串口模块\n``` bash\n$ sudo apt-get install python-serial\n$ pip install serial\n$ pip install pyserial\n```\n如果需要指定位置\n``` bash\n$ sudo pip install --target=/usr/local/lib/python3.5/dist-packages pyserial\n```\n\n### 一些包\n``` bash\npip install pillow\npip install matplotlib\n```\n\n## 数据处理\n使用OpenCV的BackgroundSubtractor类，分割前景和背景，获得手势灰度图\n``` python\ncamera = cv2.VideoCapture(0) # 参数0表示第一个摄像头\nbs = cv2.createBackgroundSubtractorKNN(detectShadows=True)\nes = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))\nwhile True:\n    grabbed, frame_lwpCV = camera.read()\n    fgmask = bs.apply(frame_lwpCV) # 背景分割器，该函数计算了前景掩码\n    # 二值化阈值处理，前景掩码含有前景的白色值以及阴影的灰色值，在阈值化图像中，将非纯白色（244~255）的所有像素都设为0，而不是255\n    th = cv2.threshold(fgmask.copy(), 244, 255, cv2.THRESH_BINARY)[1]\n    # 下面就跟基本运动检测中方法相同，识别目标，检测轮廓，在原始帧上绘制检测结果\n    dilated = cv2.dilate(th, es, iterations=2) # 形态学膨胀\n    image, contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # 该函数计算一幅图像中目标的轮廓\n    # rasp\n    # contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # 该函数计算一幅图像中目标的轮廓\n    for c in contours:\n        if cv2.contourArea(c) > 2000: #1600:\n            (x, y, w, h) = cv2.boundingRect(c)\n            cv2.rectangle(frame_lwpCV, (x, y), (x + w, y + h), (255, 255, 0), 2)\n    cv2.imshow('detection', frame_lwpCV)\n    # 按'q'健退出循环\n# When everything done, release the capture\n```\n\n## 模型和训练\n通过一个小的卷积网络来实现分类，两层卷积+两层全连接\n``` python\ndef model(x, keep_prob):\n    '''Build the classify model\n    Args:\n      x: Input, tf.placeholder, the dimension is [-1, 784]\n      keep_prob: \n    Returns:\n      y: Classification probability\n    '''\n    x_image = tf.reshape(x, [-1, w, h, 1])\n    # Conv1\n    with tf.name_scope('conv1'):\n        W_conv1 = weight_variable([3, 3, 1, 16], name=\"weight\")\n        b_conv1 = bias_variable([16], name='bias')\n        h_conv1 = tf.nn.relu(tf.nn.conv2d(x_image, W_conv1, strides=[1,1,1,1], padding=\"SAME\", name='conv')+ b_conv1)\n        h_pool1 = tf.nn.max_pool(h_conv1, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\", name=\"pool\")\n    # Conv2\n    with tf.name_scope('conv2'):\n        W_conv2 = weight_variable([3, 3, 16, 32], name=\"weight\")\n        b_conv2 = bias_variable([32], name='bias')\n        h_conv2 = tf.nn.relu(tf.nn.conv2d(h_pool1, W_conv2, strides=[1,1,1,1], padding=\"SAME\", name='conv')+ b_conv2)\n        h_pool2 = tf.nn.max_pool(h_conv2, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\", name=\"pool\")\n    # fc1\n    with tf.name_scope('fc1'):\n        W_fc1 = weight_variable([7*7*32, 256], name=\"weight\")\n        b_fc1 = bias_variable([256], name='bias')\n        h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*32])\n        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1)+b_fc1)\n    # Dropout\n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n    # fc2\n    with tf.name_scope('fc2'):\n        W_fc2 = weight_variable([256, 4], name=\"weight\")\n        b_fc2 = bias_variable([4], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2)+b_fc2, name=\"output\")\n    return y\n```\n\n## HC-05蓝牙串口\n\n### 蓝牙配对\n\n连接(rt反接)\n* usb-ttl ---------- bluetooth\n* RXD &nbsp;&nbsp;&nbsp;&nbsp;---------- TXD\n* TXD &nbsp;&nbsp;&nbsp;&nbsp;---------- RXD\n\n按住复位键插USB，进入AT模式\n打开串口助手，设置波特率38400，数据位8位，停止位1位，无校验位，加回车换行(发送消息包含换行符)\n修改名称\n``` bash\n→ AT+ NAME=xxx\n→ AT+ NAME?\n```\n设置蓝牙密码，注意两块蓝牙的密码都要一样\n``` bash\n→ AT+ PSWD=1234\n→ AT+ PSWD?\n```\n设置主从模式\n串口调试助手A，将蓝牙A配置为主机模式\n``` bash\n→ AT+ ROLE=1\n→ AT+ ROLE?\n```\n串口调试助手B，将蓝牙B配置为从机模式\n``` bash\n→ AT+ ROLE=0\n```\n设置波特率9600，无校验位，1停止位\n``` bash\n→ AT+ UART:9600,0,0\n→ AT+ UART?\n```\n设置连接模式\n``` bash\n→ AT+ CMODE=0\n→ AT+ CMODE?\n```\n查询蓝牙地址，并相互绑定，注意把地址的冒号换成逗号\n``` bash\n→ AT+ ADDR?\n→ AT+ BIND=98d3,32,307440\n```\n\n\n## 结果\n查看端口\n``` bash\n$ ls /dev/tty*\n```\n运行\n``` bash\n$ python run.py --serial /dev/ttyUSB0\n```\n<img src = \"简单手势分类器\\02.png\" width=600 height=300>\n<img src = \"简单手势分类器\\01.png\" width=600 height=300>\n\n\n## 参考博客\n* 【Python+OpenCV】目标跟踪-背景分割器：KNN、MOG2和GMG - CSDN博客  \nhttps://blog.csdn.net/lwplwf/article/details/73551648\n* Tensorflow+树莓派，自制“猜拳神器” - Lauyeed的博客 - CSDN博客  \nhttps://blog.csdn.net/Lauyeed/article/details/79345685\n* 蓝牙模块HC-05使用说明_图文_百度文库  \nhttp://wenku.baidu.com/link?url=tDhQ1eN2RBFS4-iA9dFZuuYUUb21nx3ZpahLARbDaesVM0HkHMeiLc0NzfR7W6NVqc5F57p0x8t6c_3T3JN4ne9NCEB540mwEYV5kLpFSfq\n* AttributeError: module 'serial' has no attribute 'Serial' - m0_37827405的博客 - CSDN博客  \nhttps://blog.csdn.net/m0_37827405/article/details/80879678\n","slug":"简单手势分类器","published":1,"updated":"2020-01-05T19:13:25.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an508x004b4cvjo4fok48b","content":"<p><strong> 简单手势分类器 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>树莓派作为一个视觉传感器，串口实时返回手势分类结果。</p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"安装tensorflow\"><a href=\"#安装tensorflow\" class=\"headerlink\" title=\"安装tensorflow\"></a>安装tensorflow</h3><p>维护树莓派交叉编译版本的github项目</p>\n<ul>\n<li>samjabrahams/tensorflow-on-raspberry-pi: TensorFlow for Raspberry Pi<br><a href=\"https://github.com/samjabrahams/tensorflow-on-raspberry-pi\" target=\"_blank\" rel=\"noopener\">https://github.com/samjabrahams/tensorflow-on-raspberry-pi</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libatlas-base-dev</span><br><span class=\"line\">pip3 install tensorflow</span><br><span class=\"line\">``` </span><br><span class=\"line\">安装旧版本</span><br><span class=\"line\">``` bash </span><br><span class=\"line\">$ wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/releases/download/v0.11.0/tensorflow-0.11.0-py3-none-any.whl</span><br><span class=\"line\">$ sudo pip3 install tensorflow-0.11.0-py3-none-any.whl</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装serial\"><a href=\"#安装serial\" class=\"headerlink\" title=\"安装serial\"></a>安装serial</h3><p>安装串口模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-serial</span><br><span class=\"line\">$ pip install serial</span><br><span class=\"line\">$ pip install pyserial</span><br></pre></td></tr></table></figure></p>\n<p>如果需要指定位置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pip install --target=/usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages pyserial</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一些包\"><a href=\"#一些包\" class=\"headerlink\" title=\"一些包\"></a>一些包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pillow</span><br><span class=\"line\">pip install matplotlib</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>使用OpenCV的BackgroundSubtractor类，分割前景和背景，获得手势灰度图<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">camera = cv2.VideoCapture(<span class=\"number\">0</span>) <span class=\"comment\"># 参数0表示第一个摄像头</span></span><br><span class=\"line\">bs = cv2.createBackgroundSubtractorKNN(detectShadows=<span class=\"literal\">True</span>)</span><br><span class=\"line\">es = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    grabbed, frame_lwpCV = camera.read()</span><br><span class=\"line\">    fgmask = bs.apply(frame_lwpCV) <span class=\"comment\"># 背景分割器，该函数计算了前景掩码</span></span><br><span class=\"line\">    <span class=\"comment\"># 二值化阈值处理，前景掩码含有前景的白色值以及阴影的灰色值，在阈值化图像中，将非纯白色（244~255）的所有像素都设为0，而不是255</span></span><br><span class=\"line\">    th = cv2.threshold(fgmask.copy(), <span class=\"number\">244</span>, <span class=\"number\">255</span>, cv2.THRESH_BINARY)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 下面就跟基本运动检测中方法相同，识别目标，检测轮廓，在原始帧上绘制检测结果</span></span><br><span class=\"line\">    dilated = cv2.dilate(th, es, iterations=<span class=\"number\">2</span>) <span class=\"comment\"># 形态学膨胀</span></span><br><span class=\"line\">    image, contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) <span class=\"comment\"># 该函数计算一幅图像中目标的轮廓</span></span><br><span class=\"line\">    <span class=\"comment\"># rasp</span></span><br><span class=\"line\">    <span class=\"comment\"># contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # 该函数计算一幅图像中目标的轮廓</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> contours:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cv2.contourArea(c) &gt; <span class=\"number\">2000</span>: <span class=\"comment\">#1600:</span></span><br><span class=\"line\">            (x, y, w, h) = cv2.boundingRect(c)</span><br><span class=\"line\">            cv2.rectangle(frame_lwpCV, (x, y), (x + w, y + h), (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'detection'</span>, frame_lwpCV)</span><br><span class=\"line\">    <span class=\"comment\"># 按'q'健退出循环</span></span><br><span class=\"line\"><span class=\"comment\"># When everything done, release the capture</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模型和训练\"><a href=\"#模型和训练\" class=\"headerlink\" title=\"模型和训练\"></a>模型和训练</h2><p>通过一个小的卷积网络来实现分类，两层卷积+两层全连接<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">model</span><span class=\"params\">(x, keep_prob)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Build the classify model</span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">      x: Input, tf.placeholder, the dimension is [-1, 784]</span></span><br><span class=\"line\"><span class=\"string\">      keep_prob: </span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">      y: Classification probability</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    x_image = tf.reshape(x, [<span class=\"number\">-1</span>, w, h, <span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"comment\"># Conv1</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'conv1'</span>):</span><br><span class=\"line\">        W_conv1 = weight_variable([<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">16</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_conv1 = bias_variable([<span class=\"number\">16</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        h_conv1 = tf.nn.relu(tf.nn.conv2d(x_image, W_conv1, strides=[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">'conv'</span>)+ b_conv1)</span><br><span class=\"line\">        h_pool1 = tf.nn.max_pool(h_conv1, ksize=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], strides=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">\"pool\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Conv2</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'conv2'</span>):</span><br><span class=\"line\">        W_conv2 = weight_variable([<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">16</span>, <span class=\"number\">32</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_conv2 = bias_variable([<span class=\"number\">32</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        h_conv2 = tf.nn.relu(tf.nn.conv2d(h_pool1, W_conv2, strides=[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">'conv'</span>)+ b_conv2)</span><br><span class=\"line\">        h_pool2 = tf.nn.max_pool(h_conv2, ksize=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], strides=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">\"pool\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># fc1</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc1'</span>):</span><br><span class=\"line\">        W_fc1 = weight_variable([<span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">32</span>, <span class=\"number\">256</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_fc1 = bias_variable([<span class=\"number\">256</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        h_pool2_flat = tf.reshape(h_pool2, [<span class=\"number\">-1</span>, <span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">32</span>])</span><br><span class=\"line\">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1)+b_fc1)</span><br><span class=\"line\">    <span class=\"comment\"># Dropout</span></span><br><span class=\"line\">    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class=\"line\">    <span class=\"comment\"># fc2</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc2'</span>):</span><br><span class=\"line\">        W_fc2 = weight_variable([<span class=\"number\">256</span>, <span class=\"number\">4</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_fc2 = bias_variable([<span class=\"number\">4</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        y = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2)+b_fc2, name=<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"HC-05蓝牙串口\"><a href=\"#HC-05蓝牙串口\" class=\"headerlink\" title=\"HC-05蓝牙串口\"></a>HC-05蓝牙串口</h2><h3 id=\"蓝牙配对\"><a href=\"#蓝牙配对\" class=\"headerlink\" title=\"蓝牙配对\"></a>蓝牙配对</h3><p>连接(rt反接)</p>\n<ul>\n<li>usb-ttl ————— bluetooth</li>\n<li>RXD &nbsp;&nbsp;&nbsp;&nbsp;————— TXD</li>\n<li>TXD &nbsp;&nbsp;&nbsp;&nbsp;————— RXD</li>\n</ul>\n<p>按住复位键插USB，进入AT模式<br>打开串口助手，设置波特率38400，数据位8位，停止位1位，无校验位，加回车换行(发送消息包含换行符)<br>修改名称<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ NAME=xxx</span><br><span class=\"line\">→ AT+ NAME?</span><br></pre></td></tr></table></figure></p>\n<p>设置蓝牙密码，注意两块蓝牙的密码都要一样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ PSWD=1234</span><br><span class=\"line\">→ AT+ PSWD?</span><br></pre></td></tr></table></figure></p>\n<p>设置主从模式<br>串口调试助手A，将蓝牙A配置为主机模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ ROLE=1</span><br><span class=\"line\">→ AT+ ROLE?</span><br></pre></td></tr></table></figure></p>\n<p>串口调试助手B，将蓝牙B配置为从机模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ ROLE=0</span><br></pre></td></tr></table></figure></p>\n<p>设置波特率9600，无校验位，1停止位<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ UART:9600,0,0</span><br><span class=\"line\">→ AT+ UART?</span><br></pre></td></tr></table></figure></p>\n<p>设置连接模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ CMODE=0</span><br><span class=\"line\">→ AT+ CMODE?</span><br></pre></td></tr></table></figure></p>\n<p>查询蓝牙地址，并相互绑定，注意把地址的冒号换成逗号<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ ADDR?</span><br><span class=\"line\">→ AT+ BIND=98d3,32,307440</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>查看端口<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls /dev/tty*</span><br></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python run.py --serial /dev/ttyUSB0</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/04/24/简单手势分类器/02.png\" width=\"600\" height=\"300\"><br><img src=\"/2019/04/24/简单手势分类器/01.png\" width=\"600\" height=\"300\"></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>【Python+OpenCV】目标跟踪-背景分割器：KNN、MOG2和GMG - CSDN博客<br><a href=\"https://blog.csdn.net/lwplwf/article/details/73551648\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lwplwf/article/details/73551648</a></li>\n<li>Tensorflow+树莓派，自制“猜拳神器” - Lauyeed的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/Lauyeed/article/details/79345685\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Lauyeed/article/details/79345685</a></li>\n<li>蓝牙模块HC-05使用说明_图文_百度文库<br><a href=\"http://wenku.baidu.com/link?url=tDhQ1eN2RBFS4-iA9dFZuuYUUb21nx3ZpahLARbDaesVM0HkHMeiLc0NzfR7W6NVqc5F57p0x8t6c_3T3JN4ne9NCEB540mwEYV5kLpFSfq\" target=\"_blank\" rel=\"noopener\">http://wenku.baidu.com/link?url=tDhQ1eN2RBFS4-iA9dFZuuYUUb21nx3ZpahLARbDaesVM0HkHMeiLc0NzfR7W6NVqc5F57p0x8t6c_3T3JN4ne9NCEB540mwEYV5kLpFSfq</a></li>\n<li>AttributeError: module ‘serial’ has no attribute ‘Serial’ - m0_37827405的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/m0_37827405/article/details/80879678\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/m0_37827405/article/details/80879678</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 简单手势分类器 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>树莓派作为一个视觉传感器，串口实时返回手势分类结果。</p>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"安装tensorflow\"><a href=\"#安装tensorflow\" class=\"headerlink\" title=\"安装tensorflow\"></a>安装tensorflow</h3><p>维护树莓派交叉编译版本的github项目</p>\n<ul>\n<li>samjabrahams/tensorflow-on-raspberry-pi: TensorFlow for Raspberry Pi<br><a href=\"https://github.com/samjabrahams/tensorflow-on-raspberry-pi\" target=\"_blank\" rel=\"noopener\">https://github.com/samjabrahams/tensorflow-on-raspberry-pi</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libatlas-base-dev</span><br><span class=\"line\">pip3 install tensorflow</span><br><span class=\"line\">``` </span><br><span class=\"line\">安装旧版本</span><br><span class=\"line\">``` bash </span><br><span class=\"line\">$ wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/releases/download/v0.11.0/tensorflow-0.11.0-py3-none-any.whl</span><br><span class=\"line\">$ sudo pip3 install tensorflow-0.11.0-py3-none-any.whl</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装serial\"><a href=\"#安装serial\" class=\"headerlink\" title=\"安装serial\"></a>安装serial</h3><p>安装串口模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-serial</span><br><span class=\"line\">$ pip install serial</span><br><span class=\"line\">$ pip install pyserial</span><br></pre></td></tr></table></figure></p>\n<p>如果需要指定位置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pip install --target=/usr/<span class=\"built_in\">local</span>/lib/python3.5/dist-packages pyserial</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一些包\"><a href=\"#一些包\" class=\"headerlink\" title=\"一些包\"></a>一些包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pillow</span><br><span class=\"line\">pip install matplotlib</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>使用OpenCV的BackgroundSubtractor类，分割前景和背景，获得手势灰度图<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">camera = cv2.VideoCapture(<span class=\"number\">0</span>) <span class=\"comment\"># 参数0表示第一个摄像头</span></span><br><span class=\"line\">bs = cv2.createBackgroundSubtractorKNN(detectShadows=<span class=\"literal\">True</span>)</span><br><span class=\"line\">es = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    grabbed, frame_lwpCV = camera.read()</span><br><span class=\"line\">    fgmask = bs.apply(frame_lwpCV) <span class=\"comment\"># 背景分割器，该函数计算了前景掩码</span></span><br><span class=\"line\">    <span class=\"comment\"># 二值化阈值处理，前景掩码含有前景的白色值以及阴影的灰色值，在阈值化图像中，将非纯白色（244~255）的所有像素都设为0，而不是255</span></span><br><span class=\"line\">    th = cv2.threshold(fgmask.copy(), <span class=\"number\">244</span>, <span class=\"number\">255</span>, cv2.THRESH_BINARY)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 下面就跟基本运动检测中方法相同，识别目标，检测轮廓，在原始帧上绘制检测结果</span></span><br><span class=\"line\">    dilated = cv2.dilate(th, es, iterations=<span class=\"number\">2</span>) <span class=\"comment\"># 形态学膨胀</span></span><br><span class=\"line\">    image, contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) <span class=\"comment\"># 该函数计算一幅图像中目标的轮廓</span></span><br><span class=\"line\">    <span class=\"comment\"># rasp</span></span><br><span class=\"line\">    <span class=\"comment\"># contours, hierarchy = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # 该函数计算一幅图像中目标的轮廓</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> contours:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cv2.contourArea(c) &gt; <span class=\"number\">2000</span>: <span class=\"comment\">#1600:</span></span><br><span class=\"line\">            (x, y, w, h) = cv2.boundingRect(c)</span><br><span class=\"line\">            cv2.rectangle(frame_lwpCV, (x, y), (x + w, y + h), (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'detection'</span>, frame_lwpCV)</span><br><span class=\"line\">    <span class=\"comment\"># 按'q'健退出循环</span></span><br><span class=\"line\"><span class=\"comment\"># When everything done, release the capture</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模型和训练\"><a href=\"#模型和训练\" class=\"headerlink\" title=\"模型和训练\"></a>模型和训练</h2><p>通过一个小的卷积网络来实现分类，两层卷积+两层全连接<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">model</span><span class=\"params\">(x, keep_prob)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Build the classify model</span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">      x: Input, tf.placeholder, the dimension is [-1, 784]</span></span><br><span class=\"line\"><span class=\"string\">      keep_prob: </span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">      y: Classification probability</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    x_image = tf.reshape(x, [<span class=\"number\">-1</span>, w, h, <span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"comment\"># Conv1</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'conv1'</span>):</span><br><span class=\"line\">        W_conv1 = weight_variable([<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">16</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_conv1 = bias_variable([<span class=\"number\">16</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        h_conv1 = tf.nn.relu(tf.nn.conv2d(x_image, W_conv1, strides=[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">'conv'</span>)+ b_conv1)</span><br><span class=\"line\">        h_pool1 = tf.nn.max_pool(h_conv1, ksize=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], strides=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">\"pool\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Conv2</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'conv2'</span>):</span><br><span class=\"line\">        W_conv2 = weight_variable([<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">16</span>, <span class=\"number\">32</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_conv2 = bias_variable([<span class=\"number\">32</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        h_conv2 = tf.nn.relu(tf.nn.conv2d(h_pool1, W_conv2, strides=[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">'conv'</span>)+ b_conv2)</span><br><span class=\"line\">        h_pool2 = tf.nn.max_pool(h_conv2, ksize=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], strides=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], padding=<span class=\"string\">\"SAME\"</span>, name=<span class=\"string\">\"pool\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># fc1</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc1'</span>):</span><br><span class=\"line\">        W_fc1 = weight_variable([<span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">32</span>, <span class=\"number\">256</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_fc1 = bias_variable([<span class=\"number\">256</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        h_pool2_flat = tf.reshape(h_pool2, [<span class=\"number\">-1</span>, <span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">32</span>])</span><br><span class=\"line\">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1)+b_fc1)</span><br><span class=\"line\">    <span class=\"comment\"># Dropout</span></span><br><span class=\"line\">    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class=\"line\">    <span class=\"comment\"># fc2</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.name_scope(<span class=\"string\">'fc2'</span>):</span><br><span class=\"line\">        W_fc2 = weight_variable([<span class=\"number\">256</span>, <span class=\"number\">4</span>], name=<span class=\"string\">\"weight\"</span>)</span><br><span class=\"line\">        b_fc2 = bias_variable([<span class=\"number\">4</span>], name=<span class=\"string\">'bias'</span>)</span><br><span class=\"line\">        y = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2)+b_fc2, name=<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"HC-05蓝牙串口\"><a href=\"#HC-05蓝牙串口\" class=\"headerlink\" title=\"HC-05蓝牙串口\"></a>HC-05蓝牙串口</h2><h3 id=\"蓝牙配对\"><a href=\"#蓝牙配对\" class=\"headerlink\" title=\"蓝牙配对\"></a>蓝牙配对</h3><p>连接(rt反接)</p>\n<ul>\n<li>usb-ttl ————— bluetooth</li>\n<li>RXD &nbsp;&nbsp;&nbsp;&nbsp;————— TXD</li>\n<li>TXD &nbsp;&nbsp;&nbsp;&nbsp;————— RXD</li>\n</ul>\n<p>按住复位键插USB，进入AT模式<br>打开串口助手，设置波特率38400，数据位8位，停止位1位，无校验位，加回车换行(发送消息包含换行符)<br>修改名称<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ NAME=xxx</span><br><span class=\"line\">→ AT+ NAME?</span><br></pre></td></tr></table></figure></p>\n<p>设置蓝牙密码，注意两块蓝牙的密码都要一样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ PSWD=1234</span><br><span class=\"line\">→ AT+ PSWD?</span><br></pre></td></tr></table></figure></p>\n<p>设置主从模式<br>串口调试助手A，将蓝牙A配置为主机模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ ROLE=1</span><br><span class=\"line\">→ AT+ ROLE?</span><br></pre></td></tr></table></figure></p>\n<p>串口调试助手B，将蓝牙B配置为从机模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ ROLE=0</span><br></pre></td></tr></table></figure></p>\n<p>设置波特率9600，无校验位，1停止位<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ UART:9600,0,0</span><br><span class=\"line\">→ AT+ UART?</span><br></pre></td></tr></table></figure></p>\n<p>设置连接模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ CMODE=0</span><br><span class=\"line\">→ AT+ CMODE?</span><br></pre></td></tr></table></figure></p>\n<p>查询蓝牙地址，并相互绑定，注意把地址的冒号换成逗号<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">→ AT+ ADDR?</span><br><span class=\"line\">→ AT+ BIND=98d3,32,307440</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>查看端口<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls /dev/tty*</span><br></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python run.py --serial /dev/ttyUSB0</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/04/24/简单手势分类器/02.png\" width=\"600\" height=\"300\"><br><img src=\"/2019/04/24/简单手势分类器/01.png\" width=\"600\" height=\"300\"></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>【Python+OpenCV】目标跟踪-背景分割器：KNN、MOG2和GMG - CSDN博客<br><a href=\"https://blog.csdn.net/lwplwf/article/details/73551648\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lwplwf/article/details/73551648</a></li>\n<li>Tensorflow+树莓派，自制“猜拳神器” - Lauyeed的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/Lauyeed/article/details/79345685\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Lauyeed/article/details/79345685</a></li>\n<li>蓝牙模块HC-05使用说明_图文_百度文库<br><a href=\"http://wenku.baidu.com/link?url=tDhQ1eN2RBFS4-iA9dFZuuYUUb21nx3ZpahLARbDaesVM0HkHMeiLc0NzfR7W6NVqc5F57p0x8t6c_3T3JN4ne9NCEB540mwEYV5kLpFSfq\" target=\"_blank\" rel=\"noopener\">http://wenku.baidu.com/link?url=tDhQ1eN2RBFS4-iA9dFZuuYUUb21nx3ZpahLARbDaesVM0HkHMeiLc0NzfR7W6NVqc5F57p0x8t6c_3T3JN4ne9NCEB540mwEYV5kLpFSfq</a></li>\n<li>AttributeError: module ‘serial’ has no attribute ‘Serial’ - m0_37827405的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/m0_37827405/article/details/80879678\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/m0_37827405/article/details/80879678</a></li>\n</ul>\n</the>"},{"title":"象棋残局机器人","date":"2019-05-05T15:08:30.000Z","_content":"\n\n<div align=center>\n<img src='象棋残局机器人/01.png' width=1120 height=675>\n</div>\n\n<div align=center>\n<img src='象棋残局机器人/02.png' width=1120 height=675>\n</div>\n\n# 准备\n\n## python\n* Home - Anaconda https://www.anaconda.com/  \n* Visual Studio Code - Code Editing. Redefined https://code.visualstudio.com/  \n\n```python\nimport cv2\nimport numpy\nimport tkinter as tk\nimport serial \n```\n\n## Strategy\n* 图搜索：极大极小搜索、Alpha-Beta剪枝、迭代加深、A*、IDA*\n* 强化学习：MCTS、AlphaZero\n\n## Armbot\n* 越疆科技DOBOT https://cn.dobot.cc/\n\n## Vision\n* OpenCV: OpenCV-Python Tutorials https://docs.opencv.org/4.0.0/d6/d00/tutorial_py_root.html\n* spmallick/learnopencv: Learn OpenCV : C++ and Python Examples https://github.com/spmallick/learnopencv\n``` bash\n> conda create -n your_env_name python=3.6\n> activate your_env_name\n> pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple\n> pip install opencv-contrib-python\n```\n\n\n\n# Demo\n\n\n* hikey970 棋面识别  \n<div align=center>\n<img src='象棋残局机器人/demo1.gif' width=600 height=400>\n</div>\n\n* 开局  \n<div align=center>\n<img src='象棋残局机器人/demo3.gif' width=600 height=400>\n</div>\n\n* 人机对弈  \n<div align=center>\n<img src='象棋残局机器人/demo2.gif' width=600 height=400>\n</div>\n\n","source":"_posts/象棋残局机器人.md","raw":"---\ntitle: 象棋残局机器人\ndate: 2019-05-05 23:08:30\ntags:\n  - python\n  - opencv\n  - alphazero\n---\n\n\n<div align=center>\n<img src='象棋残局机器人/01.png' width=1120 height=675>\n</div>\n\n<div align=center>\n<img src='象棋残局机器人/02.png' width=1120 height=675>\n</div>\n\n# 准备\n\n## python\n* Home - Anaconda https://www.anaconda.com/  \n* Visual Studio Code - Code Editing. Redefined https://code.visualstudio.com/  \n\n```python\nimport cv2\nimport numpy\nimport tkinter as tk\nimport serial \n```\n\n## Strategy\n* 图搜索：极大极小搜索、Alpha-Beta剪枝、迭代加深、A*、IDA*\n* 强化学习：MCTS、AlphaZero\n\n## Armbot\n* 越疆科技DOBOT https://cn.dobot.cc/\n\n## Vision\n* OpenCV: OpenCV-Python Tutorials https://docs.opencv.org/4.0.0/d6/d00/tutorial_py_root.html\n* spmallick/learnopencv: Learn OpenCV : C++ and Python Examples https://github.com/spmallick/learnopencv\n``` bash\n> conda create -n your_env_name python=3.6\n> activate your_env_name\n> pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple\n> pip install opencv-contrib-python\n```\n\n\n\n# Demo\n\n\n* hikey970 棋面识别  \n<div align=center>\n<img src='象棋残局机器人/demo1.gif' width=600 height=400>\n</div>\n\n* 开局  \n<div align=center>\n<img src='象棋残局机器人/demo3.gif' width=600 height=400>\n</div>\n\n* 人机对弈  \n<div align=center>\n<img src='象棋残局机器人/demo2.gif' width=600 height=400>\n</div>\n\n","slug":"象棋残局机器人","published":1,"updated":"2020-01-05T19:13:25.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an508z004d4cvjt2afwakp","content":"<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/01.png\" width=\"1120\" height=\"675\">\n</div>\n\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/02.png\" width=\"1120\" height=\"675\">\n</div>\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><ul>\n<li>Home - Anaconda <a href=\"https://www.anaconda.com/\" target=\"_blank\" rel=\"noopener\">https://www.anaconda.com/</a>  </li>\n<li>Visual Studio Code - Code Editing. Redefined <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/</a>  </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"><span class=\"keyword\">import</span> serial</span><br></pre></td></tr></table></figure>\n<h2 id=\"Strategy\"><a href=\"#Strategy\" class=\"headerlink\" title=\"Strategy\"></a>Strategy</h2><ul>\n<li>图搜索：极大极小搜索、Alpha-Beta剪枝、迭代加深、A<em>、IDA</em></li>\n<li>强化学习：MCTS、AlphaZero</li>\n</ul>\n<h2 id=\"Armbot\"><a href=\"#Armbot\" class=\"headerlink\" title=\"Armbot\"></a>Armbot</h2><ul>\n<li>越疆科技DOBOT <a href=\"https://cn.dobot.cc/\" target=\"_blank\" rel=\"noopener\">https://cn.dobot.cc/</a></li>\n</ul>\n<h2 id=\"Vision\"><a href=\"#Vision\" class=\"headerlink\" title=\"Vision\"></a>Vision</h2><ul>\n<li>OpenCV: OpenCV-Python Tutorials <a href=\"https://docs.opencv.org/4.0.0/d6/d00/tutorial_py_root.html\" target=\"_blank\" rel=\"noopener\">https://docs.opencv.org/4.0.0/d6/d00/tutorial_py_root.html</a></li>\n<li>spmallick/learnopencv: Learn OpenCV : C++ and Python Examples <a href=\"https://github.com/spmallick/learnopencv\" target=\"_blank\" rel=\"noopener\">https://github.com/spmallick/learnopencv</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; conda create -n your_env_name python=3.6</span><br><span class=\"line\">&gt; activate your_env_name</span><br><span class=\"line\">&gt; pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">&gt; pip install opencv-contrib-python</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><ul>\n<li><p>hikey970 棋面识别  </p>\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/demo1.gif\" width=\"600\" height=\"400\">\n</div>\n</li>\n<li><p>开局  </p>\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/demo3.gif\" width=\"600\" height=\"400\">\n</div>\n</li>\n<li><p>人机对弈  </p>\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/demo2.gif\" width=\"600\" height=\"400\">\n</div>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/01.png\" width=\"1120\" height=\"675\">\n</div>\n\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/02.png\" width=\"1120\" height=\"675\">\n</div>\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><ul>\n<li>Home - Anaconda <a href=\"https://www.anaconda.com/\" target=\"_blank\" rel=\"noopener\">https://www.anaconda.com/</a>  </li>\n<li>Visual Studio Code - Code Editing. Redefined <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/</a>  </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"><span class=\"keyword\">import</span> serial</span><br></pre></td></tr></table></figure>\n<h2 id=\"Strategy\"><a href=\"#Strategy\" class=\"headerlink\" title=\"Strategy\"></a>Strategy</h2><ul>\n<li>图搜索：极大极小搜索、Alpha-Beta剪枝、迭代加深、A<em>、IDA</em></li>\n<li>强化学习：MCTS、AlphaZero</li>\n</ul>\n<h2 id=\"Armbot\"><a href=\"#Armbot\" class=\"headerlink\" title=\"Armbot\"></a>Armbot</h2><ul>\n<li>越疆科技DOBOT <a href=\"https://cn.dobot.cc/\" target=\"_blank\" rel=\"noopener\">https://cn.dobot.cc/</a></li>\n</ul>\n<h2 id=\"Vision\"><a href=\"#Vision\" class=\"headerlink\" title=\"Vision\"></a>Vision</h2><ul>\n<li>OpenCV: OpenCV-Python Tutorials <a href=\"https://docs.opencv.org/4.0.0/d6/d00/tutorial_py_root.html\" target=\"_blank\" rel=\"noopener\">https://docs.opencv.org/4.0.0/d6/d00/tutorial_py_root.html</a></li>\n<li>spmallick/learnopencv: Learn OpenCV : C++ and Python Examples <a href=\"https://github.com/spmallick/learnopencv\" target=\"_blank\" rel=\"noopener\">https://github.com/spmallick/learnopencv</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; conda create -n your_env_name python=3.6</span><br><span class=\"line\">&gt; activate your_env_name</span><br><span class=\"line\">&gt; pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">&gt; pip install opencv-contrib-python</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><ul>\n<li><p>hikey970 棋面识别  </p>\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/demo1.gif\" width=\"600\" height=\"400\">\n</div>\n</li>\n<li><p>开局  </p>\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/demo3.gif\" width=\"600\" height=\"400\">\n</div>\n</li>\n<li><p>人机对弈  </p>\n<div align=\"center\">\n<img src=\"/2019/05/05/象棋残局机器人/demo2.gif\" width=\"600\" height=\"400\">\n</div>\n\n</li>\n</ul>\n"},{"title":"象棋残局机器人二：投射变换","date":"2019-05-25T15:34:15.000Z","_content":"\n## 图片的几何变换\n* 缩放\n``` bash\nimg = cv2.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\ndstHeight = int(height*0.5)\ndstWidth = int(width*0.5)\n# cv2.resize()\n# dst = cv2.resize(img, (dstWidth, dstHeight))\n# 最近邻域插值\ndstImage = np.zeros((dstHeight, dstWidth), np.uint8)\nfor i in range(0, dstHeight):\n    for j in range(0, dstWidth):\n        iNew = int(i * height * 1.0 / dstHeight)\n        jNew = int(j * width * 1.0 / dstWidth)\n        dstImage[i, j] = img(iNew, jNew)\ncv2.imshow(\"img\", dstImage)\n# 双线性插值 \n# 像素关系重采样 \n# 立方插值\ncv2.waitKey(0)\n```\n* 剪切\n``` bash\n# 图片坐标\n# x: 0-width\n# y: 0-height\nimg = cv2.imread(\"tmp.png\", 1)\ndatImage = img[100:200, 100:300]\ncv2.imshow(\"img\", dstImage)\ncv2.waitKey(0)\n```\n* 位移\n``` bash\nimg = cv.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\n# cv2.warpAffine()\nmatShift = np.float32([[1,0,100], [0,1,200]]) # 2行3列\ndstImage = cv2.warpAffine(img, matShift, (width, height))\ncv2.imshow(\"img\", dstImage)\ncv2.waitKey(0)\n```\n* 镜像\n``` bash\nxImg  = cv.flip(img,1,dst=None)  #水平镜像\nxImg1 = cv.flip(img,0,dst=None)  #垂直镜像\nxImg2 = cv.flip(img,-1,dst=None) #对角镜像\n```\n* 仿射变换\n``` bash\nimg = cv.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\n# src 3p -> dst 3p\nmatSrc = np.float32([[0,0], [0,height-1], [width-1, 0]])\nmatDst = np.float32([[50,50], [300,height-200], [width-300, 100]])\n# 获得仿射变换矩阵\nmatAffine = cv2.getAffineTransform(matSrc, matDst)\ndstImage = cv2.warpAffine(img, matAffine, (width, height))\ncv2.imshow(\"img\", dstImage)\ncv2.waitKey(0)\n```\n* 旋转\n``` bash\nimg = cv.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\n# 获得旋转矩阵\nmatRotate = cv2.getRotationMatrix2D((int(width/2), int(height/2)), 45, 0.5)\ndstImage = cv2.warpAffine(img, matRotate, (width, height))\ncv2.imshow(\"img2\", dstImage)\ncv2.waitKey(0)\n```\n## 仿射变换就是特殊的透射变换\n\n* 透射变换\n``` bash\nmatSrc = np.float32(points)\nmatDst = np.float32([[0,0],[0,399],[99, 0],[99,399]])\nmatPers = cv2.getPerspectiveTransform(matSrc, matDst)\ndstImage = cv2.warpPerspective(img, matPers, (width, height))\n```\n\n<div align=center>\n<img src='象棋残局机器人二：透射变换\\001.jpg' width=600 height=300>\n</div>\n\n利用透射变换这一操作，从而将棋面的图像从背景中抽离转化成易于处理的形式。\n\n\n## 参考资料\n\n* 仿射变换和透射变换 - outthinker - 博客园  \nhttps://www.cnblogs.com/zf-blog/p/7813227.html\n\n* 4.1 图像特效介绍 - YouTube  \nhttps://www.youtube.com/watch?v=Ih2iamhLvxE&list=PLsYXQooxlb1pE21-dgEf-VdsArdqSvuEW&index=36\n","source":"_posts/象棋残局机器人二：透射变换.md","raw":"---\ntitle: 象棋残局机器人二：投射变换\ndate: 2019-05-25 23:34:15\ntags:\n  - opencv\n---\n\n## 图片的几何变换\n* 缩放\n``` bash\nimg = cv2.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\ndstHeight = int(height*0.5)\ndstWidth = int(width*0.5)\n# cv2.resize()\n# dst = cv2.resize(img, (dstWidth, dstHeight))\n# 最近邻域插值\ndstImage = np.zeros((dstHeight, dstWidth), np.uint8)\nfor i in range(0, dstHeight):\n    for j in range(0, dstWidth):\n        iNew = int(i * height * 1.0 / dstHeight)\n        jNew = int(j * width * 1.0 / dstWidth)\n        dstImage[i, j] = img(iNew, jNew)\ncv2.imshow(\"img\", dstImage)\n# 双线性插值 \n# 像素关系重采样 \n# 立方插值\ncv2.waitKey(0)\n```\n* 剪切\n``` bash\n# 图片坐标\n# x: 0-width\n# y: 0-height\nimg = cv2.imread(\"tmp.png\", 1)\ndatImage = img[100:200, 100:300]\ncv2.imshow(\"img\", dstImage)\ncv2.waitKey(0)\n```\n* 位移\n``` bash\nimg = cv.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\n# cv2.warpAffine()\nmatShift = np.float32([[1,0,100], [0,1,200]]) # 2行3列\ndstImage = cv2.warpAffine(img, matShift, (width, height))\ncv2.imshow(\"img\", dstImage)\ncv2.waitKey(0)\n```\n* 镜像\n``` bash\nxImg  = cv.flip(img,1,dst=None)  #水平镜像\nxImg1 = cv.flip(img,0,dst=None)  #垂直镜像\nxImg2 = cv.flip(img,-1,dst=None) #对角镜像\n```\n* 仿射变换\n``` bash\nimg = cv.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\n# src 3p -> dst 3p\nmatSrc = np.float32([[0,0], [0,height-1], [width-1, 0]])\nmatDst = np.float32([[50,50], [300,height-200], [width-300, 100]])\n# 获得仿射变换矩阵\nmatAffine = cv2.getAffineTransform(matSrc, matDst)\ndstImage = cv2.warpAffine(img, matAffine, (width, height))\ncv2.imshow(\"img\", dstImage)\ncv2.waitKey(0)\n```\n* 旋转\n``` bash\nimg = cv.imread(\"tmp.png\", 1)\nheight, width, _ = img.shape  # (height, width, mode)\n# 获得旋转矩阵\nmatRotate = cv2.getRotationMatrix2D((int(width/2), int(height/2)), 45, 0.5)\ndstImage = cv2.warpAffine(img, matRotate, (width, height))\ncv2.imshow(\"img2\", dstImage)\ncv2.waitKey(0)\n```\n## 仿射变换就是特殊的透射变换\n\n* 透射变换\n``` bash\nmatSrc = np.float32(points)\nmatDst = np.float32([[0,0],[0,399],[99, 0],[99,399]])\nmatPers = cv2.getPerspectiveTransform(matSrc, matDst)\ndstImage = cv2.warpPerspective(img, matPers, (width, height))\n```\n\n<div align=center>\n<img src='象棋残局机器人二：透射变换\\001.jpg' width=600 height=300>\n</div>\n\n利用透射变换这一操作，从而将棋面的图像从背景中抽离转化成易于处理的形式。\n\n\n## 参考资料\n\n* 仿射变换和透射变换 - outthinker - 博客园  \nhttps://www.cnblogs.com/zf-blog/p/7813227.html\n\n* 4.1 图像特效介绍 - YouTube  \nhttps://www.youtube.com/watch?v=Ih2iamhLvxE&list=PLsYXQooxlb1pE21-dgEf-VdsArdqSvuEW&index=36\n","slug":"象棋残局机器人二：透射变换","published":1,"updated":"2020-01-05T19:13:25.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5092004g4cvjj7ftkyll","content":"<h2 id=\"图片的几何变换\"><a href=\"#图片的几何变换\" class=\"headerlink\" title=\"图片的几何变换\"></a>图片的几何变换</h2><ul>\n<li><p>缩放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv2.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\">dstHeight = int(height*0.5)</span><br><span class=\"line\">dstWidth = int(width*0.5)</span><br><span class=\"line\"><span class=\"comment\"># cv2.resize()</span></span><br><span class=\"line\"><span class=\"comment\"># dst = cv2.resize(img, (dstWidth, dstHeight))</span></span><br><span class=\"line\"><span class=\"comment\"># 最近邻域插值</span></span><br><span class=\"line\">dstImage = np.zeros((dstHeight, dstWidth), np.uint8)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(0, dstHeight):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(0, dstWidth):</span><br><span class=\"line\">        iNew = int(i * height * 1.0 / dstHeight)</span><br><span class=\"line\">        jNew = int(j * width * 1.0 / dstWidth)</span><br><span class=\"line\">        dstImage[i, j] = img(iNew, jNew)</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\"><span class=\"comment\"># 双线性插值 </span></span><br><span class=\"line\"><span class=\"comment\"># 像素关系重采样 </span></span><br><span class=\"line\"><span class=\"comment\"># 立方插值</span></span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>剪切</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 图片坐标</span></span><br><span class=\"line\"><span class=\"comment\"># x: 0-width</span></span><br><span class=\"line\"><span class=\"comment\"># y: 0-height</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">datImage = img[100:200, 100:300]</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位移</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.warpAffine()</span></span><br><span class=\"line\">matShift = np.float32([[1,0,100], [0,1,200]]) <span class=\"comment\"># 2行3列</span></span><br><span class=\"line\">dstImage = cv2.warpAffine(img, matShift, (width, height))</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xImg  = cv.flip(img,1,dst=None)  <span class=\"comment\">#水平镜像</span></span><br><span class=\"line\">xImg1 = cv.flip(img,0,dst=None)  <span class=\"comment\">#垂直镜像</span></span><br><span class=\"line\">xImg2 = cv.flip(img,-1,dst=None) <span class=\"comment\">#对角镜像</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仿射变换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\"><span class=\"comment\"># src 3p -&gt; dst 3p</span></span><br><span class=\"line\">matSrc = np.float32([[0,0], [0,height-1], [width-1, 0]])</span><br><span class=\"line\">matDst = np.float32([[50,50], [300,height-200], [width-300, 100]])</span><br><span class=\"line\"><span class=\"comment\"># 获得仿射变换矩阵</span></span><br><span class=\"line\">matAffine = cv2.getAffineTransform(matSrc, matDst)</span><br><span class=\"line\">dstImage = cv2.warpAffine(img, matAffine, (width, height))</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>旋转</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\"><span class=\"comment\"># 获得旋转矩阵</span></span><br><span class=\"line\">matRotate = cv2.getRotationMatrix2D((int(width/2), int(height/2)), 45, 0.5)</span><br><span class=\"line\">dstImage = cv2.warpAffine(img, matRotate, (width, height))</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img2\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"仿射变换就是特殊的透射变换\"><a href=\"#仿射变换就是特殊的透射变换\" class=\"headerlink\" title=\"仿射变换就是特殊的透射变换\"></a>仿射变换就是特殊的透射变换</h2><ul>\n<li>透射变换<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matSrc = np.float32(points)</span><br><span class=\"line\">matDst = np.float32([[0,0],[0,399],[99, 0],[99,399]])</span><br><span class=\"line\">matPers = cv2.getPerspectiveTransform(matSrc, matDst)</span><br><span class=\"line\">dstImage = cv2.warpPerspective(img, matPers, (width, height))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人二：透射变换/001.jpg\" width=\"600\" height=\"300\">\n</div>\n\n<p>利用透射变换这一操作，从而将棋面的图像从背景中抽离转化成易于处理的形式。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p>仿射变换和透射变换 - outthinker - 博客园<br><a href=\"https://www.cnblogs.com/zf-blog/p/7813227.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zf-blog/p/7813227.html</a></p>\n</li>\n<li><p>4.1 图像特效介绍 - YouTube<br><a href=\"https://www.youtube.com/watch?v=Ih2iamhLvxE&amp;list=PLsYXQooxlb1pE21-dgEf-VdsArdqSvuEW&amp;index=36\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=Ih2iamhLvxE&amp;list=PLsYXQooxlb1pE21-dgEf-VdsArdqSvuEW&amp;index=36</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"图片的几何变换\"><a href=\"#图片的几何变换\" class=\"headerlink\" title=\"图片的几何变换\"></a>图片的几何变换</h2><ul>\n<li><p>缩放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv2.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\">dstHeight = int(height*0.5)</span><br><span class=\"line\">dstWidth = int(width*0.5)</span><br><span class=\"line\"><span class=\"comment\"># cv2.resize()</span></span><br><span class=\"line\"><span class=\"comment\"># dst = cv2.resize(img, (dstWidth, dstHeight))</span></span><br><span class=\"line\"><span class=\"comment\"># 最近邻域插值</span></span><br><span class=\"line\">dstImage = np.zeros((dstHeight, dstWidth), np.uint8)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(0, dstHeight):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(0, dstWidth):</span><br><span class=\"line\">        iNew = int(i * height * 1.0 / dstHeight)</span><br><span class=\"line\">        jNew = int(j * width * 1.0 / dstWidth)</span><br><span class=\"line\">        dstImage[i, j] = img(iNew, jNew)</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\"><span class=\"comment\"># 双线性插值 </span></span><br><span class=\"line\"><span class=\"comment\"># 像素关系重采样 </span></span><br><span class=\"line\"><span class=\"comment\"># 立方插值</span></span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>剪切</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 图片坐标</span></span><br><span class=\"line\"><span class=\"comment\"># x: 0-width</span></span><br><span class=\"line\"><span class=\"comment\"># y: 0-height</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">datImage = img[100:200, 100:300]</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位移</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.warpAffine()</span></span><br><span class=\"line\">matShift = np.float32([[1,0,100], [0,1,200]]) <span class=\"comment\"># 2行3列</span></span><br><span class=\"line\">dstImage = cv2.warpAffine(img, matShift, (width, height))</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xImg  = cv.flip(img,1,dst=None)  <span class=\"comment\">#水平镜像</span></span><br><span class=\"line\">xImg1 = cv.flip(img,0,dst=None)  <span class=\"comment\">#垂直镜像</span></span><br><span class=\"line\">xImg2 = cv.flip(img,-1,dst=None) <span class=\"comment\">#对角镜像</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仿射变换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\"><span class=\"comment\"># src 3p -&gt; dst 3p</span></span><br><span class=\"line\">matSrc = np.float32([[0,0], [0,height-1], [width-1, 0]])</span><br><span class=\"line\">matDst = np.float32([[50,50], [300,height-200], [width-300, 100]])</span><br><span class=\"line\"><span class=\"comment\"># 获得仿射变换矩阵</span></span><br><span class=\"line\">matAffine = cv2.getAffineTransform(matSrc, matDst)</span><br><span class=\"line\">dstImage = cv2.warpAffine(img, matAffine, (width, height))</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>旋转</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv.imread(<span class=\"string\">\"tmp.png\"</span>, 1)</span><br><span class=\"line\">height, width, _ = img.shape  <span class=\"comment\"># (height, width, mode)</span></span><br><span class=\"line\"><span class=\"comment\"># 获得旋转矩阵</span></span><br><span class=\"line\">matRotate = cv2.getRotationMatrix2D((int(width/2), int(height/2)), 45, 0.5)</span><br><span class=\"line\">dstImage = cv2.warpAffine(img, matRotate, (width, height))</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">\"img2\"</span>, dstImage)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"仿射变换就是特殊的透射变换\"><a href=\"#仿射变换就是特殊的透射变换\" class=\"headerlink\" title=\"仿射变换就是特殊的透射变换\"></a>仿射变换就是特殊的透射变换</h2><ul>\n<li>透射变换<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matSrc = np.float32(points)</span><br><span class=\"line\">matDst = np.float32([[0,0],[0,399],[99, 0],[99,399]])</span><br><span class=\"line\">matPers = cv2.getPerspectiveTransform(matSrc, matDst)</span><br><span class=\"line\">dstImage = cv2.warpPerspective(img, matPers, (width, height))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人二：透射变换/001.jpg\" width=\"600\" height=\"300\">\n</div>\n\n<p>利用透射变换这一操作，从而将棋面的图像从背景中抽离转化成易于处理的形式。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p>仿射变换和透射变换 - outthinker - 博客园<br><a href=\"https://www.cnblogs.com/zf-blog/p/7813227.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zf-blog/p/7813227.html</a></p>\n</li>\n<li><p>4.1 图像特效介绍 - YouTube<br><a href=\"https://www.youtube.com/watch?v=Ih2iamhLvxE&amp;list=PLsYXQooxlb1pE21-dgEf-VdsArdqSvuEW&amp;index=36\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=Ih2iamhLvxE&amp;list=PLsYXQooxlb1pE21-dgEf-VdsArdqSvuEW&amp;index=36</a></p>\n</li>\n</ul>\n"},{"title":"知识产权制造备注","date":"2020-03-02T14:54:22.000Z","_content":"\n有关我校软件著作权申请流程和注意事项的备注。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 特此说明\n所有软著申请著作权人仅为我校。  \n相关人员名单应录入我校知识产权系统，可以开证明用于我校各活动中。\n\n## 代理\n\n阿里云的计算机软件著作权登记申请\n\n## 时间\n\n35个工作日：12月25日寄送材料，2月27日取得。\n\n## 材料\n\n邮件\n* 源代码3000行\n* 操作说明书/设计说明\n\n### 源代码\n提交的源代码不能有自由软件源代码，比如框架代码、开源代码等非自己编写的代码。提交代码前30页、后30页共计60页，一页也不可以少，最后一页必须是代码的结束。\n### 操作手册\n操作手册须含有详细、完整的登录界面、主界面等操作步骤截图（截图应完整、清晰，不要只截取其中一部分）及有关功能的文字描述，软件涉及的各项功能均应有相应操作步骤截图及文字说明，流程要连贯。提交前30页、后30页共计60页，不足60页则全部提交。\n### 设计说明\n设计说明须含有详细的软件结构图、各个功能的流程图、逻辑框图，介绍软件总体设计，接口设计，模块名称功能，函数名称功能，算法，运行设计等内容。\n\n邮寄材料（公章×3）\n* 我校法人证书\n* 权利保证书\n* 软著登记信息表\n\n## 流程\n* 准备材料\n* 知识产权与成果转化科\n* 盖章，邮寄材料\n","source":"_posts/知识产权制造备注.md","raw":"---\ntitle: 知识产权制造备注\ndate: 2020-03-02 22:54:22\ntags:\n---\n\n有关我校软件著作权申请流程和注意事项的备注。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 特此说明\n所有软著申请著作权人仅为我校。  \n相关人员名单应录入我校知识产权系统，可以开证明用于我校各活动中。\n\n## 代理\n\n阿里云的计算机软件著作权登记申请\n\n## 时间\n\n35个工作日：12月25日寄送材料，2月27日取得。\n\n## 材料\n\n邮件\n* 源代码3000行\n* 操作说明书/设计说明\n\n### 源代码\n提交的源代码不能有自由软件源代码，比如框架代码、开源代码等非自己编写的代码。提交代码前30页、后30页共计60页，一页也不可以少，最后一页必须是代码的结束。\n### 操作手册\n操作手册须含有详细、完整的登录界面、主界面等操作步骤截图（截图应完整、清晰，不要只截取其中一部分）及有关功能的文字描述，软件涉及的各项功能均应有相应操作步骤截图及文字说明，流程要连贯。提交前30页、后30页共计60页，不足60页则全部提交。\n### 设计说明\n设计说明须含有详细的软件结构图、各个功能的流程图、逻辑框图，介绍软件总体设计，接口设计，模块名称功能，函数名称功能，算法，运行设计等内容。\n\n邮寄材料（公章×3）\n* 我校法人证书\n* 权利保证书\n* 软著登记信息表\n\n## 流程\n* 准备材料\n* 知识产权与成果转化科\n* 盖章，邮寄材料\n","slug":"知识产权制造备注","published":1,"updated":"2020-03-02T15:51:16.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5094004h4cvjx6bwd3wn","content":"<p>有关我校软件著作权申请流程和注意事项的备注。</p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"特此说明\"><a href=\"#特此说明\" class=\"headerlink\" title=\"特此说明\"></a>特此说明</h2><p>所有软著申请著作权人仅为我校。<br>相关人员名单应录入我校知识产权系统，可以开证明用于我校各活动中。</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>阿里云的计算机软件著作权登记申请</p>\n<h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><p>35个工作日：12月25日寄送材料，2月27日取得。</p>\n<h2 id=\"材料\"><a href=\"#材料\" class=\"headerlink\" title=\"材料\"></a>材料</h2><p>邮件</p>\n<ul>\n<li>源代码3000行</li>\n<li>操作说明书/设计说明</li>\n</ul>\n<h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><p>提交的源代码不能有自由软件源代码，比如框架代码、开源代码等非自己编写的代码。提交代码前30页、后30页共计60页，一页也不可以少，最后一页必须是代码的结束。</p>\n<h3 id=\"操作手册\"><a href=\"#操作手册\" class=\"headerlink\" title=\"操作手册\"></a>操作手册</h3><p>操作手册须含有详细、完整的登录界面、主界面等操作步骤截图（截图应完整、清晰，不要只截取其中一部分）及有关功能的文字描述，软件涉及的各项功能均应有相应操作步骤截图及文字说明，流程要连贯。提交前30页、后30页共计60页，不足60页则全部提交。</p>\n<h3 id=\"设计说明\"><a href=\"#设计说明\" class=\"headerlink\" title=\"设计说明\"></a>设计说明</h3><p>设计说明须含有详细的软件结构图、各个功能的流程图、逻辑框图，介绍软件总体设计，接口设计，模块名称功能，函数名称功能，算法，运行设计等内容。</p>\n<p>邮寄材料（公章×3）</p>\n<ul>\n<li>我校法人证书</li>\n<li>权利保证书</li>\n<li>软著登记信息表</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li>准备材料</li>\n<li>知识产权与成果转化科</li>\n<li>盖章，邮寄材料</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p>有关我校软件著作权申请流程和注意事项的备注。</p>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"特此说明\"><a href=\"#特此说明\" class=\"headerlink\" title=\"特此说明\"></a>特此说明</h2><p>所有软著申请著作权人仅为我校。<br>相关人员名单应录入我校知识产权系统，可以开证明用于我校各活动中。</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>阿里云的计算机软件著作权登记申请</p>\n<h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><p>35个工作日：12月25日寄送材料，2月27日取得。</p>\n<h2 id=\"材料\"><a href=\"#材料\" class=\"headerlink\" title=\"材料\"></a>材料</h2><p>邮件</p>\n<ul>\n<li>源代码3000行</li>\n<li>操作说明书/设计说明</li>\n</ul>\n<h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><p>提交的源代码不能有自由软件源代码，比如框架代码、开源代码等非自己编写的代码。提交代码前30页、后30页共计60页，一页也不可以少，最后一页必须是代码的结束。</p>\n<h3 id=\"操作手册\"><a href=\"#操作手册\" class=\"headerlink\" title=\"操作手册\"></a>操作手册</h3><p>操作手册须含有详细、完整的登录界面、主界面等操作步骤截图（截图应完整、清晰，不要只截取其中一部分）及有关功能的文字描述，软件涉及的各项功能均应有相应操作步骤截图及文字说明，流程要连贯。提交前30页、后30页共计60页，不足60页则全部提交。</p>\n<h3 id=\"设计说明\"><a href=\"#设计说明\" class=\"headerlink\" title=\"设计说明\"></a>设计说明</h3><p>设计说明须含有详细的软件结构图、各个功能的流程图、逻辑框图，介绍软件总体设计，接口设计，模块名称功能，函数名称功能，算法，运行设计等内容。</p>\n<p>邮寄材料（公章×3）</p>\n<ul>\n<li>我校法人证书</li>\n<li>权利保证书</li>\n<li>软著登记信息表</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li>准备材料</li>\n<li>知识产权与成果转化科</li>\n<li>盖章，邮寄材料</li>\n</ul>\n</the>"},{"title":"象棋残局机器人一：摄像头标定","date":"2019-05-25T08:44:09.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n廉价摄像头会给图像带来很多畸变，硬件解决方法是买个无畸变的摄像头，软件解决方案是找到摄像机畸变参数以及摄像机的内部参数和外部参数，对畸变图像进行修复。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<div align=center>\n<img src=\"象棋残局机器人一：摄像头标定\\001.jpg\" width=600 height=400>\n</div>\n\n## 原理\n* 相机标定(Camera calibration) - honyniu的专栏 - CSDN博客  \nhttps://blog.csdn.net/honyniu/article/details/51004397\n* 张正友相机标定Opencv实现以及标定流程&&标定结果评价&&图像矫正流程解析（附标定程序和棋盘图） - 牧野的博客 - CSDN博客  \nhttps://blog.csdn.net/dcrmg/article/details/52939318\n\n\n## 流程\n1. 准备棋盘格标定图片；\n2. 对每一张标定图片，执行棋盘格检测，提取角点信息；\n3. 相机标定；\n4. 对标定结果进行评价；\n5. 查看标定效果\n\n### 准备标定图片\n标定图片需要使用标定板在不同位置、不同角度、不同姿态下拍摄，最少需要3张，以10~20张为宜。标定板需要是黑白相间的矩形构成的棋盘图，制作精度要求较高。\n\n\n### 对每一张图片，提取角点信息\n读取每一张标定图片，执行cv2.findChessboardCorners棋盘格检测函数，提取角点信息corners；  \n我们需要最大精度的角点检测，使用cv2.cornerSubPix()，将角点的重心传给这个函数进行修正，它可以提供亚像素级别的角点检测；\n在棋盘标定图上绘制找到的内角点；\n\n``` python\ndef read_sample(self, image_path):\n    for fname in image_path:\n        img = cv2.imread(fname)\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        # 找到棋盘格角点\n        ret, corners = cv2.findChessboardCorners(gray, (w,h),None)\n        # 如果找到足够点对，将其存储起来\n        if ret == True:\n            cv2.cornerSubPix(gray,corners,(11,11),(-1,-1), self.criteria)\n            self.objpoints.append(self.objp)\n            self.imgpoints.append(corners)\n            # 将角点在图像上显示\n            cv2.drawChessboardCorners(img, (w,h), corners, ret)\n            cv2.imshow('findCorners',img)\n            cv2.waitKey(1)\n    cv2.destroyAllWindows()\n```\n<div align=center>\n<img src = \"象棋残局机器人一：摄像头标定/003.png\" width=600 height=400>\n</div>\n\n### 相机标定\n获取到棋盘标定图的内角点图像坐标之后，就可以使用cv2.calibrateCamera函数进行标定，计算相机内参和外参系数；\n``` python\ndef calibrate(self):\n    # 标定\n    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera( self.objpoints, self.imgpoints, self.image_shape[::-1], None, None)\n    '''\n    mtx   - 摄像机内矩阵\n    dist  - 进一步扭曲\n    rvecs - 旋转向量\n    tvecs - 平移向量\n    '''\n    print(\"mtx:\", mtx)\n    print(\"dist:\", dist)\n```\n\n### 查看标定效果\n利用求得的内参数矩阵和畸变系数，可以对图像进行畸变的矫正\n``` python\ndef test(self, image_path):\n    # 去畸变\n    img2 = cv2.imread(image_path)\n    h, w = img2.shape[:2]\n    # undistort\n    dst = cv2.undistort(img2, self.calibrate_mtx, self.calibrate_dist, None, self.calibrate_mtx)\n    cv2.imshow('img', img2)\n    cv2.imshow('dst', dst)\n```\n<div align=center>\n<img src = \"象棋残局机器人一：摄像头标定/002.png\" width=600 height=400>\n</div>\n\n## 参考资料\n\n* 使用OpenCV进行标定（Python） - sylvester的博客 - CSDN博客  \nhttps://blog.csdn.net/u010128736/article/details/52875137\n\n","source":"_posts/象棋残局机器人一：摄像头标定.md","raw":"---\ntitle: 象棋残局机器人一：摄像头标定\ndate: 2019-05-25 16:44:09\ntags:\n  - opencv\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n廉价摄像头会给图像带来很多畸变，硬件解决方法是买个无畸变的摄像头，软件解决方案是找到摄像机畸变参数以及摄像机的内部参数和外部参数，对畸变图像进行修复。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<div align=center>\n<img src=\"象棋残局机器人一：摄像头标定\\001.jpg\" width=600 height=400>\n</div>\n\n## 原理\n* 相机标定(Camera calibration) - honyniu的专栏 - CSDN博客  \nhttps://blog.csdn.net/honyniu/article/details/51004397\n* 张正友相机标定Opencv实现以及标定流程&&标定结果评价&&图像矫正流程解析（附标定程序和棋盘图） - 牧野的博客 - CSDN博客  \nhttps://blog.csdn.net/dcrmg/article/details/52939318\n\n\n## 流程\n1. 准备棋盘格标定图片；\n2. 对每一张标定图片，执行棋盘格检测，提取角点信息；\n3. 相机标定；\n4. 对标定结果进行评价；\n5. 查看标定效果\n\n### 准备标定图片\n标定图片需要使用标定板在不同位置、不同角度、不同姿态下拍摄，最少需要3张，以10~20张为宜。标定板需要是黑白相间的矩形构成的棋盘图，制作精度要求较高。\n\n\n### 对每一张图片，提取角点信息\n读取每一张标定图片，执行cv2.findChessboardCorners棋盘格检测函数，提取角点信息corners；  \n我们需要最大精度的角点检测，使用cv2.cornerSubPix()，将角点的重心传给这个函数进行修正，它可以提供亚像素级别的角点检测；\n在棋盘标定图上绘制找到的内角点；\n\n``` python\ndef read_sample(self, image_path):\n    for fname in image_path:\n        img = cv2.imread(fname)\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        # 找到棋盘格角点\n        ret, corners = cv2.findChessboardCorners(gray, (w,h),None)\n        # 如果找到足够点对，将其存储起来\n        if ret == True:\n            cv2.cornerSubPix(gray,corners,(11,11),(-1,-1), self.criteria)\n            self.objpoints.append(self.objp)\n            self.imgpoints.append(corners)\n            # 将角点在图像上显示\n            cv2.drawChessboardCorners(img, (w,h), corners, ret)\n            cv2.imshow('findCorners',img)\n            cv2.waitKey(1)\n    cv2.destroyAllWindows()\n```\n<div align=center>\n<img src = \"象棋残局机器人一：摄像头标定/003.png\" width=600 height=400>\n</div>\n\n### 相机标定\n获取到棋盘标定图的内角点图像坐标之后，就可以使用cv2.calibrateCamera函数进行标定，计算相机内参和外参系数；\n``` python\ndef calibrate(self):\n    # 标定\n    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera( self.objpoints, self.imgpoints, self.image_shape[::-1], None, None)\n    '''\n    mtx   - 摄像机内矩阵\n    dist  - 进一步扭曲\n    rvecs - 旋转向量\n    tvecs - 平移向量\n    '''\n    print(\"mtx:\", mtx)\n    print(\"dist:\", dist)\n```\n\n### 查看标定效果\n利用求得的内参数矩阵和畸变系数，可以对图像进行畸变的矫正\n``` python\ndef test(self, image_path):\n    # 去畸变\n    img2 = cv2.imread(image_path)\n    h, w = img2.shape[:2]\n    # undistort\n    dst = cv2.undistort(img2, self.calibrate_mtx, self.calibrate_dist, None, self.calibrate_mtx)\n    cv2.imshow('img', img2)\n    cv2.imshow('dst', dst)\n```\n<div align=center>\n<img src = \"象棋残局机器人一：摄像头标定/002.png\" width=600 height=400>\n</div>\n\n## 参考资料\n\n* 使用OpenCV进行标定（Python） - sylvester的博客 - CSDN博客  \nhttps://blog.csdn.net/u010128736/article/details/52875137\n\n","slug":"象棋残局机器人一：摄像头标定","published":1,"updated":"2020-01-05T19:13:25.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5095004j4cvjxx97s5qu","content":"<p><strong> 象棋残局机器人一：摄像头标定 </strong> <excerpt in index | 首页摘要><br>廉价摄像头会给图像带来很多畸变，硬件解决方法是买个无畸变的摄像头，软件解决方案是找到摄像机畸变参数以及摄像机的内部参数和外部参数，对畸变图像进行修复。<br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人一：摄像头标定/001.jpg\" width=\"600\" height=\"400\">\n</div>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>相机标定(Camera calibration) - honyniu的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/honyniu/article/details/51004397\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/honyniu/article/details/51004397</a></li>\n<li>张正友相机标定Opencv实现以及标定流程&amp;&amp;标定结果评价&amp;&amp;图像矫正流程解析（附标定程序和棋盘图） - 牧野的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/dcrmg/article/details/52939318\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dcrmg/article/details/52939318</a></li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>准备棋盘格标定图片；</li>\n<li>对每一张标定图片，执行棋盘格检测，提取角点信息；</li>\n<li>相机标定；</li>\n<li>对标定结果进行评价；</li>\n<li>查看标定效果</li>\n</ol>\n<h3 id=\"准备标定图片\"><a href=\"#准备标定图片\" class=\"headerlink\" title=\"准备标定图片\"></a>准备标定图片</h3><p>标定图片需要使用标定板在不同位置、不同角度、不同姿态下拍摄，最少需要3张，以10~20张为宜。标定板需要是黑白相间的矩形构成的棋盘图，制作精度要求较高。</p>\n<h3 id=\"对每一张图片，提取角点信息\"><a href=\"#对每一张图片，提取角点信息\" class=\"headerlink\" title=\"对每一张图片，提取角点信息\"></a>对每一张图片，提取角点信息</h3><p>读取每一张标定图片，执行cv2.findChessboardCorners棋盘格检测函数，提取角点信息corners；<br>我们需要最大精度的角点检测，使用cv2.cornerSubPix()，将角点的重心传给这个函数进行修正，它可以提供亚像素级别的角点检测；<br>在棋盘标定图上绘制找到的内角点；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_sample</span><span class=\"params\">(self, image_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> fname <span class=\"keyword\">in</span> image_path:</span><br><span class=\"line\">        img = cv2.imread(fname)</span><br><span class=\"line\">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">        <span class=\"comment\"># 找到棋盘格角点</span></span><br><span class=\"line\">        ret, corners = cv2.findChessboardCorners(gray, (w,h),<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 如果找到足够点对，将其存储起来</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ret == <span class=\"literal\">True</span>:</span><br><span class=\"line\">            cv2.cornerSubPix(gray,corners,(<span class=\"number\">11</span>,<span class=\"number\">11</span>),(<span class=\"number\">-1</span>,<span class=\"number\">-1</span>), self.criteria)</span><br><span class=\"line\">            self.objpoints.append(self.objp)</span><br><span class=\"line\">            self.imgpoints.append(corners)</span><br><span class=\"line\">            <span class=\"comment\"># 将角点在图像上显示</span></span><br><span class=\"line\">            cv2.drawChessboardCorners(img, (w,h), corners, ret)</span><br><span class=\"line\">            cv2.imshow(<span class=\"string\">'findCorners'</span>,img)</span><br><span class=\"line\">            cv2.waitKey(<span class=\"number\">1</span>)</span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人一：摄像头标定/003.png\" width=\"600\" height=\"400\">\n</div>\n\n<h3 id=\"相机标定\"><a href=\"#相机标定\" class=\"headerlink\" title=\"相机标定\"></a>相机标定</h3><p>获取到棋盘标定图的内角点图像坐标之后，就可以使用cv2.calibrateCamera函数进行标定，计算相机内参和外参系数；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calibrate</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 标定</span></span><br><span class=\"line\">    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera( self.objpoints, self.imgpoints, self.image_shape[::<span class=\"number\">-1</span>], <span class=\"literal\">None</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    mtx   - 摄像机内矩阵</span></span><br><span class=\"line\"><span class=\"string\">    dist  - 进一步扭曲</span></span><br><span class=\"line\"><span class=\"string\">    rvecs - 旋转向量</span></span><br><span class=\"line\"><span class=\"string\">    tvecs - 平移向量</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    print(<span class=\"string\">\"mtx:\"</span>, mtx)</span><br><span class=\"line\">    print(<span class=\"string\">\"dist:\"</span>, dist)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看标定效果\"><a href=\"#查看标定效果\" class=\"headerlink\" title=\"查看标定效果\"></a>查看标定效果</h3><p>利用求得的内参数矩阵和畸变系数，可以对图像进行畸变的矫正<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self, image_path)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 去畸变</span></span><br><span class=\"line\">    img2 = cv2.imread(image_path)</span><br><span class=\"line\">    h, w = img2.shape[:<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"comment\"># undistort</span></span><br><span class=\"line\">    dst = cv2.undistort(img2, self.calibrate_mtx, self.calibrate_dist, <span class=\"literal\">None</span>, self.calibrate_mtx)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'img'</span>, img2)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'dst'</span>, dst)</span><br></pre></td></tr></table></figure></p>\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人一：摄像头标定/002.png\" width=\"600\" height=\"400\">\n</div>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>使用OpenCV进行标定（Python） - sylvester的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/u010128736/article/details/52875137\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010128736/article/details/52875137</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 象棋残局机器人一：摄像头标定 </strong> <excerpt in index | 首页摘要><br>廉价摄像头会给图像带来很多畸变，硬件解决方法是买个无畸变的摄像头，软件解决方案是找到摄像机畸变参数以及摄像机的内部参数和外部参数，对畸变图像进行修复。<br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人一：摄像头标定/001.jpg\" width=\"600\" height=\"400\">\n</div>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>相机标定(Camera calibration) - honyniu的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/honyniu/article/details/51004397\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/honyniu/article/details/51004397</a></li>\n<li>张正友相机标定Opencv实现以及标定流程&amp;&amp;标定结果评价&amp;&amp;图像矫正流程解析（附标定程序和棋盘图） - 牧野的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/dcrmg/article/details/52939318\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dcrmg/article/details/52939318</a></li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>准备棋盘格标定图片；</li>\n<li>对每一张标定图片，执行棋盘格检测，提取角点信息；</li>\n<li>相机标定；</li>\n<li>对标定结果进行评价；</li>\n<li>查看标定效果</li>\n</ol>\n<h3 id=\"准备标定图片\"><a href=\"#准备标定图片\" class=\"headerlink\" title=\"准备标定图片\"></a>准备标定图片</h3><p>标定图片需要使用标定板在不同位置、不同角度、不同姿态下拍摄，最少需要3张，以10~20张为宜。标定板需要是黑白相间的矩形构成的棋盘图，制作精度要求较高。</p>\n<h3 id=\"对每一张图片，提取角点信息\"><a href=\"#对每一张图片，提取角点信息\" class=\"headerlink\" title=\"对每一张图片，提取角点信息\"></a>对每一张图片，提取角点信息</h3><p>读取每一张标定图片，执行cv2.findChessboardCorners棋盘格检测函数，提取角点信息corners；<br>我们需要最大精度的角点检测，使用cv2.cornerSubPix()，将角点的重心传给这个函数进行修正，它可以提供亚像素级别的角点检测；<br>在棋盘标定图上绘制找到的内角点；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_sample</span><span class=\"params\">(self, image_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> fname <span class=\"keyword\">in</span> image_path:</span><br><span class=\"line\">        img = cv2.imread(fname)</span><br><span class=\"line\">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">        <span class=\"comment\"># 找到棋盘格角点</span></span><br><span class=\"line\">        ret, corners = cv2.findChessboardCorners(gray, (w,h),<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 如果找到足够点对，将其存储起来</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ret == <span class=\"literal\">True</span>:</span><br><span class=\"line\">            cv2.cornerSubPix(gray,corners,(<span class=\"number\">11</span>,<span class=\"number\">11</span>),(<span class=\"number\">-1</span>,<span class=\"number\">-1</span>), self.criteria)</span><br><span class=\"line\">            self.objpoints.append(self.objp)</span><br><span class=\"line\">            self.imgpoints.append(corners)</span><br><span class=\"line\">            <span class=\"comment\"># 将角点在图像上显示</span></span><br><span class=\"line\">            cv2.drawChessboardCorners(img, (w,h), corners, ret)</span><br><span class=\"line\">            cv2.imshow(<span class=\"string\">'findCorners'</span>,img)</span><br><span class=\"line\">            cv2.waitKey(<span class=\"number\">1</span>)</span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人一：摄像头标定/003.png\" width=\"600\" height=\"400\">\n</div>\n\n<h3 id=\"相机标定\"><a href=\"#相机标定\" class=\"headerlink\" title=\"相机标定\"></a>相机标定</h3><p>获取到棋盘标定图的内角点图像坐标之后，就可以使用cv2.calibrateCamera函数进行标定，计算相机内参和外参系数；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calibrate</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 标定</span></span><br><span class=\"line\">    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera( self.objpoints, self.imgpoints, self.image_shape[::<span class=\"number\">-1</span>], <span class=\"literal\">None</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    mtx   - 摄像机内矩阵</span></span><br><span class=\"line\"><span class=\"string\">    dist  - 进一步扭曲</span></span><br><span class=\"line\"><span class=\"string\">    rvecs - 旋转向量</span></span><br><span class=\"line\"><span class=\"string\">    tvecs - 平移向量</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    print(<span class=\"string\">\"mtx:\"</span>, mtx)</span><br><span class=\"line\">    print(<span class=\"string\">\"dist:\"</span>, dist)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看标定效果\"><a href=\"#查看标定效果\" class=\"headerlink\" title=\"查看标定效果\"></a>查看标定效果</h3><p>利用求得的内参数矩阵和畸变系数，可以对图像进行畸变的矫正<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self, image_path)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 去畸变</span></span><br><span class=\"line\">    img2 = cv2.imread(image_path)</span><br><span class=\"line\">    h, w = img2.shape[:<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"comment\"># undistort</span></span><br><span class=\"line\">    dst = cv2.undistort(img2, self.calibrate_mtx, self.calibrate_dist, <span class=\"literal\">None</span>, self.calibrate_mtx)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'img'</span>, img2)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'dst'</span>, dst)</span><br></pre></td></tr></table></figure></p>\n<div align=\"center\">\n<img src=\"/2019/05/25/象棋残局机器人一：摄像头标定/002.png\" width=\"600\" height=\"400\">\n</div>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>使用OpenCV进行标定（Python） - sylvester的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/u010128736/article/details/52875137\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010128736/article/details/52875137</a></li>\n</ul>\n</the>"},{"title":"象棋残局机器人三：分类模型retrain","date":"2019-05-28T16:27:39.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n基于InceptionV3和mobileNet模型重新训练自己的图片分类模型。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 迁移学习\n\n图片分类模型往往有数以万计的参数，而从头开始训练需要大量的带标签训练数据、强大的算力和更多时间，利用迁移学习，可以在前人优秀图片分类模型的基础上，非常快捷有效地重新训练出新的图像分类器。  \n通常来说，迁移学习的策略有两种。\n* Finetuning（微调）  \n包括在基础数据集上使用预训练网络，并在目标数据集上训练所有层。\n* Freeze and Train（冻结和训练）  \n包括仅冻结并训练最后一层，其他层不变（权重不更新）；也可以冻结前几层，微调其他层，这是由于有些证据表明CNN的前几层有纹理滤镜和彩色斑点。\n\n## 流程\n1. predo.py，准备自己要分类的图片训练样本；\n2. retrain.py，下载inception v3/mobileNet模型及训练图片分类器；\n3. label_image.py，测试模型预测结果。\n\n### 预处理\n``` python\nimport os\nimport cv2\n\npath = \"./data\"\nfiles = os.listdir(path) \n# print(files)\nfor f in files: \n    print(f)\n    cnt = 0\n    data_list = os.listdir(path+'/'+f)\n    # print(data_list[:4])\n    for data in data_list:\n        data_file_path = path+'/'+f+'/'+data \n        # img = cv2.imread(data_file_path)\n        # img_resize = cv2.resize(img, (300, 300))\n        # cv2.imwrite(path+'/'+f+'/'+\"{:04d}.jpg\".format(cnt), img_resize)\n        newname = path+'/'+f+'/'+\"{:04d}.jpg\".format(cnt)\n        os.rename(data_file_path, newname)\n        cnt += 1\n    #     if cnt == 2:\n    #         break\n    # break\n```\n\n### retrain\n* tensorflow/retrain.py at c565660e008cf666c582668cb0d0937ca86e71fb · tensorflow/tensorflow  \nhttps://github.com/tensorflow/tensorflow/blob/c565660e008cf666c582668cb0d0937ca86e71fb/tensorflow/examples/image_retraining/retrain.py\n\n源码分析  \n* TensorFlow学习笔记：Inception_v3源码分析 - 简书  \nhttps://www.jianshu.com/p/feecdcdef8a0\n``` bash\n# By default: Inception v3\npython retrain.py\n# mobileNet\npython retrain.py --image_dir ./data --architecture mobilenet_1.0_224\n```\n可以提前下载模型文件到./tmp/imagenet文件夹下。\n* Google AI Blog: MobileNets: Open-Source Models for Efficient On-Device Vision  \nhttps://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html\n\n### 测试\n``` python\nimport tensorflow as tf\nimport os\nimport numpy as np\nimport re\nimport shutil\n\nlines = tf.gfile.GFile('./tmp/output_labels.txt').readlines()\nuid_to_human = {}\n#一行一行读取数据\nfor uid,line in enumerate(lines) :\n    #去掉换行符\n    line=line.strip('\\n')\n    uid_to_human[uid] = line\n \ndef id_to_string(node_id):\n    if node_id not in uid_to_human:\n        return ''\n    return uid_to_human[node_id]\n \n#创建一个图来存放google训练好的模型\nwith tf.gfile.FastGFile('./tmp/output_graph.pb', 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf.import_graph_def(graph_def, name='')\n \nwith tf.Session() as sess:\n    softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\n    #遍历目录\n    for root,dirs,files in os.walk('./test/'):\n        # print(\"root[-1]:\", root[-1]) # 类别\n        # print(\"files:\", files)\n        \n        for file in files:\n            print(root+\"/\"+file)\n            #载入图片\n            image_data = tf.gfile.FastGFile(root+\"/\"+file, 'rb').read()\n            predictions = sess.run(softmax_tensor,{'DecodeJpeg/contents:0': image_data})#图片格式是jpg格式\n            predictions = np.squeeze(predictions)#把结果转为1维数据\n \n            #打印图片路径及名称\n            image_path = os.path.join(root,file)\n            # print(image_path)\n            # #显示图片\n            # img=Image.open(image_path)\n            # plt.imshow(img)\n            # plt.axis('off')\n            # plt.show()\n \n            # 打印结果\n            top_k = predictions.argsort()[::-1]\n            # print(top_k)\n            for node_id in top_k:     \n                # 获取分类名称\n                human_string = id_to_string(node_id)\n                # 获取该分类的置信度\n                score = predictions[node_id]\n                print('%s (score = %.5f)' % (human_string, score))\n            \n            # 将识别错误文件保存到bad文件夹\n            if id_to_string(top_k[0]) != root[-1]:\n                old_path = root + \"/\" + file\n                name, _ = file.split('.')\n                new_path = r'./bad' + '/' + name + '_' + id_to_string(top_k[0]) + '_' + str(predictions[top_k[0]]) +'.jpg' \n                shutil.copyfile(old_path, new_path)\n\n```\n\n## 问题汇总\n### 1. 使用mobileNet时 TypeError: Cannot interpret feed_dict key as Tensor: The name 'DecodeJpeg/contents:0' refers to a Tensor which does not exist. The operation, 'DecodeJpeg/contents', does not exist in the graph.\n\n* TypeError: Cannot interpret feed_dict key as Tensor: The name 'DecodeJpeg/contents:0' refers to a Tensor which does not exist. The operation, 'DecodeJpeg/contents', does not exist in the graph. · Issue #12250 · tensorflow/tensorflow  \nhttps://github.com/tensorflow/tensorflow/issues/12250\n\n打印图的参数名称\n``` python\ntensor_name_list = [tensor.name for tensor in tf.get_default_graph().as_graph_def().node]\nprint(tensor_name_list)\n```\n修改输入为第一个tensor的名称\n``` python\n# inceptionV3\n# image_data = tf.gfile.FastGFile(image_path, 'rb').read()\n# predictions = sess.run(softmax_tensor, {'DecodeJpeg/contents:0': image_data}) #图片格式是jpg格式\n# predictions = np.squeeze(predictions) #把结果转为1维数据\n\n# mobileNet\nimage_data = tf.gfile.FastGFile(image_path, 'rb').read()\nimage_data = sess.run(tf.expand_dims(tf.image.resize_images(\n    tf.image.decode_jpeg(image_data), [128, 128], method=np.random.randint(0,3)), 0))\npredictions = sess.run(softmax_tensor, {'input:0': image_data}) #图片格式是jpg格式\npredictions = np.squeeze(predictions) #把结果转为1维数据\n```\n### 2. 分类速度太慢： 0.8s一张图，32个棋子大概需要20多秒\n对于棋子分类任务来说，输入是一张28*28的3通道图片，无论使用InceptionV3还是mobileNet_128模型都过于“厚重”，最终手写一个小的卷积网络，通过两层卷积+两层全连接来实现棋子分类。\n<div align=center>\n<img src='象棋残局机器人三：分类模型retrain\\001.png' width=600 height=300>\n</div>\n<div align=center>\n<img src='象棋残局机器人三：分类模型retrain\\002.png' width=600 height=300>\n</div>\n\n\n## 参考资料\n\n* 浅谈迁移学习图像分类 - weixin_33805743的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_33805743/article/details/87426423\n\n","source":"_posts/象棋残局机器人三：分类模型retrain.md","raw":"---\ntitle: 象棋残局机器人三：分类模型retrain\ndate: 2019-05-29 00:27:39\ntags:\n  - tensorflow\n  - 迁移学习\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n基于InceptionV3和mobileNet模型重新训练自己的图片分类模型。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 迁移学习\n\n图片分类模型往往有数以万计的参数，而从头开始训练需要大量的带标签训练数据、强大的算力和更多时间，利用迁移学习，可以在前人优秀图片分类模型的基础上，非常快捷有效地重新训练出新的图像分类器。  \n通常来说，迁移学习的策略有两种。\n* Finetuning（微调）  \n包括在基础数据集上使用预训练网络，并在目标数据集上训练所有层。\n* Freeze and Train（冻结和训练）  \n包括仅冻结并训练最后一层，其他层不变（权重不更新）；也可以冻结前几层，微调其他层，这是由于有些证据表明CNN的前几层有纹理滤镜和彩色斑点。\n\n## 流程\n1. predo.py，准备自己要分类的图片训练样本；\n2. retrain.py，下载inception v3/mobileNet模型及训练图片分类器；\n3. label_image.py，测试模型预测结果。\n\n### 预处理\n``` python\nimport os\nimport cv2\n\npath = \"./data\"\nfiles = os.listdir(path) \n# print(files)\nfor f in files: \n    print(f)\n    cnt = 0\n    data_list = os.listdir(path+'/'+f)\n    # print(data_list[:4])\n    for data in data_list:\n        data_file_path = path+'/'+f+'/'+data \n        # img = cv2.imread(data_file_path)\n        # img_resize = cv2.resize(img, (300, 300))\n        # cv2.imwrite(path+'/'+f+'/'+\"{:04d}.jpg\".format(cnt), img_resize)\n        newname = path+'/'+f+'/'+\"{:04d}.jpg\".format(cnt)\n        os.rename(data_file_path, newname)\n        cnt += 1\n    #     if cnt == 2:\n    #         break\n    # break\n```\n\n### retrain\n* tensorflow/retrain.py at c565660e008cf666c582668cb0d0937ca86e71fb · tensorflow/tensorflow  \nhttps://github.com/tensorflow/tensorflow/blob/c565660e008cf666c582668cb0d0937ca86e71fb/tensorflow/examples/image_retraining/retrain.py\n\n源码分析  \n* TensorFlow学习笔记：Inception_v3源码分析 - 简书  \nhttps://www.jianshu.com/p/feecdcdef8a0\n``` bash\n# By default: Inception v3\npython retrain.py\n# mobileNet\npython retrain.py --image_dir ./data --architecture mobilenet_1.0_224\n```\n可以提前下载模型文件到./tmp/imagenet文件夹下。\n* Google AI Blog: MobileNets: Open-Source Models for Efficient On-Device Vision  \nhttps://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html\n\n### 测试\n``` python\nimport tensorflow as tf\nimport os\nimport numpy as np\nimport re\nimport shutil\n\nlines = tf.gfile.GFile('./tmp/output_labels.txt').readlines()\nuid_to_human = {}\n#一行一行读取数据\nfor uid,line in enumerate(lines) :\n    #去掉换行符\n    line=line.strip('\\n')\n    uid_to_human[uid] = line\n \ndef id_to_string(node_id):\n    if node_id not in uid_to_human:\n        return ''\n    return uid_to_human[node_id]\n \n#创建一个图来存放google训练好的模型\nwith tf.gfile.FastGFile('./tmp/output_graph.pb', 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf.import_graph_def(graph_def, name='')\n \nwith tf.Session() as sess:\n    softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\n    #遍历目录\n    for root,dirs,files in os.walk('./test/'):\n        # print(\"root[-1]:\", root[-1]) # 类别\n        # print(\"files:\", files)\n        \n        for file in files:\n            print(root+\"/\"+file)\n            #载入图片\n            image_data = tf.gfile.FastGFile(root+\"/\"+file, 'rb').read()\n            predictions = sess.run(softmax_tensor,{'DecodeJpeg/contents:0': image_data})#图片格式是jpg格式\n            predictions = np.squeeze(predictions)#把结果转为1维数据\n \n            #打印图片路径及名称\n            image_path = os.path.join(root,file)\n            # print(image_path)\n            # #显示图片\n            # img=Image.open(image_path)\n            # plt.imshow(img)\n            # plt.axis('off')\n            # plt.show()\n \n            # 打印结果\n            top_k = predictions.argsort()[::-1]\n            # print(top_k)\n            for node_id in top_k:     \n                # 获取分类名称\n                human_string = id_to_string(node_id)\n                # 获取该分类的置信度\n                score = predictions[node_id]\n                print('%s (score = %.5f)' % (human_string, score))\n            \n            # 将识别错误文件保存到bad文件夹\n            if id_to_string(top_k[0]) != root[-1]:\n                old_path = root + \"/\" + file\n                name, _ = file.split('.')\n                new_path = r'./bad' + '/' + name + '_' + id_to_string(top_k[0]) + '_' + str(predictions[top_k[0]]) +'.jpg' \n                shutil.copyfile(old_path, new_path)\n\n```\n\n## 问题汇总\n### 1. 使用mobileNet时 TypeError: Cannot interpret feed_dict key as Tensor: The name 'DecodeJpeg/contents:0' refers to a Tensor which does not exist. The operation, 'DecodeJpeg/contents', does not exist in the graph.\n\n* TypeError: Cannot interpret feed_dict key as Tensor: The name 'DecodeJpeg/contents:0' refers to a Tensor which does not exist. The operation, 'DecodeJpeg/contents', does not exist in the graph. · Issue #12250 · tensorflow/tensorflow  \nhttps://github.com/tensorflow/tensorflow/issues/12250\n\n打印图的参数名称\n``` python\ntensor_name_list = [tensor.name for tensor in tf.get_default_graph().as_graph_def().node]\nprint(tensor_name_list)\n```\n修改输入为第一个tensor的名称\n``` python\n# inceptionV3\n# image_data = tf.gfile.FastGFile(image_path, 'rb').read()\n# predictions = sess.run(softmax_tensor, {'DecodeJpeg/contents:0': image_data}) #图片格式是jpg格式\n# predictions = np.squeeze(predictions) #把结果转为1维数据\n\n# mobileNet\nimage_data = tf.gfile.FastGFile(image_path, 'rb').read()\nimage_data = sess.run(tf.expand_dims(tf.image.resize_images(\n    tf.image.decode_jpeg(image_data), [128, 128], method=np.random.randint(0,3)), 0))\npredictions = sess.run(softmax_tensor, {'input:0': image_data}) #图片格式是jpg格式\npredictions = np.squeeze(predictions) #把结果转为1维数据\n```\n### 2. 分类速度太慢： 0.8s一张图，32个棋子大概需要20多秒\n对于棋子分类任务来说，输入是一张28*28的3通道图片，无论使用InceptionV3还是mobileNet_128模型都过于“厚重”，最终手写一个小的卷积网络，通过两层卷积+两层全连接来实现棋子分类。\n<div align=center>\n<img src='象棋残局机器人三：分类模型retrain\\001.png' width=600 height=300>\n</div>\n<div align=center>\n<img src='象棋残局机器人三：分类模型retrain\\002.png' width=600 height=300>\n</div>\n\n\n## 参考资料\n\n* 浅谈迁移学习图像分类 - weixin_33805743的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_33805743/article/details/87426423\n\n","slug":"象棋残局机器人三：分类模型retrain","published":1,"updated":"2020-01-05T19:13:25.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5097004m4cvjd1bj1oqo","content":"<p><strong> 象棋残局机器人三：分类模型retrain </strong> <excerpt in index | 首页摘要><br>基于InceptionV3和mobileNet模型重新训练自己的图片分类模型。<br><a id=\"more\"></a></excerpt></p>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"迁移学习\"><a href=\"#迁移学习\" class=\"headerlink\" title=\"迁移学习\"></a>迁移学习</h2><p>图片分类模型往往有数以万计的参数，而从头开始训练需要大量的带标签训练数据、强大的算力和更多时间，利用迁移学习，可以在前人优秀图片分类模型的基础上，非常快捷有效地重新训练出新的图像分类器。<br>通常来说，迁移学习的策略有两种。</p>\n<ul>\n<li>Finetuning（微调）<br>包括在基础数据集上使用预训练网络，并在目标数据集上训练所有层。</li>\n<li>Freeze and Train（冻结和训练）<br>包括仅冻结并训练最后一层，其他层不变（权重不更新）；也可以冻结前几层，微调其他层，这是由于有些证据表明CNN的前几层有纹理滤镜和彩色斑点。</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>predo.py，准备自己要分类的图片训练样本；</li>\n<li>retrain.py，下载inception v3/mobileNet模型及训练图片分类器；</li>\n<li>label_image.py，测试模型预测结果。</li>\n</ol>\n<h3 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">\"./data\"</span></span><br><span class=\"line\">files = os.listdir(path) </span><br><span class=\"line\"><span class=\"comment\"># print(files)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files: </span><br><span class=\"line\">    print(f)</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    data_list = os.listdir(path+<span class=\"string\">'/'</span>+f)</span><br><span class=\"line\">    <span class=\"comment\"># print(data_list[:4])</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> data_list:</span><br><span class=\"line\">        data_file_path = path+<span class=\"string\">'/'</span>+f+<span class=\"string\">'/'</span>+data </span><br><span class=\"line\">        <span class=\"comment\"># img = cv2.imread(data_file_path)</span></span><br><span class=\"line\">        <span class=\"comment\"># img_resize = cv2.resize(img, (300, 300))</span></span><br><span class=\"line\">        <span class=\"comment\"># cv2.imwrite(path+'/'+f+'/'+\"&#123;:04d&#125;.jpg\".format(cnt), img_resize)</span></span><br><span class=\"line\">        newname = path+<span class=\"string\">'/'</span>+f+<span class=\"string\">'/'</span>+<span class=\"string\">\"&#123;:04d&#125;.jpg\"</span>.format(cnt)</span><br><span class=\"line\">        os.rename(data_file_path, newname)</span><br><span class=\"line\">        cnt += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">#     if cnt == 2:</span></span><br><span class=\"line\">    <span class=\"comment\">#         break</span></span><br><span class=\"line\">    <span class=\"comment\"># break</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"retrain\"><a href=\"#retrain\" class=\"headerlink\" title=\"retrain\"></a>retrain</h3><ul>\n<li>tensorflow/retrain.py at c565660e008cf666c582668cb0d0937ca86e71fb · tensorflow/tensorflow<br><a href=\"https://github.com/tensorflow/tensorflow/blob/c565660e008cf666c582668cb0d0937ca86e71fb/tensorflow/examples/image_retraining/retrain.py\" target=\"_blank\" rel=\"noopener\">https://github.com/tensorflow/tensorflow/blob/c565660e008cf666c582668cb0d0937ca86e71fb/tensorflow/examples/image_retraining/retrain.py</a></li>\n</ul>\n<p>源码分析  </p>\n<ul>\n<li>TensorFlow学习笔记：Inception_v3源码分析 - 简书<br><a href=\"https://www.jianshu.com/p/feecdcdef8a0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/feecdcdef8a0</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># By default: Inception v3</span></span><br><span class=\"line\">python retrain.py</span><br><span class=\"line\"><span class=\"comment\"># mobileNet</span></span><br><span class=\"line\">python retrain.py --image_dir ./data --architecture mobilenet_1.0_224</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可以提前下载模型文件到./tmp/imagenet文件夹下。</p>\n<ul>\n<li>Google AI Blog: MobileNets: Open-Source Models for Efficient On-Device Vision<br><a href=\"https://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html\" target=\"_blank\" rel=\"noopener\">https://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html</a></li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"></span><br><span class=\"line\">lines = tf.gfile.GFile(<span class=\"string\">'./tmp/output_labels.txt'</span>).readlines()</span><br><span class=\"line\">uid_to_human = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">#一行一行读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> uid,line <span class=\"keyword\">in</span> enumerate(lines) :</span><br><span class=\"line\">    <span class=\"comment\">#去掉换行符</span></span><br><span class=\"line\">    line=line.strip(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    uid_to_human[uid] = line</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">id_to_string</span><span class=\"params\">(node_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node_id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> uid_to_human:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> uid_to_human[node_id]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#创建一个图来存放google训练好的模型</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.gfile.FastGFile(<span class=\"string\">'./tmp/output_graph.pb'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    graph_def = tf.GraphDef()</span><br><span class=\"line\">    graph_def.ParseFromString(f.read())</span><br><span class=\"line\">    tf.import_graph_def(graph_def, name=<span class=\"string\">''</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    softmax_tensor = sess.graph.get_tensor_by_name(<span class=\"string\">'final_result:0'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#遍历目录</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root,dirs,files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./test/'</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(\"root[-1]:\", root[-1]) # 类别</span></span><br><span class=\"line\">        <span class=\"comment\"># print(\"files:\", files)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            print(root+<span class=\"string\">\"/\"</span>+file)</span><br><span class=\"line\">            <span class=\"comment\">#载入图片</span></span><br><span class=\"line\">            image_data = tf.gfile.FastGFile(root+<span class=\"string\">\"/\"</span>+file, <span class=\"string\">'rb'</span>).read()</span><br><span class=\"line\">            predictions = sess.run(softmax_tensor,&#123;<span class=\"string\">'DecodeJpeg/contents:0'</span>: image_data&#125;)<span class=\"comment\">#图片格式是jpg格式</span></span><br><span class=\"line\">            predictions = np.squeeze(predictions)<span class=\"comment\">#把结果转为1维数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">#打印图片路径及名称</span></span><br><span class=\"line\">            image_path = os.path.join(root,file)</span><br><span class=\"line\">            <span class=\"comment\"># print(image_path)</span></span><br><span class=\"line\">            <span class=\"comment\"># #显示图片</span></span><br><span class=\"line\">            <span class=\"comment\"># img=Image.open(image_path)</span></span><br><span class=\"line\">            <span class=\"comment\"># plt.imshow(img)</span></span><br><span class=\"line\">            <span class=\"comment\"># plt.axis('off')</span></span><br><span class=\"line\">            <span class=\"comment\"># plt.show()</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\"># 打印结果</span></span><br><span class=\"line\">            top_k = predictions.argsort()[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">            <span class=\"comment\"># print(top_k)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> node_id <span class=\"keyword\">in</span> top_k:     </span><br><span class=\"line\">                <span class=\"comment\"># 获取分类名称</span></span><br><span class=\"line\">                human_string = id_to_string(node_id)</span><br><span class=\"line\">                <span class=\"comment\"># 获取该分类的置信度</span></span><br><span class=\"line\">                score = predictions[node_id]</span><br><span class=\"line\">                print(<span class=\"string\">'%s (score = %.5f)'</span> % (human_string, score))</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 将识别错误文件保存到bad文件夹</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> id_to_string(top_k[<span class=\"number\">0</span>]) != root[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                old_path = root + <span class=\"string\">\"/\"</span> + file</span><br><span class=\"line\">                name, _ = file.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">                new_path = <span class=\"string\">r'./bad'</span> + <span class=\"string\">'/'</span> + name + <span class=\"string\">'_'</span> + id_to_string(top_k[<span class=\"number\">0</span>]) + <span class=\"string\">'_'</span> + str(predictions[top_k[<span class=\"number\">0</span>]]) +<span class=\"string\">'.jpg'</span> </span><br><span class=\"line\">                shutil.copyfile(old_path, new_path)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><h3 id=\"1-使用mobileNet时-TypeError-Cannot-interpret-feed-dict-key-as-Tensor-The-name-‘DecodeJpeg-contents-0’-refers-to-a-Tensor-which-does-not-exist-The-operation-‘DecodeJpeg-contents’-does-not-exist-in-the-graph\"><a href=\"#1-使用mobileNet时-TypeError-Cannot-interpret-feed-dict-key-as-Tensor-The-name-‘DecodeJpeg-contents-0’-refers-to-a-Tensor-which-does-not-exist-The-operation-‘DecodeJpeg-contents’-does-not-exist-in-the-graph\" class=\"headerlink\" title=\"1. 使用mobileNet时 TypeError: Cannot interpret feed_dict key as Tensor: The name ‘DecodeJpeg/contents:0’ refers to a Tensor which does not exist. The operation, ‘DecodeJpeg/contents’, does not exist in the graph.\"></a>1. 使用mobileNet时 TypeError: Cannot interpret feed_dict key as Tensor: The name ‘DecodeJpeg/contents:0’ refers to a Tensor which does not exist. The operation, ‘DecodeJpeg/contents’, does not exist in the graph.</h3><ul>\n<li>TypeError: Cannot interpret feed_dict key as Tensor: The name ‘DecodeJpeg/contents:0’ refers to a Tensor which does not exist. The operation, ‘DecodeJpeg/contents’, does not exist in the graph. · Issue #12250 · tensorflow/tensorflow<br><a href=\"https://github.com/tensorflow/tensorflow/issues/12250\" target=\"_blank\" rel=\"noopener\">https://github.com/tensorflow/tensorflow/issues/12250</a></li>\n</ul>\n<p>打印图的参数名称<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor_name_list = [tensor.name <span class=\"keyword\">for</span> tensor <span class=\"keyword\">in</span> tf.get_default_graph().as_graph_def().node]</span><br><span class=\"line\">print(tensor_name_list)</span><br></pre></td></tr></table></figure></p>\n<p>修改输入为第一个tensor的名称<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># inceptionV3</span></span><br><span class=\"line\"><span class=\"comment\"># image_data = tf.gfile.FastGFile(image_path, 'rb').read()</span></span><br><span class=\"line\"><span class=\"comment\"># predictions = sess.run(softmax_tensor, &#123;'DecodeJpeg/contents:0': image_data&#125;) #图片格式是jpg格式</span></span><br><span class=\"line\"><span class=\"comment\"># predictions = np.squeeze(predictions) #把结果转为1维数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mobileNet</span></span><br><span class=\"line\">image_data = tf.gfile.FastGFile(image_path, <span class=\"string\">'rb'</span>).read()</span><br><span class=\"line\">image_data = sess.run(tf.expand_dims(tf.image.resize_images(</span><br><span class=\"line\">    tf.image.decode_jpeg(image_data), [<span class=\"number\">128</span>, <span class=\"number\">128</span>], method=np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">3</span>)), <span class=\"number\">0</span>))</span><br><span class=\"line\">predictions = sess.run(softmax_tensor, &#123;<span class=\"string\">'input:0'</span>: image_data&#125;) <span class=\"comment\">#图片格式是jpg格式</span></span><br><span class=\"line\">predictions = np.squeeze(predictions) <span class=\"comment\">#把结果转为1维数据</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-分类速度太慢：-0-8s一张图，32个棋子大概需要20多秒\"><a href=\"#2-分类速度太慢：-0-8s一张图，32个棋子大概需要20多秒\" class=\"headerlink\" title=\"2. 分类速度太慢： 0.8s一张图，32个棋子大概需要20多秒\"></a>2. 分类速度太慢： 0.8s一张图，32个棋子大概需要20多秒</h3><p>对于棋子分类任务来说，输入是一张28*28的3通道图片，无论使用InceptionV3还是mobileNet_128模型都过于“厚重”，最终手写一个小的卷积网络，通过两层卷积+两层全连接来实现棋子分类。</p>\n<div align=\"center\">\n<img src=\"/2019/05/29/象棋残局机器人三：分类模型retrain/001.png\" width=\"600\" height=\"300\">\n</div>\n<div align=\"center\">\n<img src=\"/2019/05/29/象棋残局机器人三：分类模型retrain/002.png\" width=\"600\" height=\"300\">\n</div>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>浅谈迁移学习图像分类 - weixin_33805743的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_33805743/article/details/87426423\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_33805743/article/details/87426423</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 象棋残局机器人三：分类模型retrain </strong> <excerpt in index | 首页摘要><br>基于InceptionV3和mobileNet模型重新训练自己的图片分类模型。<br></excerpt></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"迁移学习\"><a href=\"#迁移学习\" class=\"headerlink\" title=\"迁移学习\"></a>迁移学习</h2><p>图片分类模型往往有数以万计的参数，而从头开始训练需要大量的带标签训练数据、强大的算力和更多时间，利用迁移学习，可以在前人优秀图片分类模型的基础上，非常快捷有效地重新训练出新的图像分类器。<br>通常来说，迁移学习的策略有两种。</p>\n<ul>\n<li>Finetuning（微调）<br>包括在基础数据集上使用预训练网络，并在目标数据集上训练所有层。</li>\n<li>Freeze and Train（冻结和训练）<br>包括仅冻结并训练最后一层，其他层不变（权重不更新）；也可以冻结前几层，微调其他层，这是由于有些证据表明CNN的前几层有纹理滤镜和彩色斑点。</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>predo.py，准备自己要分类的图片训练样本；</li>\n<li>retrain.py，下载inception v3/mobileNet模型及训练图片分类器；</li>\n<li>label_image.py，测试模型预测结果。</li>\n</ol>\n<h3 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">\"./data\"</span></span><br><span class=\"line\">files = os.listdir(path) </span><br><span class=\"line\"><span class=\"comment\"># print(files)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files: </span><br><span class=\"line\">    print(f)</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span></span><br><span class=\"line\">    data_list = os.listdir(path+<span class=\"string\">'/'</span>+f)</span><br><span class=\"line\">    <span class=\"comment\"># print(data_list[:4])</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> data_list:</span><br><span class=\"line\">        data_file_path = path+<span class=\"string\">'/'</span>+f+<span class=\"string\">'/'</span>+data </span><br><span class=\"line\">        <span class=\"comment\"># img = cv2.imread(data_file_path)</span></span><br><span class=\"line\">        <span class=\"comment\"># img_resize = cv2.resize(img, (300, 300))</span></span><br><span class=\"line\">        <span class=\"comment\"># cv2.imwrite(path+'/'+f+'/'+\"&#123;:04d&#125;.jpg\".format(cnt), img_resize)</span></span><br><span class=\"line\">        newname = path+<span class=\"string\">'/'</span>+f+<span class=\"string\">'/'</span>+<span class=\"string\">\"&#123;:04d&#125;.jpg\"</span>.format(cnt)</span><br><span class=\"line\">        os.rename(data_file_path, newname)</span><br><span class=\"line\">        cnt += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">#     if cnt == 2:</span></span><br><span class=\"line\">    <span class=\"comment\">#         break</span></span><br><span class=\"line\">    <span class=\"comment\"># break</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"retrain\"><a href=\"#retrain\" class=\"headerlink\" title=\"retrain\"></a>retrain</h3><ul>\n<li>tensorflow/retrain.py at c565660e008cf666c582668cb0d0937ca86e71fb · tensorflow/tensorflow<br><a href=\"https://github.com/tensorflow/tensorflow/blob/c565660e008cf666c582668cb0d0937ca86e71fb/tensorflow/examples/image_retraining/retrain.py\" target=\"_blank\" rel=\"noopener\">https://github.com/tensorflow/tensorflow/blob/c565660e008cf666c582668cb0d0937ca86e71fb/tensorflow/examples/image_retraining/retrain.py</a></li>\n</ul>\n<p>源码分析  </p>\n<ul>\n<li>TensorFlow学习笔记：Inception_v3源码分析 - 简书<br><a href=\"https://www.jianshu.com/p/feecdcdef8a0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/feecdcdef8a0</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># By default: Inception v3</span></span><br><span class=\"line\">python retrain.py</span><br><span class=\"line\"><span class=\"comment\"># mobileNet</span></span><br><span class=\"line\">python retrain.py --image_dir ./data --architecture mobilenet_1.0_224</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可以提前下载模型文件到./tmp/imagenet文件夹下。</p>\n<ul>\n<li>Google AI Blog: MobileNets: Open-Source Models for Efficient On-Device Vision<br><a href=\"https://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html\" target=\"_blank\" rel=\"noopener\">https://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html</a></li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"></span><br><span class=\"line\">lines = tf.gfile.GFile(<span class=\"string\">'./tmp/output_labels.txt'</span>).readlines()</span><br><span class=\"line\">uid_to_human = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">#一行一行读取数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> uid,line <span class=\"keyword\">in</span> enumerate(lines) :</span><br><span class=\"line\">    <span class=\"comment\">#去掉换行符</span></span><br><span class=\"line\">    line=line.strip(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    uid_to_human[uid] = line</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">id_to_string</span><span class=\"params\">(node_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node_id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> uid_to_human:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> uid_to_human[node_id]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#创建一个图来存放google训练好的模型</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.gfile.FastGFile(<span class=\"string\">'./tmp/output_graph.pb'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    graph_def = tf.GraphDef()</span><br><span class=\"line\">    graph_def.ParseFromString(f.read())</span><br><span class=\"line\">    tf.import_graph_def(graph_def, name=<span class=\"string\">''</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    softmax_tensor = sess.graph.get_tensor_by_name(<span class=\"string\">'final_result:0'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#遍历目录</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root,dirs,files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'./test/'</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(\"root[-1]:\", root[-1]) # 类别</span></span><br><span class=\"line\">        <span class=\"comment\"># print(\"files:\", files)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            print(root+<span class=\"string\">\"/\"</span>+file)</span><br><span class=\"line\">            <span class=\"comment\">#载入图片</span></span><br><span class=\"line\">            image_data = tf.gfile.FastGFile(root+<span class=\"string\">\"/\"</span>+file, <span class=\"string\">'rb'</span>).read()</span><br><span class=\"line\">            predictions = sess.run(softmax_tensor,&#123;<span class=\"string\">'DecodeJpeg/contents:0'</span>: image_data&#125;)<span class=\"comment\">#图片格式是jpg格式</span></span><br><span class=\"line\">            predictions = np.squeeze(predictions)<span class=\"comment\">#把结果转为1维数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">#打印图片路径及名称</span></span><br><span class=\"line\">            image_path = os.path.join(root,file)</span><br><span class=\"line\">            <span class=\"comment\"># print(image_path)</span></span><br><span class=\"line\">            <span class=\"comment\"># #显示图片</span></span><br><span class=\"line\">            <span class=\"comment\"># img=Image.open(image_path)</span></span><br><span class=\"line\">            <span class=\"comment\"># plt.imshow(img)</span></span><br><span class=\"line\">            <span class=\"comment\"># plt.axis('off')</span></span><br><span class=\"line\">            <span class=\"comment\"># plt.show()</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\"># 打印结果</span></span><br><span class=\"line\">            top_k = predictions.argsort()[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">            <span class=\"comment\"># print(top_k)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> node_id <span class=\"keyword\">in</span> top_k:     </span><br><span class=\"line\">                <span class=\"comment\"># 获取分类名称</span></span><br><span class=\"line\">                human_string = id_to_string(node_id)</span><br><span class=\"line\">                <span class=\"comment\"># 获取该分类的置信度</span></span><br><span class=\"line\">                score = predictions[node_id]</span><br><span class=\"line\">                print(<span class=\"string\">'%s (score = %.5f)'</span> % (human_string, score))</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 将识别错误文件保存到bad文件夹</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> id_to_string(top_k[<span class=\"number\">0</span>]) != root[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                old_path = root + <span class=\"string\">\"/\"</span> + file</span><br><span class=\"line\">                name, _ = file.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">                new_path = <span class=\"string\">r'./bad'</span> + <span class=\"string\">'/'</span> + name + <span class=\"string\">'_'</span> + id_to_string(top_k[<span class=\"number\">0</span>]) + <span class=\"string\">'_'</span> + str(predictions[top_k[<span class=\"number\">0</span>]]) +<span class=\"string\">'.jpg'</span> </span><br><span class=\"line\">                shutil.copyfile(old_path, new_path)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><h3 id=\"1-使用mobileNet时-TypeError-Cannot-interpret-feed-dict-key-as-Tensor-The-name-‘DecodeJpeg-contents-0’-refers-to-a-Tensor-which-does-not-exist-The-operation-‘DecodeJpeg-contents’-does-not-exist-in-the-graph\"><a href=\"#1-使用mobileNet时-TypeError-Cannot-interpret-feed-dict-key-as-Tensor-The-name-‘DecodeJpeg-contents-0’-refers-to-a-Tensor-which-does-not-exist-The-operation-‘DecodeJpeg-contents’-does-not-exist-in-the-graph\" class=\"headerlink\" title=\"1. 使用mobileNet时 TypeError: Cannot interpret feed_dict key as Tensor: The name ‘DecodeJpeg/contents:0’ refers to a Tensor which does not exist. The operation, ‘DecodeJpeg/contents’, does not exist in the graph.\"></a>1. 使用mobileNet时 TypeError: Cannot interpret feed_dict key as Tensor: The name ‘DecodeJpeg/contents:0’ refers to a Tensor which does not exist. The operation, ‘DecodeJpeg/contents’, does not exist in the graph.</h3><ul>\n<li>TypeError: Cannot interpret feed_dict key as Tensor: The name ‘DecodeJpeg/contents:0’ refers to a Tensor which does not exist. The operation, ‘DecodeJpeg/contents’, does not exist in the graph. · Issue #12250 · tensorflow/tensorflow<br><a href=\"https://github.com/tensorflow/tensorflow/issues/12250\" target=\"_blank\" rel=\"noopener\">https://github.com/tensorflow/tensorflow/issues/12250</a></li>\n</ul>\n<p>打印图的参数名称<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor_name_list = [tensor.name <span class=\"keyword\">for</span> tensor <span class=\"keyword\">in</span> tf.get_default_graph().as_graph_def().node]</span><br><span class=\"line\">print(tensor_name_list)</span><br></pre></td></tr></table></figure></p>\n<p>修改输入为第一个tensor的名称<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># inceptionV3</span></span><br><span class=\"line\"><span class=\"comment\"># image_data = tf.gfile.FastGFile(image_path, 'rb').read()</span></span><br><span class=\"line\"><span class=\"comment\"># predictions = sess.run(softmax_tensor, &#123;'DecodeJpeg/contents:0': image_data&#125;) #图片格式是jpg格式</span></span><br><span class=\"line\"><span class=\"comment\"># predictions = np.squeeze(predictions) #把结果转为1维数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mobileNet</span></span><br><span class=\"line\">image_data = tf.gfile.FastGFile(image_path, <span class=\"string\">'rb'</span>).read()</span><br><span class=\"line\">image_data = sess.run(tf.expand_dims(tf.image.resize_images(</span><br><span class=\"line\">    tf.image.decode_jpeg(image_data), [<span class=\"number\">128</span>, <span class=\"number\">128</span>], method=np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">3</span>)), <span class=\"number\">0</span>))</span><br><span class=\"line\">predictions = sess.run(softmax_tensor, &#123;<span class=\"string\">'input:0'</span>: image_data&#125;) <span class=\"comment\">#图片格式是jpg格式</span></span><br><span class=\"line\">predictions = np.squeeze(predictions) <span class=\"comment\">#把结果转为1维数据</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-分类速度太慢：-0-8s一张图，32个棋子大概需要20多秒\"><a href=\"#2-分类速度太慢：-0-8s一张图，32个棋子大概需要20多秒\" class=\"headerlink\" title=\"2. 分类速度太慢： 0.8s一张图，32个棋子大概需要20多秒\"></a>2. 分类速度太慢： 0.8s一张图，32个棋子大概需要20多秒</h3><p>对于棋子分类任务来说，输入是一张28*28的3通道图片，无论使用InceptionV3还是mobileNet_128模型都过于“厚重”，最终手写一个小的卷积网络，通过两层卷积+两层全连接来实现棋子分类。</p>\n<div align=\"center\">\n<img src=\"/2019/05/29/象棋残局机器人三：分类模型retrain/001.png\" width=\"600\" height=\"300\">\n</div>\n<div align=\"center\">\n<img src=\"/2019/05/29/象棋残局机器人三：分类模型retrain/002.png\" width=\"600\" height=\"300\">\n</div>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>浅谈迁移学习图像分类 - weixin_33805743的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_33805743/article/details/87426423\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_33805743/article/details/87426423</a></li>\n</ul>\n</the>"},{"title":"象棋残局机器人五：象棋棋子分类模型","date":"2019-06-05T07:50:47.000Z","_content":"\n\n\n\n## 问题记录\n\n### 1. 采集图像分辨率低导致分类错误\n\n小伙伴的电脑摄像头采集视频流默认长宽比是16:9，显示的图片会自动在上下方补充两道黑条，并被发现无法通过cap.set(CAP_PROP_FRAME_HEIGHT，480)函数解决这个问题。  \n这个问题导致采集图像的实际分辨率为640:360，所以采集的棋子照片中棋子比较模糊，同样的问题在重新调整摄像头位置没有调整好焦距时也会发生。\n<div align=center>\n<img src='象棋残局机器人五：象棋棋子分类模型\\001.jpg' width=600 height=400>\n</div>\n默认分辨率是640*480，通过调高分辨率解决。  \n\n``` bash\nimg = img[60:400,:,:]\nimg = cv2.resize(img, (640, 480))\n```\n\n### 2. 对于一些场景可以调整摄像头参数\n特别注意有些摄像头参数设置后会保存，一旦修改后无法恢复到初始值，所以不要随意设置参数或在设置前注意记录摄像头参数的初始值。  \n获取摄像头参数\n``` bash\ncapture.get(CAP_PROP_FRAME_WIDTH)\ncapture.get(CAP_PROP_FRAME_HEIGHT)\ncapture.get(CAP_PROP_FPS)\ncapture.get(CAP_PROP_BRIGHTNESS)\ncapture.get(CAP_PROP_CONTRAST)\ncapture.get(CAP_PROP_SATURATION)\ncapture.get(CAP_PROP_HUE)\ncapture.get(CAP_PROP_EXPOSURE)\n```\n设置摄像头参数  \n``` bash\ncapture.set(CAP_PROP_FRAME_WIDTH, 1080) #宽度 \ncapture.set(CAP_PROP_FRAME_HEIGHT, 960) #高度\ncapture.set(CAP_PROP_FPS, 30)           #帧率 帧/秒\ncapture.set(CAP_PROP_BRIGHTNESS, 1)     #亮度 1\ncapture.set(CAP_PROP_CONTRAST,40)       #对比度 40\ncapture.set(CAP_PROP_SATURATION, 50)    #饱和度 50\ncapture.set(CAP_PROP_HUE, 50)           #色调 50\ncapture.set(CAP_PROP_EXPOSURE, -6)      #曝光 50\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/象棋残局机器人五：象棋棋子分类模型.md","raw":"---\ntitle: 象棋残局机器人五：象棋棋子分类模型\ndate: 2019-06-05 15:50:47\ntags:\n---\n\n\n\n\n## 问题记录\n\n### 1. 采集图像分辨率低导致分类错误\n\n小伙伴的电脑摄像头采集视频流默认长宽比是16:9，显示的图片会自动在上下方补充两道黑条，并被发现无法通过cap.set(CAP_PROP_FRAME_HEIGHT，480)函数解决这个问题。  \n这个问题导致采集图像的实际分辨率为640:360，所以采集的棋子照片中棋子比较模糊，同样的问题在重新调整摄像头位置没有调整好焦距时也会发生。\n<div align=center>\n<img src='象棋残局机器人五：象棋棋子分类模型\\001.jpg' width=600 height=400>\n</div>\n默认分辨率是640*480，通过调高分辨率解决。  \n\n``` bash\nimg = img[60:400,:,:]\nimg = cv2.resize(img, (640, 480))\n```\n\n### 2. 对于一些场景可以调整摄像头参数\n特别注意有些摄像头参数设置后会保存，一旦修改后无法恢复到初始值，所以不要随意设置参数或在设置前注意记录摄像头参数的初始值。  \n获取摄像头参数\n``` bash\ncapture.get(CAP_PROP_FRAME_WIDTH)\ncapture.get(CAP_PROP_FRAME_HEIGHT)\ncapture.get(CAP_PROP_FPS)\ncapture.get(CAP_PROP_BRIGHTNESS)\ncapture.get(CAP_PROP_CONTRAST)\ncapture.get(CAP_PROP_SATURATION)\ncapture.get(CAP_PROP_HUE)\ncapture.get(CAP_PROP_EXPOSURE)\n```\n设置摄像头参数  \n``` bash\ncapture.set(CAP_PROP_FRAME_WIDTH, 1080) #宽度 \ncapture.set(CAP_PROP_FRAME_HEIGHT, 960) #高度\ncapture.set(CAP_PROP_FPS, 30)           #帧率 帧/秒\ncapture.set(CAP_PROP_BRIGHTNESS, 1)     #亮度 1\ncapture.set(CAP_PROP_CONTRAST,40)       #对比度 40\ncapture.set(CAP_PROP_SATURATION, 50)    #饱和度 50\ncapture.set(CAP_PROP_HUE, 50)           #色调 50\ncapture.set(CAP_PROP_EXPOSURE, -6)      #曝光 50\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"象棋残局机器人五：象棋棋子分类模型","published":1,"updated":"2020-01-05T19:13:25.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an5098004o4cvjynsj21y1","content":"<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"1-采集图像分辨率低导致分类错误\"><a href=\"#1-采集图像分辨率低导致分类错误\" class=\"headerlink\" title=\"1. 采集图像分辨率低导致分类错误\"></a>1. 采集图像分辨率低导致分类错误</h3><p>小伙伴的电脑摄像头采集视频流默认长宽比是16:9，显示的图片会自动在上下方补充两道黑条，并被发现无法通过cap.set(CAP_PROP_FRAME_HEIGHT，480)函数解决这个问题。<br>这个问题导致采集图像的实际分辨率为640:360，所以采集的棋子照片中棋子比较模糊，同样的问题在重新调整摄像头位置没有调整好焦距时也会发生。</p>\n<p><div align=\"center\">\n<img src=\"/2019/06/05/象棋残局机器人五：象棋棋子分类模型/001.jpg\" width=\"600\" height=\"400\">\n</div><br>默认分辨率是640*480，通过调高分辨率解决。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = img[60:400,:,:]</span><br><span class=\"line\">img = cv2.resize(img, (640, 480))</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-对于一些场景可以调整摄像头参数\"><a href=\"#2-对于一些场景可以调整摄像头参数\" class=\"headerlink\" title=\"2. 对于一些场景可以调整摄像头参数\"></a>2. 对于一些场景可以调整摄像头参数</h3><p>特别注意有些摄像头参数设置后会保存，一旦修改后无法恢复到初始值，所以不要随意设置参数或在设置前注意记录摄像头参数的初始值。<br>获取摄像头参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">capture.get(CAP_PROP_FRAME_WIDTH)</span><br><span class=\"line\">capture.get(CAP_PROP_FRAME_HEIGHT)</span><br><span class=\"line\">capture.get(CAP_PROP_FPS)</span><br><span class=\"line\">capture.get(CAP_PROP_BRIGHTNESS)</span><br><span class=\"line\">capture.get(CAP_PROP_CONTRAST)</span><br><span class=\"line\">capture.get(CAP_PROP_SATURATION)</span><br><span class=\"line\">capture.get(CAP_PROP_HUE)</span><br><span class=\"line\">capture.get(CAP_PROP_EXPOSURE)</span><br></pre></td></tr></table></figure></p>\n<p>设置摄像头参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">capture.set(CAP_PROP_FRAME_WIDTH, 1080) <span class=\"comment\">#宽度 </span></span><br><span class=\"line\">capture.set(CAP_PROP_FRAME_HEIGHT, 960) <span class=\"comment\">#高度</span></span><br><span class=\"line\">capture.set(CAP_PROP_FPS, 30)           <span class=\"comment\">#帧率 帧/秒</span></span><br><span class=\"line\">capture.set(CAP_PROP_BRIGHTNESS, 1)     <span class=\"comment\">#亮度 1</span></span><br><span class=\"line\">capture.set(CAP_PROP_CONTRAST,40)       <span class=\"comment\">#对比度 40</span></span><br><span class=\"line\">capture.set(CAP_PROP_SATURATION, 50)    <span class=\"comment\">#饱和度 50</span></span><br><span class=\"line\">capture.set(CAP_PROP_HUE, 50)           <span class=\"comment\">#色调 50</span></span><br><span class=\"line\">capture.set(CAP_PROP_EXPOSURE, -6)      <span class=\"comment\">#曝光 50</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"1-采集图像分辨率低导致分类错误\"><a href=\"#1-采集图像分辨率低导致分类错误\" class=\"headerlink\" title=\"1. 采集图像分辨率低导致分类错误\"></a>1. 采集图像分辨率低导致分类错误</h3><p>小伙伴的电脑摄像头采集视频流默认长宽比是16:9，显示的图片会自动在上下方补充两道黑条，并被发现无法通过cap.set(CAP_PROP_FRAME_HEIGHT，480)函数解决这个问题。<br>这个问题导致采集图像的实际分辨率为640:360，所以采集的棋子照片中棋子比较模糊，同样的问题在重新调整摄像头位置没有调整好焦距时也会发生。</p>\n<p><div align=\"center\">\n<img src=\"/2019/06/05/象棋残局机器人五：象棋棋子分类模型/001.jpg\" width=\"600\" height=\"400\">\n</div><br>默认分辨率是640*480，通过调高分辨率解决。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = img[60:400,:,:]</span><br><span class=\"line\">img = cv2.resize(img, (640, 480))</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-对于一些场景可以调整摄像头参数\"><a href=\"#2-对于一些场景可以调整摄像头参数\" class=\"headerlink\" title=\"2. 对于一些场景可以调整摄像头参数\"></a>2. 对于一些场景可以调整摄像头参数</h3><p>特别注意有些摄像头参数设置后会保存，一旦修改后无法恢复到初始值，所以不要随意设置参数或在设置前注意记录摄像头参数的初始值。<br>获取摄像头参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">capture.get(CAP_PROP_FRAME_WIDTH)</span><br><span class=\"line\">capture.get(CAP_PROP_FRAME_HEIGHT)</span><br><span class=\"line\">capture.get(CAP_PROP_FPS)</span><br><span class=\"line\">capture.get(CAP_PROP_BRIGHTNESS)</span><br><span class=\"line\">capture.get(CAP_PROP_CONTRAST)</span><br><span class=\"line\">capture.get(CAP_PROP_SATURATION)</span><br><span class=\"line\">capture.get(CAP_PROP_HUE)</span><br><span class=\"line\">capture.get(CAP_PROP_EXPOSURE)</span><br></pre></td></tr></table></figure></p>\n<p>设置摄像头参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">capture.set(CAP_PROP_FRAME_WIDTH, 1080) <span class=\"comment\">#宽度 </span></span><br><span class=\"line\">capture.set(CAP_PROP_FRAME_HEIGHT, 960) <span class=\"comment\">#高度</span></span><br><span class=\"line\">capture.set(CAP_PROP_FPS, 30)           <span class=\"comment\">#帧率 帧/秒</span></span><br><span class=\"line\">capture.set(CAP_PROP_BRIGHTNESS, 1)     <span class=\"comment\">#亮度 1</span></span><br><span class=\"line\">capture.set(CAP_PROP_CONTRAST,40)       <span class=\"comment\">#对比度 40</span></span><br><span class=\"line\">capture.set(CAP_PROP_SATURATION, 50)    <span class=\"comment\">#饱和度 50</span></span><br><span class=\"line\">capture.set(CAP_PROP_HUE, 50)           <span class=\"comment\">#色调 50</span></span><br><span class=\"line\">capture.set(CAP_PROP_EXPOSURE, -6)      <span class=\"comment\">#曝光 50</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"象棋残局机器人六：robowork竞赛机械臂项目","date":"2019-06-05T07:50:48.000Z","_content":"\n竞赛组委会提供了Java工程Demo，这里记录一下部署过程。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Java 学习笔记\n\n* https://github.com/Snailclimb/JavaGuide\n* https://code.visualstudio.com/docs/languages/java\n\n\n\n## VScode 搭建 Java 开发环境\n\n* Writing Java with Visual Studio Code  \nhttps://code.visualstudio.com/docs/java/java-tutorial\n\n\n## 工程代码\n\n* https://github.com/leebinjun/cchess-brobot-2019robowork\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/象棋残局机器人六：robowork竞赛机械臂项目.md","raw":"---\ntitle: 象棋残局机器人六：robowork竞赛机械臂项目\ndate: 2019-06-05 15:50:48\ntags:\n---\n\n竞赛组委会提供了Java工程Demo，这里记录一下部署过程。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Java 学习笔记\n\n* https://github.com/Snailclimb/JavaGuide\n* https://code.visualstudio.com/docs/languages/java\n\n\n\n## VScode 搭建 Java 开发环境\n\n* Writing Java with Visual Studio Code  \nhttps://code.visualstudio.com/docs/java/java-tutorial\n\n\n## 工程代码\n\n* https://github.com/leebinjun/cchess-brobot-2019robowork\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"象棋残局机器人六：robowork竞赛机械臂项目","published":1,"updated":"2020-01-05T19:13:25.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509c004r4cvjdmivt5y3","content":"<p>竞赛组委会提供了Java工程Demo，这里记录一下部署过程。<br><a id=\"more\"></a></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"Java-学习笔记\"><a href=\"#Java-学习笔记\" class=\"headerlink\" title=\"Java 学习笔记\"></a>Java 学习笔记</h2><ul>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">https://github.com/Snailclimb/JavaGuide</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/languages/java\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs/languages/java</a></li>\n</ul>\n<h2 id=\"VScode-搭建-Java-开发环境\"><a href=\"#VScode-搭建-Java-开发环境\" class=\"headerlink\" title=\"VScode 搭建 Java 开发环境\"></a>VScode 搭建 Java 开发环境</h2><ul>\n<li>Writing Java with Visual Studio Code<br><a href=\"https://code.visualstudio.com/docs/java/java-tutorial\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs/java/java-tutorial</a></li>\n</ul>\n<h2 id=\"工程代码\"><a href=\"#工程代码\" class=\"headerlink\" title=\"工程代码\"></a>工程代码</h2><ul>\n<li><a href=\"https://github.com/leebinjun/cchess-brobot-2019robowork\" target=\"_blank\" rel=\"noopener\">https://github.com/leebinjun/cchess-brobot-2019robowork</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p>竞赛组委会提供了Java工程Demo，这里记录一下部署过程。<br></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"Java-学习笔记\"><a href=\"#Java-学习笔记\" class=\"headerlink\" title=\"Java 学习笔记\"></a>Java 学习笔记</h2><ul>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">https://github.com/Snailclimb/JavaGuide</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/languages/java\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs/languages/java</a></li>\n</ul>\n<h2 id=\"VScode-搭建-Java-开发环境\"><a href=\"#VScode-搭建-Java-开发环境\" class=\"headerlink\" title=\"VScode 搭建 Java 开发环境\"></a>VScode 搭建 Java 开发环境</h2><ul>\n<li>Writing Java with Visual Studio Code<br><a href=\"https://code.visualstudio.com/docs/java/java-tutorial\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs/java/java-tutorial</a></li>\n</ul>\n<h2 id=\"工程代码\"><a href=\"#工程代码\" class=\"headerlink\" title=\"工程代码\"></a>工程代码</h2><ul>\n<li><a href=\"https://github.com/leebinjun/cchess-brobot-2019robowork\" target=\"_blank\" rel=\"noopener\">https://github.com/leebinjun/cchess-brobot-2019robowork</a></li>\n</ul>\n</the>"},{"title":"门禁Arduino下位机通信与舵机控制","date":"2019-07-12T09:03:45.000Z","_content":"\n** {{ title }} ** <Excerpt in index | 首页摘要>\n<div align=center>\n<img src=\"门禁Arduino下位机通信与舵机控制/00.gif\">\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\nArduino代码\n\n``` arduino\n#include <Servo.h>\nServo myservo; // 定义舵机变量名\nString comdata = \"\";\n\nvoid setup() {\n    Serial.begin(9600); // 初始化串口\n    myservo.attach(9);  // 初始化舵机\n}\n\nvoid loop() {\n    delay(2000);\n    // 串口接收到数据就开门\n    while(Serial.available() > 0)\n    {\n        comdata += char(Serial.read());\n        delay(2);\n        // Serial.println(\"get comdata\");\n        myservo.write(180); // 设置舵机旋转的角度，开门\n        delay(500);\n    }  \n    myservo.write(70); // 舵机复位\n    delay(500);\n    comdata = \"\"; \n}\n```\n\n\n\n使用Visual Studio Code开发Arduino - 雪狼的博客 - CSDN博客 https://blog.csdn.net/zhaoxd200808501/article/details/78059627?locationNum=9&fps=1\n3.使用Visual Studio Code+PlatformIO IDE开发Arduino - PIBOT导航机器人 - CSDN博客 https://blog.csdn.net/baimei4833953/article/details/78771611/\n\n添加Arduino.path 不带.exe\nPIO 注册一个账号\n\n<img src=\"门禁Arduino下位机通信与舵机控制/01.png\">\n\n程序验证 上传\n<img src=\"门禁Arduino下位机通信与舵机控制/02.png\">\n\n打开串口监视器\n<img src=\"门禁Arduino下位机通信与舵机控制/03.png\">\n\n设置波特率  \nCtrl+t   \nB   \n9600\nEnter\n\nVScode-PlatformIo插件之串口终端的使用 - qq_32955031的博客 - CSDN博客 https://blog.csdn.net/qq_32955031/article/details/83660850\n\n","source":"_posts/门禁Arduino下位机通信与舵机控制.md","raw":"---\ntitle: 门禁Arduino下位机通信与舵机控制\ndate: 2019-07-12 17:03:45\ntags:\n---\n\n** {{ title }} ** <Excerpt in index | 首页摘要>\n<div align=center>\n<img src=\"门禁Arduino下位机通信与舵机控制/00.gif\">\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\nArduino代码\n\n``` arduino\n#include <Servo.h>\nServo myservo; // 定义舵机变量名\nString comdata = \"\";\n\nvoid setup() {\n    Serial.begin(9600); // 初始化串口\n    myservo.attach(9);  // 初始化舵机\n}\n\nvoid loop() {\n    delay(2000);\n    // 串口接收到数据就开门\n    while(Serial.available() > 0)\n    {\n        comdata += char(Serial.read());\n        delay(2);\n        // Serial.println(\"get comdata\");\n        myservo.write(180); // 设置舵机旋转的角度，开门\n        delay(500);\n    }  \n    myservo.write(70); // 舵机复位\n    delay(500);\n    comdata = \"\"; \n}\n```\n\n\n\n使用Visual Studio Code开发Arduino - 雪狼的博客 - CSDN博客 https://blog.csdn.net/zhaoxd200808501/article/details/78059627?locationNum=9&fps=1\n3.使用Visual Studio Code+PlatformIO IDE开发Arduino - PIBOT导航机器人 - CSDN博客 https://blog.csdn.net/baimei4833953/article/details/78771611/\n\n添加Arduino.path 不带.exe\nPIO 注册一个账号\n\n<img src=\"门禁Arduino下位机通信与舵机控制/01.png\">\n\n程序验证 上传\n<img src=\"门禁Arduino下位机通信与舵机控制/02.png\">\n\n打开串口监视器\n<img src=\"门禁Arduino下位机通信与舵机控制/03.png\">\n\n设置波特率  \nCtrl+t   \nB   \n9600\nEnter\n\nVScode-PlatformIo插件之串口终端的使用 - qq_32955031的博客 - CSDN博客 https://blog.csdn.net/qq_32955031/article/details/83660850\n\n","slug":"门禁Arduino下位机通信与舵机控制","published":1,"updated":"2020-01-05T19:13:25.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509d004t4cvjbbpie9dx","content":"<p><strong> 门禁Arduino下位机通信与舵机控制 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<div align=\"center\">\n<img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/00.gif\">\n</div>\n\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<p>Arduino代码</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Servo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">Servo</span> myservo; <span class=\"comment\">// 定义舵机变量名</span></span><br><span class=\"line\"><span class=\"keyword\">String</span> comdata = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">setup</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Serial</span>.<span class=\"built_in\">begin</span>(<span class=\"number\">9600</span>); <span class=\"comment\">// 初始化串口</span></span><br><span class=\"line\">    myservo.<span class=\"built_in\">attach</span>(<span class=\"number\">9</span>);  <span class=\"comment\">// 初始化舵机</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">loop</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">delay</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 串口接收到数据就开门</span></span><br><span class=\"line\">    <span class=\"built_in\">while</span>(<span class=\"built_in\">Serial</span>.<span class=\"built_in\">available</span>() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        comdata += <span class=\"keyword\">char</span>(<span class=\"built_in\">Serial</span>.<span class=\"built_in\">read</span>());</span><br><span class=\"line\">        <span class=\"built_in\">delay</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Serial.println(\"get comdata\");</span></span><br><span class=\"line\">        myservo.<span class=\"built_in\">write</span>(<span class=\"number\">180</span>); <span class=\"comment\">// 设置舵机旋转的角度，开门</span></span><br><span class=\"line\">        <span class=\"built_in\">delay</span>(<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    myservo.<span class=\"built_in\">write</span>(<span class=\"number\">70</span>); <span class=\"comment\">// 舵机复位</span></span><br><span class=\"line\">    <span class=\"built_in\">delay</span>(<span class=\"number\">500</span>);</span><br><span class=\"line\">    comdata = <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Visual Studio Code开发Arduino - 雪狼的博客 - CSDN博客 <a href=\"https://blog.csdn.net/zhaoxd200808501/article/details/78059627?locationNum=9&amp;fps=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhaoxd200808501/article/details/78059627?locationNum=9&amp;fps=1</a><br>3.使用Visual Studio Code+PlatformIO IDE开发Arduino - PIBOT导航机器人 - CSDN博客 <a href=\"https://blog.csdn.net/baimei4833953/article/details/78771611/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baimei4833953/article/details/78771611/</a></p>\n<p>添加Arduino.path 不带.exe<br>PIO 注册一个账号</p>\n<p><img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/01.png\"></p>\n<p>程序验证 上传<br><img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/02.png\"></p>\n<p>打开串口监视器<br><img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/03.png\"></p>\n<p>设置波特率<br>Ctrl+t<br>B<br>9600<br>Enter</p>\n<p>VScode-PlatformIo插件之串口终端的使用 - qq_32955031的博客 - CSDN博客 <a href=\"https://blog.csdn.net/qq_32955031/article/details/83660850\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_32955031/article/details/83660850</a></p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 门禁Arduino下位机通信与舵机控制 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<div align=\"center\">\n<img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/00.gif\">\n</div>","more":"<the rest of contents | 余下全文>\n\n\n<p>Arduino代码</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Servo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">Servo</span> myservo; <span class=\"comment\">// 定义舵机变量名</span></span><br><span class=\"line\"><span class=\"keyword\">String</span> comdata = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">setup</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Serial</span>.<span class=\"built_in\">begin</span>(<span class=\"number\">9600</span>); <span class=\"comment\">// 初始化串口</span></span><br><span class=\"line\">    myservo.<span class=\"built_in\">attach</span>(<span class=\"number\">9</span>);  <span class=\"comment\">// 初始化舵机</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">loop</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">delay</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 串口接收到数据就开门</span></span><br><span class=\"line\">    <span class=\"built_in\">while</span>(<span class=\"built_in\">Serial</span>.<span class=\"built_in\">available</span>() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        comdata += <span class=\"keyword\">char</span>(<span class=\"built_in\">Serial</span>.<span class=\"built_in\">read</span>());</span><br><span class=\"line\">        <span class=\"built_in\">delay</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Serial.println(\"get comdata\");</span></span><br><span class=\"line\">        myservo.<span class=\"built_in\">write</span>(<span class=\"number\">180</span>); <span class=\"comment\">// 设置舵机旋转的角度，开门</span></span><br><span class=\"line\">        <span class=\"built_in\">delay</span>(<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    myservo.<span class=\"built_in\">write</span>(<span class=\"number\">70</span>); <span class=\"comment\">// 舵机复位</span></span><br><span class=\"line\">    <span class=\"built_in\">delay</span>(<span class=\"number\">500</span>);</span><br><span class=\"line\">    comdata = <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Visual Studio Code开发Arduino - 雪狼的博客 - CSDN博客 <a href=\"https://blog.csdn.net/zhaoxd200808501/article/details/78059627?locationNum=9&amp;fps=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhaoxd200808501/article/details/78059627?locationNum=9&amp;fps=1</a><br>3.使用Visual Studio Code+PlatformIO IDE开发Arduino - PIBOT导航机器人 - CSDN博客 <a href=\"https://blog.csdn.net/baimei4833953/article/details/78771611/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baimei4833953/article/details/78771611/</a></p>\n<p>添加Arduino.path 不带.exe<br>PIO 注册一个账号</p>\n<p><img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/01.png\"></p>\n<p>程序验证 上传<br><img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/02.png\"></p>\n<p>打开串口监视器<br><img src=\"/2019/07/12/门禁Arduino下位机通信与舵机控制/03.png\"></p>\n<p>设置波特率<br>Ctrl+t<br>B<br>9600<br>Enter</p>\n<p>VScode-PlatformIo插件之串口终端的使用 - qq_32955031的博客 - CSDN博客 <a href=\"https://blog.csdn.net/qq_32955031/article/details/83660850\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_32955031/article/details/83660850</a></p>\n</the>"},{"title":"象棋残局机器人四：策略","date":"2019-06-04T06:47:59.000Z","_content":"关于下棋策略的方案，尝试使用了象棋引擎binghewusi和cyclone，最终选择开源项目cczero。\n\n\n\n## 象棋引擎\n* 中国象棋程序《象棋旋风》 </br>http://www.xqbase.com/league/xqcyclone.htm\n* 中国象棋程序《兵河五四》 </br>http://www.xqbase.com/league/bhws.htm\n\n\n### 中国象棋通用引擎协议\n不管是Windows还是UNIX平台，能被界面调用的引擎都必须是编译过的可执行文件，它跟界面之间通过“标准输入”和“标准输出”(即C/C++语言中的stdin和stdout)通道来通讯。如果引擎从Windows平台移植到UNIX平台，那么需要重新编译源代码(管道操作的程序也需要作适当修改)，或使用跨平台接口。\n\n* 中国象棋电脑应用规范(五)：中国象棋通用引擎协议</br>http://www.xqbase.com/protocol/cchess_ucci.htm\n\nFEN格式串最初的棋局表示:\n``` bash\nrnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w - - 0 1\n```\n小写表示黑方，大写表示红方  \n* 中国象棋电脑应用规范(三)：FEN文件格式 </br>http://www.xqbase.com/protocol/cchess_fen.htm  \n\n调用象棋引擎，输入FEN格式串表的当前局面，获得当前局面策略，输出的策略是一个ICCS坐标格式的四位字符串\n``` bash\nimport subprocess\nimport time\nclass Strategy:\n    exepath = r\".\\strategy.exe\"\n\n    def __init__(self):\n        self.p = subprocess.Popen(self.exepath, stdin=subprocess.PIPE,stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        ret = self.p.stdout.readline()\n\n    def get_move(self, position = \"rCbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/4C2C1/9/RNBAKABNR\", \n                 player = \"b\", times = 1000, depth = 8, show_thinking = 1):   \n        \n        com = \"position fen \" + position + \" \" + player + \" - - 0 1\\r\\n\"\n        self.p.stdin.write(com.encode('GBK'))\n        # com = 'go depth ' + str(depth) + ' time 20000\\r\\n'\n        com = 'go depth ' + str(depth) + '\\r\\n'\n        self.p.stdin.write(com.encode('GBK'))\n        self.p.stdin.flush()\n\n        while True:\n            ret = self.p.stdout.readline()\n            if show_thinking:\n                print(ret)\n            if ret.decode()[:8] == 'bestmove':\n                ans = ret.decode()[9:13]\n                break\n        # print(\"ans\", ans)\n        return ans\n\nif __name__ == '__main__':\n    ai = Strategy()\n    situation = \"rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/2C4C1/9/RNBAKABNR\"\n    move = ai.get_move(position=situation, show_thinking = True)\n    print(move)\n\n```\n棋盘标记\n<div align=center>\n<img src='象棋残局机器人四：策略\\001.png' width=300 height=300>\n</div>\n\n\n\n\n## 开源项目cczero\n\n众所周知，Deep Mind公司先后推出了Alpha Go, AlphaGo Zero 和 AlphaZero 三个棋类算法：AlphaGo吊打李世石、柯洁；AlphaGo Zero不用人类知识从零学起吊打AlphaGo；AlphaZero又分别在围棋、国际象棋和将棋领域取得了最高水平。cczero项目移植了AlphaZero算法。  \nDeepMind用了5000个TPU才能在很短的时间内训练完成，cczero也需要巨大的计算资源才能使其征服中国象棋打败当今最强象棋程序，其开放跑谱教程，鼓励参与者贡献CPU/GPU时间，使这个项目变得越来越强。    \ncczero项目为开源项目，引擎和权重永久免费，项目交流群为706396552。\n\n* 中国象棋Zero</br> https://cczero.org/\n* NeymarL/ChineseChess-AlphaZero: Implement AlphaZero/AlphaGo Zero methods on Chinese chess. </br>https://github.com/NeymarL/ChineseChess-AlphaZero\n* 下载cczero最新权重 </br>https://cczero.org/api/models\n\n\n调用cczero主要代码\n``` bash\nplay = PlayWithHuman(config)\n# play.start(human_first)\nplay.env.reset(init_state=\"r8/3k5/9/9/9/9/9/9/4A4/3AK4\")\nplay.load_model()\nplay.pipe = play.model.get_pipes()\nplay.ai = CChessPlayer(play.config, search_tree=defaultdict(VisitState), pipes=play.pipe,\n                        enable_resign=False, debugging=False)\nhuman_first = not args.ai_move_first\nplay.human_move_first = human_first\nmove = ai.get_move(position=situation, show_thinking = True)\n```\n\n\n## 参考资料\n* AlphaZero实践——中国象棋（附论文翻译） - 知乎</br> https://zhuanlan.zhihu.com/p/34433581\n\n","source":"_posts/象棋残局机器人四：策略.md","raw":"---\ntitle: 象棋残局机器人四：策略\ndate: 2019-06-04 14:47:59\ntags:\n  - AlphaZero\n---\n关于下棋策略的方案，尝试使用了象棋引擎binghewusi和cyclone，最终选择开源项目cczero。\n\n\n\n## 象棋引擎\n* 中国象棋程序《象棋旋风》 </br>http://www.xqbase.com/league/xqcyclone.htm\n* 中国象棋程序《兵河五四》 </br>http://www.xqbase.com/league/bhws.htm\n\n\n### 中国象棋通用引擎协议\n不管是Windows还是UNIX平台，能被界面调用的引擎都必须是编译过的可执行文件，它跟界面之间通过“标准输入”和“标准输出”(即C/C++语言中的stdin和stdout)通道来通讯。如果引擎从Windows平台移植到UNIX平台，那么需要重新编译源代码(管道操作的程序也需要作适当修改)，或使用跨平台接口。\n\n* 中国象棋电脑应用规范(五)：中国象棋通用引擎协议</br>http://www.xqbase.com/protocol/cchess_ucci.htm\n\nFEN格式串最初的棋局表示:\n``` bash\nrnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w - - 0 1\n```\n小写表示黑方，大写表示红方  \n* 中国象棋电脑应用规范(三)：FEN文件格式 </br>http://www.xqbase.com/protocol/cchess_fen.htm  \n\n调用象棋引擎，输入FEN格式串表的当前局面，获得当前局面策略，输出的策略是一个ICCS坐标格式的四位字符串\n``` bash\nimport subprocess\nimport time\nclass Strategy:\n    exepath = r\".\\strategy.exe\"\n\n    def __init__(self):\n        self.p = subprocess.Popen(self.exepath, stdin=subprocess.PIPE,stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        ret = self.p.stdout.readline()\n\n    def get_move(self, position = \"rCbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/4C2C1/9/RNBAKABNR\", \n                 player = \"b\", times = 1000, depth = 8, show_thinking = 1):   \n        \n        com = \"position fen \" + position + \" \" + player + \" - - 0 1\\r\\n\"\n        self.p.stdin.write(com.encode('GBK'))\n        # com = 'go depth ' + str(depth) + ' time 20000\\r\\n'\n        com = 'go depth ' + str(depth) + '\\r\\n'\n        self.p.stdin.write(com.encode('GBK'))\n        self.p.stdin.flush()\n\n        while True:\n            ret = self.p.stdout.readline()\n            if show_thinking:\n                print(ret)\n            if ret.decode()[:8] == 'bestmove':\n                ans = ret.decode()[9:13]\n                break\n        # print(\"ans\", ans)\n        return ans\n\nif __name__ == '__main__':\n    ai = Strategy()\n    situation = \"rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/2C4C1/9/RNBAKABNR\"\n    move = ai.get_move(position=situation, show_thinking = True)\n    print(move)\n\n```\n棋盘标记\n<div align=center>\n<img src='象棋残局机器人四：策略\\001.png' width=300 height=300>\n</div>\n\n\n\n\n## 开源项目cczero\n\n众所周知，Deep Mind公司先后推出了Alpha Go, AlphaGo Zero 和 AlphaZero 三个棋类算法：AlphaGo吊打李世石、柯洁；AlphaGo Zero不用人类知识从零学起吊打AlphaGo；AlphaZero又分别在围棋、国际象棋和将棋领域取得了最高水平。cczero项目移植了AlphaZero算法。  \nDeepMind用了5000个TPU才能在很短的时间内训练完成，cczero也需要巨大的计算资源才能使其征服中国象棋打败当今最强象棋程序，其开放跑谱教程，鼓励参与者贡献CPU/GPU时间，使这个项目变得越来越强。    \ncczero项目为开源项目，引擎和权重永久免费，项目交流群为706396552。\n\n* 中国象棋Zero</br> https://cczero.org/\n* NeymarL/ChineseChess-AlphaZero: Implement AlphaZero/AlphaGo Zero methods on Chinese chess. </br>https://github.com/NeymarL/ChineseChess-AlphaZero\n* 下载cczero最新权重 </br>https://cczero.org/api/models\n\n\n调用cczero主要代码\n``` bash\nplay = PlayWithHuman(config)\n# play.start(human_first)\nplay.env.reset(init_state=\"r8/3k5/9/9/9/9/9/9/4A4/3AK4\")\nplay.load_model()\nplay.pipe = play.model.get_pipes()\nplay.ai = CChessPlayer(play.config, search_tree=defaultdict(VisitState), pipes=play.pipe,\n                        enable_resign=False, debugging=False)\nhuman_first = not args.ai_move_first\nplay.human_move_first = human_first\nmove = ai.get_move(position=situation, show_thinking = True)\n```\n\n\n## 参考资料\n* AlphaZero实践——中国象棋（附论文翻译） - 知乎</br> https://zhuanlan.zhihu.com/p/34433581\n\n","slug":"象棋残局机器人四：策略","published":1,"updated":"2020-01-05T19:13:25.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509e004v4cvjy84bgwlf","content":"<p>关于下棋策略的方案，尝试使用了象棋引擎binghewusi和cyclone，最终选择开源项目cczero。</p>\n<h2 id=\"象棋引擎\"><a href=\"#象棋引擎\" class=\"headerlink\" title=\"象棋引擎\"></a>象棋引擎</h2><ul>\n<li>中国象棋程序《象棋旋风》 &lt;/br&gt;<a href=\"http://www.xqbase.com/league/xqcyclone.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/league/xqcyclone.htm</a></li>\n<li>中国象棋程序《兵河五四》 &lt;/br&gt;<a href=\"http://www.xqbase.com/league/bhws.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/league/bhws.htm</a></li>\n</ul>\n<h3 id=\"中国象棋通用引擎协议\"><a href=\"#中国象棋通用引擎协议\" class=\"headerlink\" title=\"中国象棋通用引擎协议\"></a>中国象棋通用引擎协议</h3><p>不管是Windows还是UNIX平台，能被界面调用的引擎都必须是编译过的可执行文件，它跟界面之间通过“标准输入”和“标准输出”(即C/C++语言中的stdin和stdout)通道来通讯。如果引擎从Windows平台移植到UNIX平台，那么需要重新编译源代码(管道操作的程序也需要作适当修改)，或使用跨平台接口。</p>\n<ul>\n<li>中国象棋电脑应用规范(五)：中国象棋通用引擎协议&lt;/br&gt;<a href=\"http://www.xqbase.com/protocol/cchess_ucci.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/protocol/cchess_ucci.htm</a></li>\n</ul>\n<p>FEN格式串最初的棋局表示:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w - - 0 1</span><br></pre></td></tr></table></figure></p>\n<p>小写表示黑方，大写表示红方  </p>\n<ul>\n<li>中国象棋电脑应用规范(三)：FEN文件格式 &lt;/br&gt;<a href=\"http://www.xqbase.com/protocol/cchess_fen.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/protocol/cchess_fen.htm</a>  </li>\n</ul>\n<p>调用象棋引擎，输入FEN格式串表的当前局面，获得当前局面策略，输出的策略是一个ICCS坐标格式的四位字符串<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import subprocess</span><br><span class=\"line\">import time</span><br><span class=\"line\">class Strategy:</span><br><span class=\"line\">    exepath = r<span class=\"string\">\".\\strategy.exe\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.p = subprocess.Popen(self.exepath, stdin=subprocess.PIPE,stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class=\"line\">        ret = self.p.stdout.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_move(self, position = <span class=\"string\">\"rCbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/4C2C1/9/RNBAKABNR\"</span>, </span><br><span class=\"line\">                 player = <span class=\"string\">\"b\"</span>, <span class=\"built_in\">times</span> = 1000, depth = 8, show_thinking = 1):   </span><br><span class=\"line\">        </span><br><span class=\"line\">        com = <span class=\"string\">\"position fen \"</span> + position + <span class=\"string\">\" \"</span> + player + <span class=\"string\">\" - - 0 1\\r\\n\"</span></span><br><span class=\"line\">        self.p.stdin.write(com.encode(<span class=\"string\">'GBK'</span>))</span><br><span class=\"line\">        <span class=\"comment\"># com = 'go depth ' + str(depth) + ' time 20000\\r\\n'</span></span><br><span class=\"line\">        com = <span class=\"string\">'go depth '</span> + str(depth) + <span class=\"string\">'\\r\\n'</span></span><br><span class=\"line\">        self.p.stdin.write(com.encode(<span class=\"string\">'GBK'</span>))</span><br><span class=\"line\">        self.p.stdin.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> True:</span><br><span class=\"line\">            ret = self.p.stdout.readline()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> show_thinking:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(ret)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ret.decode()[:8] == <span class=\"string\">'bestmove'</span>:</span><br><span class=\"line\">                ans = ret.decode()[9:13]</span><br><span class=\"line\">                <span class=\"built_in\">break</span></span><br><span class=\"line\">        <span class=\"comment\"># print(\"ans\", ans)</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    ai = Strategy()</span><br><span class=\"line\">    situation = <span class=\"string\">\"rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/2C4C1/9/RNBAKABNR\"</span></span><br><span class=\"line\">    move = ai.get_move(position=situation, show_thinking = True)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(move)</span><br></pre></td></tr></table></figure></p>\n<p>棋盘标记</p>\n<div align=\"center\">\n<img src=\"/2019/06/04/象棋残局机器人四：策略/001.png\" width=\"300\" height=\"300\">\n</div>\n\n\n\n\n<h2 id=\"开源项目cczero\"><a href=\"#开源项目cczero\" class=\"headerlink\" title=\"开源项目cczero\"></a>开源项目cczero</h2><p>众所周知，Deep Mind公司先后推出了Alpha Go, AlphaGo Zero 和 AlphaZero 三个棋类算法：AlphaGo吊打李世石、柯洁；AlphaGo Zero不用人类知识从零学起吊打AlphaGo；AlphaZero又分别在围棋、国际象棋和将棋领域取得了最高水平。cczero项目移植了AlphaZero算法。<br>DeepMind用了5000个TPU才能在很短的时间内训练完成，cczero也需要巨大的计算资源才能使其征服中国象棋打败当今最强象棋程序，其开放跑谱教程，鼓励参与者贡献CPU/GPU时间，使这个项目变得越来越强。<br>cczero项目为开源项目，引擎和权重永久免费，项目交流群为706396552。</p>\n<ul>\n<li>中国象棋Zero&lt;/br&gt; <a href=\"https://cczero.org/\" target=\"_blank\" rel=\"noopener\">https://cczero.org/</a></li>\n<li>NeymarL/ChineseChess-AlphaZero: Implement AlphaZero/AlphaGo Zero methods on Chinese chess. &lt;/br&gt;<a href=\"https://github.com/NeymarL/ChineseChess-AlphaZero\" target=\"_blank\" rel=\"noopener\">https://github.com/NeymarL/ChineseChess-AlphaZero</a></li>\n<li>下载cczero最新权重 &lt;/br&gt;<a href=\"https://cczero.org/api/models\" target=\"_blank\" rel=\"noopener\">https://cczero.org/api/models</a></li>\n</ul>\n<p>调用cczero主要代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">play = PlayWithHuman(config)</span><br><span class=\"line\"><span class=\"comment\"># play.start(human_first)</span></span><br><span class=\"line\">play.env.reset(init_state=<span class=\"string\">\"r8/3k5/9/9/9/9/9/9/4A4/3AK4\"</span>)</span><br><span class=\"line\">play.load_model()</span><br><span class=\"line\">play.pipe = play.model.get_pipes()</span><br><span class=\"line\">play.ai = CChessPlayer(play.config, search_tree=defaultdict(VisitState), pipes=play.pipe,</span><br><span class=\"line\">                        enable_resign=False, debugging=False)</span><br><span class=\"line\">human_first = not args.ai_move_first</span><br><span class=\"line\">play.human_move_first = human_first</span><br><span class=\"line\">move = ai.get_move(position=situation, show_thinking = True)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>AlphaZero实践——中国象棋（附论文翻译） - 知乎&lt;/br&gt; <a href=\"https://zhuanlan.zhihu.com/p/34433581\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/34433581</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>关于下棋策略的方案，尝试使用了象棋引擎binghewusi和cyclone，最终选择开源项目cczero。</p>\n<h2 id=\"象棋引擎\"><a href=\"#象棋引擎\" class=\"headerlink\" title=\"象棋引擎\"></a>象棋引擎</h2><ul>\n<li>中国象棋程序《象棋旋风》 &lt;/br&gt;<a href=\"http://www.xqbase.com/league/xqcyclone.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/league/xqcyclone.htm</a></li>\n<li>中国象棋程序《兵河五四》 &lt;/br&gt;<a href=\"http://www.xqbase.com/league/bhws.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/league/bhws.htm</a></li>\n</ul>\n<h3 id=\"中国象棋通用引擎协议\"><a href=\"#中国象棋通用引擎协议\" class=\"headerlink\" title=\"中国象棋通用引擎协议\"></a>中国象棋通用引擎协议</h3><p>不管是Windows还是UNIX平台，能被界面调用的引擎都必须是编译过的可执行文件，它跟界面之间通过“标准输入”和“标准输出”(即C/C++语言中的stdin和stdout)通道来通讯。如果引擎从Windows平台移植到UNIX平台，那么需要重新编译源代码(管道操作的程序也需要作适当修改)，或使用跨平台接口。</p>\n<ul>\n<li>中国象棋电脑应用规范(五)：中国象棋通用引擎协议&lt;/br&gt;<a href=\"http://www.xqbase.com/protocol/cchess_ucci.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/protocol/cchess_ucci.htm</a></li>\n</ul>\n<p>FEN格式串最初的棋局表示:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w - - 0 1</span><br></pre></td></tr></table></figure></p>\n<p>小写表示黑方，大写表示红方  </p>\n<ul>\n<li>中国象棋电脑应用规范(三)：FEN文件格式 &lt;/br&gt;<a href=\"http://www.xqbase.com/protocol/cchess_fen.htm\" target=\"_blank\" rel=\"noopener\">http://www.xqbase.com/protocol/cchess_fen.htm</a>  </li>\n</ul>\n<p>调用象棋引擎，输入FEN格式串表的当前局面，获得当前局面策略，输出的策略是一个ICCS坐标格式的四位字符串<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import subprocess</span><br><span class=\"line\">import time</span><br><span class=\"line\">class Strategy:</span><br><span class=\"line\">    exepath = r<span class=\"string\">\".\\strategy.exe\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.p = subprocess.Popen(self.exepath, stdin=subprocess.PIPE,stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class=\"line\">        ret = self.p.stdout.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_move(self, position = <span class=\"string\">\"rCbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/4C2C1/9/RNBAKABNR\"</span>, </span><br><span class=\"line\">                 player = <span class=\"string\">\"b\"</span>, <span class=\"built_in\">times</span> = 1000, depth = 8, show_thinking = 1):   </span><br><span class=\"line\">        </span><br><span class=\"line\">        com = <span class=\"string\">\"position fen \"</span> + position + <span class=\"string\">\" \"</span> + player + <span class=\"string\">\" - - 0 1\\r\\n\"</span></span><br><span class=\"line\">        self.p.stdin.write(com.encode(<span class=\"string\">'GBK'</span>))</span><br><span class=\"line\">        <span class=\"comment\"># com = 'go depth ' + str(depth) + ' time 20000\\r\\n'</span></span><br><span class=\"line\">        com = <span class=\"string\">'go depth '</span> + str(depth) + <span class=\"string\">'\\r\\n'</span></span><br><span class=\"line\">        self.p.stdin.write(com.encode(<span class=\"string\">'GBK'</span>))</span><br><span class=\"line\">        self.p.stdin.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> True:</span><br><span class=\"line\">            ret = self.p.stdout.readline()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> show_thinking:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(ret)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ret.decode()[:8] == <span class=\"string\">'bestmove'</span>:</span><br><span class=\"line\">                ans = ret.decode()[9:13]</span><br><span class=\"line\">                <span class=\"built_in\">break</span></span><br><span class=\"line\">        <span class=\"comment\"># print(\"ans\", ans)</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    ai = Strategy()</span><br><span class=\"line\">    situation = <span class=\"string\">\"rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/2C4C1/9/RNBAKABNR\"</span></span><br><span class=\"line\">    move = ai.get_move(position=situation, show_thinking = True)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(move)</span><br></pre></td></tr></table></figure></p>\n<p>棋盘标记</p>\n<div align=\"center\">\n<img src=\"/2019/06/04/象棋残局机器人四：策略/001.png\" width=\"300\" height=\"300\">\n</div>\n\n\n\n\n<h2 id=\"开源项目cczero\"><a href=\"#开源项目cczero\" class=\"headerlink\" title=\"开源项目cczero\"></a>开源项目cczero</h2><p>众所周知，Deep Mind公司先后推出了Alpha Go, AlphaGo Zero 和 AlphaZero 三个棋类算法：AlphaGo吊打李世石、柯洁；AlphaGo Zero不用人类知识从零学起吊打AlphaGo；AlphaZero又分别在围棋、国际象棋和将棋领域取得了最高水平。cczero项目移植了AlphaZero算法。<br>DeepMind用了5000个TPU才能在很短的时间内训练完成，cczero也需要巨大的计算资源才能使其征服中国象棋打败当今最强象棋程序，其开放跑谱教程，鼓励参与者贡献CPU/GPU时间，使这个项目变得越来越强。<br>cczero项目为开源项目，引擎和权重永久免费，项目交流群为706396552。</p>\n<ul>\n<li>中国象棋Zero&lt;/br&gt; <a href=\"https://cczero.org/\" target=\"_blank\" rel=\"noopener\">https://cczero.org/</a></li>\n<li>NeymarL/ChineseChess-AlphaZero: Implement AlphaZero/AlphaGo Zero methods on Chinese chess. &lt;/br&gt;<a href=\"https://github.com/NeymarL/ChineseChess-AlphaZero\" target=\"_blank\" rel=\"noopener\">https://github.com/NeymarL/ChineseChess-AlphaZero</a></li>\n<li>下载cczero最新权重 &lt;/br&gt;<a href=\"https://cczero.org/api/models\" target=\"_blank\" rel=\"noopener\">https://cczero.org/api/models</a></li>\n</ul>\n<p>调用cczero主要代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">play = PlayWithHuman(config)</span><br><span class=\"line\"><span class=\"comment\"># play.start(human_first)</span></span><br><span class=\"line\">play.env.reset(init_state=<span class=\"string\">\"r8/3k5/9/9/9/9/9/9/4A4/3AK4\"</span>)</span><br><span class=\"line\">play.load_model()</span><br><span class=\"line\">play.pipe = play.model.get_pipes()</span><br><span class=\"line\">play.ai = CChessPlayer(play.config, search_tree=defaultdict(VisitState), pipes=play.pipe,</span><br><span class=\"line\">                        enable_resign=False, debugging=False)</span><br><span class=\"line\">human_first = not args.ai_move_first</span><br><span class=\"line\">play.human_move_first = human_first</span><br><span class=\"line\">move = ai.get_move(position=situation, show_thinking = True)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>AlphaZero实践——中国象棋（附论文翻译） - 知乎&lt;/br&gt; <a href=\"https://zhuanlan.zhihu.com/p/34433581\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/34433581</a></li>\n</ul>\n"},{"title":"门禁Django学习笔记","date":"2019-12-03T07:57:16.000Z","_content":"\n参考 Eric Matthes《Python编程：从入门到实践》 第18章。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 建立项目\n\n### 制定规范\n\n### 建立环境\n* 虚拟环境\n``` shell\nconda create -n my_django_env python=3.7\n```\n* 安装Django\n``` shell\npip install Django\n```\n### 创建项目\n``` shell\n(my_django_env)learn_log$ django-admin startproject learning_log .\n```\n### 创建数据库\n``` shell\npython manage.py migrate\n```\n\n### 查看项目\n``` shell\npython manage.py runserver\n```\n\n## 创建应用程序\n``` shell\npython manage.py startapp learning_logs\n```\n\n* 定义模型\n在 models.py 文件中定义模型\n``` python\n# Create your models here.\nclass Topic(models.Model):\n    \"\"\"用户学习的主题\"\"\"\n    text = models.CharField(max_length=200)\n    date_added = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"返回模型的字符串表示\"\"\"\n        return self.text\n```\n\n* 激活模型\n\n打开settings.py, 将应用程序添加到 INSTALLED_APPS 元组中  \n\n对 应用程序 调用 makemigrations, 让Django确定如何修改数据库\n``` shell\npython manage.py makemigrations learning_logs\n```\n\n让 Django 迁移项目\n``` shell\npython manage.py migrate\n```\n\n* 管理网站\n\n创建超级用户\n``` shell\npython manage.py createsuperuser\n```\n\n向管理网站注册模型\n\n在admin.py文件中，手工注册模型。\n``` python\n# Register your models here.\nfrom learning_logs.models import Topic\n\nadmin.site.register(Topic)\n```\n\n\n* Django Shell\n\n## 创建网页\n\n定义URL、编写视图和编写模板\n\n### 定义URL  \n\n### 编写视图  \n\n### 编写模板  \n\n## 实例：实时监控\n\n### 创建应用程序\n``` shell\npython manage.py startapp camera_app\n```\n\n### 定义url\n\n在 learning_log/urls.py 文件中\n``` python\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    \n    path('', include('learning_logs.urls', namespace='learning_logs')),\n    path('', include('camera_app.urls')),\n]\n```\n\n在 camera_app/urls.py 文件中\n``` python\n# from django.urls import path\nfrom django.urls import include, path\nfrom . import views\n\nurlpatterns = [\n    # 相机\n    path('camtest/', views.camtest, name='camtest'),\n    path('camtest/video_feed/', views.video_feed),\n]\n```\n\n### 编写视图  \n\n在 camera_app/views.py 文件中\n``` python\nfrom django.shortcuts import render\nfrom django.http import StreamingHttpResponse\n\nimport cv2\n# 调用camera包\nfrom .camera import Camera\n\n# Create your views here.\n\ndef gen(camera):\n    \"\"\"Video streaming generator function.\"\"\"\n    # cap = cv2.VideoCapture(0)\n    # ret, img = cap.read()\n    \n    while True:\n        # ret, img = cap.read()\n        frame = camera.get_frame()\n\n        # 图像处理\n        # ret, img = detector.detect(frame, is_save=True)\n        img = frame\n\n        # cv2.imshow(\"\", img)\n        # cv2.waitKey(10)\n        # # encode as a jpeg image and return it\n        img = cv2.imencode('.jpg', img)[1].tobytes()\n\n        yield (b'--frame\\r\\n'\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + img + b'\\r\\n')\n\ndef video_feed(request):\n    \"\"\"Video streaming route. Put this in the src attribute of an img tag.\"\"\"\n    # cap = Camera()\n    # cap.set_video_source(0)\n    return StreamingHttpResponse(gen(Camera()), content_type='multipart/x-mixed-replace; boundary=frame')\n\ndef camtest(request):\n    return render(request, 'camera_app/camtest.html')\n\n```\n\n### 编写模板  \n\n\n在 camera_app/templates/camera_app/camtest.html 文件中\n``` html\n{% extends \"camera_app/base.html\"%}\n\n{% block content %}\n<p>camera_app</p>\n<img src=\"http://127.0.0.1:8000/camtest/video_feed\">\n{% endblock content %}\n```\n\n\n\n\n\n\n\n\n","source":"_posts/门禁Django学习笔记.md","raw":"---\ntitle: 门禁Django学习笔记\ndate: 2019-12-03 15:57:16\ntags:\n---\n\n参考 Eric Matthes《Python编程：从入门到实践》 第18章。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 建立项目\n\n### 制定规范\n\n### 建立环境\n* 虚拟环境\n``` shell\nconda create -n my_django_env python=3.7\n```\n* 安装Django\n``` shell\npip install Django\n```\n### 创建项目\n``` shell\n(my_django_env)learn_log$ django-admin startproject learning_log .\n```\n### 创建数据库\n``` shell\npython manage.py migrate\n```\n\n### 查看项目\n``` shell\npython manage.py runserver\n```\n\n## 创建应用程序\n``` shell\npython manage.py startapp learning_logs\n```\n\n* 定义模型\n在 models.py 文件中定义模型\n``` python\n# Create your models here.\nclass Topic(models.Model):\n    \"\"\"用户学习的主题\"\"\"\n    text = models.CharField(max_length=200)\n    date_added = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"返回模型的字符串表示\"\"\"\n        return self.text\n```\n\n* 激活模型\n\n打开settings.py, 将应用程序添加到 INSTALLED_APPS 元组中  \n\n对 应用程序 调用 makemigrations, 让Django确定如何修改数据库\n``` shell\npython manage.py makemigrations learning_logs\n```\n\n让 Django 迁移项目\n``` shell\npython manage.py migrate\n```\n\n* 管理网站\n\n创建超级用户\n``` shell\npython manage.py createsuperuser\n```\n\n向管理网站注册模型\n\n在admin.py文件中，手工注册模型。\n``` python\n# Register your models here.\nfrom learning_logs.models import Topic\n\nadmin.site.register(Topic)\n```\n\n\n* Django Shell\n\n## 创建网页\n\n定义URL、编写视图和编写模板\n\n### 定义URL  \n\n### 编写视图  \n\n### 编写模板  \n\n## 实例：实时监控\n\n### 创建应用程序\n``` shell\npython manage.py startapp camera_app\n```\n\n### 定义url\n\n在 learning_log/urls.py 文件中\n``` python\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    \n    path('', include('learning_logs.urls', namespace='learning_logs')),\n    path('', include('camera_app.urls')),\n]\n```\n\n在 camera_app/urls.py 文件中\n``` python\n# from django.urls import path\nfrom django.urls import include, path\nfrom . import views\n\nurlpatterns = [\n    # 相机\n    path('camtest/', views.camtest, name='camtest'),\n    path('camtest/video_feed/', views.video_feed),\n]\n```\n\n### 编写视图  \n\n在 camera_app/views.py 文件中\n``` python\nfrom django.shortcuts import render\nfrom django.http import StreamingHttpResponse\n\nimport cv2\n# 调用camera包\nfrom .camera import Camera\n\n# Create your views here.\n\ndef gen(camera):\n    \"\"\"Video streaming generator function.\"\"\"\n    # cap = cv2.VideoCapture(0)\n    # ret, img = cap.read()\n    \n    while True:\n        # ret, img = cap.read()\n        frame = camera.get_frame()\n\n        # 图像处理\n        # ret, img = detector.detect(frame, is_save=True)\n        img = frame\n\n        # cv2.imshow(\"\", img)\n        # cv2.waitKey(10)\n        # # encode as a jpeg image and return it\n        img = cv2.imencode('.jpg', img)[1].tobytes()\n\n        yield (b'--frame\\r\\n'\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + img + b'\\r\\n')\n\ndef video_feed(request):\n    \"\"\"Video streaming route. Put this in the src attribute of an img tag.\"\"\"\n    # cap = Camera()\n    # cap.set_video_source(0)\n    return StreamingHttpResponse(gen(Camera()), content_type='multipart/x-mixed-replace; boundary=frame')\n\ndef camtest(request):\n    return render(request, 'camera_app/camtest.html')\n\n```\n\n### 编写模板  \n\n\n在 camera_app/templates/camera_app/camtest.html 文件中\n``` html\n{% extends \"camera_app/base.html\"%}\n\n{% block content %}\n<p>camera_app</p>\n<img src=\"http://127.0.0.1:8000/camtest/video_feed\">\n{% endblock content %}\n```\n\n\n\n\n\n\n\n\n","slug":"门禁Django学习笔记","published":1,"updated":"2020-01-05T19:13:25.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509g004x4cvjtqs0p2ae","content":"<p>参考 Eric Matthes《Python编程：从入门到实践》 第18章。</p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"建立项目\"><a href=\"#建立项目\" class=\"headerlink\" title=\"建立项目\"></a>建立项目</h2><h3 id=\"制定规范\"><a href=\"#制定规范\" class=\"headerlink\" title=\"制定规范\"></a>制定规范</h3><h3 id=\"建立环境\"><a href=\"#建立环境\" class=\"headerlink\" title=\"建立环境\"></a>建立环境</h3><ul>\n<li><p>虚拟环境</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n my_django_env python=3.7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Django</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Django</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">(my_django_env)learn_log$</span><span class=\"bash\"> django-admin startproject learning_log .</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看项目\"><a href=\"#查看项目\" class=\"headerlink\" title=\"查看项目\"></a>查看项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建应用程序\"><a href=\"#创建应用程序\" class=\"headerlink\" title=\"创建应用程序\"></a>创建应用程序</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp learning_logs</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>定义模型<br>在 models.py 文件中定义模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Topic</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"用户学习的主题\"\"\"</span></span><br><span class=\"line\">    text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    date_added = models.DateTimeField(auto_now_add=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回模型的字符串表示\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.text</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活模型</p>\n</li>\n</ul>\n<p>打开settings.py, 将应用程序添加到 INSTALLED_APPS 元组中  </p>\n<p>对 应用程序 调用 makemigrations, 让Django确定如何修改数据库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py makemigrations learning_logs</span><br></pre></td></tr></table></figure></p>\n<p>让 Django 迁移项目<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>管理网站</li>\n</ul>\n<p>创建超级用户<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p>\n<p>向管理网站注册模型</p>\n<p>在admin.py文件中，手工注册模型。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> learning_logs.models <span class=\"keyword\">import</span> Topic</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Topic)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Django Shell</li>\n</ul>\n<h2 id=\"创建网页\"><a href=\"#创建网页\" class=\"headerlink\" title=\"创建网页\"></a>创建网页</h2><p>定义URL、编写视图和编写模板</p>\n<h3 id=\"定义URL\"><a href=\"#定义URL\" class=\"headerlink\" title=\"定义URL\"></a>定义URL</h3><h3 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a>编写视图</h3><h3 id=\"编写模板\"><a href=\"#编写模板\" class=\"headerlink\" title=\"编写模板\"></a>编写模板</h3><h2 id=\"实例：实时监控\"><a href=\"#实例：实时监控\" class=\"headerlink\" title=\"实例：实时监控\"></a>实例：实时监控</h2><h3 id=\"创建应用程序-1\"><a href=\"#创建应用程序-1\" class=\"headerlink\" title=\"创建应用程序\"></a>创建应用程序</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp camera_app</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义url\"><a href=\"#定义url\" class=\"headerlink\" title=\"定义url\"></a>定义url</h3><p>在 learning_log/urls.py 文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    </span><br><span class=\"line\">    path(<span class=\"string\">''</span>, include(<span class=\"string\">'learning_logs.urls'</span>, namespace=<span class=\"string\">'learning_logs'</span>)),</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, include(<span class=\"string\">'camera_app.urls'</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>在 camera_app/urls.py 文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># from django.urls import path</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> include, path</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\"># 相机</span></span><br><span class=\"line\">    path(<span class=\"string\">'camtest/'</span>, views.camtest, name=<span class=\"string\">'camtest'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'camtest/video_feed/'</span>, views.video_feed),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写视图-1\"><a href=\"#编写视图-1\" class=\"headerlink\" title=\"编写视图\"></a>编写视图</h3><p>在 camera_app/views.py 文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> StreamingHttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"comment\"># 调用camera包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> .camera <span class=\"keyword\">import</span> Camera</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen</span><span class=\"params\">(camera)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Video streaming generator function.\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># cap = cv2.VideoCapture(0)</span></span><br><span class=\"line\">    <span class=\"comment\"># ret, img = cap.read()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># ret, img = cap.read()</span></span><br><span class=\"line\">        frame = camera.get_frame()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 图像处理</span></span><br><span class=\"line\">        <span class=\"comment\"># ret, img = detector.detect(frame, is_save=True)</span></span><br><span class=\"line\">        img = frame</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># cv2.imshow(\"\", img)</span></span><br><span class=\"line\">        <span class=\"comment\"># cv2.waitKey(10)</span></span><br><span class=\"line\">        <span class=\"comment\"># # encode as a jpeg image and return it</span></span><br><span class=\"line\">        img = cv2.imencode(<span class=\"string\">'.jpg'</span>, img)[<span class=\"number\">1</span>].tobytes()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> (<span class=\"string\">b'--frame\\r\\n'</span></span><br><span class=\"line\">               <span class=\"string\">b'Content-Type: image/jpeg\\r\\n\\r\\n'</span> + img + <span class=\"string\">b'\\r\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">video_feed</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Video streaming route. Put this in the src attribute of an img tag.\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># cap = Camera()</span></span><br><span class=\"line\">    <span class=\"comment\"># cap.set_video_source(0)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> StreamingHttpResponse(gen(Camera()), content_type=<span class=\"string\">'multipart/x-mixed-replace; boundary=frame'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">camtest</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'camera_app/camtest.html'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写模板-1\"><a href=\"#编写模板-1\" class=\"headerlink\" title=\"编写模板\"></a>编写模板</h3><p>在 camera_app/templates/camera_app/camtest.html 文件中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends \"camera_app/base.html\"%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>camera_app<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://127.0.0.1:8000/camtest/video_feed\"</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure></p>\n</the>","site":{"data":{}},"excerpt":"<p>参考 Eric Matthes《Python编程：从入门到实践》 第18章。</p>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"建立项目\"><a href=\"#建立项目\" class=\"headerlink\" title=\"建立项目\"></a>建立项目</h2><h3 id=\"制定规范\"><a href=\"#制定规范\" class=\"headerlink\" title=\"制定规范\"></a>制定规范</h3><h3 id=\"建立环境\"><a href=\"#建立环境\" class=\"headerlink\" title=\"建立环境\"></a>建立环境</h3><ul>\n<li><p>虚拟环境</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n my_django_env python=3.7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Django</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Django</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">(my_django_env)learn_log$</span><span class=\"bash\"> django-admin startproject learning_log .</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看项目\"><a href=\"#查看项目\" class=\"headerlink\" title=\"查看项目\"></a>查看项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建应用程序\"><a href=\"#创建应用程序\" class=\"headerlink\" title=\"创建应用程序\"></a>创建应用程序</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp learning_logs</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>定义模型<br>在 models.py 文件中定义模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Topic</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"用户学习的主题\"\"\"</span></span><br><span class=\"line\">    text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    date_added = models.DateTimeField(auto_now_add=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回模型的字符串表示\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.text</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活模型</p>\n</li>\n</ul>\n<p>打开settings.py, 将应用程序添加到 INSTALLED_APPS 元组中  </p>\n<p>对 应用程序 调用 makemigrations, 让Django确定如何修改数据库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py makemigrations learning_logs</span><br></pre></td></tr></table></figure></p>\n<p>让 Django 迁移项目<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>管理网站</li>\n</ul>\n<p>创建超级用户<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p>\n<p>向管理网站注册模型</p>\n<p>在admin.py文件中，手工注册模型。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> learning_logs.models <span class=\"keyword\">import</span> Topic</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Topic)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Django Shell</li>\n</ul>\n<h2 id=\"创建网页\"><a href=\"#创建网页\" class=\"headerlink\" title=\"创建网页\"></a>创建网页</h2><p>定义URL、编写视图和编写模板</p>\n<h3 id=\"定义URL\"><a href=\"#定义URL\" class=\"headerlink\" title=\"定义URL\"></a>定义URL</h3><h3 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a>编写视图</h3><h3 id=\"编写模板\"><a href=\"#编写模板\" class=\"headerlink\" title=\"编写模板\"></a>编写模板</h3><h2 id=\"实例：实时监控\"><a href=\"#实例：实时监控\" class=\"headerlink\" title=\"实例：实时监控\"></a>实例：实时监控</h2><h3 id=\"创建应用程序-1\"><a href=\"#创建应用程序-1\" class=\"headerlink\" title=\"创建应用程序\"></a>创建应用程序</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp camera_app</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义url\"><a href=\"#定义url\" class=\"headerlink\" title=\"定义url\"></a>定义url</h3><p>在 learning_log/urls.py 文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    </span><br><span class=\"line\">    path(<span class=\"string\">''</span>, include(<span class=\"string\">'learning_logs.urls'</span>, namespace=<span class=\"string\">'learning_logs'</span>)),</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, include(<span class=\"string\">'camera_app.urls'</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>在 camera_app/urls.py 文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># from django.urls import path</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> include, path</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\"># 相机</span></span><br><span class=\"line\">    path(<span class=\"string\">'camtest/'</span>, views.camtest, name=<span class=\"string\">'camtest'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'camtest/video_feed/'</span>, views.video_feed),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写视图-1\"><a href=\"#编写视图-1\" class=\"headerlink\" title=\"编写视图\"></a>编写视图</h3><p>在 camera_app/views.py 文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> StreamingHttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"comment\"># 调用camera包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> .camera <span class=\"keyword\">import</span> Camera</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen</span><span class=\"params\">(camera)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Video streaming generator function.\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># cap = cv2.VideoCapture(0)</span></span><br><span class=\"line\">    <span class=\"comment\"># ret, img = cap.read()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># ret, img = cap.read()</span></span><br><span class=\"line\">        frame = camera.get_frame()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 图像处理</span></span><br><span class=\"line\">        <span class=\"comment\"># ret, img = detector.detect(frame, is_save=True)</span></span><br><span class=\"line\">        img = frame</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># cv2.imshow(\"\", img)</span></span><br><span class=\"line\">        <span class=\"comment\"># cv2.waitKey(10)</span></span><br><span class=\"line\">        <span class=\"comment\"># # encode as a jpeg image and return it</span></span><br><span class=\"line\">        img = cv2.imencode(<span class=\"string\">'.jpg'</span>, img)[<span class=\"number\">1</span>].tobytes()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> (<span class=\"string\">b'--frame\\r\\n'</span></span><br><span class=\"line\">               <span class=\"string\">b'Content-Type: image/jpeg\\r\\n\\r\\n'</span> + img + <span class=\"string\">b'\\r\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">video_feed</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Video streaming route. Put this in the src attribute of an img tag.\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># cap = Camera()</span></span><br><span class=\"line\">    <span class=\"comment\"># cap.set_video_source(0)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> StreamingHttpResponse(gen(Camera()), content_type=<span class=\"string\">'multipart/x-mixed-replace; boundary=frame'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">camtest</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'camera_app/camtest.html'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写模板-1\"><a href=\"#编写模板-1\" class=\"headerlink\" title=\"编写模板\"></a>编写模板</h3><p>在 camera_app/templates/camera_app/camtest.html 文件中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends \"camera_app/base.html\"%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>camera_app<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://127.0.0.1:8000/camtest/video_feed\"</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure></p>\n</the>"},{"title":"门禁python多进程练习","date":"2019-05-16T12:33:16.000Z","_content":"\n\n``` bash\nimport multiprocessing as mp\n\ndef task(a):\n    pass\n\nif __name__ == \"__main__\":\n    p1 = mp.Process(target=task, args=(1,))\n    p1.start()\n    p1.join()\n```\n\n\n\n\n\n\n\n``` bash\nimport tkinter as tk\n\nroot = tk.Tk()\n\ndef func_loop():\n    func()\n    root.after(1, func_loop)\n\nroot.loopmain()\n```\n\n\n* [译]深度神经网络的多任务学习概览(An Overview of Multi-task Learning in Deep Neural Networks) - Shuzi_rank - 博客园 </br>https://www.cnblogs.com/shuzirank/p/7141017.html","source":"_posts/门禁python多进程练习.md","raw":"---\ntitle: 门禁python多进程练习\ndate: 2019-05-16 20:33:16\ntags:\n  - python\n---\n\n\n``` bash\nimport multiprocessing as mp\n\ndef task(a):\n    pass\n\nif __name__ == \"__main__\":\n    p1 = mp.Process(target=task, args=(1,))\n    p1.start()\n    p1.join()\n```\n\n\n\n\n\n\n\n``` bash\nimport tkinter as tk\n\nroot = tk.Tk()\n\ndef func_loop():\n    func()\n    root.after(1, func_loop)\n\nroot.loopmain()\n```\n\n\n* [译]深度神经网络的多任务学习概览(An Overview of Multi-task Learning in Deep Neural Networks) - Shuzi_rank - 博客园 </br>https://www.cnblogs.com/shuzirank/p/7141017.html","slug":"门禁python多进程练习","published":1,"updated":"2020-01-05T19:13:25.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509h00504cvj8lra75ew","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">def task(a):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    p1 = mp.Process(target=task, args=(1,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p1.join()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tkinter as tk</span><br><span class=\"line\"></span><br><span class=\"line\">root = tk.Tk()</span><br><span class=\"line\"></span><br><span class=\"line\">def func_loop():</span><br><span class=\"line\">    func()</span><br><span class=\"line\">    root.after(1, func_loop)</span><br><span class=\"line\"></span><br><span class=\"line\">root.loopmain()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[译]深度神经网络的多任务学习概览(An Overview of Multi-task Learning in Deep Neural Networks) - Shuzi_rank - 博客园 &lt;/br&gt;<a href=\"https://www.cnblogs.com/shuzirank/p/7141017.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shuzirank/p/7141017.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">def task(a):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    p1 = mp.Process(target=task, args=(1,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p1.join()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tkinter as tk</span><br><span class=\"line\"></span><br><span class=\"line\">root = tk.Tk()</span><br><span class=\"line\"></span><br><span class=\"line\">def func_loop():</span><br><span class=\"line\">    func()</span><br><span class=\"line\">    root.after(1, func_loop)</span><br><span class=\"line\"></span><br><span class=\"line\">root.loopmain()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[译]深度神经网络的多任务学习概览(An Overview of Multi-task Learning in Deep Neural Networks) - Shuzi_rank - 博客园 &lt;/br&gt;<a href=\"https://www.cnblogs.com/shuzirank/p/7141017.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shuzirank/p/7141017.html</a></li>\n</ul>\n"},{"title":"门禁ubuntu配置\\$hadow\\$ocks,又可以刷脸开门了","date":"2019-04-27T15:30:03.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n* Shadowsocks - A secure socks5 proxy  \nhttp://shadowsocks.org/en/index.html\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n### 安装\n``` bash\n$ sudo apt-get install python-pip\n$ sudo pip install shadowsocks\n$ sudo apt-get install software-properties-common -y\n$ sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y\n$ sudo apt-get update\n$ sudo apt install shadowsocks-libev\n```\n### 配置\n``` bash\n$ sudo vim /etc/shadowsocks-libev.json\n    \n    {\n        \"server\":\"xx.xx.xx.xx\",\n        \"server_port\":2080,\n        \"local_address\": \"127.0.0.1\",\n        \"local_port\":1080,\n        \"password\":\"xxxxxxxx\",\n        \"timeout\":300,\n        \"method\":\"chacha20-ietf-poly1305\",\n        \"workers\": 2,\n        \"fast_open\": false\n    }\n```\n### 运行\n``` bash\n$ ss-local -c /etc/shadowsocks-libev.json\n```\n### 设置全局代理\n系统设置 -> 网络 -> 网络代理，方法选择手动，然后设置Socks主机127.0.0.1， 后面端口这是1080，然后点击应用到整个系统，输入密码即可。\n### 设置浏览器代理\n直接搜索proxy，找到设置后根据实际情况设置，不要使用系统代理设置\n### 设置开机自启\n``` bash\n$ cd /etc/init.d\n```\n创建开机启动服务\n``` bash\n$ sudo vim shadowsocks\n\n    #!/bin/bash\n    /usr/bin/ss-local -c /etc/shadowsocks-libev.json\n    exit  0\n```\n报“missing LSB tags and overrides”错，在#!/bin/bash下面添加\n``` bash\n    ### BEGIN INIT INFO\n    # Provides: OSSEC HIDS\n    # Required-Start: $network $remote_fs $syslog $time\n    # Required-Stop:\n    # Default-Start: 2 3 4 5\n    # Default-Stop: 0 1 6\n    # Short-Description: OSSEC HIDS\n    ### END INIT INFO\n```\n赋予可执行权限\n``` bash\n$ sudo chmod +x shadowsocks\n```\n设置开机自启动\n``` bash\n$ sudo update-rc.d shadowsocks defaults 100\n```\n\n\n\n\n","source":"_posts/门禁ubuntu配置-hadow-ocks-又可以刷脸开门了.md","raw":"---\ntitle: '门禁ubuntu配置\\$hadow\\$ocks,又可以刷脸开门了'\ndate: 2019-04-27 23:30:03\ntags:\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n* Shadowsocks - A secure socks5 proxy  \nhttp://shadowsocks.org/en/index.html\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n### 安装\n``` bash\n$ sudo apt-get install python-pip\n$ sudo pip install shadowsocks\n$ sudo apt-get install software-properties-common -y\n$ sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y\n$ sudo apt-get update\n$ sudo apt install shadowsocks-libev\n```\n### 配置\n``` bash\n$ sudo vim /etc/shadowsocks-libev.json\n    \n    {\n        \"server\":\"xx.xx.xx.xx\",\n        \"server_port\":2080,\n        \"local_address\": \"127.0.0.1\",\n        \"local_port\":1080,\n        \"password\":\"xxxxxxxx\",\n        \"timeout\":300,\n        \"method\":\"chacha20-ietf-poly1305\",\n        \"workers\": 2,\n        \"fast_open\": false\n    }\n```\n### 运行\n``` bash\n$ ss-local -c /etc/shadowsocks-libev.json\n```\n### 设置全局代理\n系统设置 -> 网络 -> 网络代理，方法选择手动，然后设置Socks主机127.0.0.1， 后面端口这是1080，然后点击应用到整个系统，输入密码即可。\n### 设置浏览器代理\n直接搜索proxy，找到设置后根据实际情况设置，不要使用系统代理设置\n### 设置开机自启\n``` bash\n$ cd /etc/init.d\n```\n创建开机启动服务\n``` bash\n$ sudo vim shadowsocks\n\n    #!/bin/bash\n    /usr/bin/ss-local -c /etc/shadowsocks-libev.json\n    exit  0\n```\n报“missing LSB tags and overrides”错，在#!/bin/bash下面添加\n``` bash\n    ### BEGIN INIT INFO\n    # Provides: OSSEC HIDS\n    # Required-Start: $network $remote_fs $syslog $time\n    # Required-Stop:\n    # Default-Start: 2 3 4 5\n    # Default-Stop: 0 1 6\n    # Short-Description: OSSEC HIDS\n    ### END INIT INFO\n```\n赋予可执行权限\n``` bash\n$ sudo chmod +x shadowsocks\n```\n设置开机自启动\n``` bash\n$ sudo update-rc.d shadowsocks defaults 100\n```\n\n\n\n\n","slug":"门禁ubuntu配置-hadow-ocks-又可以刷脸开门了","published":1,"updated":"2020-01-05T19:13:25.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509i00524cvj0y34ql2u","content":"<p><strong> 门禁ubuntu配置\\$hadow\\$ocks,又可以刷脸开门了 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>Shadowsocks - A secure socks5 proxy<br><a href=\"http://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">http://shadowsocks.org/en/index.html</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-pip</span><br><span class=\"line\">$ sudo pip install shadowsocks</span><br><span class=\"line\">$ sudo apt-get install software-properties-common -y</span><br><span class=\"line\">$ sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt install shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/shadowsocks-libev.json</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"server\"</span>:<span class=\"string\">\"xx.xx.xx.xx\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"server_port\"</span>:2080,</span><br><span class=\"line\">        <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\">        <span class=\"string\">\"password\"</span>:<span class=\"string\">\"xxxxxxxx\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\">        <span class=\"string\">\"method\"</span>:<span class=\"string\">\"chacha20-ietf-poly1305\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"workers\"</span>: 2,</span><br><span class=\"line\">        <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ss-local -c /etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置全局代理\"><a href=\"#设置全局代理\" class=\"headerlink\" title=\"设置全局代理\"></a>设置全局代理</h3><p>系统设置 -&gt; 网络 -&gt; 网络代理，方法选择手动，然后设置Socks主机127.0.0.1， 后面端口这是1080，然后点击应用到整个系统，输入密码即可。</p>\n<h3 id=\"设置浏览器代理\"><a href=\"#设置浏览器代理\" class=\"headerlink\" title=\"设置浏览器代理\"></a>设置浏览器代理</h3><p>直接搜索proxy，找到设置后根据实际情况设置，不要使用系统代理设置</p>\n<h3 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/init.d</span><br></pre></td></tr></table></figure>\n<p>创建开机启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    /usr/bin/ss-local -c /etc/shadowsocks-libev.json</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>  0</span><br></pre></td></tr></table></figure></p>\n<p>报“missing LSB tags and overrides”错，在#!/bin/bash下面添加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides: OSSEC HIDS</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start: $network $remote_fs $syslog $time</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start: 2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop: 0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: OSSEC HIDS</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br></pre></td></tr></table></figure></p>\n<p>赋予可执行权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod +x shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>设置开机自启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo update-rc.d shadowsocks defaults 100</span><br></pre></td></tr></table></figure></p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 门禁ubuntu配置\\$hadow\\$ocks,又可以刷脸开门了 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>Shadowsocks - A secure socks5 proxy<br><a href=\"http://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">http://shadowsocks.org/en/index.html</a></li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-pip</span><br><span class=\"line\">$ sudo pip install shadowsocks</span><br><span class=\"line\">$ sudo apt-get install software-properties-common -y</span><br><span class=\"line\">$ sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt install shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/shadowsocks-libev.json</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"server\"</span>:<span class=\"string\">\"xx.xx.xx.xx\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"server_port\"</span>:2080,</span><br><span class=\"line\">        <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\">        <span class=\"string\">\"password\"</span>:<span class=\"string\">\"xxxxxxxx\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\">        <span class=\"string\">\"method\"</span>:<span class=\"string\">\"chacha20-ietf-poly1305\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"workers\"</span>: 2,</span><br><span class=\"line\">        <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ss-local -c /etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置全局代理\"><a href=\"#设置全局代理\" class=\"headerlink\" title=\"设置全局代理\"></a>设置全局代理</h3><p>系统设置 -&gt; 网络 -&gt; 网络代理，方法选择手动，然后设置Socks主机127.0.0.1， 后面端口这是1080，然后点击应用到整个系统，输入密码即可。</p>\n<h3 id=\"设置浏览器代理\"><a href=\"#设置浏览器代理\" class=\"headerlink\" title=\"设置浏览器代理\"></a>设置浏览器代理</h3><p>直接搜索proxy，找到设置后根据实际情况设置，不要使用系统代理设置</p>\n<h3 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/init.d</span><br></pre></td></tr></table></figure>\n<p>创建开机启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    /usr/bin/ss-local -c /etc/shadowsocks-libev.json</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>  0</span><br></pre></td></tr></table></figure></p>\n<p>报“missing LSB tags and overrides”错，在#!/bin/bash下面添加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides: OSSEC HIDS</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start: $network $remote_fs $syslog $time</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start: 2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop: 0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description: OSSEC HIDS</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br></pre></td></tr></table></figure></p>\n<p>赋予可执行权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod +x shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>设置开机自启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo update-rc.d shadowsocks defaults 100</span><br></pre></td></tr></table></figure></p>\n</the>"},{"title":"门禁人脸检测和识别","date":"2019-06-25T10:08:41.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n<img src=\"门禁人脸检测和识别\\demo.gif\">\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 人脸检测\n\n### OpenCV库\n* ### 基于haar特征和adaboost分类器的人脸检测\nHaar分类器 = Haar-like特征 + 积分图方法 + AdaBoost +级联；  \nHaar分类器算法的要点如下：  \n①　使用Haar-like特征做检测。  \n②　使用积分图（Integral Image）对Haar-like特征求值进行加速。  \n③　使用AdaBoost算法训练区分人脸和非人脸的强分类器。  \n④　使用筛选式级联把强分类器级联到一起，提高准确率。 \n``` python\nfaceCascade = cv2.CascadeClassifier('./haarcascade_frontalface_default.xml')\n\ndef detectFaceOpenCVHaar(faceCascade, frame, inHeight=300, inWidth=0):\n    frameOpenCVHaar = frame.copy()\n    frameHeight = frameOpenCVHaar.shape[0]\n    frameWidth = frameOpenCVHaar.shape[1]\n    if not inWidth:\n        inWidth = int((frameWidth / frameHeight) * inHeight)\n\n    scaleHeight = frameHeight / inHeight\n    scaleWidth = frameWidth / inWidth\n\n    frameOpenCVHaarSmall = cv2.resize(frameOpenCVHaar, (inWidth, inHeight))\n    frameGray = cv2.cvtColor(frameOpenCVHaarSmall, cv2.COLOR_BGR2GRAY)\n\n    faces = faceCascade.detectMultiScale(frameGray)\n    bboxes = []\n    for (x, y, w, h) in faces:\n        x1 = x\n        y1 = y\n        x2 = x + w\n        y2 = y + h\n        cvRect = [int(x1 * scaleWidth), int(y1 * scaleHeight),\n                  int(x2 * scaleWidth), int(y2 * scaleHeight)]\n        bboxes.append(cvRect)\n        cv2.rectangle(frameOpenCVHaar, (cvRect[0], cvRect[1]), (cvRect[2], cvRect[3]), (0, 255, 0),\n                      int(round(frameHeight / 150)), 4)\n    return frameOpenCVHaar, bboxes\n```\n\n* ### 基于DNN的人脸检测\n在OpenCV3.3版本发布中把DNN模块从扩展模块移到了OpenCV正式发布模块中，OpenCV做了近一步扩展支持所有主流的深度学习框架训练生成与导出模型数据加载。 \n``` python \ndef detectFaceOpenCVDnn(net, frame):\n    frameOpencvDnn = frame.copy()\n    frameHeight = frameOpencvDnn.shape[0]\n    frameWidth = frameOpencvDnn.shape[1]\n    blob = cv2.dnn.blobFromImage(frameOpencvDnn, 1.0, (300, 300), [104, 117, 123], False, False)\n\n    net.setInput(blob)\n    detections = net.forward()\n    bboxes = []\n    for i in range(detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > conf_threshold:\n            x1 = int(detections[0, 0, i, 3] * frameWidth)\n            y1 = int(detections[0, 0, i, 4] * frameHeight)\n            x2 = int(detections[0, 0, i, 5] * frameWidth)\n            y2 = int(detections[0, 0, i, 6] * frameHeight)\n            bboxes.append([x1, y1, x2, y2])\n            cv2.rectangle(frameOpencvDnn, (x1, y1), (x2, y2), (0, 255, 0), int(round(frameHeight/150)), 8)\n    return frameOpencvDnn, bboxes\n```\nopenCV人脸检测的实例中，DNN模块支持两个框架的模型：   \n若为caffe模型，则使用readNetFromCaffe，需要用到.prototxt格式的配置文件和.caffemodel格式的模型文件；  \n``` python\n# 1. FP16 version of the original caffe implementation ( 5.4 MB )\nmodelFile = \"models/res10_300x300_ssd_iter_140000_fp16.caffemodel\"\nconfigFile = \"models/deploy.prototxt\"\nnet = cv2.dnn.readNetFromCaffe(configFile, modelFile)\n```\n若为tensorflow模型，则使用readNetFromTensorflow，需要用到.pbtxt格式的配置文件和.pb格式的模型文件。\n``` python\n# 2. 8 bit Quantized version using Tensorflow ( 2.7 MB )\nmodelFile = \"models/opencv_face_detector_uint8.pb\"\nconfigFile = \"models/opencv_face_detector.pbtxt\"\nnet = cv2.dnn.readNetFromTensorflow(modelFile, configFile)\n```\n\n### Dlib库\nDlib 是一个十分优秀好用的机器学习库，其源码均由 C++ 实现，并提供了 Python 接口，可广泛适用于很多场景。  \n> * dlib C++ Library  \n> http://dlib.net/ \n\n* ### 基于HOG特征和线性分类器的人脸检测\n采用经典的HOG(Histogram of Oriented Gradients)特征结合线性分类器、图像金字塔(image pyramid)及滑窗检测机制(sliding window detection scheme)实现的人脸检测器。\n``` python\nhogFaceDetector = dlib.get_frontal_face_detector()\n\ndef detectFaceDlibHog(detector, frame, inHeight=300, inWidth=0):\n\n    frameDlibHog = frame.copy()\n    frameHeight = frameDlibHog.shape[0]\n    frameWidth = frameDlibHog.shape[1]\n    if not inWidth:\n        inWidth = int((frameWidth / frameHeight)*inHeight)\n\n    scaleHeight = frameHeight / inHeight\n    scaleWidth = frameWidth / inWidth\n\n    frameDlibHogSmall = cv2.resize(frameDlibHog, (inWidth, inHeight))\n\n    frameDlibHogSmall = cv2.cvtColor(frameDlibHogSmall, cv2.COLOR_BGR2RGB)\n    faceRects = detector(frameDlibHogSmall, 0)\n    print(frameWidth, frameHeight, inWidth, inHeight)\n    bboxes = []\n    for faceRect in faceRects:\n\n        cvRect = [int(faceRect.left()*scaleWidth), int(faceRect.top()*scaleHeight),\n                  int(faceRect.right()*scaleWidth), int(faceRect.bottom()*scaleHeight) ]\n        bboxes.append(cvRect)\n        cv2.rectangle(frameDlibHog, (cvRect[0], cvRect[1]), (cvRect[2], cvRect[3]), (0, 255, 0), int(round(frameHeight/150)), 4)\n    return frameDlibHog, bboxes\n```\n\n* ### 基于CNN的人脸检测\n采用预训练的CNN模型进行图片中的人脸检测。  \n基于CNN模型比基于HOG特征模型的人脸检测准确度更高，但是需要更多的计算资源，即在GPU上运行才可有较好的运行速率。\n\n``` python\ndnnFaceDetector = dlib.cnn_face_detection_model_v1(\"./mmod_human_face_detector.dat\")\n\ndef detectFaceDlibMMOD(detector, frame, inHeight=300, inWidth=0):\n\n    frameDlibMMOD = frame.copy()\n    frameHeight = frameDlibMMOD.shape[0]\n    frameWidth = frameDlibMMOD.shape[1]\n    if not inWidth:\n        inWidth = int((frameWidth / frameHeight)*inHeight)\n\n    scaleHeight = frameHeight / inHeight\n    scaleWidth = frameWidth / inWidth\n\n    frameDlibMMODSmall = cv2.resize(frameDlibMMOD, (inWidth, inHeight))\n\n    frameDlibMMODSmall = cv2.cvtColor(frameDlibMMODSmall, cv2.COLOR_BGR2RGB)\n    faceRects = detector(frameDlibMMODSmall, 0)\n\n    print(frameWidth, frameHeight, inWidth, inHeight)\n    bboxes = []\n    for faceRect in faceRects:\n        cvRect = [int(faceRect.rect.left()*scaleWidth), int(faceRect.rect.top()*scaleHeight),\n                  int(faceRect.rect.right()*scaleWidth), int(faceRect.rect.bottom()*scaleHeight) ]\n        bboxes.append(cvRect)\n        cv2.rectangle(frameDlibMMOD, (cvRect[0], cvRect[1]), (cvRect[2], cvRect[3]), (0, 255, 0), int(round(frameHeight/150)), 4)\n    return frameDlibMMOD, bboxes\n```\n\n\n\n## 参考\n* Face Detection - OpenCV, Dlib and Deep Learning | Learn OpenCV  \nhttps://www.learnopencv.com/face-detection-opencv-dlib-and-deep-learning-c-python/\n\n\n\n\n\n\n\n\n\n","source":"_posts/门禁人脸检测和识别.md","raw":"---\ntitle: 门禁人脸检测和识别\ndate: 2019-06-25 18:08:41\ntags:\n  - opencv\n  - python\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n<img src=\"门禁人脸检测和识别\\demo.gif\">\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## 人脸检测\n\n### OpenCV库\n* ### 基于haar特征和adaboost分类器的人脸检测\nHaar分类器 = Haar-like特征 + 积分图方法 + AdaBoost +级联；  \nHaar分类器算法的要点如下：  \n①　使用Haar-like特征做检测。  \n②　使用积分图（Integral Image）对Haar-like特征求值进行加速。  \n③　使用AdaBoost算法训练区分人脸和非人脸的强分类器。  \n④　使用筛选式级联把强分类器级联到一起，提高准确率。 \n``` python\nfaceCascade = cv2.CascadeClassifier('./haarcascade_frontalface_default.xml')\n\ndef detectFaceOpenCVHaar(faceCascade, frame, inHeight=300, inWidth=0):\n    frameOpenCVHaar = frame.copy()\n    frameHeight = frameOpenCVHaar.shape[0]\n    frameWidth = frameOpenCVHaar.shape[1]\n    if not inWidth:\n        inWidth = int((frameWidth / frameHeight) * inHeight)\n\n    scaleHeight = frameHeight / inHeight\n    scaleWidth = frameWidth / inWidth\n\n    frameOpenCVHaarSmall = cv2.resize(frameOpenCVHaar, (inWidth, inHeight))\n    frameGray = cv2.cvtColor(frameOpenCVHaarSmall, cv2.COLOR_BGR2GRAY)\n\n    faces = faceCascade.detectMultiScale(frameGray)\n    bboxes = []\n    for (x, y, w, h) in faces:\n        x1 = x\n        y1 = y\n        x2 = x + w\n        y2 = y + h\n        cvRect = [int(x1 * scaleWidth), int(y1 * scaleHeight),\n                  int(x2 * scaleWidth), int(y2 * scaleHeight)]\n        bboxes.append(cvRect)\n        cv2.rectangle(frameOpenCVHaar, (cvRect[0], cvRect[1]), (cvRect[2], cvRect[3]), (0, 255, 0),\n                      int(round(frameHeight / 150)), 4)\n    return frameOpenCVHaar, bboxes\n```\n\n* ### 基于DNN的人脸检测\n在OpenCV3.3版本发布中把DNN模块从扩展模块移到了OpenCV正式发布模块中，OpenCV做了近一步扩展支持所有主流的深度学习框架训练生成与导出模型数据加载。 \n``` python \ndef detectFaceOpenCVDnn(net, frame):\n    frameOpencvDnn = frame.copy()\n    frameHeight = frameOpencvDnn.shape[0]\n    frameWidth = frameOpencvDnn.shape[1]\n    blob = cv2.dnn.blobFromImage(frameOpencvDnn, 1.0, (300, 300), [104, 117, 123], False, False)\n\n    net.setInput(blob)\n    detections = net.forward()\n    bboxes = []\n    for i in range(detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > conf_threshold:\n            x1 = int(detections[0, 0, i, 3] * frameWidth)\n            y1 = int(detections[0, 0, i, 4] * frameHeight)\n            x2 = int(detections[0, 0, i, 5] * frameWidth)\n            y2 = int(detections[0, 0, i, 6] * frameHeight)\n            bboxes.append([x1, y1, x2, y2])\n            cv2.rectangle(frameOpencvDnn, (x1, y1), (x2, y2), (0, 255, 0), int(round(frameHeight/150)), 8)\n    return frameOpencvDnn, bboxes\n```\nopenCV人脸检测的实例中，DNN模块支持两个框架的模型：   \n若为caffe模型，则使用readNetFromCaffe，需要用到.prototxt格式的配置文件和.caffemodel格式的模型文件；  \n``` python\n# 1. FP16 version of the original caffe implementation ( 5.4 MB )\nmodelFile = \"models/res10_300x300_ssd_iter_140000_fp16.caffemodel\"\nconfigFile = \"models/deploy.prototxt\"\nnet = cv2.dnn.readNetFromCaffe(configFile, modelFile)\n```\n若为tensorflow模型，则使用readNetFromTensorflow，需要用到.pbtxt格式的配置文件和.pb格式的模型文件。\n``` python\n# 2. 8 bit Quantized version using Tensorflow ( 2.7 MB )\nmodelFile = \"models/opencv_face_detector_uint8.pb\"\nconfigFile = \"models/opencv_face_detector.pbtxt\"\nnet = cv2.dnn.readNetFromTensorflow(modelFile, configFile)\n```\n\n### Dlib库\nDlib 是一个十分优秀好用的机器学习库，其源码均由 C++ 实现，并提供了 Python 接口，可广泛适用于很多场景。  \n> * dlib C++ Library  \n> http://dlib.net/ \n\n* ### 基于HOG特征和线性分类器的人脸检测\n采用经典的HOG(Histogram of Oriented Gradients)特征结合线性分类器、图像金字塔(image pyramid)及滑窗检测机制(sliding window detection scheme)实现的人脸检测器。\n``` python\nhogFaceDetector = dlib.get_frontal_face_detector()\n\ndef detectFaceDlibHog(detector, frame, inHeight=300, inWidth=0):\n\n    frameDlibHog = frame.copy()\n    frameHeight = frameDlibHog.shape[0]\n    frameWidth = frameDlibHog.shape[1]\n    if not inWidth:\n        inWidth = int((frameWidth / frameHeight)*inHeight)\n\n    scaleHeight = frameHeight / inHeight\n    scaleWidth = frameWidth / inWidth\n\n    frameDlibHogSmall = cv2.resize(frameDlibHog, (inWidth, inHeight))\n\n    frameDlibHogSmall = cv2.cvtColor(frameDlibHogSmall, cv2.COLOR_BGR2RGB)\n    faceRects = detector(frameDlibHogSmall, 0)\n    print(frameWidth, frameHeight, inWidth, inHeight)\n    bboxes = []\n    for faceRect in faceRects:\n\n        cvRect = [int(faceRect.left()*scaleWidth), int(faceRect.top()*scaleHeight),\n                  int(faceRect.right()*scaleWidth), int(faceRect.bottom()*scaleHeight) ]\n        bboxes.append(cvRect)\n        cv2.rectangle(frameDlibHog, (cvRect[0], cvRect[1]), (cvRect[2], cvRect[3]), (0, 255, 0), int(round(frameHeight/150)), 4)\n    return frameDlibHog, bboxes\n```\n\n* ### 基于CNN的人脸检测\n采用预训练的CNN模型进行图片中的人脸检测。  \n基于CNN模型比基于HOG特征模型的人脸检测准确度更高，但是需要更多的计算资源，即在GPU上运行才可有较好的运行速率。\n\n``` python\ndnnFaceDetector = dlib.cnn_face_detection_model_v1(\"./mmod_human_face_detector.dat\")\n\ndef detectFaceDlibMMOD(detector, frame, inHeight=300, inWidth=0):\n\n    frameDlibMMOD = frame.copy()\n    frameHeight = frameDlibMMOD.shape[0]\n    frameWidth = frameDlibMMOD.shape[1]\n    if not inWidth:\n        inWidth = int((frameWidth / frameHeight)*inHeight)\n\n    scaleHeight = frameHeight / inHeight\n    scaleWidth = frameWidth / inWidth\n\n    frameDlibMMODSmall = cv2.resize(frameDlibMMOD, (inWidth, inHeight))\n\n    frameDlibMMODSmall = cv2.cvtColor(frameDlibMMODSmall, cv2.COLOR_BGR2RGB)\n    faceRects = detector(frameDlibMMODSmall, 0)\n\n    print(frameWidth, frameHeight, inWidth, inHeight)\n    bboxes = []\n    for faceRect in faceRects:\n        cvRect = [int(faceRect.rect.left()*scaleWidth), int(faceRect.rect.top()*scaleHeight),\n                  int(faceRect.rect.right()*scaleWidth), int(faceRect.rect.bottom()*scaleHeight) ]\n        bboxes.append(cvRect)\n        cv2.rectangle(frameDlibMMOD, (cvRect[0], cvRect[1]), (cvRect[2], cvRect[3]), (0, 255, 0), int(round(frameHeight/150)), 4)\n    return frameDlibMMOD, bboxes\n```\n\n\n\n## 参考\n* Face Detection - OpenCV, Dlib and Deep Learning | Learn OpenCV  \nhttps://www.learnopencv.com/face-detection-opencv-dlib-and-deep-learning-c-python/\n\n\n\n\n\n\n\n\n\n","slug":"门禁人脸检测和识别","published":1,"updated":"2020-01-05T19:13:25.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509j00544cvjuxp2rtue","content":"<p><strong> 门禁人脸检测和识别 </strong> <excerpt in index | 首页摘要><br><img src=\"/2019/06/25/门禁人脸检测和识别/demo.gif\"></excerpt></p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h2 id=\"人脸检测\"><a href=\"#人脸检测\" class=\"headerlink\" title=\"人脸检测\"></a>人脸检测</h2><h3 id=\"OpenCV库\"><a href=\"#OpenCV库\" class=\"headerlink\" title=\"OpenCV库\"></a>OpenCV库</h3><ul>\n<li><h3 id=\"基于haar特征和adaboost分类器的人脸检测\"><a href=\"#基于haar特征和adaboost分类器的人脸检测\" class=\"headerlink\" title=\"基于haar特征和adaboost分类器的人脸检测\"></a>基于haar特征和adaboost分类器的人脸检测</h3><p>Haar分类器 = Haar-like特征 + 积分图方法 + AdaBoost +级联；<br>Haar分类器算法的要点如下：<br>①　使用Haar-like特征做检测。<br>②　使用积分图（Integral Image）对Haar-like特征求值进行加速。<br>③　使用AdaBoost算法训练区分人脸和非人脸的强分类器。<br>④　使用筛选式级联把强分类器级联到一起，提高准确率。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">faceCascade = cv2.CascadeClassifier(<span class=\"string\">'./haarcascade_frontalface_default.xml'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceOpenCVHaar</span><span class=\"params\">(faceCascade, frame, inHeight=<span class=\"number\">300</span>, inWidth=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    frameOpenCVHaar = frame.copy()</span><br><span class=\"line\">    frameHeight = frameOpenCVHaar.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameOpenCVHaar.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inWidth:</span><br><span class=\"line\">        inWidth = int((frameWidth / frameHeight) * inHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    scaleHeight = frameHeight / inHeight</span><br><span class=\"line\">    scaleWidth = frameWidth / inWidth</span><br><span class=\"line\"></span><br><span class=\"line\">    frameOpenCVHaarSmall = cv2.resize(frameOpenCVHaar, (inWidth, inHeight))</span><br><span class=\"line\">    frameGray = cv2.cvtColor(frameOpenCVHaarSmall, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">    faces = faceCascade.detectMultiScale(frameGray)</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">        x1 = x</span><br><span class=\"line\">        y1 = y</span><br><span class=\"line\">        x2 = x + w</span><br><span class=\"line\">        y2 = y + h</span><br><span class=\"line\">        cvRect = [int(x1 * scaleWidth), int(y1 * scaleHeight),</span><br><span class=\"line\">                  int(x2 * scaleWidth), int(y2 * scaleHeight)]</span><br><span class=\"line\">        bboxes.append(cvRect)</span><br><span class=\"line\">        cv2.rectangle(frameOpenCVHaar, (cvRect[<span class=\"number\">0</span>], cvRect[<span class=\"number\">1</span>]), (cvRect[<span class=\"number\">2</span>], cvRect[<span class=\"number\">3</span>]), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                      int(round(frameHeight / <span class=\"number\">150</span>)), <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameOpenCVHaar, bboxes</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"基于DNN的人脸检测\"><a href=\"#基于DNN的人脸检测\" class=\"headerlink\" title=\"基于DNN的人脸检测\"></a>基于DNN的人脸检测</h3><p>在OpenCV3.3版本发布中把DNN模块从扩展模块移到了OpenCV正式发布模块中，OpenCV做了近一步扩展支持所有主流的深度学习框架训练生成与导出模型数据加载。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceOpenCVDnn</span><span class=\"params\">(net, frame)</span>:</span></span><br><span class=\"line\">    frameOpencvDnn = frame.copy()</span><br><span class=\"line\">    frameHeight = frameOpencvDnn.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameOpencvDnn.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    blob = cv2.dnn.blobFromImage(frameOpencvDnn, <span class=\"number\">1.0</span>, (<span class=\"number\">300</span>, <span class=\"number\">300</span>), [<span class=\"number\">104</span>, <span class=\"number\">117</span>, <span class=\"number\">123</span>], <span class=\"literal\">False</span>, <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    net.setInput(blob)</span><br><span class=\"line\">    detections = net.forward()</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(detections.shape[<span class=\"number\">2</span>]):</span><br><span class=\"line\">        confidence = detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> confidence &gt; conf_threshold:</span><br><span class=\"line\">            x1 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">3</span>] * frameWidth)</span><br><span class=\"line\">            y1 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">4</span>] * frameHeight)</span><br><span class=\"line\">            x2 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">5</span>] * frameWidth)</span><br><span class=\"line\">            y2 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">6</span>] * frameHeight)</span><br><span class=\"line\">            bboxes.append([x1, y1, x2, y2])</span><br><span class=\"line\">            cv2.rectangle(frameOpencvDnn, (x1, y1), (x2, y2), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), int(round(frameHeight/<span class=\"number\">150</span>)), <span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameOpencvDnn, bboxes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>openCV人脸检测的实例中，DNN模块支持两个框架的模型：<br>若为caffe模型，则使用readNetFromCaffe，需要用到.prototxt格式的配置文件和.caffemodel格式的模型文件；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. FP16 version of the original caffe implementation ( 5.4 MB )</span></span><br><span class=\"line\">modelFile = <span class=\"string\">\"models/res10_300x300_ssd_iter_140000_fp16.caffemodel\"</span></span><br><span class=\"line\">configFile = <span class=\"string\">\"models/deploy.prototxt\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromCaffe(configFile, modelFile)</span><br></pre></td></tr></table></figure></p>\n<p>若为tensorflow模型，则使用readNetFromTensorflow，需要用到.pbtxt格式的配置文件和.pb格式的模型文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2. 8 bit Quantized version using Tensorflow ( 2.7 MB )</span></span><br><span class=\"line\">modelFile = <span class=\"string\">\"models/opencv_face_detector_uint8.pb\"</span></span><br><span class=\"line\">configFile = <span class=\"string\">\"models/opencv_face_detector.pbtxt\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromTensorflow(modelFile, configFile)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dlib库\"><a href=\"#Dlib库\" class=\"headerlink\" title=\"Dlib库\"></a>Dlib库</h3><p>Dlib 是一个十分优秀好用的机器学习库，其源码均由 C++ 实现，并提供了 Python 接口，可广泛适用于很多场景。  </p>\n<blockquote>\n<ul>\n<li>dlib C++ Library<br><a href=\"http://dlib.net/\" target=\"_blank\" rel=\"noopener\">http://dlib.net/</a> </li>\n</ul>\n</blockquote>\n<ul>\n<li><h3 id=\"基于HOG特征和线性分类器的人脸检测\"><a href=\"#基于HOG特征和线性分类器的人脸检测\" class=\"headerlink\" title=\"基于HOG特征和线性分类器的人脸检测\"></a>基于HOG特征和线性分类器的人脸检测</h3><p>采用经典的HOG(Histogram of Oriented Gradients)特征结合线性分类器、图像金字塔(image pyramid)及滑窗检测机制(sliding window detection scheme)实现的人脸检测器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hogFaceDetector = dlib.get_frontal_face_detector()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceDlibHog</span><span class=\"params\">(detector, frame, inHeight=<span class=\"number\">300</span>, inWidth=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibHog = frame.copy()</span><br><span class=\"line\">    frameHeight = frameDlibHog.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameDlibHog.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inWidth:</span><br><span class=\"line\">        inWidth = int((frameWidth / frameHeight)*inHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    scaleHeight = frameHeight / inHeight</span><br><span class=\"line\">    scaleWidth = frameWidth / inWidth</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibHogSmall = cv2.resize(frameDlibHog, (inWidth, inHeight))</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibHogSmall = cv2.cvtColor(frameDlibHogSmall, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    faceRects = detector(frameDlibHogSmall, <span class=\"number\">0</span>)</span><br><span class=\"line\">    print(frameWidth, frameHeight, inWidth, inHeight)</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> faceRect <span class=\"keyword\">in</span> faceRects:</span><br><span class=\"line\"></span><br><span class=\"line\">        cvRect = [int(faceRect.left()*scaleWidth), int(faceRect.top()*scaleHeight),</span><br><span class=\"line\">                  int(faceRect.right()*scaleWidth), int(faceRect.bottom()*scaleHeight) ]</span><br><span class=\"line\">        bboxes.append(cvRect)</span><br><span class=\"line\">        cv2.rectangle(frameDlibHog, (cvRect[<span class=\"number\">0</span>], cvRect[<span class=\"number\">1</span>]), (cvRect[<span class=\"number\">2</span>], cvRect[<span class=\"number\">3</span>]), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), int(round(frameHeight/<span class=\"number\">150</span>)), <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameDlibHog, bboxes</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"基于CNN的人脸检测\"><a href=\"#基于CNN的人脸检测\" class=\"headerlink\" title=\"基于CNN的人脸检测\"></a>基于CNN的人脸检测</h3><p>采用预训练的CNN模型进行图片中的人脸检测。<br>基于CNN模型比基于HOG特征模型的人脸检测准确度更高，但是需要更多的计算资源，即在GPU上运行才可有较好的运行速率。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnnFaceDetector = dlib.cnn_face_detection_model_v1(<span class=\"string\">\"./mmod_human_face_detector.dat\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceDlibMMOD</span><span class=\"params\">(detector, frame, inHeight=<span class=\"number\">300</span>, inWidth=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibMMOD = frame.copy()</span><br><span class=\"line\">    frameHeight = frameDlibMMOD.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameDlibMMOD.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inWidth:</span><br><span class=\"line\">        inWidth = int((frameWidth / frameHeight)*inHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    scaleHeight = frameHeight / inHeight</span><br><span class=\"line\">    scaleWidth = frameWidth / inWidth</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibMMODSmall = cv2.resize(frameDlibMMOD, (inWidth, inHeight))</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibMMODSmall = cv2.cvtColor(frameDlibMMODSmall, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    faceRects = detector(frameDlibMMODSmall, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(frameWidth, frameHeight, inWidth, inHeight)</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> faceRect <span class=\"keyword\">in</span> faceRects:</span><br><span class=\"line\">        cvRect = [int(faceRect.rect.left()*scaleWidth), int(faceRect.rect.top()*scaleHeight),</span><br><span class=\"line\">                  int(faceRect.rect.right()*scaleWidth), int(faceRect.rect.bottom()*scaleHeight) ]</span><br><span class=\"line\">        bboxes.append(cvRect)</span><br><span class=\"line\">        cv2.rectangle(frameDlibMMOD, (cvRect[<span class=\"number\">0</span>], cvRect[<span class=\"number\">1</span>]), (cvRect[<span class=\"number\">2</span>], cvRect[<span class=\"number\">3</span>]), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), int(round(frameHeight/<span class=\"number\">150</span>)), <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameDlibMMOD, bboxes</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>Face Detection - OpenCV, Dlib and Deep Learning | Learn OpenCV<br><a href=\"https://www.learnopencv.com/face-detection-opencv-dlib-and-deep-learning-c-python/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/face-detection-opencv-dlib-and-deep-learning-c-python/</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 门禁人脸检测和识别 </strong> <excerpt in index | 首页摘要><br><img src=\"/2019/06/25/门禁人脸检测和识别/demo.gif\"></excerpt></p>","more":"<the rest of contents | 余下全文>\n\n\n<h2 id=\"人脸检测\"><a href=\"#人脸检测\" class=\"headerlink\" title=\"人脸检测\"></a>人脸检测</h2><h3 id=\"OpenCV库\"><a href=\"#OpenCV库\" class=\"headerlink\" title=\"OpenCV库\"></a>OpenCV库</h3><ul>\n<li><h3 id=\"基于haar特征和adaboost分类器的人脸检测\"><a href=\"#基于haar特征和adaboost分类器的人脸检测\" class=\"headerlink\" title=\"基于haar特征和adaboost分类器的人脸检测\"></a>基于haar特征和adaboost分类器的人脸检测</h3><p>Haar分类器 = Haar-like特征 + 积分图方法 + AdaBoost +级联；<br>Haar分类器算法的要点如下：<br>①　使用Haar-like特征做检测。<br>②　使用积分图（Integral Image）对Haar-like特征求值进行加速。<br>③　使用AdaBoost算法训练区分人脸和非人脸的强分类器。<br>④　使用筛选式级联把强分类器级联到一起，提高准确率。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">faceCascade = cv2.CascadeClassifier(<span class=\"string\">'./haarcascade_frontalface_default.xml'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceOpenCVHaar</span><span class=\"params\">(faceCascade, frame, inHeight=<span class=\"number\">300</span>, inWidth=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    frameOpenCVHaar = frame.copy()</span><br><span class=\"line\">    frameHeight = frameOpenCVHaar.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameOpenCVHaar.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inWidth:</span><br><span class=\"line\">        inWidth = int((frameWidth / frameHeight) * inHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    scaleHeight = frameHeight / inHeight</span><br><span class=\"line\">    scaleWidth = frameWidth / inWidth</span><br><span class=\"line\"></span><br><span class=\"line\">    frameOpenCVHaarSmall = cv2.resize(frameOpenCVHaar, (inWidth, inHeight))</span><br><span class=\"line\">    frameGray = cv2.cvtColor(frameOpenCVHaarSmall, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">    faces = faceCascade.detectMultiScale(frameGray)</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">        x1 = x</span><br><span class=\"line\">        y1 = y</span><br><span class=\"line\">        x2 = x + w</span><br><span class=\"line\">        y2 = y + h</span><br><span class=\"line\">        cvRect = [int(x1 * scaleWidth), int(y1 * scaleHeight),</span><br><span class=\"line\">                  int(x2 * scaleWidth), int(y2 * scaleHeight)]</span><br><span class=\"line\">        bboxes.append(cvRect)</span><br><span class=\"line\">        cv2.rectangle(frameOpenCVHaar, (cvRect[<span class=\"number\">0</span>], cvRect[<span class=\"number\">1</span>]), (cvRect[<span class=\"number\">2</span>], cvRect[<span class=\"number\">3</span>]), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                      int(round(frameHeight / <span class=\"number\">150</span>)), <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameOpenCVHaar, bboxes</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"基于DNN的人脸检测\"><a href=\"#基于DNN的人脸检测\" class=\"headerlink\" title=\"基于DNN的人脸检测\"></a>基于DNN的人脸检测</h3><p>在OpenCV3.3版本发布中把DNN模块从扩展模块移到了OpenCV正式发布模块中，OpenCV做了近一步扩展支持所有主流的深度学习框架训练生成与导出模型数据加载。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceOpenCVDnn</span><span class=\"params\">(net, frame)</span>:</span></span><br><span class=\"line\">    frameOpencvDnn = frame.copy()</span><br><span class=\"line\">    frameHeight = frameOpencvDnn.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameOpencvDnn.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    blob = cv2.dnn.blobFromImage(frameOpencvDnn, <span class=\"number\">1.0</span>, (<span class=\"number\">300</span>, <span class=\"number\">300</span>), [<span class=\"number\">104</span>, <span class=\"number\">117</span>, <span class=\"number\">123</span>], <span class=\"literal\">False</span>, <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    net.setInput(blob)</span><br><span class=\"line\">    detections = net.forward()</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(detections.shape[<span class=\"number\">2</span>]):</span><br><span class=\"line\">        confidence = detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> confidence &gt; conf_threshold:</span><br><span class=\"line\">            x1 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">3</span>] * frameWidth)</span><br><span class=\"line\">            y1 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">4</span>] * frameHeight)</span><br><span class=\"line\">            x2 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">5</span>] * frameWidth)</span><br><span class=\"line\">            y2 = int(detections[<span class=\"number\">0</span>, <span class=\"number\">0</span>, i, <span class=\"number\">6</span>] * frameHeight)</span><br><span class=\"line\">            bboxes.append([x1, y1, x2, y2])</span><br><span class=\"line\">            cv2.rectangle(frameOpencvDnn, (x1, y1), (x2, y2), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), int(round(frameHeight/<span class=\"number\">150</span>)), <span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameOpencvDnn, bboxes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>openCV人脸检测的实例中，DNN模块支持两个框架的模型：<br>若为caffe模型，则使用readNetFromCaffe，需要用到.prototxt格式的配置文件和.caffemodel格式的模型文件；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. FP16 version of the original caffe implementation ( 5.4 MB )</span></span><br><span class=\"line\">modelFile = <span class=\"string\">\"models/res10_300x300_ssd_iter_140000_fp16.caffemodel\"</span></span><br><span class=\"line\">configFile = <span class=\"string\">\"models/deploy.prototxt\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromCaffe(configFile, modelFile)</span><br></pre></td></tr></table></figure></p>\n<p>若为tensorflow模型，则使用readNetFromTensorflow，需要用到.pbtxt格式的配置文件和.pb格式的模型文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2. 8 bit Quantized version using Tensorflow ( 2.7 MB )</span></span><br><span class=\"line\">modelFile = <span class=\"string\">\"models/opencv_face_detector_uint8.pb\"</span></span><br><span class=\"line\">configFile = <span class=\"string\">\"models/opencv_face_detector.pbtxt\"</span></span><br><span class=\"line\">net = cv2.dnn.readNetFromTensorflow(modelFile, configFile)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dlib库\"><a href=\"#Dlib库\" class=\"headerlink\" title=\"Dlib库\"></a>Dlib库</h3><p>Dlib 是一个十分优秀好用的机器学习库，其源码均由 C++ 实现，并提供了 Python 接口，可广泛适用于很多场景。  </p>\n<blockquote>\n<ul>\n<li>dlib C++ Library<br><a href=\"http://dlib.net/\" target=\"_blank\" rel=\"noopener\">http://dlib.net/</a> </li>\n</ul>\n</blockquote>\n<ul>\n<li><h3 id=\"基于HOG特征和线性分类器的人脸检测\"><a href=\"#基于HOG特征和线性分类器的人脸检测\" class=\"headerlink\" title=\"基于HOG特征和线性分类器的人脸检测\"></a>基于HOG特征和线性分类器的人脸检测</h3><p>采用经典的HOG(Histogram of Oriented Gradients)特征结合线性分类器、图像金字塔(image pyramid)及滑窗检测机制(sliding window detection scheme)实现的人脸检测器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hogFaceDetector = dlib.get_frontal_face_detector()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceDlibHog</span><span class=\"params\">(detector, frame, inHeight=<span class=\"number\">300</span>, inWidth=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibHog = frame.copy()</span><br><span class=\"line\">    frameHeight = frameDlibHog.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameDlibHog.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inWidth:</span><br><span class=\"line\">        inWidth = int((frameWidth / frameHeight)*inHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    scaleHeight = frameHeight / inHeight</span><br><span class=\"line\">    scaleWidth = frameWidth / inWidth</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibHogSmall = cv2.resize(frameDlibHog, (inWidth, inHeight))</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibHogSmall = cv2.cvtColor(frameDlibHogSmall, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    faceRects = detector(frameDlibHogSmall, <span class=\"number\">0</span>)</span><br><span class=\"line\">    print(frameWidth, frameHeight, inWidth, inHeight)</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> faceRect <span class=\"keyword\">in</span> faceRects:</span><br><span class=\"line\"></span><br><span class=\"line\">        cvRect = [int(faceRect.left()*scaleWidth), int(faceRect.top()*scaleHeight),</span><br><span class=\"line\">                  int(faceRect.right()*scaleWidth), int(faceRect.bottom()*scaleHeight) ]</span><br><span class=\"line\">        bboxes.append(cvRect)</span><br><span class=\"line\">        cv2.rectangle(frameDlibHog, (cvRect[<span class=\"number\">0</span>], cvRect[<span class=\"number\">1</span>]), (cvRect[<span class=\"number\">2</span>], cvRect[<span class=\"number\">3</span>]), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), int(round(frameHeight/<span class=\"number\">150</span>)), <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameDlibHog, bboxes</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"基于CNN的人脸检测\"><a href=\"#基于CNN的人脸检测\" class=\"headerlink\" title=\"基于CNN的人脸检测\"></a>基于CNN的人脸检测</h3><p>采用预训练的CNN模型进行图片中的人脸检测。<br>基于CNN模型比基于HOG特征模型的人脸检测准确度更高，但是需要更多的计算资源，即在GPU上运行才可有较好的运行速率。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnnFaceDetector = dlib.cnn_face_detection_model_v1(<span class=\"string\">\"./mmod_human_face_detector.dat\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaceDlibMMOD</span><span class=\"params\">(detector, frame, inHeight=<span class=\"number\">300</span>, inWidth=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibMMOD = frame.copy()</span><br><span class=\"line\">    frameHeight = frameDlibMMOD.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    frameWidth = frameDlibMMOD.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inWidth:</span><br><span class=\"line\">        inWidth = int((frameWidth / frameHeight)*inHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    scaleHeight = frameHeight / inHeight</span><br><span class=\"line\">    scaleWidth = frameWidth / inWidth</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibMMODSmall = cv2.resize(frameDlibMMOD, (inWidth, inHeight))</span><br><span class=\"line\"></span><br><span class=\"line\">    frameDlibMMODSmall = cv2.cvtColor(frameDlibMMODSmall, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">    faceRects = detector(frameDlibMMODSmall, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(frameWidth, frameHeight, inWidth, inHeight)</span><br><span class=\"line\">    bboxes = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> faceRect <span class=\"keyword\">in</span> faceRects:</span><br><span class=\"line\">        cvRect = [int(faceRect.rect.left()*scaleWidth), int(faceRect.rect.top()*scaleHeight),</span><br><span class=\"line\">                  int(faceRect.rect.right()*scaleWidth), int(faceRect.rect.bottom()*scaleHeight) ]</span><br><span class=\"line\">        bboxes.append(cvRect)</span><br><span class=\"line\">        cv2.rectangle(frameDlibMMOD, (cvRect[<span class=\"number\">0</span>], cvRect[<span class=\"number\">1</span>]), (cvRect[<span class=\"number\">2</span>], cvRect[<span class=\"number\">3</span>]), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), int(round(frameHeight/<span class=\"number\">150</span>)), <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frameDlibMMOD, bboxes</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>Face Detection - OpenCV, Dlib and Deep Learning | Learn OpenCV<br><a href=\"https://www.learnopencv.com/face-detection-opencv-dlib-and-deep-learning-c-python/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/face-detection-opencv-dlib-and-deep-learning-c-python/</a></li>\n</ul>\n</the>"},{"title":"门禁行人检测和识别","date":"2019-07-23T02:29:26.000Z","_content":"\n\n## 远程桌面连接\n\n* 利用远程桌面连接\n\n在ubuntu安装xdrp服务\n``` bash\nsudo apt-get install xrdp\n```\n打开远程桌面服务（mstsc.exe），输入ip连接\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/门禁行人检测和识别.md","raw":"---\ntitle: 门禁行人检测和识别\ndate: 2019-07-23 10:29:26\ntags:\n---\n\n\n## 远程桌面连接\n\n* 利用远程桌面连接\n\n在ubuntu安装xdrp服务\n``` bash\nsudo apt-get install xrdp\n```\n打开远程桌面服务（mstsc.exe），输入ip连接\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"门禁行人检测和识别","published":1,"updated":"2020-01-05T19:13:25.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509k00564cvjmm4eh8w4","content":"<h2 id=\"远程桌面连接\"><a href=\"#远程桌面连接\" class=\"headerlink\" title=\"远程桌面连接\"></a>远程桌面连接</h2><ul>\n<li>利用远程桌面连接</li>\n</ul>\n<p>在ubuntu安装xdrp服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>打开远程桌面服务（mstsc.exe），输入ip连接</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"远程桌面连接\"><a href=\"#远程桌面连接\" class=\"headerlink\" title=\"远程桌面连接\"></a>远程桌面连接</h2><ul>\n<li>利用远程桌面连接</li>\n</ul>\n<p>在ubuntu安装xdrp服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>打开远程桌面服务（mstsc.exe），输入ip连接</p>\n"},{"title":"门禁人脸检测和识别二：人脸关键点检测","date":"2019-06-27T17:57:02.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n* dlib人脸关键点代码解析 - 知乎 https://zhuanlan.zhihu.com/p/56195986\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n* 人脸关键点检测综述 - 知乎  \nhttps://zhuanlan.zhihu.com/p/42968117\n\n\n### 发展  \n* 1995年，Cootes提出ASM(Active Shape Model)。  \nhttps://personalpages.manchester.ac.uk/staff/timothy.f.cootes/Papers/cootes_cviu95.pdf\n* 1998年，Cootes提出AAM(Active Appearance Model)算法。\n\n* 2006年，Ristinacce提出CLM(Constrained Local Model)算法。\n\n* 2010年，Rollar提出CPR(Cascaded Pose Regression)算法。  \nhttps://pdollar.github.io/files/papers/DollarCVPR10pose.pdf\n\n\n* 2012年，ESR(Explicit Shape Regression)\n* 2014年，ERT(Ensemble of Regression Trees)\n(Face Alignment) One Millisecond Face Alignment with an Ensemble of Regression Trees 笔记 - Lemon&Sprite的博客 - CSDN博客   \nhttps://blog.csdn.net/hit_sirius/article/details/79945211\n\n* 2014年，face alignment in 3000fps， 提取LBF特征和基于cascade的级联的随机森林做全局线性回归。\n\n* 2013年，DCNN，Sun开创深度学习人脸关键点检测的先河，首次将CNN应用到人脸关键点定位上。  \nDeep Convolutional Network Cascade for Facial Point Detection  \nhttps://www.cv-foundation.org/openaccess/content_cvpr_2013/papers/Sun_Deep_Convolutional_Network_2013_CVPR_paper.pdf\n\n* 2016年，Zhang等人提出一种多任务级联卷积神经网络MTCNN(Multi-task Cascaded Convolutional Networks)用以同时处理人脸检测和人脸关键点定位问题。\n\n* 2017 年，Kowalski 等人提出一种新的级联深度神经网络DAN(Deep Alignment Network)。\n\n\n\n\n\n","source":"_posts/门禁人脸检测和识别二：人脸关键点检测.md","raw":"---\ntitle: 门禁人脸检测和识别二：人脸关键点检测\ndate: 2019-06-28 01:57:02\ntags:\n  - opencv\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n* dlib人脸关键点代码解析 - 知乎 https://zhuanlan.zhihu.com/p/56195986\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n* 人脸关键点检测综述 - 知乎  \nhttps://zhuanlan.zhihu.com/p/42968117\n\n\n### 发展  \n* 1995年，Cootes提出ASM(Active Shape Model)。  \nhttps://personalpages.manchester.ac.uk/staff/timothy.f.cootes/Papers/cootes_cviu95.pdf\n* 1998年，Cootes提出AAM(Active Appearance Model)算法。\n\n* 2006年，Ristinacce提出CLM(Constrained Local Model)算法。\n\n* 2010年，Rollar提出CPR(Cascaded Pose Regression)算法。  \nhttps://pdollar.github.io/files/papers/DollarCVPR10pose.pdf\n\n\n* 2012年，ESR(Explicit Shape Regression)\n* 2014年，ERT(Ensemble of Regression Trees)\n(Face Alignment) One Millisecond Face Alignment with an Ensemble of Regression Trees 笔记 - Lemon&Sprite的博客 - CSDN博客   \nhttps://blog.csdn.net/hit_sirius/article/details/79945211\n\n* 2014年，face alignment in 3000fps， 提取LBF特征和基于cascade的级联的随机森林做全局线性回归。\n\n* 2013年，DCNN，Sun开创深度学习人脸关键点检测的先河，首次将CNN应用到人脸关键点定位上。  \nDeep Convolutional Network Cascade for Facial Point Detection  \nhttps://www.cv-foundation.org/openaccess/content_cvpr_2013/papers/Sun_Deep_Convolutional_Network_2013_CVPR_paper.pdf\n\n* 2016年，Zhang等人提出一种多任务级联卷积神经网络MTCNN(Multi-task Cascaded Convolutional Networks)用以同时处理人脸检测和人脸关键点定位问题。\n\n* 2017 年，Kowalski 等人提出一种新的级联深度神经网络DAN(Deep Alignment Network)。\n\n\n\n\n\n","slug":"门禁人脸检测和识别二：人脸关键点检测","published":1,"updated":"2020-01-05T19:13:25.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509l00584cvj0mba8e0l","content":"<p><strong> 门禁人脸检测和识别二：人脸关键点检测 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>dlib人脸关键点代码解析 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/56195986\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/56195986</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<ul>\n<li>人脸关键点检测综述 - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/42968117\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/42968117</a></li>\n</ul>\n<h3 id=\"发展\"><a href=\"#发展\" class=\"headerlink\" title=\"发展\"></a>发展</h3><ul>\n<li>1995年，Cootes提出ASM(Active Shape Model)。<br><a href=\"https://personalpages.manchester.ac.uk/staff/timothy.f.cootes/Papers/cootes_cviu95.pdf\" target=\"_blank\" rel=\"noopener\">https://personalpages.manchester.ac.uk/staff/timothy.f.cootes/Papers/cootes_cviu95.pdf</a></li>\n<li><p>1998年，Cootes提出AAM(Active Appearance Model)算法。</p>\n</li>\n<li><p>2006年，Ristinacce提出CLM(Constrained Local Model)算法。</p>\n</li>\n<li><p>2010年，Rollar提出CPR(Cascaded Pose Regression)算法。<br><a href=\"https://pdollar.github.io/files/papers/DollarCVPR10pose.pdf\" target=\"_blank\" rel=\"noopener\">https://pdollar.github.io/files/papers/DollarCVPR10pose.pdf</a></p>\n</li>\n</ul>\n<ul>\n<li>2012年，ESR(Explicit Shape Regression)</li>\n<li><p>2014年，ERT(Ensemble of Regression Trees)<br>(Face Alignment) One Millisecond Face Alignment with an Ensemble of Regression Trees 笔记 - Lemon&amp;Sprite的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/hit_sirius/article/details/79945211\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hit_sirius/article/details/79945211</a></p>\n</li>\n<li><p>2014年，face alignment in 3000fps， 提取LBF特征和基于cascade的级联的随机森林做全局线性回归。</p>\n</li>\n<li><p>2013年，DCNN，Sun开创深度学习人脸关键点检测的先河，首次将CNN应用到人脸关键点定位上。<br>Deep Convolutional Network Cascade for Facial Point Detection<br><a href=\"https://www.cv-foundation.org/openaccess/content_cvpr_2013/papers/Sun_Deep_Convolutional_Network_2013_CVPR_paper.pdf\" target=\"_blank\" rel=\"noopener\">https://www.cv-foundation.org/openaccess/content_cvpr_2013/papers/Sun_Deep_Convolutional_Network_2013_CVPR_paper.pdf</a></p>\n</li>\n<li><p>2016年，Zhang等人提出一种多任务级联卷积神经网络MTCNN(Multi-task Cascaded Convolutional Networks)用以同时处理人脸检测和人脸关键点定位问题。</p>\n</li>\n<li><p>2017 年，Kowalski 等人提出一种新的级联深度神经网络DAN(Deep Alignment Network)。</p>\n</li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 门禁人脸检测和识别二：人脸关键点检测 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>dlib人脸关键点代码解析 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/56195986\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/56195986</a></li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n\n<ul>\n<li>人脸关键点检测综述 - 知乎<br><a href=\"https://zhuanlan.zhihu.com/p/42968117\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/42968117</a></li>\n</ul>\n<h3 id=\"发展\"><a href=\"#发展\" class=\"headerlink\" title=\"发展\"></a>发展</h3><ul>\n<li>1995年，Cootes提出ASM(Active Shape Model)。<br><a href=\"https://personalpages.manchester.ac.uk/staff/timothy.f.cootes/Papers/cootes_cviu95.pdf\" target=\"_blank\" rel=\"noopener\">https://personalpages.manchester.ac.uk/staff/timothy.f.cootes/Papers/cootes_cviu95.pdf</a></li>\n<li><p>1998年，Cootes提出AAM(Active Appearance Model)算法。</p>\n</li>\n<li><p>2006年，Ristinacce提出CLM(Constrained Local Model)算法。</p>\n</li>\n<li><p>2010年，Rollar提出CPR(Cascaded Pose Regression)算法。<br><a href=\"https://pdollar.github.io/files/papers/DollarCVPR10pose.pdf\" target=\"_blank\" rel=\"noopener\">https://pdollar.github.io/files/papers/DollarCVPR10pose.pdf</a></p>\n</li>\n</ul>\n<ul>\n<li>2012年，ESR(Explicit Shape Regression)</li>\n<li><p>2014年，ERT(Ensemble of Regression Trees)<br>(Face Alignment) One Millisecond Face Alignment with an Ensemble of Regression Trees 笔记 - Lemon&amp;Sprite的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/hit_sirius/article/details/79945211\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hit_sirius/article/details/79945211</a></p>\n</li>\n<li><p>2014年，face alignment in 3000fps， 提取LBF特征和基于cascade的级联的随机森林做全局线性回归。</p>\n</li>\n<li><p>2013年，DCNN，Sun开创深度学习人脸关键点检测的先河，首次将CNN应用到人脸关键点定位上。<br>Deep Convolutional Network Cascade for Facial Point Detection<br><a href=\"https://www.cv-foundation.org/openaccess/content_cvpr_2013/papers/Sun_Deep_Convolutional_Network_2013_CVPR_paper.pdf\" target=\"_blank\" rel=\"noopener\">https://www.cv-foundation.org/openaccess/content_cvpr_2013/papers/Sun_Deep_Convolutional_Network_2013_CVPR_paper.pdf</a></p>\n</li>\n<li><p>2016年，Zhang等人提出一种多任务级联卷积神经网络MTCNN(Multi-task Cascaded Convolutional Networks)用以同时处理人脸检测和人脸关键点定位问题。</p>\n</li>\n<li><p>2017 年，Kowalski 等人提出一种新的级联深度神经网络DAN(Deep Alignment Network)。</p>\n</li>\n</ul>\n</the>"},{"title":"门禁行人检测和识别二：Flask实时视频流服务器","date":"2019-07-27T08:23:33.000Z","_content":"\n\n## 使用Flask构建实时视频流服务器\n\n狗书作者 Miguel 在 [Video Streaming with Flask](https://blog.miguelgrinberg.com/post/video-streaming-with-flask) 中提出了一个简单实用的流媒体服务器，之后在 [Flask Video Streaming Revisited](https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited) 中对其进行了优化。\n\n\n* Video Streaming with Flask - miguelgrinberg.com  \nhttps://blog.miguelgrinberg.com/post/video-streaming-with-flask\n\n* Flask Video Streaming Revisited - miguelgrinberg.com  \nhttps://blog.miguelgrinberg.com/post/flask-video-streaming-revisited\n\n\n\n流是一种让服务器在响应请求时将响应数据分块的技术。\n\nFlask 通过使用 生成器（generator functions） 原生支持流式响应。\n\n\n### 分部响应\n\n让每一个数据块取代页面中的前一块，这样流就能够在浏览器窗口中进行“播放”，以实现在浏览器中运行一个视频播放器的功能。实现原地更新的秘诀在于使用 multipart（分部） 响应。分部响应的内容是一个包含分部内容类型的头部，后面的是用 boundary（分界线） 标记分割的部分，每一部分有各自的特定内容类型。\n\n分部视频流的格式如下：\n``` http\nHTTP/1.1 200 OK\nContent-Type: multipart/x-mixed-replace; boundary=frame\n\n--frame\nContent-Type: image/jpeg\n\n<jpeg data here>\n--frame\nContent-Type: image/jpeg\n\n<jpeg data here>\n...\n```\n\n### 构建一个实时视频流服务器\n\n``` python\n#!/usr/bin/env python\nfrom flask import Flask, render_template, Response\nfrom camera import Camera\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\ndef gen(camera):\n    while True:\n        frame = camera.get_frame()\n        yield (b'--frame\\r\\n'\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\n\n@app.route('/video_feed')\ndef video_feed():\n    return Response(gen(Camera()),\n                    mimetype='multipart/x-mixed-replace; boundary=frame')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)\n```\n\nCamera 类负责提供帧序列。\n\n该应用有两个路由。路由 / 提供定义在 index.html 模版中的主页面。\n\n``` html\n<html>\n  <head>\n    <title>Video Streaming Demonstration</title>\n  </head>\n  <body>\n    <img src=\"{{ url_for('video_feed') }}\">\n  </body>\n</html>\n```\n\n这是个简单的 HTML 页面，只有一个 heading 和一个图片标签。注意图片标签的 src 属性指向的是该应用的第二个路由，而这正是奇妙的地方。\n\n路由 /video_feed 返回的是流式响应。因为流返回的是可以显示在网页中的图片，到该路由的 URL 就放在图片标签的 src 属性中。浏览器会自动显示流中的 JPEG 图片，从而保持图片更新。\n\n在 /video_feed 路由中用到的生成器函数叫做 gen()，它接收 Camera 类的实例作为参数。为了达到让流中的每部分能够替代前一部分的目的，内容类型mimetype 必须为 multipart/x-mixed-replace，边界字符串设置为 frame。\n\ngen() 函数进入循环，从而持续地将摄像头中获取的帧数据作为响应块返回。该函数通过调用 camera.get_frame() 方法从摄像头中获取一帧数据，然后它将这一帧以内容类型为 image/jpeg 的响应块形式产出（yield）。\n\n\n### 流的局限\n\n* 在处理永不结束的、长的流时，比如从摄像机发来的一个视频流，web worker 将会对客户端保持锁定状态，直到客户端断开连接。\n* Flask应用只有一个线程，因此无法打开多个浏览器窗口同时观看视频。\n\n\n### 仅在有观看者时运行相机\n\n记录每次客户端访问视频祯的时间，Camera线程检查时间戳，如果超过十秒则退出，一旦客户端再次连接，线程就会重新启动。\n\n``` python\nclass Camera(object):\n    # ...\n    last_access = 0  # 最后一个客户端访问相机的时间\n \n    def get_frame(self):\n        Camera.last_access = time.time()\n        # ...\n \n    @classmethod\n    def _thread(cls):\n        with picamera.PiCamera() as camera:\n            # ...\n            for foo in camera.capture_continuous(stream, 'jpeg', use_video_port=True):\n                # ...\n                # 如果没有任何客户端访问视屏帧\n                # 10 秒钟之后停止线程\n                if time.time() - cls.last_access > 10:\n                    break\n        cls.thread = None\n```\n\n### 性能优化\n\n后台线程捕获帧与将这些帧回送到客户端的生成器之间需要同步，生成器仅将原始帧传递给客户端。如果生成器内的传送回路比相机线程的帧速率快，则生成器应该等待直到新帧可用，所以它应该自行调整以匹配相机速率；另一方面，如果传送回路以比相机线程更慢的速率运行，那么它在处理帧时永远不应该落后，而应该跳过某些帧以始终传递最新的帧。\n\n解决方案是，当新帧可用时，让相机线程信号通知生成器运行。然后，生成器可以在它们传送下一帧之前等待信号时阻塞。在查看同步单元时，我发现 threading.Event 是匹配此行为的函数。所以，基本上每个生成器都应该有一个事件对象，然后摄像机线程应该发出信号通知所有活动事件对象，以便在新帧可用时通知所有正在运行的生成器。生成器传递帧并重置其事件对象，然后等待它们再次进行下一帧。\n\n为了避免在生成器中添加事件处理逻辑，实现一个自定义事件类，该事件类使用调用者的线程 id 为每个客户端线程自动创建和管理单独的事件。说实话，这有点复杂，但这个想法来自于 Flask 的上下文局部变量是如何实现的。新的事件类称为 CameraEvent，并具有 wait()、set() 和 clear() 方法。在此类的支持下，可以将速率控制机制添加到 BaseCamera 类：\n\n``` python\nclass CameraEvent(object):\n    # ...\n \nclass BaseCamera(object):\n    # ...\n    event = CameraEvent()\n \n    # ...\n \n    def get_frame(self):\n        \"\"\"返回相机的当前帧.\"\"\"\n        BaseCamera.last_access = time.time()\n \n        # wait for a signal from the camera thread\n        BaseCamera.event.wait()\n        BaseCamera.event.clear()\n \n        return BaseCamera.frame\n \n    @classmethod\n    def _thread(cls):\n        # ...\n        for frame in frames_iterator:\n            BaseCamera.frame = frame\n            BaseCamera.event.set()  # send signal to clients\n \n            # ...\n```\n在 CameraEvent 类中完成的魔法操作使多个客户端能够单独等待新的帧。wait() 方法使用当前线程 id 为每个客户端分配单独的事件对象并等待它。clear() 方法将重置与调用者的线程 id 相关联的事件，以便每个生成器线程可以以它自己的速度运行。相机线程调用的 set() 方法向分配给所有客户端的事件对象发送信号，并且还将删除未提供服务的任何事件，因为这意味着与这些事件关联的客户端已关闭，客户端本身也不存在了。\n\n\n\n### 部署Web服务器\n使用比 Flask 附带的服务器更强大的 Web服务器，一个很好的选择是使用 Gunicorn。\n\n``` bash\ngunicorn --threads 5 --workers 1 --bind 0.0.0.0:5000 app:app\n```\n\n\n\n\n\n","source":"_posts/门禁行人检测和识别二：Flask实时视频流服务器.md","raw":"---\ntitle: 门禁行人检测和识别二：Flask实时视频流服务器\ndate: 2019-07-27 16:23:33\ntags:\n  - Flask\n---\n\n\n## 使用Flask构建实时视频流服务器\n\n狗书作者 Miguel 在 [Video Streaming with Flask](https://blog.miguelgrinberg.com/post/video-streaming-with-flask) 中提出了一个简单实用的流媒体服务器，之后在 [Flask Video Streaming Revisited](https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited) 中对其进行了优化。\n\n\n* Video Streaming with Flask - miguelgrinberg.com  \nhttps://blog.miguelgrinberg.com/post/video-streaming-with-flask\n\n* Flask Video Streaming Revisited - miguelgrinberg.com  \nhttps://blog.miguelgrinberg.com/post/flask-video-streaming-revisited\n\n\n\n流是一种让服务器在响应请求时将响应数据分块的技术。\n\nFlask 通过使用 生成器（generator functions） 原生支持流式响应。\n\n\n### 分部响应\n\n让每一个数据块取代页面中的前一块，这样流就能够在浏览器窗口中进行“播放”，以实现在浏览器中运行一个视频播放器的功能。实现原地更新的秘诀在于使用 multipart（分部） 响应。分部响应的内容是一个包含分部内容类型的头部，后面的是用 boundary（分界线） 标记分割的部分，每一部分有各自的特定内容类型。\n\n分部视频流的格式如下：\n``` http\nHTTP/1.1 200 OK\nContent-Type: multipart/x-mixed-replace; boundary=frame\n\n--frame\nContent-Type: image/jpeg\n\n<jpeg data here>\n--frame\nContent-Type: image/jpeg\n\n<jpeg data here>\n...\n```\n\n### 构建一个实时视频流服务器\n\n``` python\n#!/usr/bin/env python\nfrom flask import Flask, render_template, Response\nfrom camera import Camera\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\ndef gen(camera):\n    while True:\n        frame = camera.get_frame()\n        yield (b'--frame\\r\\n'\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\n\n@app.route('/video_feed')\ndef video_feed():\n    return Response(gen(Camera()),\n                    mimetype='multipart/x-mixed-replace; boundary=frame')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)\n```\n\nCamera 类负责提供帧序列。\n\n该应用有两个路由。路由 / 提供定义在 index.html 模版中的主页面。\n\n``` html\n<html>\n  <head>\n    <title>Video Streaming Demonstration</title>\n  </head>\n  <body>\n    <img src=\"{{ url_for('video_feed') }}\">\n  </body>\n</html>\n```\n\n这是个简单的 HTML 页面，只有一个 heading 和一个图片标签。注意图片标签的 src 属性指向的是该应用的第二个路由，而这正是奇妙的地方。\n\n路由 /video_feed 返回的是流式响应。因为流返回的是可以显示在网页中的图片，到该路由的 URL 就放在图片标签的 src 属性中。浏览器会自动显示流中的 JPEG 图片，从而保持图片更新。\n\n在 /video_feed 路由中用到的生成器函数叫做 gen()，它接收 Camera 类的实例作为参数。为了达到让流中的每部分能够替代前一部分的目的，内容类型mimetype 必须为 multipart/x-mixed-replace，边界字符串设置为 frame。\n\ngen() 函数进入循环，从而持续地将摄像头中获取的帧数据作为响应块返回。该函数通过调用 camera.get_frame() 方法从摄像头中获取一帧数据，然后它将这一帧以内容类型为 image/jpeg 的响应块形式产出（yield）。\n\n\n### 流的局限\n\n* 在处理永不结束的、长的流时，比如从摄像机发来的一个视频流，web worker 将会对客户端保持锁定状态，直到客户端断开连接。\n* Flask应用只有一个线程，因此无法打开多个浏览器窗口同时观看视频。\n\n\n### 仅在有观看者时运行相机\n\n记录每次客户端访问视频祯的时间，Camera线程检查时间戳，如果超过十秒则退出，一旦客户端再次连接，线程就会重新启动。\n\n``` python\nclass Camera(object):\n    # ...\n    last_access = 0  # 最后一个客户端访问相机的时间\n \n    def get_frame(self):\n        Camera.last_access = time.time()\n        # ...\n \n    @classmethod\n    def _thread(cls):\n        with picamera.PiCamera() as camera:\n            # ...\n            for foo in camera.capture_continuous(stream, 'jpeg', use_video_port=True):\n                # ...\n                # 如果没有任何客户端访问视屏帧\n                # 10 秒钟之后停止线程\n                if time.time() - cls.last_access > 10:\n                    break\n        cls.thread = None\n```\n\n### 性能优化\n\n后台线程捕获帧与将这些帧回送到客户端的生成器之间需要同步，生成器仅将原始帧传递给客户端。如果生成器内的传送回路比相机线程的帧速率快，则生成器应该等待直到新帧可用，所以它应该自行调整以匹配相机速率；另一方面，如果传送回路以比相机线程更慢的速率运行，那么它在处理帧时永远不应该落后，而应该跳过某些帧以始终传递最新的帧。\n\n解决方案是，当新帧可用时，让相机线程信号通知生成器运行。然后，生成器可以在它们传送下一帧之前等待信号时阻塞。在查看同步单元时，我发现 threading.Event 是匹配此行为的函数。所以，基本上每个生成器都应该有一个事件对象，然后摄像机线程应该发出信号通知所有活动事件对象，以便在新帧可用时通知所有正在运行的生成器。生成器传递帧并重置其事件对象，然后等待它们再次进行下一帧。\n\n为了避免在生成器中添加事件处理逻辑，实现一个自定义事件类，该事件类使用调用者的线程 id 为每个客户端线程自动创建和管理单独的事件。说实话，这有点复杂，但这个想法来自于 Flask 的上下文局部变量是如何实现的。新的事件类称为 CameraEvent，并具有 wait()、set() 和 clear() 方法。在此类的支持下，可以将速率控制机制添加到 BaseCamera 类：\n\n``` python\nclass CameraEvent(object):\n    # ...\n \nclass BaseCamera(object):\n    # ...\n    event = CameraEvent()\n \n    # ...\n \n    def get_frame(self):\n        \"\"\"返回相机的当前帧.\"\"\"\n        BaseCamera.last_access = time.time()\n \n        # wait for a signal from the camera thread\n        BaseCamera.event.wait()\n        BaseCamera.event.clear()\n \n        return BaseCamera.frame\n \n    @classmethod\n    def _thread(cls):\n        # ...\n        for frame in frames_iterator:\n            BaseCamera.frame = frame\n            BaseCamera.event.set()  # send signal to clients\n \n            # ...\n```\n在 CameraEvent 类中完成的魔法操作使多个客户端能够单独等待新的帧。wait() 方法使用当前线程 id 为每个客户端分配单独的事件对象并等待它。clear() 方法将重置与调用者的线程 id 相关联的事件，以便每个生成器线程可以以它自己的速度运行。相机线程调用的 set() 方法向分配给所有客户端的事件对象发送信号，并且还将删除未提供服务的任何事件，因为这意味着与这些事件关联的客户端已关闭，客户端本身也不存在了。\n\n\n\n### 部署Web服务器\n使用比 Flask 附带的服务器更强大的 Web服务器，一个很好的选择是使用 Gunicorn。\n\n``` bash\ngunicorn --threads 5 --workers 1 --bind 0.0.0.0:5000 app:app\n```\n\n\n\n\n\n","slug":"门禁行人检测和识别二：Flask实时视频流服务器","published":1,"updated":"2020-01-05T19:13:25.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509m005a4cvjl5jarank","content":"<h2 id=\"使用Flask构建实时视频流服务器\"><a href=\"#使用Flask构建实时视频流服务器\" class=\"headerlink\" title=\"使用Flask构建实时视频流服务器\"></a>使用Flask构建实时视频流服务器</h2><p>狗书作者 Miguel 在 <a href=\"https://blog.miguelgrinberg.com/post/video-streaming-with-flask\" target=\"_blank\" rel=\"noopener\">Video Streaming with Flask</a> 中提出了一个简单实用的流媒体服务器，之后在 <a href=\"https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited\" target=\"_blank\" rel=\"noopener\">Flask Video Streaming Revisited</a> 中对其进行了优化。</p>\n<ul>\n<li><p>Video Streaming with Flask - miguelgrinberg.com<br><a href=\"https://blog.miguelgrinberg.com/post/video-streaming-with-flask\" target=\"_blank\" rel=\"noopener\">https://blog.miguelgrinberg.com/post/video-streaming-with-flask</a></p>\n</li>\n<li><p>Flask Video Streaming Revisited - miguelgrinberg.com<br><a href=\"https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited\" target=\"_blank\" rel=\"noopener\">https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited</a></p>\n</li>\n</ul>\n<p>流是一种让服务器在响应请求时将响应数据分块的技术。</p>\n<p>Flask 通过使用 生成器（generator functions） 原生支持流式响应。</p>\n<h3 id=\"分部响应\"><a href=\"#分部响应\" class=\"headerlink\" title=\"分部响应\"></a>分部响应</h3><p>让每一个数据块取代页面中的前一块，这样流就能够在浏览器窗口中进行“播放”，以实现在浏览器中运行一个视频播放器的功能。实现原地更新的秘诀在于使用 multipart（分部） 响应。分部响应的内容是一个包含分部内容类型的头部，后面的是用 boundary（分界线） 标记分割的部分，每一部分有各自的特定内容类型。</p>\n<p>分部视频流的格式如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: multipart/x-mixed-replace; boundary=frame</span><br><span class=\"line\"></span><br><span class=\"line\">--frame</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: image/jpeg</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;jpeg data here&gt;</span><br><span class=\"line\">--frame</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: image/jpeg</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;jpeg data here&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"构建一个实时视频流服务器\"><a href=\"#构建一个实时视频流服务器\" class=\"headerlink\" title=\"构建一个实时视频流服务器\"></a>构建一个实时视频流服务器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> camera <span class=\"keyword\">import</span> Camera</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen</span><span class=\"params\">(camera)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        frame = camera.get_frame()</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> (<span class=\"string\">b'--frame\\r\\n'</span></span><br><span class=\"line\">               <span class=\"string\">b'Content-Type: image/jpeg\\r\\n\\r\\n'</span> + frame + <span class=\"string\">b'\\r\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/video_feed')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">video_feed</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(gen(Camera()),</span><br><span class=\"line\">                    mimetype=<span class=\"string\">'multipart/x-mixed-replace; boundary=frame'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>Camera 类负责提供帧序列。</p>\n<p>该应用有两个路由。路由 / 提供定义在 index.html 模版中的主页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Video Streaming Demonstration<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for('video_feed') &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是个简单的 HTML 页面，只有一个 heading 和一个图片标签。注意图片标签的 src 属性指向的是该应用的第二个路由，而这正是奇妙的地方。</p>\n<p>路由 /video_feed 返回的是流式响应。因为流返回的是可以显示在网页中的图片，到该路由的 URL 就放在图片标签的 src 属性中。浏览器会自动显示流中的 JPEG 图片，从而保持图片更新。</p>\n<p>在 /video_feed 路由中用到的生成器函数叫做 gen()，它接收 Camera 类的实例作为参数。为了达到让流中的每部分能够替代前一部分的目的，内容类型mimetype 必须为 multipart/x-mixed-replace，边界字符串设置为 frame。</p>\n<p>gen() 函数进入循环，从而持续地将摄像头中获取的帧数据作为响应块返回。该函数通过调用 camera.get_frame() 方法从摄像头中获取一帧数据，然后它将这一帧以内容类型为 image/jpeg 的响应块形式产出（yield）。</p>\n<h3 id=\"流的局限\"><a href=\"#流的局限\" class=\"headerlink\" title=\"流的局限\"></a>流的局限</h3><ul>\n<li>在处理永不结束的、长的流时，比如从摄像机发来的一个视频流，web worker 将会对客户端保持锁定状态，直到客户端断开连接。</li>\n<li>Flask应用只有一个线程，因此无法打开多个浏览器窗口同时观看视频。</li>\n</ul>\n<h3 id=\"仅在有观看者时运行相机\"><a href=\"#仅在有观看者时运行相机\" class=\"headerlink\" title=\"仅在有观看者时运行相机\"></a>仅在有观看者时运行相机</h3><p>记录每次客户端访问视频祯的时间，Camera线程检查时间戳，如果超过十秒则退出，一旦客户端再次连接，线程就会重新启动。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Camera</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    last_access = <span class=\"number\">0</span>  <span class=\"comment\"># 最后一个客户端访问相机的时间</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_frame</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        Camera.last_access = time.time()</span><br><span class=\"line\">        <span class=\"comment\"># ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_thread</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> picamera.PiCamera() <span class=\"keyword\">as</span> camera:</span><br><span class=\"line\">            <span class=\"comment\"># ...</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> foo <span class=\"keyword\">in</span> camera.capture_continuous(stream, <span class=\"string\">'jpeg'</span>, use_video_port=<span class=\"literal\">True</span>):</span><br><span class=\"line\">                <span class=\"comment\"># ...</span></span><br><span class=\"line\">                <span class=\"comment\"># 如果没有任何客户端访问视屏帧</span></span><br><span class=\"line\">                <span class=\"comment\"># 10 秒钟之后停止线程</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> time.time() - cls.last_access &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">        cls.thread = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>后台线程捕获帧与将这些帧回送到客户端的生成器之间需要同步，生成器仅将原始帧传递给客户端。如果生成器内的传送回路比相机线程的帧速率快，则生成器应该等待直到新帧可用，所以它应该自行调整以匹配相机速率；另一方面，如果传送回路以比相机线程更慢的速率运行，那么它在处理帧时永远不应该落后，而应该跳过某些帧以始终传递最新的帧。</p>\n<p>解决方案是，当新帧可用时，让相机线程信号通知生成器运行。然后，生成器可以在它们传送下一帧之前等待信号时阻塞。在查看同步单元时，我发现 threading.Event 是匹配此行为的函数。所以，基本上每个生成器都应该有一个事件对象，然后摄像机线程应该发出信号通知所有活动事件对象，以便在新帧可用时通知所有正在运行的生成器。生成器传递帧并重置其事件对象，然后等待它们再次进行下一帧。</p>\n<p>为了避免在生成器中添加事件处理逻辑，实现一个自定义事件类，该事件类使用调用者的线程 id 为每个客户端线程自动创建和管理单独的事件。说实话，这有点复杂，但这个想法来自于 Flask 的上下文局部变量是如何实现的。新的事件类称为 CameraEvent，并具有 wait()、set() 和 clear() 方法。在此类的支持下，可以将速率控制机制添加到 BaseCamera 类：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CameraEvent</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseCamera</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    event = CameraEvent()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_frame</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回相机的当前帧.\"\"\"</span></span><br><span class=\"line\">        BaseCamera.last_access = time.time()</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># wait for a signal from the camera thread</span></span><br><span class=\"line\">        BaseCamera.event.wait()</span><br><span class=\"line\">        BaseCamera.event.clear()</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> BaseCamera.frame</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_thread</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># ...</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> frame <span class=\"keyword\">in</span> frames_iterator:</span><br><span class=\"line\">            BaseCamera.frame = frame</span><br><span class=\"line\">            BaseCamera.event.set()  <span class=\"comment\"># send signal to clients</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n<p>在 CameraEvent 类中完成的魔法操作使多个客户端能够单独等待新的帧。wait() 方法使用当前线程 id 为每个客户端分配单独的事件对象并等待它。clear() 方法将重置与调用者的线程 id 相关联的事件，以便每个生成器线程可以以它自己的速度运行。相机线程调用的 set() 方法向分配给所有客户端的事件对象发送信号，并且还将删除未提供服务的任何事件，因为这意味着与这些事件关联的客户端已关闭，客户端本身也不存在了。</p>\n<h3 id=\"部署Web服务器\"><a href=\"#部署Web服务器\" class=\"headerlink\" title=\"部署Web服务器\"></a>部署Web服务器</h3><p>使用比 Flask 附带的服务器更强大的 Web服务器，一个很好的选择是使用 Gunicorn。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn --threads 5 --workers 1 --<span class=\"built_in\">bind</span> 0.0.0.0:5000 app:app</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用Flask构建实时视频流服务器\"><a href=\"#使用Flask构建实时视频流服务器\" class=\"headerlink\" title=\"使用Flask构建实时视频流服务器\"></a>使用Flask构建实时视频流服务器</h2><p>狗书作者 Miguel 在 <a href=\"https://blog.miguelgrinberg.com/post/video-streaming-with-flask\" target=\"_blank\" rel=\"noopener\">Video Streaming with Flask</a> 中提出了一个简单实用的流媒体服务器，之后在 <a href=\"https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited\" target=\"_blank\" rel=\"noopener\">Flask Video Streaming Revisited</a> 中对其进行了优化。</p>\n<ul>\n<li><p>Video Streaming with Flask - miguelgrinberg.com<br><a href=\"https://blog.miguelgrinberg.com/post/video-streaming-with-flask\" target=\"_blank\" rel=\"noopener\">https://blog.miguelgrinberg.com/post/video-streaming-with-flask</a></p>\n</li>\n<li><p>Flask Video Streaming Revisited - miguelgrinberg.com<br><a href=\"https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited\" target=\"_blank\" rel=\"noopener\">https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited</a></p>\n</li>\n</ul>\n<p>流是一种让服务器在响应请求时将响应数据分块的技术。</p>\n<p>Flask 通过使用 生成器（generator functions） 原生支持流式响应。</p>\n<h3 id=\"分部响应\"><a href=\"#分部响应\" class=\"headerlink\" title=\"分部响应\"></a>分部响应</h3><p>让每一个数据块取代页面中的前一块，这样流就能够在浏览器窗口中进行“播放”，以实现在浏览器中运行一个视频播放器的功能。实现原地更新的秘诀在于使用 multipart（分部） 响应。分部响应的内容是一个包含分部内容类型的头部，后面的是用 boundary（分界线） 标记分割的部分，每一部分有各自的特定内容类型。</p>\n<p>分部视频流的格式如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: multipart/x-mixed-replace; boundary=frame</span><br><span class=\"line\"></span><br><span class=\"line\">--frame</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: image/jpeg</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;jpeg data here&gt;</span><br><span class=\"line\">--frame</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: image/jpeg</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;jpeg data here&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"构建一个实时视频流服务器\"><a href=\"#构建一个实时视频流服务器\" class=\"headerlink\" title=\"构建一个实时视频流服务器\"></a>构建一个实时视频流服务器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> camera <span class=\"keyword\">import</span> Camera</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen</span><span class=\"params\">(camera)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        frame = camera.get_frame()</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> (<span class=\"string\">b'--frame\\r\\n'</span></span><br><span class=\"line\">               <span class=\"string\">b'Content-Type: image/jpeg\\r\\n\\r\\n'</span> + frame + <span class=\"string\">b'\\r\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/video_feed')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">video_feed</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(gen(Camera()),</span><br><span class=\"line\">                    mimetype=<span class=\"string\">'multipart/x-mixed-replace; boundary=frame'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>Camera 类负责提供帧序列。</p>\n<p>该应用有两个路由。路由 / 提供定义在 index.html 模版中的主页面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Video Streaming Demonstration<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for('video_feed') &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是个简单的 HTML 页面，只有一个 heading 和一个图片标签。注意图片标签的 src 属性指向的是该应用的第二个路由，而这正是奇妙的地方。</p>\n<p>路由 /video_feed 返回的是流式响应。因为流返回的是可以显示在网页中的图片，到该路由的 URL 就放在图片标签的 src 属性中。浏览器会自动显示流中的 JPEG 图片，从而保持图片更新。</p>\n<p>在 /video_feed 路由中用到的生成器函数叫做 gen()，它接收 Camera 类的实例作为参数。为了达到让流中的每部分能够替代前一部分的目的，内容类型mimetype 必须为 multipart/x-mixed-replace，边界字符串设置为 frame。</p>\n<p>gen() 函数进入循环，从而持续地将摄像头中获取的帧数据作为响应块返回。该函数通过调用 camera.get_frame() 方法从摄像头中获取一帧数据，然后它将这一帧以内容类型为 image/jpeg 的响应块形式产出（yield）。</p>\n<h3 id=\"流的局限\"><a href=\"#流的局限\" class=\"headerlink\" title=\"流的局限\"></a>流的局限</h3><ul>\n<li>在处理永不结束的、长的流时，比如从摄像机发来的一个视频流，web worker 将会对客户端保持锁定状态，直到客户端断开连接。</li>\n<li>Flask应用只有一个线程，因此无法打开多个浏览器窗口同时观看视频。</li>\n</ul>\n<h3 id=\"仅在有观看者时运行相机\"><a href=\"#仅在有观看者时运行相机\" class=\"headerlink\" title=\"仅在有观看者时运行相机\"></a>仅在有观看者时运行相机</h3><p>记录每次客户端访问视频祯的时间，Camera线程检查时间戳，如果超过十秒则退出，一旦客户端再次连接，线程就会重新启动。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Camera</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    last_access = <span class=\"number\">0</span>  <span class=\"comment\"># 最后一个客户端访问相机的时间</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_frame</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        Camera.last_access = time.time()</span><br><span class=\"line\">        <span class=\"comment\"># ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_thread</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> picamera.PiCamera() <span class=\"keyword\">as</span> camera:</span><br><span class=\"line\">            <span class=\"comment\"># ...</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> foo <span class=\"keyword\">in</span> camera.capture_continuous(stream, <span class=\"string\">'jpeg'</span>, use_video_port=<span class=\"literal\">True</span>):</span><br><span class=\"line\">                <span class=\"comment\"># ...</span></span><br><span class=\"line\">                <span class=\"comment\"># 如果没有任何客户端访问视屏帧</span></span><br><span class=\"line\">                <span class=\"comment\"># 10 秒钟之后停止线程</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> time.time() - cls.last_access &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">        cls.thread = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>后台线程捕获帧与将这些帧回送到客户端的生成器之间需要同步，生成器仅将原始帧传递给客户端。如果生成器内的传送回路比相机线程的帧速率快，则生成器应该等待直到新帧可用，所以它应该自行调整以匹配相机速率；另一方面，如果传送回路以比相机线程更慢的速率运行，那么它在处理帧时永远不应该落后，而应该跳过某些帧以始终传递最新的帧。</p>\n<p>解决方案是，当新帧可用时，让相机线程信号通知生成器运行。然后，生成器可以在它们传送下一帧之前等待信号时阻塞。在查看同步单元时，我发现 threading.Event 是匹配此行为的函数。所以，基本上每个生成器都应该有一个事件对象，然后摄像机线程应该发出信号通知所有活动事件对象，以便在新帧可用时通知所有正在运行的生成器。生成器传递帧并重置其事件对象，然后等待它们再次进行下一帧。</p>\n<p>为了避免在生成器中添加事件处理逻辑，实现一个自定义事件类，该事件类使用调用者的线程 id 为每个客户端线程自动创建和管理单独的事件。说实话，这有点复杂，但这个想法来自于 Flask 的上下文局部变量是如何实现的。新的事件类称为 CameraEvent，并具有 wait()、set() 和 clear() 方法。在此类的支持下，可以将速率控制机制添加到 BaseCamera 类：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CameraEvent</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseCamera</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    event = CameraEvent()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_frame</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回相机的当前帧.\"\"\"</span></span><br><span class=\"line\">        BaseCamera.last_access = time.time()</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># wait for a signal from the camera thread</span></span><br><span class=\"line\">        BaseCamera.event.wait()</span><br><span class=\"line\">        BaseCamera.event.clear()</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> BaseCamera.frame</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_thread</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># ...</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> frame <span class=\"keyword\">in</span> frames_iterator:</span><br><span class=\"line\">            BaseCamera.frame = frame</span><br><span class=\"line\">            BaseCamera.event.set()  <span class=\"comment\"># send signal to clients</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n<p>在 CameraEvent 类中完成的魔法操作使多个客户端能够单独等待新的帧。wait() 方法使用当前线程 id 为每个客户端分配单独的事件对象并等待它。clear() 方法将重置与调用者的线程 id 相关联的事件，以便每个生成器线程可以以它自己的速度运行。相机线程调用的 set() 方法向分配给所有客户端的事件对象发送信号，并且还将删除未提供服务的任何事件，因为这意味着与这些事件关联的客户端已关闭，客户端本身也不存在了。</p>\n<h3 id=\"部署Web服务器\"><a href=\"#部署Web服务器\" class=\"headerlink\" title=\"部署Web服务器\"></a>部署Web服务器</h3><p>使用比 Flask 附带的服务器更强大的 Web服务器，一个很好的选择是使用 Gunicorn。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn --threads 5 --workers 1 --<span class=\"built_in\">bind</span> 0.0.0.0:5000 app:app</span><br></pre></td></tr></table></figure>\n"},{"title":"门禁人脸检测和识别四：keras人脸表情分类","date":"2019-07-11T02:23:58.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n* Keras:基于Python的深度学习库 - Keras中文文档  \nhttps://keras-cn.readthedocs.io/en/latest/\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 人脸表情分类模型\n\n``` python\n#载入keras分类模型\nclassifier = load_model('./simple_CNN.985-0.66.hdf5')\n#对图像进行分类预测\nprediction = classifier.predict(ing_gray) \n```\n\n\n### 模型结构的可视化\n\n安装库\n``` bash\npip install pydot\npip install pydot_ng\n```\n\nwindows下，下载安装graphviz，并配置环境变量  \n* Download  \nhttp://www.graphviz.org/download/\n将graphviz安装目录下的bin文件夹添加到Path环境变量中\n\n解决“`pydot` failed to call GraphViz.”问题\n查看pydot源码 \n``` python\n>>> import pydot\n>>> pydot.__version__\n'1.4.1'\n>>> pydot.__file__\n'J:\\\\Anaconda3\\\\envs\\\\env\\\\lib\\\\site-packages\\\\pydot.py'\n```\n修改pydot.py源码如下\n``` python\n\ndef get_executable_extension():\n    # type: () -> str\n    if is_windows():\n        # return '.bat' if is_anacoda() else '.exe'\n        return '.exe'\n    else:\n        return ''\n```\n\n生成模型结构的图片\n``` python \nfrom keras.utils.vis_utils import plot_model\nmodel = load_model(\".\\simple_CNN.530-0.65.hdf5\")\nplot_model(model, to_file='model.png',show_shapes=True)\n```\n\n模型结构\n<img src=\"门禁人脸检测和识别四：keras人脸表情分类\\model.png\">","source":"_posts/门禁人脸检测和识别四：keras人脸表情分类.md","raw":"---\ntitle: 门禁人脸检测和识别四：keras人脸表情分类\ndate: 2019-07-11 10:23:58\ntags:\n  - keras\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n* Keras:基于Python的深度学习库 - Keras中文文档  \nhttps://keras-cn.readthedocs.io/en/latest/\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 人脸表情分类模型\n\n``` python\n#载入keras分类模型\nclassifier = load_model('./simple_CNN.985-0.66.hdf5')\n#对图像进行分类预测\nprediction = classifier.predict(ing_gray) \n```\n\n\n### 模型结构的可视化\n\n安装库\n``` bash\npip install pydot\npip install pydot_ng\n```\n\nwindows下，下载安装graphviz，并配置环境变量  \n* Download  \nhttp://www.graphviz.org/download/\n将graphviz安装目录下的bin文件夹添加到Path环境变量中\n\n解决“`pydot` failed to call GraphViz.”问题\n查看pydot源码 \n``` python\n>>> import pydot\n>>> pydot.__version__\n'1.4.1'\n>>> pydot.__file__\n'J:\\\\Anaconda3\\\\envs\\\\env\\\\lib\\\\site-packages\\\\pydot.py'\n```\n修改pydot.py源码如下\n``` python\n\ndef get_executable_extension():\n    # type: () -> str\n    if is_windows():\n        # return '.bat' if is_anacoda() else '.exe'\n        return '.exe'\n    else:\n        return ''\n```\n\n生成模型结构的图片\n``` python \nfrom keras.utils.vis_utils import plot_model\nmodel = load_model(\".\\simple_CNN.530-0.65.hdf5\")\nplot_model(model, to_file='model.png',show_shapes=True)\n```\n\n模型结构\n<img src=\"门禁人脸检测和识别四：keras人脸表情分类\\model.png\">","slug":"门禁人脸检测和识别四：keras人脸表情分类","published":1,"updated":"2020-01-05T19:13:25.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509n005c4cvja6w4t4to","content":"<p><strong> 门禁人脸检测和识别四：keras人脸表情分类 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>Keras:基于Python的深度学习库 - Keras中文文档<br><a href=\"https://keras-cn.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://keras-cn.readthedocs.io/en/latest/</a><a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n</the></li>\n</ul>\n<h3 id=\"人脸表情分类模型\"><a href=\"#人脸表情分类模型\" class=\"headerlink\" title=\"人脸表情分类模型\"></a>人脸表情分类模型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#载入keras分类模型</span></span><br><span class=\"line\">classifier = load_model(<span class=\"string\">'./simple_CNN.985-0.66.hdf5'</span>)</span><br><span class=\"line\"><span class=\"comment\">#对图像进行分类预测</span></span><br><span class=\"line\">prediction = classifier.predict(ing_gray)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型结构的可视化\"><a href=\"#模型结构的可视化\" class=\"headerlink\" title=\"模型结构的可视化\"></a>模型结构的可视化</h3><p>安装库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pydot</span><br><span class=\"line\">pip install pydot_ng</span><br></pre></td></tr></table></figure></p>\n<p>windows下，下载安装graphviz，并配置环境变量  </p>\n<ul>\n<li>Download<br><a href=\"http://www.graphviz.org/download/\" target=\"_blank\" rel=\"noopener\">http://www.graphviz.org/download/</a><br>将graphviz安装目录下的bin文件夹添加到Path环境变量中</li>\n</ul>\n<p>解决“<code>pydot</code> failed to call GraphViz.”问题<br>查看pydot源码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> pydot</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pydot.__version__</span><br><span class=\"line\"><span class=\"string\">'1.4.1'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pydot.__file__</span><br><span class=\"line\"><span class=\"string\">'J:\\\\Anaconda3\\\\envs\\\\env\\\\lib\\\\site-packages\\\\pydot.py'</span></span><br></pre></td></tr></table></figure></p>\n<p>修改pydot.py源码如下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_executable_extension</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># type: () -&gt; str</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_windows():</span><br><span class=\"line\">        <span class=\"comment\"># return '.bat' if is_anacoda() else '.exe'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'.exe'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br></pre></td></tr></table></figure></p>\n<p>生成模型结构的图片<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> keras.utils.vis_utils <span class=\"keyword\">import</span> plot_model</span><br><span class=\"line\">model = load_model(<span class=\"string\">\".\\simple_CNN.530-0.65.hdf5\"</span>)</span><br><span class=\"line\">plot_model(model, to_file=<span class=\"string\">'model.png'</span>,show_shapes=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>模型结构<br><img src=\"/2019/07/11/门禁人脸检测和识别四：keras人脸表情分类/model.png\"></p>\n","site":{"data":{}},"excerpt":"<p><strong> 门禁人脸检测和识别四：keras人脸表情分类 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<ul>\n<li>Keras:基于Python的深度学习库 - Keras中文文档<br><a href=\"https://keras-cn.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://keras-cn.readthedocs.io/en/latest/</a></li></ul>","more":"<the rest of contents | 余下全文>\n\n</the>\n\n<h3 id=\"人脸表情分类模型\"><a href=\"#人脸表情分类模型\" class=\"headerlink\" title=\"人脸表情分类模型\"></a>人脸表情分类模型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#载入keras分类模型</span></span><br><span class=\"line\">classifier = load_model(<span class=\"string\">'./simple_CNN.985-0.66.hdf5'</span>)</span><br><span class=\"line\"><span class=\"comment\">#对图像进行分类预测</span></span><br><span class=\"line\">prediction = classifier.predict(ing_gray)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型结构的可视化\"><a href=\"#模型结构的可视化\" class=\"headerlink\" title=\"模型结构的可视化\"></a>模型结构的可视化</h3><p>安装库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pydot</span><br><span class=\"line\">pip install pydot_ng</span><br></pre></td></tr></table></figure></p>\n<p>windows下，下载安装graphviz，并配置环境变量  </p>\n<ul>\n<li>Download<br><a href=\"http://www.graphviz.org/download/\" target=\"_blank\" rel=\"noopener\">http://www.graphviz.org/download/</a><br>将graphviz安装目录下的bin文件夹添加到Path环境变量中</li>\n</ul>\n<p>解决“<code>pydot</code> failed to call GraphViz.”问题<br>查看pydot源码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> pydot</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pydot.__version__</span><br><span class=\"line\"><span class=\"string\">'1.4.1'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pydot.__file__</span><br><span class=\"line\"><span class=\"string\">'J:\\\\Anaconda3\\\\envs\\\\env\\\\lib\\\\site-packages\\\\pydot.py'</span></span><br></pre></td></tr></table></figure></p>\n<p>修改pydot.py源码如下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_executable_extension</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># type: () -&gt; str</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_windows():</span><br><span class=\"line\">        <span class=\"comment\"># return '.bat' if is_anacoda() else '.exe'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'.exe'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br></pre></td></tr></table></figure></p>\n<p>生成模型结构的图片<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> keras.utils.vis_utils <span class=\"keyword\">import</span> plot_model</span><br><span class=\"line\">model = load_model(<span class=\"string\">\".\\simple_CNN.530-0.65.hdf5\"</span>)</span><br><span class=\"line\">plot_model(model, to_file=<span class=\"string\">'model.png'</span>,show_shapes=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>模型结构<br><img src=\"/2019/07/11/门禁人脸检测和识别四：keras人脸表情分类/model.png\"></p>"},{"title":"门禁行人检测和识别五：ipv6环境下的docker部署","date":"2019-09-16T11:33:22.000Z","_content":"\n话说项目参加ipv6比赛时，要在ipv6环境下部署进行检验  \n负责网页的A:我写好了一个框架     \n负责功能的B:我写好了一个函数  \n负责环境的C:我写好了一个参数  \n\n``` python\nif __name__ == \"__main__\":\n    ''' ipv4 '''\n    # app.run(host=\"0.0.0.0\", port=80, debug=True)\n    ''' ipv6 '''\n    app.run(host=\"::\", port=80, debug=True) \n```\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## docker\n\n### Docker CE 的安装\n\n移除环境中的旧版本docker\n``` shell\nsudo apt-get remove docker docker-engin docker.io\n```\n\n安装 Docker CE 必要依赖  \n由于APT源使用HTTPS确保软件在下载过程中不被篡改.我们首先安装HTTPS传输软件包以及CA证书\n``` shell\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n由于国内网络问题，使用国内的GPG密钥\n\n``` shell\ncurl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add\n```\n\n在APT源中添加Docker软件的源，并添加稳定版本的docker CE APT镜像源\n``` shell\nsudo add-apt-repository \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n\n安装 Docker CE\n\n更新apt软件包的缓存并安装docker-ce\n``` shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n验证  \n使用下面的命令查看Docker的版本\n``` shell\n$ docker -v\n```\n然后使用下面的命令可以运行hello-world程序，因为Docker中还没有hello-world程序的镜像，所以会先pull（下载）下来然后运行。\n``` shell\n$ sudo docker run hello-world\n```\n如果看到打印 Hello for Docker!说明程序已经运行成功了。\n\n### Docker 的使用\n\n可以使用下面的命令对Docker进行启动、关闭、重启等操作。\n``` shell\n# 开启 Docker\n$ sudo service docker start\n\n# 关闭 Docker\n$ sudo service docker stop\n\n# 重启 Docker\n$ sudo service docker restart\n```\n\n\nDocker 需要把应用程序及其相关的依赖打包成为一个image镜像文件，这些镜像文件可以存储在云端的存储库中，用户可以将云端的镜像文件下载到本地，然后通过这个文件，生成Docker容器的实例。\n\n所以当你将你的应用程序及其依赖打包成一个image文件之后，可以将其上传到云端的仓库中，然后在任何一个装有Docker的机器中运行即可，这就是一次配置，到处运行，可以说是非常之方便了。\n\n``` shell\n# 查看本地 image\n$ sudo docker image ls\n\n# 下载 image\n$ sudo docker pull hello-world\n\n# 运行 image\n$ sudo docker run hello-world\n# 如果看到打印 Hello for Docker!说明hello-world程序已经运行成功了。\n\n# 删除 image\n$ sudo docker image rm -f hello-world\n```\n\n\n\n","source":"_posts/门禁行人检测和识别五：ipv6环境下的docker部署.md","raw":"---\ntitle: 门禁行人检测和识别五：ipv6环境下的docker部署\ndate: 2019-09-16 19:33:22\ntags:\n  - docker\n---\n\n话说项目参加ipv6比赛时，要在ipv6环境下部署进行检验  \n负责网页的A:我写好了一个框架     \n负责功能的B:我写好了一个函数  \n负责环境的C:我写好了一个参数  \n\n``` python\nif __name__ == \"__main__\":\n    ''' ipv4 '''\n    # app.run(host=\"0.0.0.0\", port=80, debug=True)\n    ''' ipv6 '''\n    app.run(host=\"::\", port=80, debug=True) \n```\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## docker\n\n### Docker CE 的安装\n\n移除环境中的旧版本docker\n``` shell\nsudo apt-get remove docker docker-engin docker.io\n```\n\n安装 Docker CE 必要依赖  \n由于APT源使用HTTPS确保软件在下载过程中不被篡改.我们首先安装HTTPS传输软件包以及CA证书\n``` shell\nsudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n由于国内网络问题，使用国内的GPG密钥\n\n``` shell\ncurl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add\n```\n\n在APT源中添加Docker软件的源，并添加稳定版本的docker CE APT镜像源\n``` shell\nsudo add-apt-repository \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n\n安装 Docker CE\n\n更新apt软件包的缓存并安装docker-ce\n``` shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n验证  \n使用下面的命令查看Docker的版本\n``` shell\n$ docker -v\n```\n然后使用下面的命令可以运行hello-world程序，因为Docker中还没有hello-world程序的镜像，所以会先pull（下载）下来然后运行。\n``` shell\n$ sudo docker run hello-world\n```\n如果看到打印 Hello for Docker!说明程序已经运行成功了。\n\n### Docker 的使用\n\n可以使用下面的命令对Docker进行启动、关闭、重启等操作。\n``` shell\n# 开启 Docker\n$ sudo service docker start\n\n# 关闭 Docker\n$ sudo service docker stop\n\n# 重启 Docker\n$ sudo service docker restart\n```\n\n\nDocker 需要把应用程序及其相关的依赖打包成为一个image镜像文件，这些镜像文件可以存储在云端的存储库中，用户可以将云端的镜像文件下载到本地，然后通过这个文件，生成Docker容器的实例。\n\n所以当你将你的应用程序及其依赖打包成一个image文件之后，可以将其上传到云端的仓库中，然后在任何一个装有Docker的机器中运行即可，这就是一次配置，到处运行，可以说是非常之方便了。\n\n``` shell\n# 查看本地 image\n$ sudo docker image ls\n\n# 下载 image\n$ sudo docker pull hello-world\n\n# 运行 image\n$ sudo docker run hello-world\n# 如果看到打印 Hello for Docker!说明hello-world程序已经运行成功了。\n\n# 删除 image\n$ sudo docker image rm -f hello-world\n```\n\n\n\n","slug":"门禁行人检测和识别五：ipv6环境下的docker部署","published":1,"updated":"2020-01-05T19:13:25.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509p005f4cvji0t7bvin","content":"<p>话说项目参加ipv6比赛时，要在ipv6环境下部署进行检验<br>负责网页的A:我写好了一个框架<br>负责功能的B:我写好了一个函数<br>负责环境的C:我写好了一个参数  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"string\">''' ipv4 '''</span></span><br><span class=\"line\">    <span class=\"comment\"># app.run(host=\"0.0.0.0\", port=80, debug=True)</span></span><br><span class=\"line\">    <span class=\"string\">''' ipv6 '''</span></span><br><span class=\"line\">    app.run(host=<span class=\"string\">\"::\"</span>, port=<span class=\"number\">80</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><h3 id=\"Docker-CE-的安装\"><a href=\"#Docker-CE-的安装\" class=\"headerlink\" title=\"Docker CE 的安装\"></a>Docker CE 的安装</h3><p>移除环境中的旧版本docker<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engin docker.io</span><br></pre></td></tr></table></figure></p>\n<p>安装 Docker CE 必要依赖<br>由于APT源使用HTTPS确保软件在下载过程中不被篡改.我们首先安装HTTPS传输软件包以及CA证书<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></p>\n<p>由于国内网络问题，使用国内的GPG密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add</span><br></pre></td></tr></table></figure>\n<p>在APT源中添加Docker软件的源，并添加稳定版本的docker CE APT镜像源<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"</span><br></pre></td></tr></table></figure></p>\n<p>安装 Docker CE</p>\n<p>更新apt软件包的缓存并安装docker-ce<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure></p>\n<p>验证<br>使用下面的命令查看Docker的版本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker -v</span></span><br></pre></td></tr></table></figure></p>\n<p>然后使用下面的命令可以运行hello-world程序，因为Docker中还没有hello-world程序的镜像，所以会先pull（下载）下来然后运行。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure></p>\n<p>如果看到打印 Hello for Docker!说明程序已经运行成功了。</p>\n<h3 id=\"Docker-的使用\"><a href=\"#Docker-的使用\" class=\"headerlink\" title=\"Docker 的使用\"></a>Docker 的使用</h3><p>可以使用下面的命令对Docker进行启动、关闭、重启等操作。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开启 Docker</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service docker start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭 Docker</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service docker stop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启 Docker</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service docker restart</span></span><br></pre></td></tr></table></figure></p>\n<p>Docker 需要把应用程序及其相关的依赖打包成为一个image镜像文件，这些镜像文件可以存储在云端的存储库中，用户可以将云端的镜像文件下载到本地，然后通过这个文件，生成Docker容器的实例。</p>\n<p>所以当你将你的应用程序及其依赖打包成一个image文件之后，可以将其上传到云端的仓库中，然后在任何一个装有Docker的机器中运行即可，这就是一次配置，到处运行，可以说是非常之方便了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看本地 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker image ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker pull hello-world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果看到打印 Hello <span class=\"keyword\">for</span> Docker!说明hello-world程序已经运行成功了。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker image rm -f hello-world</span></span><br></pre></td></tr></table></figure>\n</the>","site":{"data":{}},"excerpt":"<p>话说项目参加ipv6比赛时，要在ipv6环境下部署进行检验<br>负责网页的A:我写好了一个框架<br>负责功能的B:我写好了一个函数<br>负责环境的C:我写好了一个参数  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"string\">''' ipv4 '''</span></span><br><span class=\"line\">    <span class=\"comment\"># app.run(host=\"0.0.0.0\", port=80, debug=True)</span></span><br><span class=\"line\">    <span class=\"string\">''' ipv6 '''</span></span><br><span class=\"line\">    app.run(host=<span class=\"string\">\"::\"</span>, port=<span class=\"number\">80</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><h3 id=\"Docker-CE-的安装\"><a href=\"#Docker-CE-的安装\" class=\"headerlink\" title=\"Docker CE 的安装\"></a>Docker CE 的安装</h3><p>移除环境中的旧版本docker<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engin docker.io</span><br></pre></td></tr></table></figure></p>\n<p>安装 Docker CE 必要依赖<br>由于APT源使用HTTPS确保软件在下载过程中不被篡改.我们首先安装HTTPS传输软件包以及CA证书<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></p>\n<p>由于国内网络问题，使用国内的GPG密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add</span><br></pre></td></tr></table></figure>\n<p>在APT源中添加Docker软件的源，并添加稳定版本的docker CE APT镜像源<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"</span><br></pre></td></tr></table></figure></p>\n<p>安装 Docker CE</p>\n<p>更新apt软件包的缓存并安装docker-ce<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure></p>\n<p>验证<br>使用下面的命令查看Docker的版本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker -v</span></span><br></pre></td></tr></table></figure></p>\n<p>然后使用下面的命令可以运行hello-world程序，因为Docker中还没有hello-world程序的镜像，所以会先pull（下载）下来然后运行。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure></p>\n<p>如果看到打印 Hello for Docker!说明程序已经运行成功了。</p>\n<h3 id=\"Docker-的使用\"><a href=\"#Docker-的使用\" class=\"headerlink\" title=\"Docker 的使用\"></a>Docker 的使用</h3><p>可以使用下面的命令对Docker进行启动、关闭、重启等操作。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开启 Docker</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service docker start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭 Docker</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service docker stop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启 Docker</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service docker restart</span></span><br></pre></td></tr></table></figure></p>\n<p>Docker 需要把应用程序及其相关的依赖打包成为一个image镜像文件，这些镜像文件可以存储在云端的存储库中，用户可以将云端的镜像文件下载到本地，然后通过这个文件，生成Docker容器的实例。</p>\n<p>所以当你将你的应用程序及其依赖打包成一个image文件之后，可以将其上传到云端的仓库中，然后在任何一个装有Docker的机器中运行即可，这就是一次配置，到处运行，可以说是非常之方便了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看本地 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker image ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker pull hello-world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果看到打印 Hello <span class=\"keyword\">for</span> Docker!说明hello-world程序已经运行成功了。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除 image</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker image rm -f hello-world</span></span><br></pre></td></tr></table></figure>\n</the>"},{"title":"switch日常玩耍指北","date":"2018-12-31T20:55:07.000Z","_content":"\n## 狂野飙车9 首次登录无法连接服务器\n\n下载加速器，这里使用的是QMProxyAcc；  \n免费试用，打开 Switch-狂野飙车 加速器，修改switch设置-互联网-wifi-更改设置中的 IP地址设置 和 DNS设置 中的对应参数；  \n打开游戏，修改语言和国家，选择中国，注意国家只能选一次，设定好后重开游戏，完成。\n\n\n## 用于下载游戏的DNS\n\n使用合理的DNS可以提高游戏下载更新速度或是改善联机情况。\n\n谷歌DNS\n* 8.8.8.8\n* 8.8.4.4\n\n韩国长安大学DNS\n* 168.126.63.1\n* 168.126.63.2\n\n台湾中华电信的DNS \n* 168.95.192.1\n* 168.95.1.1\n \n阿里巴巴公共DNS \n* 223.5.5.5\n* 223.6.6.6\n \n南京信风 \n* 114.114.114.114\n* 114.114.115.115\n \n\n## KEEP TAKLING NOBODY EXPLODES\n\n说明书地址  \n* Bomb Defusal Manual  \nhttp://www.bombmanual.com/\n\n\n\n## 马利奥派对\n\n* 挑战模式 不公平拔河 攻略  \n食指隔着衣服快速摩擦x键和a键，幅度要小，使用库巴。\n\n\n\n## 塞尔达天下第一\n\n* 塞尔达地图_塞尔达传说荒野之息全要素中文标识互动地图_游侠网  \nhttp://zelda.ali213.net/\n\n","source":"_posts/随笔_switch.md","raw":"---\ntitle: switch日常玩耍指北\ndate: 2019-1-1 04:55:07\ntags:\n  - 随笔\n---\n\n## 狂野飙车9 首次登录无法连接服务器\n\n下载加速器，这里使用的是QMProxyAcc；  \n免费试用，打开 Switch-狂野飙车 加速器，修改switch设置-互联网-wifi-更改设置中的 IP地址设置 和 DNS设置 中的对应参数；  \n打开游戏，修改语言和国家，选择中国，注意国家只能选一次，设定好后重开游戏，完成。\n\n\n## 用于下载游戏的DNS\n\n使用合理的DNS可以提高游戏下载更新速度或是改善联机情况。\n\n谷歌DNS\n* 8.8.8.8\n* 8.8.4.4\n\n韩国长安大学DNS\n* 168.126.63.1\n* 168.126.63.2\n\n台湾中华电信的DNS \n* 168.95.192.1\n* 168.95.1.1\n \n阿里巴巴公共DNS \n* 223.5.5.5\n* 223.6.6.6\n \n南京信风 \n* 114.114.114.114\n* 114.114.115.115\n \n\n## KEEP TAKLING NOBODY EXPLODES\n\n说明书地址  \n* Bomb Defusal Manual  \nhttp://www.bombmanual.com/\n\n\n\n## 马利奥派对\n\n* 挑战模式 不公平拔河 攻略  \n食指隔着衣服快速摩擦x键和a键，幅度要小，使用库巴。\n\n\n\n## 塞尔达天下第一\n\n* 塞尔达地图_塞尔达传说荒野之息全要素中文标识互动地图_游侠网  \nhttp://zelda.ali213.net/\n\n","slug":"随笔_switch","published":1,"updated":"2020-02-14T12:42:54.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509q005h4cvjwj2hiaps","content":"<h2 id=\"狂野飙车9-首次登录无法连接服务器\"><a href=\"#狂野飙车9-首次登录无法连接服务器\" class=\"headerlink\" title=\"狂野飙车9 首次登录无法连接服务器\"></a>狂野飙车9 首次登录无法连接服务器</h2><p>下载加速器，这里使用的是QMProxyAcc；<br>免费试用，打开 Switch-狂野飙车 加速器，修改switch设置-互联网-wifi-更改设置中的 IP地址设置 和 DNS设置 中的对应参数；<br>打开游戏，修改语言和国家，选择中国，注意国家只能选一次，设定好后重开游戏，完成。</p>\n<h2 id=\"用于下载游戏的DNS\"><a href=\"#用于下载游戏的DNS\" class=\"headerlink\" title=\"用于下载游戏的DNS\"></a>用于下载游戏的DNS</h2><p>使用合理的DNS可以提高游戏下载更新速度或是改善联机情况。</p>\n<p>谷歌DNS</p>\n<ul>\n<li>8.8.8.8</li>\n<li>8.8.4.4</li>\n</ul>\n<p>韩国长安大学DNS</p>\n<ul>\n<li>168.126.63.1</li>\n<li>168.126.63.2</li>\n</ul>\n<p>台湾中华电信的DNS </p>\n<ul>\n<li>168.95.192.1</li>\n<li>168.95.1.1</li>\n</ul>\n<p>阿里巴巴公共DNS </p>\n<ul>\n<li>223.5.5.5</li>\n<li>223.6.6.6</li>\n</ul>\n<p>南京信风 </p>\n<ul>\n<li>114.114.114.114</li>\n<li>114.114.115.115</li>\n</ul>\n<h2 id=\"KEEP-TAKLING-NOBODY-EXPLODES\"><a href=\"#KEEP-TAKLING-NOBODY-EXPLODES\" class=\"headerlink\" title=\"KEEP TAKLING NOBODY EXPLODES\"></a>KEEP TAKLING NOBODY EXPLODES</h2><p>说明书地址  </p>\n<ul>\n<li>Bomb Defusal Manual<br><a href=\"http://www.bombmanual.com/\" target=\"_blank\" rel=\"noopener\">http://www.bombmanual.com/</a></li>\n</ul>\n<h2 id=\"马利奥派对\"><a href=\"#马利奥派对\" class=\"headerlink\" title=\"马利奥派对\"></a>马利奥派对</h2><ul>\n<li>挑战模式 不公平拔河 攻略<br>食指隔着衣服快速摩擦x键和a键，幅度要小，使用库巴。</li>\n</ul>\n<h2 id=\"塞尔达天下第一\"><a href=\"#塞尔达天下第一\" class=\"headerlink\" title=\"塞尔达天下第一\"></a>塞尔达天下第一</h2><ul>\n<li>塞尔达地图_塞尔达传说荒野之息全要素中文标识互动地图_游侠网<br><a href=\"http://zelda.ali213.net/\" target=\"_blank\" rel=\"noopener\">http://zelda.ali213.net/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"狂野飙车9-首次登录无法连接服务器\"><a href=\"#狂野飙车9-首次登录无法连接服务器\" class=\"headerlink\" title=\"狂野飙车9 首次登录无法连接服务器\"></a>狂野飙车9 首次登录无法连接服务器</h2><p>下载加速器，这里使用的是QMProxyAcc；<br>免费试用，打开 Switch-狂野飙车 加速器，修改switch设置-互联网-wifi-更改设置中的 IP地址设置 和 DNS设置 中的对应参数；<br>打开游戏，修改语言和国家，选择中国，注意国家只能选一次，设定好后重开游戏，完成。</p>\n<h2 id=\"用于下载游戏的DNS\"><a href=\"#用于下载游戏的DNS\" class=\"headerlink\" title=\"用于下载游戏的DNS\"></a>用于下载游戏的DNS</h2><p>使用合理的DNS可以提高游戏下载更新速度或是改善联机情况。</p>\n<p>谷歌DNS</p>\n<ul>\n<li>8.8.8.8</li>\n<li>8.8.4.4</li>\n</ul>\n<p>韩国长安大学DNS</p>\n<ul>\n<li>168.126.63.1</li>\n<li>168.126.63.2</li>\n</ul>\n<p>台湾中华电信的DNS </p>\n<ul>\n<li>168.95.192.1</li>\n<li>168.95.1.1</li>\n</ul>\n<p>阿里巴巴公共DNS </p>\n<ul>\n<li>223.5.5.5</li>\n<li>223.6.6.6</li>\n</ul>\n<p>南京信风 </p>\n<ul>\n<li>114.114.114.114</li>\n<li>114.114.115.115</li>\n</ul>\n<h2 id=\"KEEP-TAKLING-NOBODY-EXPLODES\"><a href=\"#KEEP-TAKLING-NOBODY-EXPLODES\" class=\"headerlink\" title=\"KEEP TAKLING NOBODY EXPLODES\"></a>KEEP TAKLING NOBODY EXPLODES</h2><p>说明书地址  </p>\n<ul>\n<li>Bomb Defusal Manual<br><a href=\"http://www.bombmanual.com/\" target=\"_blank\" rel=\"noopener\">http://www.bombmanual.com/</a></li>\n</ul>\n<h2 id=\"马利奥派对\"><a href=\"#马利奥派对\" class=\"headerlink\" title=\"马利奥派对\"></a>马利奥派对</h2><ul>\n<li>挑战模式 不公平拔河 攻略<br>食指隔着衣服快速摩擦x键和a键，幅度要小，使用库巴。</li>\n</ul>\n<h2 id=\"塞尔达天下第一\"><a href=\"#塞尔达天下第一\" class=\"headerlink\" title=\"塞尔达天下第一\"></a>塞尔达天下第一</h2><ul>\n<li>塞尔达地图_塞尔达传说荒野之息全要素中文标识互动地图_游侠网<br><a href=\"http://zelda.ali213.net/\" target=\"_blank\" rel=\"noopener\">http://zelda.ali213.net/</a></li>\n</ul>\n"},{"title":"VR的日常体验记录","date":"2019-01-01T03:36:43.000Z","_content":"\n\n\n## Pico G2 + NOLO CV1 无线玩 SteamVR \n\n### 官方教程\n\n* Pico G2+NOLO CV1无线玩SteamVR教程 - 官方教程 - NOLO中文论坛 - Powered by Discuz!  \nhttp://bbs.nolovr.com/forum.php?mod=viewthread&tid=1793&extra=page=1\n\n### 我的硬件清单\n* VR眼镜：Pico G2\n* 定位套件：NOLO CV1\n* 显卡：GTX1660super\n* 路由器：Redmi AC2100\n\n* 其他  \n  NOLO CV1配件盒中有相关OTG线材和头盔固定卡扣粘贴  \n  用纸片挡住Pico G2内眉心处的传感器，以免一体机息屏导致与电脑断开连接\n\n\n### 我的软件准备\n\nPC端\n* 系统：  \n专业版Win10 64位系统\n* NOLO HOME Windows版：  \n安装Windows版的NOLO HOME，下载链接  \nhttps://www.nolovr.com/picopage\n* 安装Steam客户端：  \n在Steam官网下载、安装、注册并登录；\n* 安装SteamVR工具软件：  \n登陆Steam客户端后在“库”选项的下拉菜单中选择“工具”，然后再在搜索栏中搜索“Steam VR”下载、安装，安装完成后需先启动检验是否可正常运行（steamvr单独启动正常会提示108错误）后，彻底关闭Steam、Steam VR。\n\nPico G2\n* NOLO HOME 一体机版：  \nPico G2应用商店内下载安装移动版NOLO HOME\n\n\n\n\n\n### 开启SteamVR游戏教程\n\n将PC电脑和Pico G2连接到同一5G网络。  \n\n组装、开启Pico G2与NOLOCV1\n* 将基站放置于与肩同高的平面边缘，基站放稳3-5秒后，顶部指示灯为绿色表示已正常工作；   \n* 单击手柄系统键，得到震动反馈后，等待1-3秒，手柄指示灯为绿色表示已正常工作；  \n* 将头盔定位器插入定位器卡座固定好后，开启Pico G2，使用Type-C接口的OTG短线先连接Pico G2，再连接头盔定位器，头盔定位器上指示灯呈绿色表示连接成功。   \n\n如以上设备开机后指示灯长时间未呈现绿色，请依照下表进行对应操作\n| 指示灯状态 | 对应操作 |\n|---|---| \n| 手柄红灯常亮 | 未配对，需进行重新配对，请至官网查看NOLO CV1配对教程 |\n| 基站红灯常亮 | 未放稳或工作异常，请放至平坦桌面 | \n| 红灯闪烁 | 低电量，请充电，使用配件盒中一分三的充电线进行充电即可 | \n| 绿灯闪烁 | 配对中，误操作易引起此种现象，请重新配对 | \n| 红绿灯交替闪烁 | 硬件错误，请及时联系客服 | \n\n连接Pico G2与电脑，开启游戏\n* 在Pico G2内打开NOLO HOME，进入“等待连接”模式，此过程需保持Pico G2屏幕常亮。  \n* 在电脑端打开NOLO HOME根据引导选择一体机模式，NOLO HOME会自动搜索Pico G2，搜索到后点击“连接”，即可启动Steam和Steam VR（Steam客户端响应时间较长，中高配置电脑启动需十秒左右，如未保存账户名密码，此时请手动输入、登录）  \n* Steam VR窗口弹出，显示“SteamVR Home就绪”，或Pico G2内画面进入SteamVRHome房间后表示连接成功\n\n\n### 操作注意事项：\n* 防火墙：\n关闭所有具有防火墙功能的杀毒软件\n* 首次连接成功后偶有出现不识别手柄：\n需关闭Steam、Steam VR、NOLO HOME，再次打开NOLO HOME连接一次即可。\n* OTG短线连接：\n先连接Pico G2，再连接头盔定位器，否则可能出现连接失败。\n* 禁止事项：\n游戏过程中，基站禁止使用USB线连接电脑；在基站电量剩余60%以下时，禁止边充电边进行游戏。\n* 首次进入Steam VR如高度、手柄位置不对，可对NOLO CV1头盔定位器和手柄进行标定调整：  \n手柄或高度出现定位位置不准确时进行，点击NOLO HOME Windows版窗口上的“新手引导”查看。\n* 首次或未在电脑上运行过的VR游戏，需通过Steam电脑客户端选择“以VR模式运行”开启。\n","source":"_posts/随笔_VR的日常体验记录.md","raw":"---\ntitle: VR的日常体验记录\ndate: 2019-1-1 11:36:43\ntags:\n - 随笔\n---\n\n\n\n## Pico G2 + NOLO CV1 无线玩 SteamVR \n\n### 官方教程\n\n* Pico G2+NOLO CV1无线玩SteamVR教程 - 官方教程 - NOLO中文论坛 - Powered by Discuz!  \nhttp://bbs.nolovr.com/forum.php?mod=viewthread&tid=1793&extra=page=1\n\n### 我的硬件清单\n* VR眼镜：Pico G2\n* 定位套件：NOLO CV1\n* 显卡：GTX1660super\n* 路由器：Redmi AC2100\n\n* 其他  \n  NOLO CV1配件盒中有相关OTG线材和头盔固定卡扣粘贴  \n  用纸片挡住Pico G2内眉心处的传感器，以免一体机息屏导致与电脑断开连接\n\n\n### 我的软件准备\n\nPC端\n* 系统：  \n专业版Win10 64位系统\n* NOLO HOME Windows版：  \n安装Windows版的NOLO HOME，下载链接  \nhttps://www.nolovr.com/picopage\n* 安装Steam客户端：  \n在Steam官网下载、安装、注册并登录；\n* 安装SteamVR工具软件：  \n登陆Steam客户端后在“库”选项的下拉菜单中选择“工具”，然后再在搜索栏中搜索“Steam VR”下载、安装，安装完成后需先启动检验是否可正常运行（steamvr单独启动正常会提示108错误）后，彻底关闭Steam、Steam VR。\n\nPico G2\n* NOLO HOME 一体机版：  \nPico G2应用商店内下载安装移动版NOLO HOME\n\n\n\n\n\n### 开启SteamVR游戏教程\n\n将PC电脑和Pico G2连接到同一5G网络。  \n\n组装、开启Pico G2与NOLOCV1\n* 将基站放置于与肩同高的平面边缘，基站放稳3-5秒后，顶部指示灯为绿色表示已正常工作；   \n* 单击手柄系统键，得到震动反馈后，等待1-3秒，手柄指示灯为绿色表示已正常工作；  \n* 将头盔定位器插入定位器卡座固定好后，开启Pico G2，使用Type-C接口的OTG短线先连接Pico G2，再连接头盔定位器，头盔定位器上指示灯呈绿色表示连接成功。   \n\n如以上设备开机后指示灯长时间未呈现绿色，请依照下表进行对应操作\n| 指示灯状态 | 对应操作 |\n|---|---| \n| 手柄红灯常亮 | 未配对，需进行重新配对，请至官网查看NOLO CV1配对教程 |\n| 基站红灯常亮 | 未放稳或工作异常，请放至平坦桌面 | \n| 红灯闪烁 | 低电量，请充电，使用配件盒中一分三的充电线进行充电即可 | \n| 绿灯闪烁 | 配对中，误操作易引起此种现象，请重新配对 | \n| 红绿灯交替闪烁 | 硬件错误，请及时联系客服 | \n\n连接Pico G2与电脑，开启游戏\n* 在Pico G2内打开NOLO HOME，进入“等待连接”模式，此过程需保持Pico G2屏幕常亮。  \n* 在电脑端打开NOLO HOME根据引导选择一体机模式，NOLO HOME会自动搜索Pico G2，搜索到后点击“连接”，即可启动Steam和Steam VR（Steam客户端响应时间较长，中高配置电脑启动需十秒左右，如未保存账户名密码，此时请手动输入、登录）  \n* Steam VR窗口弹出，显示“SteamVR Home就绪”，或Pico G2内画面进入SteamVRHome房间后表示连接成功\n\n\n### 操作注意事项：\n* 防火墙：\n关闭所有具有防火墙功能的杀毒软件\n* 首次连接成功后偶有出现不识别手柄：\n需关闭Steam、Steam VR、NOLO HOME，再次打开NOLO HOME连接一次即可。\n* OTG短线连接：\n先连接Pico G2，再连接头盔定位器，否则可能出现连接失败。\n* 禁止事项：\n游戏过程中，基站禁止使用USB线连接电脑；在基站电量剩余60%以下时，禁止边充电边进行游戏。\n* 首次进入Steam VR如高度、手柄位置不对，可对NOLO CV1头盔定位器和手柄进行标定调整：  \n手柄或高度出现定位位置不准确时进行，点击NOLO HOME Windows版窗口上的“新手引导”查看。\n* 首次或未在电脑上运行过的VR游戏，需通过Steam电脑客户端选择“以VR模式运行”开启。\n","slug":"随笔_VR的日常体验记录","published":1,"updated":"2020-02-06T13:51:07.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an509r005i4cvj1iz77aoj","content":"<h2 id=\"Pico-G2-NOLO-CV1-无线玩-SteamVR\"><a href=\"#Pico-G2-NOLO-CV1-无线玩-SteamVR\" class=\"headerlink\" title=\"Pico G2 + NOLO CV1 无线玩 SteamVR\"></a>Pico G2 + NOLO CV1 无线玩 SteamVR</h2><h3 id=\"官方教程\"><a href=\"#官方教程\" class=\"headerlink\" title=\"官方教程\"></a>官方教程</h3><ul>\n<li>Pico G2+NOLO CV1无线玩SteamVR教程 - 官方教程 - NOLO中文论坛 - Powered by Discuz!<br><a href=\"http://bbs.nolovr.com/forum.php?mod=viewthread&amp;tid=1793&amp;extra=page=1\" target=\"_blank\" rel=\"noopener\">http://bbs.nolovr.com/forum.php?mod=viewthread&amp;tid=1793&amp;extra=page=1</a></li>\n</ul>\n<h3 id=\"我的硬件清单\"><a href=\"#我的硬件清单\" class=\"headerlink\" title=\"我的硬件清单\"></a>我的硬件清单</h3><ul>\n<li>VR眼镜：Pico G2</li>\n<li>定位套件：NOLO CV1</li>\n<li>显卡：GTX1660super</li>\n<li><p>路由器：Redmi AC2100</p>\n</li>\n<li><p>其他<br>NOLO CV1配件盒中有相关OTG线材和头盔固定卡扣粘贴<br>用纸片挡住Pico G2内眉心处的传感器，以免一体机息屏导致与电脑断开连接</p>\n</li>\n</ul>\n<h3 id=\"我的软件准备\"><a href=\"#我的软件准备\" class=\"headerlink\" title=\"我的软件准备\"></a>我的软件准备</h3><p>PC端</p>\n<ul>\n<li>系统：<br>专业版Win10 64位系统</li>\n<li>NOLO HOME Windows版：<br>安装Windows版的NOLO HOME，下载链接<br><a href=\"https://www.nolovr.com/picopage\" target=\"_blank\" rel=\"noopener\">https://www.nolovr.com/picopage</a></li>\n<li>安装Steam客户端：<br>在Steam官网下载、安装、注册并登录；</li>\n<li>安装SteamVR工具软件：<br>登陆Steam客户端后在“库”选项的下拉菜单中选择“工具”，然后再在搜索栏中搜索“Steam VR”下载、安装，安装完成后需先启动检验是否可正常运行（steamvr单独启动正常会提示108错误）后，彻底关闭Steam、Steam VR。</li>\n</ul>\n<p>Pico G2</p>\n<ul>\n<li>NOLO HOME 一体机版：<br>Pico G2应用商店内下载安装移动版NOLO HOME</li>\n</ul>\n<h3 id=\"开启SteamVR游戏教程\"><a href=\"#开启SteamVR游戏教程\" class=\"headerlink\" title=\"开启SteamVR游戏教程\"></a>开启SteamVR游戏教程</h3><p>将PC电脑和Pico G2连接到同一5G网络。  </p>\n<p>组装、开启Pico G2与NOLOCV1</p>\n<ul>\n<li>将基站放置于与肩同高的平面边缘，基站放稳3-5秒后，顶部指示灯为绿色表示已正常工作；   </li>\n<li>单击手柄系统键，得到震动反馈后，等待1-3秒，手柄指示灯为绿色表示已正常工作；  </li>\n<li>将头盔定位器插入定位器卡座固定好后，开启Pico G2，使用Type-C接口的OTG短线先连接Pico G2，再连接头盔定位器，头盔定位器上指示灯呈绿色表示连接成功。   </li>\n</ul>\n<p>如以上设备开机后指示灯长时间未呈现绿色，请依照下表进行对应操作<br>| 指示灯状态 | 对应操作 |<br>|—-|—-|<br>| 手柄红灯常亮 | 未配对，需进行重新配对，请至官网查看NOLO CV1配对教程 |<br>| 基站红灯常亮 | 未放稳或工作异常，请放至平坦桌面 |<br>| 红灯闪烁 | 低电量，请充电，使用配件盒中一分三的充电线进行充电即可 |<br>| 绿灯闪烁 | 配对中，误操作易引起此种现象，请重新配对 |<br>| 红绿灯交替闪烁 | 硬件错误，请及时联系客服 | </p>\n<p>连接Pico G2与电脑，开启游戏</p>\n<ul>\n<li>在Pico G2内打开NOLO HOME，进入“等待连接”模式，此过程需保持Pico G2屏幕常亮。  </li>\n<li>在电脑端打开NOLO HOME根据引导选择一体机模式，NOLO HOME会自动搜索Pico G2，搜索到后点击“连接”，即可启动Steam和Steam VR（Steam客户端响应时间较长，中高配置电脑启动需十秒左右，如未保存账户名密码，此时请手动输入、登录）  </li>\n<li>Steam VR窗口弹出，显示“SteamVR Home就绪”，或Pico G2内画面进入SteamVRHome房间后表示连接成功</li>\n</ul>\n<h3 id=\"操作注意事项：\"><a href=\"#操作注意事项：\" class=\"headerlink\" title=\"操作注意事项：\"></a>操作注意事项：</h3><ul>\n<li>防火墙：<br>关闭所有具有防火墙功能的杀毒软件</li>\n<li>首次连接成功后偶有出现不识别手柄：<br>需关闭Steam、Steam VR、NOLO HOME，再次打开NOLO HOME连接一次即可。</li>\n<li>OTG短线连接：<br>先连接Pico G2，再连接头盔定位器，否则可能出现连接失败。</li>\n<li>禁止事项：<br>游戏过程中，基站禁止使用USB线连接电脑；在基站电量剩余60%以下时，禁止边充电边进行游戏。</li>\n<li>首次进入Steam VR如高度、手柄位置不对，可对NOLO CV1头盔定位器和手柄进行标定调整：<br>手柄或高度出现定位位置不准确时进行，点击NOLO HOME Windows版窗口上的“新手引导”查看。</li>\n<li>首次或未在电脑上运行过的VR游戏，需通过Steam电脑客户端选择“以VR模式运行”开启。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Pico-G2-NOLO-CV1-无线玩-SteamVR\"><a href=\"#Pico-G2-NOLO-CV1-无线玩-SteamVR\" class=\"headerlink\" title=\"Pico G2 + NOLO CV1 无线玩 SteamVR\"></a>Pico G2 + NOLO CV1 无线玩 SteamVR</h2><h3 id=\"官方教程\"><a href=\"#官方教程\" class=\"headerlink\" title=\"官方教程\"></a>官方教程</h3><ul>\n<li>Pico G2+NOLO CV1无线玩SteamVR教程 - 官方教程 - NOLO中文论坛 - Powered by Discuz!<br><a href=\"http://bbs.nolovr.com/forum.php?mod=viewthread&amp;tid=1793&amp;extra=page=1\" target=\"_blank\" rel=\"noopener\">http://bbs.nolovr.com/forum.php?mod=viewthread&amp;tid=1793&amp;extra=page=1</a></li>\n</ul>\n<h3 id=\"我的硬件清单\"><a href=\"#我的硬件清单\" class=\"headerlink\" title=\"我的硬件清单\"></a>我的硬件清单</h3><ul>\n<li>VR眼镜：Pico G2</li>\n<li>定位套件：NOLO CV1</li>\n<li>显卡：GTX1660super</li>\n<li><p>路由器：Redmi AC2100</p>\n</li>\n<li><p>其他<br>NOLO CV1配件盒中有相关OTG线材和头盔固定卡扣粘贴<br>用纸片挡住Pico G2内眉心处的传感器，以免一体机息屏导致与电脑断开连接</p>\n</li>\n</ul>\n<h3 id=\"我的软件准备\"><a href=\"#我的软件准备\" class=\"headerlink\" title=\"我的软件准备\"></a>我的软件准备</h3><p>PC端</p>\n<ul>\n<li>系统：<br>专业版Win10 64位系统</li>\n<li>NOLO HOME Windows版：<br>安装Windows版的NOLO HOME，下载链接<br><a href=\"https://www.nolovr.com/picopage\" target=\"_blank\" rel=\"noopener\">https://www.nolovr.com/picopage</a></li>\n<li>安装Steam客户端：<br>在Steam官网下载、安装、注册并登录；</li>\n<li>安装SteamVR工具软件：<br>登陆Steam客户端后在“库”选项的下拉菜单中选择“工具”，然后再在搜索栏中搜索“Steam VR”下载、安装，安装完成后需先启动检验是否可正常运行（steamvr单独启动正常会提示108错误）后，彻底关闭Steam、Steam VR。</li>\n</ul>\n<p>Pico G2</p>\n<ul>\n<li>NOLO HOME 一体机版：<br>Pico G2应用商店内下载安装移动版NOLO HOME</li>\n</ul>\n<h3 id=\"开启SteamVR游戏教程\"><a href=\"#开启SteamVR游戏教程\" class=\"headerlink\" title=\"开启SteamVR游戏教程\"></a>开启SteamVR游戏教程</h3><p>将PC电脑和Pico G2连接到同一5G网络。  </p>\n<p>组装、开启Pico G2与NOLOCV1</p>\n<ul>\n<li>将基站放置于与肩同高的平面边缘，基站放稳3-5秒后，顶部指示灯为绿色表示已正常工作；   </li>\n<li>单击手柄系统键，得到震动反馈后，等待1-3秒，手柄指示灯为绿色表示已正常工作；  </li>\n<li>将头盔定位器插入定位器卡座固定好后，开启Pico G2，使用Type-C接口的OTG短线先连接Pico G2，再连接头盔定位器，头盔定位器上指示灯呈绿色表示连接成功。   </li>\n</ul>\n<p>如以上设备开机后指示灯长时间未呈现绿色，请依照下表进行对应操作<br>| 指示灯状态 | 对应操作 |<br>|—-|—-|<br>| 手柄红灯常亮 | 未配对，需进行重新配对，请至官网查看NOLO CV1配对教程 |<br>| 基站红灯常亮 | 未放稳或工作异常，请放至平坦桌面 |<br>| 红灯闪烁 | 低电量，请充电，使用配件盒中一分三的充电线进行充电即可 |<br>| 绿灯闪烁 | 配对中，误操作易引起此种现象，请重新配对 |<br>| 红绿灯交替闪烁 | 硬件错误，请及时联系客服 | </p>\n<p>连接Pico G2与电脑，开启游戏</p>\n<ul>\n<li>在Pico G2内打开NOLO HOME，进入“等待连接”模式，此过程需保持Pico G2屏幕常亮。  </li>\n<li>在电脑端打开NOLO HOME根据引导选择一体机模式，NOLO HOME会自动搜索Pico G2，搜索到后点击“连接”，即可启动Steam和Steam VR（Steam客户端响应时间较长，中高配置电脑启动需十秒左右，如未保存账户名密码，此时请手动输入、登录）  </li>\n<li>Steam VR窗口弹出，显示“SteamVR Home就绪”，或Pico G2内画面进入SteamVRHome房间后表示连接成功</li>\n</ul>\n<h3 id=\"操作注意事项：\"><a href=\"#操作注意事项：\" class=\"headerlink\" title=\"操作注意事项：\"></a>操作注意事项：</h3><ul>\n<li>防火墙：<br>关闭所有具有防火墙功能的杀毒软件</li>\n<li>首次连接成功后偶有出现不识别手柄：<br>需关闭Steam、Steam VR、NOLO HOME，再次打开NOLO HOME连接一次即可。</li>\n<li>OTG短线连接：<br>先连接Pico G2，再连接头盔定位器，否则可能出现连接失败。</li>\n<li>禁止事项：<br>游戏过程中，基站禁止使用USB线连接电脑；在基站电量剩余60%以下时，禁止边充电边进行游戏。</li>\n<li>首次进入Steam VR如高度、手柄位置不对，可对NOLO CV1头盔定位器和手柄进行标定调整：<br>手柄或高度出现定位位置不准确时进行，点击NOLO HOME Windows版窗口上的“新手引导”查看。</li>\n<li>首次或未在电脑上运行过的VR游戏，需通过Steam电脑客户端选择“以VR模式运行”开启。</li>\n</ul>\n"},{"title":"读书笔记：未来简史","date":"2019-01-01T15:40:25.000Z","_content":"\n\n# 未来简史\n* 人类新目标： 长生不死 幸福快乐 化身为神\n\n\n\n\n\n","source":"_posts/随笔_读书笔记：未来简史.md","raw":"---\ntitle: 读书笔记：未来简史\ndate: 2019-1-1 23:40:25\ntags:\n  - 随笔\n---\n\n\n# 未来简史\n* 人类新目标： 长生不死 幸福快乐 化身为神\n\n\n\n\n\n","slug":"随笔_读书笔记：未来简史","published":1,"updated":"2020-01-05T19:13:25.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50a2005l4cvj4r3zmh1l","content":"<h1 id=\"未来简史\"><a href=\"#未来简史\" class=\"headerlink\" title=\"未来简史\"></a>未来简史</h1><ul>\n<li>人类新目标： 长生不死 幸福快乐 化身为神</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"未来简史\"><a href=\"#未来简史\" class=\"headerlink\" title=\"未来简史\"></a>未来简史</h1><ul>\n<li>人类新目标： 长生不死 幸福快乐 化身为神</li>\n</ul>\n"},{"title":"C#学习笔记","date":"2019-11-07T08:30:22.000Z","_content":"\n* C#教程：C#入门经典教程，值得收藏  \nhttp://c.biancheng.net/csharp/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## C#语言特性\n* C# 语言是一种安全的、稳定的、简单的、面向对象的编程语言， 它不仅去掉了 C++ 和 Java 语言中的一些复杂特性，还提供了可视化工具，能够高效地编写程序。\n\n* 简单、安全  \n在 C# 语言中已经不再使用指针，而且不允许直接读取内存等不安全的操作。\n它比 C、C++、Java 提供了更多的数据类型，并且每个数据类型都是固定大小的。\n此外还提供了命名空间来管理 C# 文件，命名空间 相当于一个文件夹，在创建程序时，允许在一个命名空间中创建一个或多个类，方便调用和重用。\n\n* 面向对象  \n与其他面向对象语言一样，C# 语言也具有面向对象语言的基本特征，即封装、继承、多态。\n\n* 支持跨平台  \nC# 6.0 版本已经能在多个操作系统上使用，例如在 Mac、Linux 等。此外，还能将其应用到手机、PDA 等设备上。\n\n* 开发多种类型的程序  \n使用 C# 语言不仅能开发在控制台下运行的应用程序，也能开发 Windows 窗体应用程序、网站、手机应用等多种应用程序，并且其提供的 Visual Studio 2015 开发工具中也支持多种类型的程序，让开发人员能快速地构建 C# 应用程序。\n\n\n## C#类和对象\n\n类定义的具体语法形式\n``` txt\n类的访问修饰符    修饰符    类名\n{\n    类的成员\n}\n```\n其中：\n* 类的访问修饰符：用于设定对类的访问限制，包括 public、internal 或者不写，用 internal 或者不写时代表只能在当前项目中访问类；public 则代表可以在任何项目中访问类。\n* 修饰符：修饰符是对类本身特点的描述，包括 abstract、sealed 和 static。abstract 是抽象的意思，使用它修饰符的类不能被实例化；sealed 修饰的类是密封类，不能 被继承；static 修饰的类是静态类，不能被实例化。\n* 类名：类名用于描述类的功能，因此在定义类名时最好是具有实际意义，这样方便用户理解类中描述的内容。在同一个命名空间下类名必须是唯一的。\n* 类的成员：在类中能定义的元素，主要包括字段、属性、方法。\n\n### C#访问修饰符、修饰符\n\n类的访问修饰符主要有 2 个，即 internal 和 public,如果省略了访问修饰符，即为 internal。\n\n类中成员的访问修饰符有 4 个，具体用法如下。\n* public  \n成员可以被任何代码访问。\n* private  \n成员仅能被同一个类中的代码访问，如果在类成员前未使用任何访问修饰 符，则默认为private。\n* internal  \n成员仅能被同一个项目中的代码访问。\n* protected  \n成员只能由类或派生类中的代码访问。\n\n在修饰字段时通常用两个修饰符，即readonly （只读）和static （静态的）。\n* 使用 readonly 修饰字段意味着只能读取该字段的值而不能给字段赋值。\n* 使用 static 修饰的字段是静态字段，可以直接通过类名访问该字段。  \n\n需要注意的是常量不能使用 static 修饰符修饰。\n\n定义字段的语法形式\n``` txt\n访问修饰符    修饰符    数据类型    字段名；\n```\n\n``` c#\nnamespace code_1\n{\n    class Test\n    {\n        private int id;                         //定义私有的整型字段 id\n        public readonly string name;            //定义公有的只读字符串类型字段 name\n        internal static int age;                //定义内部的静态的整型字段 age\n        private const string major = \"计算机\";  //定义私有的字符串类型常量 major\n    }\n}\n```\n\n\n\n定义方法的语法形式如下。\n访问修饰符    修饰符    返回值类型    方法名(参数列表)\n{\n    语句块;\n}\n其中：\n1) 访问修饰符\n\n所有类成员访问修饰符都可以使用，如果省略访问修饰符，默认是 private。\n2) 修饰符\n\n在定义方法时修饰符包括 virtual（虚拟的）、abstract（抽象的）、override（重写的）、static（静态的）、sealed（密封的）。override 是在类之间继承时使用的。\n3) 返回值类型\n\n用于在调用方法后得到返回结果，返回值可以是任意的数据类型，如果指定了返回值类型，必须使用 return 关键字返回一个与之类型匹配的值。如果没有指定返回值类型，必须使用 void 关键字表示没有返回值。\n4) 方法名\n\n对方法所实现功能的描述。方法名的命名是以 Pascal 命名法为规范的。\n5)参数列表\n\n在方法中允许有 0 到多个参数，如果没有指定参数也要保留参数列表的小括号。参数的定义形式是“数据类型参数名”，如果使用多个参数，多个参数之间需要用逗号隔开。\n\n\n\n属性经常与字段连用，并提供了 get 访问器和 set 访问器，分别用于获取或设置字段的值。\n\nget 访问器和 set 访问器的使用与方法非常类似，可以在操作字段时根据一些规则和条件来设置或获取字段的值。\n\n此外，为了保证字段的安全性，还能选择省去 get 访问器或 set 访问器。\n\n定义属性的语法形式如下。\npublic    数据类型    属性名\n{\n    get\n    {\n        获取属性的语句块;\n        return 值;\n    }\n    set\n    {\n        设置属性得到语句块;\n    }\n}\n其中：\n1) get{}\n\nget 访问器，用于获取属性的值，需要在 get 语句最后使用 return 关键字返回一个与属性数据类型相兼容的值。\n\n若在属性定义中省略了该访问器，则不能在其他类中获取私有类型的字段值，因此也称为只写属性。\n2) set{}\n\nset 访问器用于设置字段的值，这里需要使用一个特殊的值 value，它就是给字段赋的值。\n\n在 set 访问器省略后无法在其他类中给字段赋值，因此也称为只读属性。\n\n通常属性名的命名使用的是 Pascal 命名法，单词的首字母大写，如果是由多个单词构成，每个单词的首字母大写。\n\n由于属性都是针对某个字段赋值的，因此属性的名称通常是将字段中每个单词的首字母大写。例如定义了一个名为 name 的字段，属性名则为 Name。\n\n\n\n\n\nC#构造函数（构造方法）\n\n构造方法的定义语法形式如下。\n访问修饰符  类名 (参数列表)\n{\n    语句块；\n}\n这里构造方法的访问修饰符通常是public类型的，这样在其他类中都可以创建该类的对象。\n\n如果将访问修饰符设置成private类型的，则无法创建该类的对象。构造方法中的参数与其他方法一样，都是 0 到多个参数。\n\n此外，构造方法是在创建类的对象时被调用的。通常会将一些对类中成员初始化的操作放到构造方法中去完成。\n\n\nC#析构函数（方法）\n\n析构方法的定义语法形式如下。\n~类名()\n{\n    语句块；\n}\n在析构方法中不带任何参数，它实际上是保证在程序中会调用垃圾回收方法 Finalize()。\n\n\nC#方法重载（函数重载）\n\n在调用重载的方法时系统是根据所传 递参数的不同判断调用的是哪个方法。\n\n\nC#方法的参数（实参和形参）\n\n方法中的参数分为实际参数和形式参数，实际参数被称为实参，是在调用方法时传递的参数；形式参数被称为形参，是在方法定义中所写的参数。\n\n在 C# 语言中，方法中的参数除了定义数据类型外，还可以定义引用参数和输出参数。引用参数使用 ref 关键字定义，输出参数使用 out 关键字定义。\n\n引用参数在方法中使用时必须为其值，并且必须是由变量赋予的值，不能是常量或表达式。\n\n如果需要将方法中的每一个参数都设置为 ref 类型参数，则需要在每一个参数前面加上 ref 关键字修饰。\n\n``` c#\nclass RefClass\n{\n    public bool Judge(ref int num)\n    {\n        if (num % 5 == 0)\n        {\n            return true;\n        }\n        return false;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        RefClass refClass = new RefClass();\n        int a = 10;\n        bool result = refCalss.Judge(ref a);\n        Console.WriteLine(\"result is \" + result);\n    }\n}\n```\n引用参数与我们平时使用的参数有些类似，但输出参数不同，输出参数相当于返回值,即在方法调用完成后可以将返回的结果存放到输出参数中。\n\n输出参数多用于一个方法需要返回多个值的情况。需要注意的是，在使用输出参数时，必须在方法调用完成前为输出参数赋值。\n\n``` c#\nclass RefClass\n{\n    public bool Judge(int num, out bool result)\n    {\n        if (num % 5 == 0)\n        {\n            result =  true;\n        }\n        result =  false;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        RefClass refClass = new RefClass();\n        bool rst;\n        refCalss.Judge(10, out rst);\n        Console.WriteLine(\"result is \" + rst);\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/C#学习笔记.md","raw":"---\ntitle: 'C#学习笔记'\ndate: 2019-11-07 16:30:22\ntags:\n---\n\n* C#教程：C#入门经典教程，值得收藏  \nhttp://c.biancheng.net/csharp/\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## C#语言特性\n* C# 语言是一种安全的、稳定的、简单的、面向对象的编程语言， 它不仅去掉了 C++ 和 Java 语言中的一些复杂特性，还提供了可视化工具，能够高效地编写程序。\n\n* 简单、安全  \n在 C# 语言中已经不再使用指针，而且不允许直接读取内存等不安全的操作。\n它比 C、C++、Java 提供了更多的数据类型，并且每个数据类型都是固定大小的。\n此外还提供了命名空间来管理 C# 文件，命名空间 相当于一个文件夹，在创建程序时，允许在一个命名空间中创建一个或多个类，方便调用和重用。\n\n* 面向对象  \n与其他面向对象语言一样，C# 语言也具有面向对象语言的基本特征，即封装、继承、多态。\n\n* 支持跨平台  \nC# 6.0 版本已经能在多个操作系统上使用，例如在 Mac、Linux 等。此外，还能将其应用到手机、PDA 等设备上。\n\n* 开发多种类型的程序  \n使用 C# 语言不仅能开发在控制台下运行的应用程序，也能开发 Windows 窗体应用程序、网站、手机应用等多种应用程序，并且其提供的 Visual Studio 2015 开发工具中也支持多种类型的程序，让开发人员能快速地构建 C# 应用程序。\n\n\n## C#类和对象\n\n类定义的具体语法形式\n``` txt\n类的访问修饰符    修饰符    类名\n{\n    类的成员\n}\n```\n其中：\n* 类的访问修饰符：用于设定对类的访问限制，包括 public、internal 或者不写，用 internal 或者不写时代表只能在当前项目中访问类；public 则代表可以在任何项目中访问类。\n* 修饰符：修饰符是对类本身特点的描述，包括 abstract、sealed 和 static。abstract 是抽象的意思，使用它修饰符的类不能被实例化；sealed 修饰的类是密封类，不能 被继承；static 修饰的类是静态类，不能被实例化。\n* 类名：类名用于描述类的功能，因此在定义类名时最好是具有实际意义，这样方便用户理解类中描述的内容。在同一个命名空间下类名必须是唯一的。\n* 类的成员：在类中能定义的元素，主要包括字段、属性、方法。\n\n### C#访问修饰符、修饰符\n\n类的访问修饰符主要有 2 个，即 internal 和 public,如果省略了访问修饰符，即为 internal。\n\n类中成员的访问修饰符有 4 个，具体用法如下。\n* public  \n成员可以被任何代码访问。\n* private  \n成员仅能被同一个类中的代码访问，如果在类成员前未使用任何访问修饰 符，则默认为private。\n* internal  \n成员仅能被同一个项目中的代码访问。\n* protected  \n成员只能由类或派生类中的代码访问。\n\n在修饰字段时通常用两个修饰符，即readonly （只读）和static （静态的）。\n* 使用 readonly 修饰字段意味着只能读取该字段的值而不能给字段赋值。\n* 使用 static 修饰的字段是静态字段，可以直接通过类名访问该字段。  \n\n需要注意的是常量不能使用 static 修饰符修饰。\n\n定义字段的语法形式\n``` txt\n访问修饰符    修饰符    数据类型    字段名；\n```\n\n``` c#\nnamespace code_1\n{\n    class Test\n    {\n        private int id;                         //定义私有的整型字段 id\n        public readonly string name;            //定义公有的只读字符串类型字段 name\n        internal static int age;                //定义内部的静态的整型字段 age\n        private const string major = \"计算机\";  //定义私有的字符串类型常量 major\n    }\n}\n```\n\n\n\n定义方法的语法形式如下。\n访问修饰符    修饰符    返回值类型    方法名(参数列表)\n{\n    语句块;\n}\n其中：\n1) 访问修饰符\n\n所有类成员访问修饰符都可以使用，如果省略访问修饰符，默认是 private。\n2) 修饰符\n\n在定义方法时修饰符包括 virtual（虚拟的）、abstract（抽象的）、override（重写的）、static（静态的）、sealed（密封的）。override 是在类之间继承时使用的。\n3) 返回值类型\n\n用于在调用方法后得到返回结果，返回值可以是任意的数据类型，如果指定了返回值类型，必须使用 return 关键字返回一个与之类型匹配的值。如果没有指定返回值类型，必须使用 void 关键字表示没有返回值。\n4) 方法名\n\n对方法所实现功能的描述。方法名的命名是以 Pascal 命名法为规范的。\n5)参数列表\n\n在方法中允许有 0 到多个参数，如果没有指定参数也要保留参数列表的小括号。参数的定义形式是“数据类型参数名”，如果使用多个参数，多个参数之间需要用逗号隔开。\n\n\n\n属性经常与字段连用，并提供了 get 访问器和 set 访问器，分别用于获取或设置字段的值。\n\nget 访问器和 set 访问器的使用与方法非常类似，可以在操作字段时根据一些规则和条件来设置或获取字段的值。\n\n此外，为了保证字段的安全性，还能选择省去 get 访问器或 set 访问器。\n\n定义属性的语法形式如下。\npublic    数据类型    属性名\n{\n    get\n    {\n        获取属性的语句块;\n        return 值;\n    }\n    set\n    {\n        设置属性得到语句块;\n    }\n}\n其中：\n1) get{}\n\nget 访问器，用于获取属性的值，需要在 get 语句最后使用 return 关键字返回一个与属性数据类型相兼容的值。\n\n若在属性定义中省略了该访问器，则不能在其他类中获取私有类型的字段值，因此也称为只写属性。\n2) set{}\n\nset 访问器用于设置字段的值，这里需要使用一个特殊的值 value，它就是给字段赋的值。\n\n在 set 访问器省略后无法在其他类中给字段赋值，因此也称为只读属性。\n\n通常属性名的命名使用的是 Pascal 命名法，单词的首字母大写，如果是由多个单词构成，每个单词的首字母大写。\n\n由于属性都是针对某个字段赋值的，因此属性的名称通常是将字段中每个单词的首字母大写。例如定义了一个名为 name 的字段，属性名则为 Name。\n\n\n\n\n\nC#构造函数（构造方法）\n\n构造方法的定义语法形式如下。\n访问修饰符  类名 (参数列表)\n{\n    语句块；\n}\n这里构造方法的访问修饰符通常是public类型的，这样在其他类中都可以创建该类的对象。\n\n如果将访问修饰符设置成private类型的，则无法创建该类的对象。构造方法中的参数与其他方法一样，都是 0 到多个参数。\n\n此外，构造方法是在创建类的对象时被调用的。通常会将一些对类中成员初始化的操作放到构造方法中去完成。\n\n\nC#析构函数（方法）\n\n析构方法的定义语法形式如下。\n~类名()\n{\n    语句块；\n}\n在析构方法中不带任何参数，它实际上是保证在程序中会调用垃圾回收方法 Finalize()。\n\n\nC#方法重载（函数重载）\n\n在调用重载的方法时系统是根据所传 递参数的不同判断调用的是哪个方法。\n\n\nC#方法的参数（实参和形参）\n\n方法中的参数分为实际参数和形式参数，实际参数被称为实参，是在调用方法时传递的参数；形式参数被称为形参，是在方法定义中所写的参数。\n\n在 C# 语言中，方法中的参数除了定义数据类型外，还可以定义引用参数和输出参数。引用参数使用 ref 关键字定义，输出参数使用 out 关键字定义。\n\n引用参数在方法中使用时必须为其值，并且必须是由变量赋予的值，不能是常量或表达式。\n\n如果需要将方法中的每一个参数都设置为 ref 类型参数，则需要在每一个参数前面加上 ref 关键字修饰。\n\n``` c#\nclass RefClass\n{\n    public bool Judge(ref int num)\n    {\n        if (num % 5 == 0)\n        {\n            return true;\n        }\n        return false;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        RefClass refClass = new RefClass();\n        int a = 10;\n        bool result = refCalss.Judge(ref a);\n        Console.WriteLine(\"result is \" + result);\n    }\n}\n```\n引用参数与我们平时使用的参数有些类似，但输出参数不同，输出参数相当于返回值,即在方法调用完成后可以将返回的结果存放到输出参数中。\n\n输出参数多用于一个方法需要返回多个值的情况。需要注意的是，在使用输出参数时，必须在方法调用完成前为输出参数赋值。\n\n``` c#\nclass RefClass\n{\n    public bool Judge(int num, out bool result)\n    {\n        if (num % 5 == 0)\n        {\n            result =  true;\n        }\n        result =  false;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        RefClass refClass = new RefClass();\n        bool rst;\n        refCalss.Judge(10, out rst);\n        Console.WriteLine(\"result is \" + rst);\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"C#学习笔记","published":1,"updated":"2020-01-05T19:13:24.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50ad005m4cvjjnsyak0m","content":"<ul>\n<li>C#教程：C#入门经典教程，值得收藏<br><a href=\"http://c.biancheng.net/csharp/\" target=\"_blank\" rel=\"noopener\">http://c.biancheng.net/csharp/</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"C-语言特性\"><a href=\"#C-语言特性\" class=\"headerlink\" title=\"C#语言特性\"></a>C#语言特性</h2><ul>\n<li><p>C# 语言是一种安全的、稳定的、简单的、面向对象的编程语言， 它不仅去掉了 C++ 和 Java 语言中的一些复杂特性，还提供了可视化工具，能够高效地编写程序。</p>\n</li>\n<li><p>简单、安全<br>在 C# 语言中已经不再使用指针，而且不允许直接读取内存等不安全的操作。<br>它比 C、C++、Java 提供了更多的数据类型，并且每个数据类型都是固定大小的。<br>此外还提供了命名空间来管理 C# 文件，命名空间 相当于一个文件夹，在创建程序时，允许在一个命名空间中创建一个或多个类，方便调用和重用。</p>\n</li>\n<li><p>面向对象<br>与其他面向对象语言一样，C# 语言也具有面向对象语言的基本特征，即封装、继承、多态。</p>\n</li>\n<li><p>支持跨平台<br>C# 6.0 版本已经能在多个操作系统上使用，例如在 Mac、Linux 等。此外，还能将其应用到手机、PDA 等设备上。</p>\n</li>\n<li><p>开发多种类型的程序<br>使用 C# 语言不仅能开发在控制台下运行的应用程序，也能开发 Windows 窗体应用程序、网站、手机应用等多种应用程序，并且其提供的 Visual Studio 2015 开发工具中也支持多种类型的程序，让开发人员能快速地构建 C# 应用程序。</p>\n</li>\n</ul>\n<h2 id=\"C-类和对象\"><a href=\"#C-类和对象\" class=\"headerlink\" title=\"C#类和对象\"></a>C#类和对象</h2><p>类定义的具体语法形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类的访问修饰符    修饰符    类名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    类的成员</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<ul>\n<li>类的访问修饰符：用于设定对类的访问限制，包括 public、internal 或者不写，用 internal 或者不写时代表只能在当前项目中访问类；public 则代表可以在任何项目中访问类。</li>\n<li>修饰符：修饰符是对类本身特点的描述，包括 abstract、sealed 和 static。abstract 是抽象的意思，使用它修饰符的类不能被实例化；sealed 修饰的类是密封类，不能 被继承；static 修饰的类是静态类，不能被实例化。</li>\n<li>类名：类名用于描述类的功能，因此在定义类名时最好是具有实际意义，这样方便用户理解类中描述的内容。在同一个命名空间下类名必须是唯一的。</li>\n<li>类的成员：在类中能定义的元素，主要包括字段、属性、方法。</li>\n</ul>\n<h3 id=\"C-访问修饰符、修饰符\"><a href=\"#C-访问修饰符、修饰符\" class=\"headerlink\" title=\"C#访问修饰符、修饰符\"></a>C#访问修饰符、修饰符</h3><p>类的访问修饰符主要有 2 个，即 internal 和 public,如果省略了访问修饰符，即为 internal。</p>\n<p>类中成员的访问修饰符有 4 个，具体用法如下。</p>\n<ul>\n<li>public<br>成员可以被任何代码访问。</li>\n<li>private<br>成员仅能被同一个类中的代码访问，如果在类成员前未使用任何访问修饰 符，则默认为private。</li>\n<li>internal<br>成员仅能被同一个项目中的代码访问。</li>\n<li>protected<br>成员只能由类或派生类中的代码访问。</li>\n</ul>\n<p>在修饰字段时通常用两个修饰符，即readonly （只读）和static （静态的）。</p>\n<ul>\n<li>使用 readonly 修饰字段意味着只能读取该字段的值而不能给字段赋值。</li>\n<li>使用 static 修饰的字段是静态字段，可以直接通过类名访问该字段。  </li>\n</ul>\n<p>需要注意的是常量不能使用 static 修饰符修饰。</p>\n<p>定义字段的语法形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问修饰符    修饰符    数据类型    字段名；</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace code_1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class Test</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private int id;                         //定义私有的整型字段 id</span><br><span class=\"line\">        public readonly string name;            //定义公有的只读字符串类型字段 name</span><br><span class=\"line\">        internal static int age;                //定义内部的静态的整型字段 age</span><br><span class=\"line\">        private const string major = &quot;计算机&quot;;  //定义私有的字符串类型常量 major</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义方法的语法形式如下。<br>访问修饰符    修饰符    返回值类型    方法名(参数列表)<br>{<br>    语句块;<br>}<br>其中：<br>1) 访问修饰符</p>\n<p>所有类成员访问修饰符都可以使用，如果省略访问修饰符，默认是 private。<br>2) 修饰符</p>\n<p>在定义方法时修饰符包括 virtual（虚拟的）、abstract（抽象的）、override（重写的）、static（静态的）、sealed（密封的）。override 是在类之间继承时使用的。<br>3) 返回值类型</p>\n<p>用于在调用方法后得到返回结果，返回值可以是任意的数据类型，如果指定了返回值类型，必须使用 return 关键字返回一个与之类型匹配的值。如果没有指定返回值类型，必须使用 void 关键字表示没有返回值。<br>4) 方法名</p>\n<p>对方法所实现功能的描述。方法名的命名是以 Pascal 命名法为规范的。<br>5)参数列表</p>\n<p>在方法中允许有 0 到多个参数，如果没有指定参数也要保留参数列表的小括号。参数的定义形式是“数据类型参数名”，如果使用多个参数，多个参数之间需要用逗号隔开。</p>\n<p>属性经常与字段连用，并提供了 get 访问器和 set 访问器，分别用于获取或设置字段的值。</p>\n<p>get 访问器和 set 访问器的使用与方法非常类似，可以在操作字段时根据一些规则和条件来设置或获取字段的值。</p>\n<p>此外，为了保证字段的安全性，还能选择省去 get 访问器或 set 访问器。</p>\n<p>定义属性的语法形式如下。<br>public    数据类型    属性名<br>{<br>    get<br>    {<br>        获取属性的语句块;<br>        return 值;<br>    }<br>    set<br>    {<br>        设置属性得到语句块;<br>    }<br>}<br>其中：<br>1) get{}</p>\n<p>get 访问器，用于获取属性的值，需要在 get 语句最后使用 return 关键字返回一个与属性数据类型相兼容的值。</p>\n<p>若在属性定义中省略了该访问器，则不能在其他类中获取私有类型的字段值，因此也称为只写属性。<br>2) set{}</p>\n<p>set 访问器用于设置字段的值，这里需要使用一个特殊的值 value，它就是给字段赋的值。</p>\n<p>在 set 访问器省略后无法在其他类中给字段赋值，因此也称为只读属性。</p>\n<p>通常属性名的命名使用的是 Pascal 命名法，单词的首字母大写，如果是由多个单词构成，每个单词的首字母大写。</p>\n<p>由于属性都是针对某个字段赋值的，因此属性的名称通常是将字段中每个单词的首字母大写。例如定义了一个名为 name 的字段，属性名则为 Name。</p>\n<p>C#构造函数（构造方法）</p>\n<p>构造方法的定义语法形式如下。<br>访问修饰符  类名 (参数列表)<br>{<br>    语句块；<br>}<br>这里构造方法的访问修饰符通常是public类型的，这样在其他类中都可以创建该类的对象。</p>\n<p>如果将访问修饰符设置成private类型的，则无法创建该类的对象。构造方法中的参数与其他方法一样，都是 0 到多个参数。</p>\n<p>此外，构造方法是在创建类的对象时被调用的。通常会将一些对类中成员初始化的操作放到构造方法中去完成。</p>\n<p>C#析构函数（方法）</p>\n<p>析构方法的定义语法形式如下。<br>~类名()<br>{<br>    语句块；<br>}<br>在析构方法中不带任何参数，它实际上是保证在程序中会调用垃圾回收方法 Finalize()。</p>\n<p>C#方法重载（函数重载）</p>\n<p>在调用重载的方法时系统是根据所传 递参数的不同判断调用的是哪个方法。</p>\n<p>C#方法的参数（实参和形参）</p>\n<p>方法中的参数分为实际参数和形式参数，实际参数被称为实参，是在调用方法时传递的参数；形式参数被称为形参，是在方法定义中所写的参数。</p>\n<p>在 C# 语言中，方法中的参数除了定义数据类型外，还可以定义引用参数和输出参数。引用参数使用 ref 关键字定义，输出参数使用 out 关键字定义。</p>\n<p>引用参数在方法中使用时必须为其值，并且必须是由变量赋予的值，不能是常量或表达式。</p>\n<p>如果需要将方法中的每一个参数都设置为 ref 类型参数，则需要在每一个参数前面加上 ref 关键字修饰。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RefClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public bool Judge(ref int num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (num % 5 == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Program</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static void Main(string[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RefClass refClass = new RefClass();</span><br><span class=\"line\">        int a = 10;</span><br><span class=\"line\">        bool result = refCalss.Judge(ref a);</span><br><span class=\"line\">        Console.WriteLine(&quot;result is &quot; + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用参数与我们平时使用的参数有些类似，但输出参数不同，输出参数相当于返回值,即在方法调用完成后可以将返回的结果存放到输出参数中。</p>\n<p>输出参数多用于一个方法需要返回多个值的情况。需要注意的是，在使用输出参数时，必须在方法调用完成前为输出参数赋值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RefClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public bool Judge(int num, out bool result)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (num % 5 == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result =  true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result =  false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Program</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static void Main(string[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RefClass refClass = new RefClass();</span><br><span class=\"line\">        bool rst;</span><br><span class=\"line\">        refCalss.Judge(10, out rst);</span><br><span class=\"line\">        Console.WriteLine(&quot;result is &quot; + rst);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</the>","site":{"data":{}},"excerpt":"<ul>\n<li>C#教程：C#入门经典教程，值得收藏<br><a href=\"http://c.biancheng.net/csharp/\" target=\"_blank\" rel=\"noopener\">http://c.biancheng.net/csharp/</a></li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"C-语言特性\"><a href=\"#C-语言特性\" class=\"headerlink\" title=\"C#语言特性\"></a>C#语言特性</h2><ul>\n<li><p>C# 语言是一种安全的、稳定的、简单的、面向对象的编程语言， 它不仅去掉了 C++ 和 Java 语言中的一些复杂特性，还提供了可视化工具，能够高效地编写程序。</p>\n</li>\n<li><p>简单、安全<br>在 C# 语言中已经不再使用指针，而且不允许直接读取内存等不安全的操作。<br>它比 C、C++、Java 提供了更多的数据类型，并且每个数据类型都是固定大小的。<br>此外还提供了命名空间来管理 C# 文件，命名空间 相当于一个文件夹，在创建程序时，允许在一个命名空间中创建一个或多个类，方便调用和重用。</p>\n</li>\n<li><p>面向对象<br>与其他面向对象语言一样，C# 语言也具有面向对象语言的基本特征，即封装、继承、多态。</p>\n</li>\n<li><p>支持跨平台<br>C# 6.0 版本已经能在多个操作系统上使用，例如在 Mac、Linux 等。此外，还能将其应用到手机、PDA 等设备上。</p>\n</li>\n<li><p>开发多种类型的程序<br>使用 C# 语言不仅能开发在控制台下运行的应用程序，也能开发 Windows 窗体应用程序、网站、手机应用等多种应用程序，并且其提供的 Visual Studio 2015 开发工具中也支持多种类型的程序，让开发人员能快速地构建 C# 应用程序。</p>\n</li>\n</ul>\n<h2 id=\"C-类和对象\"><a href=\"#C-类和对象\" class=\"headerlink\" title=\"C#类和对象\"></a>C#类和对象</h2><p>类定义的具体语法形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类的访问修饰符    修饰符    类名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    类的成员</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<ul>\n<li>类的访问修饰符：用于设定对类的访问限制，包括 public、internal 或者不写，用 internal 或者不写时代表只能在当前项目中访问类；public 则代表可以在任何项目中访问类。</li>\n<li>修饰符：修饰符是对类本身特点的描述，包括 abstract、sealed 和 static。abstract 是抽象的意思，使用它修饰符的类不能被实例化；sealed 修饰的类是密封类，不能 被继承；static 修饰的类是静态类，不能被实例化。</li>\n<li>类名：类名用于描述类的功能，因此在定义类名时最好是具有实际意义，这样方便用户理解类中描述的内容。在同一个命名空间下类名必须是唯一的。</li>\n<li>类的成员：在类中能定义的元素，主要包括字段、属性、方法。</li>\n</ul>\n<h3 id=\"C-访问修饰符、修饰符\"><a href=\"#C-访问修饰符、修饰符\" class=\"headerlink\" title=\"C#访问修饰符、修饰符\"></a>C#访问修饰符、修饰符</h3><p>类的访问修饰符主要有 2 个，即 internal 和 public,如果省略了访问修饰符，即为 internal。</p>\n<p>类中成员的访问修饰符有 4 个，具体用法如下。</p>\n<ul>\n<li>public<br>成员可以被任何代码访问。</li>\n<li>private<br>成员仅能被同一个类中的代码访问，如果在类成员前未使用任何访问修饰 符，则默认为private。</li>\n<li>internal<br>成员仅能被同一个项目中的代码访问。</li>\n<li>protected<br>成员只能由类或派生类中的代码访问。</li>\n</ul>\n<p>在修饰字段时通常用两个修饰符，即readonly （只读）和static （静态的）。</p>\n<ul>\n<li>使用 readonly 修饰字段意味着只能读取该字段的值而不能给字段赋值。</li>\n<li>使用 static 修饰的字段是静态字段，可以直接通过类名访问该字段。  </li>\n</ul>\n<p>需要注意的是常量不能使用 static 修饰符修饰。</p>\n<p>定义字段的语法形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问修饰符    修饰符    数据类型    字段名；</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace code_1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class Test</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private int id;                         //定义私有的整型字段 id</span><br><span class=\"line\">        public readonly string name;            //定义公有的只读字符串类型字段 name</span><br><span class=\"line\">        internal static int age;                //定义内部的静态的整型字段 age</span><br><span class=\"line\">        private const string major = &quot;计算机&quot;;  //定义私有的字符串类型常量 major</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义方法的语法形式如下。<br>访问修饰符    修饰符    返回值类型    方法名(参数列表)<br>{<br>    语句块;<br>}<br>其中：<br>1) 访问修饰符</p>\n<p>所有类成员访问修饰符都可以使用，如果省略访问修饰符，默认是 private。<br>2) 修饰符</p>\n<p>在定义方法时修饰符包括 virtual（虚拟的）、abstract（抽象的）、override（重写的）、static（静态的）、sealed（密封的）。override 是在类之间继承时使用的。<br>3) 返回值类型</p>\n<p>用于在调用方法后得到返回结果，返回值可以是任意的数据类型，如果指定了返回值类型，必须使用 return 关键字返回一个与之类型匹配的值。如果没有指定返回值类型，必须使用 void 关键字表示没有返回值。<br>4) 方法名</p>\n<p>对方法所实现功能的描述。方法名的命名是以 Pascal 命名法为规范的。<br>5)参数列表</p>\n<p>在方法中允许有 0 到多个参数，如果没有指定参数也要保留参数列表的小括号。参数的定义形式是“数据类型参数名”，如果使用多个参数，多个参数之间需要用逗号隔开。</p>\n<p>属性经常与字段连用，并提供了 get 访问器和 set 访问器，分别用于获取或设置字段的值。</p>\n<p>get 访问器和 set 访问器的使用与方法非常类似，可以在操作字段时根据一些规则和条件来设置或获取字段的值。</p>\n<p>此外，为了保证字段的安全性，还能选择省去 get 访问器或 set 访问器。</p>\n<p>定义属性的语法形式如下。<br>public    数据类型    属性名<br>{<br>    get<br>    {<br>        获取属性的语句块;<br>        return 值;<br>    }<br>    set<br>    {<br>        设置属性得到语句块;<br>    }<br>}<br>其中：<br>1) get{}</p>\n<p>get 访问器，用于获取属性的值，需要在 get 语句最后使用 return 关键字返回一个与属性数据类型相兼容的值。</p>\n<p>若在属性定义中省略了该访问器，则不能在其他类中获取私有类型的字段值，因此也称为只写属性。<br>2) set{}</p>\n<p>set 访问器用于设置字段的值，这里需要使用一个特殊的值 value，它就是给字段赋的值。</p>\n<p>在 set 访问器省略后无法在其他类中给字段赋值，因此也称为只读属性。</p>\n<p>通常属性名的命名使用的是 Pascal 命名法，单词的首字母大写，如果是由多个单词构成，每个单词的首字母大写。</p>\n<p>由于属性都是针对某个字段赋值的，因此属性的名称通常是将字段中每个单词的首字母大写。例如定义了一个名为 name 的字段，属性名则为 Name。</p>\n<p>C#构造函数（构造方法）</p>\n<p>构造方法的定义语法形式如下。<br>访问修饰符  类名 (参数列表)<br>{<br>    语句块；<br>}<br>这里构造方法的访问修饰符通常是public类型的，这样在其他类中都可以创建该类的对象。</p>\n<p>如果将访问修饰符设置成private类型的，则无法创建该类的对象。构造方法中的参数与其他方法一样，都是 0 到多个参数。</p>\n<p>此外，构造方法是在创建类的对象时被调用的。通常会将一些对类中成员初始化的操作放到构造方法中去完成。</p>\n<p>C#析构函数（方法）</p>\n<p>析构方法的定义语法形式如下。<br>~类名()<br>{<br>    语句块；<br>}<br>在析构方法中不带任何参数，它实际上是保证在程序中会调用垃圾回收方法 Finalize()。</p>\n<p>C#方法重载（函数重载）</p>\n<p>在调用重载的方法时系统是根据所传 递参数的不同判断调用的是哪个方法。</p>\n<p>C#方法的参数（实参和形参）</p>\n<p>方法中的参数分为实际参数和形式参数，实际参数被称为实参，是在调用方法时传递的参数；形式参数被称为形参，是在方法定义中所写的参数。</p>\n<p>在 C# 语言中，方法中的参数除了定义数据类型外，还可以定义引用参数和输出参数。引用参数使用 ref 关键字定义，输出参数使用 out 关键字定义。</p>\n<p>引用参数在方法中使用时必须为其值，并且必须是由变量赋予的值，不能是常量或表达式。</p>\n<p>如果需要将方法中的每一个参数都设置为 ref 类型参数，则需要在每一个参数前面加上 ref 关键字修饰。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RefClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public bool Judge(ref int num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (num % 5 == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Program</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static void Main(string[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RefClass refClass = new RefClass();</span><br><span class=\"line\">        int a = 10;</span><br><span class=\"line\">        bool result = refCalss.Judge(ref a);</span><br><span class=\"line\">        Console.WriteLine(&quot;result is &quot; + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用参数与我们平时使用的参数有些类似，但输出参数不同，输出参数相当于返回值,即在方法调用完成后可以将返回的结果存放到输出参数中。</p>\n<p>输出参数多用于一个方法需要返回多个值的情况。需要注意的是，在使用输出参数时，必须在方法调用完成前为输出参数赋值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RefClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public bool Judge(int num, out bool result)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (num % 5 == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result =  true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result =  false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Program</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static void Main(string[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RefClass refClass = new RefClass();</span><br><span class=\"line\">        bool rst;</span><br><span class=\"line\">        refCalss.Judge(10, out rst);</span><br><span class=\"line\">        Console.WriteLine(&quot;result is &quot; + rst);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</the>"},{"title":"OpenCV学习笔记二：图像处理","date":"2019-06-22T13:58:29.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要> \n\n粗略搬运，仅作个人笔记参考，有时间再美化，搬运自\n* [OpenCV-Python] OpenCV 中的图像处理 部分 IV (一) - _Undo - 博客园  \nhttps://www.cnblogs.com/Undo-self-blog/p/8434906.html \n\n颜色空间转化  \n图像平滑  \n形态学转换\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 颜色空间转化\n* cv2.cvtColor()\n* cv2.inRange() \n\ncv2.cvtColor(input_image ，flag)，其中 flag就是转换类型。  \n对于 BGR↔Gray 的转换，我们要使用的 flag 就是 cv2.COLOR_BGR2GRAY。  \n同样对于 BGR↔HSV 的转换，我们用的 flag 就是 cv2.COLOR_BGR2HSV。  \n\n\n## 几何变换\n* cv2.warpAffine\n* cv2.warpPerspective\n* cv2.getPerspectiveTransform\n\n### 扩展缩放\n* cv2.resize()\n\n### 平移\n### 旋转\n### 仿射变换\n### 透视变换\n\n\n```python\nimport cv2\nimport numpy as np\nimg=cv2.imread('./images/lena.jpg')\n# 下面的 None 本应该是输出图像的尺寸，但是因为后边我们设置了缩放因子\n# 因此这里为 None\nres=cv2.resize(img,None,fx=2,fy=2,interpolation=cv2.INTER_CUBIC)\n#OR\n# 这里呢，我们直接设置输出图像的尺寸，所以不用设置缩放因子\nheight,width=img.shape[:2]\nres=cv2.resize(img,(2*width,2*height),interpolation=cv2.INTER_CUBIC)\nwhile(1):\n    cv2.imshow('res',res)\n    cv2.imshow('img',img)\n    if cv2.waitKey(1) & 0xFF == 27:\n        break\ncv2.destroyAllWindows()\n# Resize(src, dst, interpolation=CV_INTER_LINEAR)\n\n```\n\n## 图像平滑\n\n### 2D卷积\nOpenCV 提供的函数 cv.filter2D() 可以让我们对一幅图像进行卷积操作。下面我们将对一幅图像使用平均滤波器。下面是一个 5x5 的平均滤波器核：\n$$K=\\frac{1}{25}\\left[\\begin{array}{ccccc}{1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1}\\end{array}\\right]$$\n操作如下：将核放在图像的一个像素 A 上，求与核对应的图像上 25（5x5）个像素的和，在取平均数，用这个平均数替代像素 A 的值。重复以上操作直到将图像的每一个像素值都更新一边。代码如下:  \n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nkernel = np.ones((5,5),np.float32)/25\ndst = cv2.filter2D(img, -1, kernel)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(dst),plt.title('Averaging')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_4_0.png)\n\n\n### 图像模糊（图像平滑）\n使用低通滤波器可以达到图像模糊的目的。这对与去除噪音很有帮助。其实就是去除图像中的高频成分（比如：噪音，边界）。所以边界也会被模糊一点。（当然，也有一些模糊技术不会模糊掉边界）。OpenCV 提供了四种模糊技术。  \n\n### 平均\n　　这是由一个归一化卷积框完成的。他只是用卷积框覆盖区域所有像素的平均值来代替中心元素。可以使用函数 cv2.blur() 和 cv2.boxFilter() 来完这个任务。可以同看查看文档了解更多卷积框的细节。我们需要设定卷积框的宽和高。下面是一个 3x3 的归一化卷积框：\n　　　　　$$　K =  \\frac{1}{9} \\begin{bmatrix} 1 & 1 & 1  \\\\ 1 & 1 & 1 \\\\ 1 & 1 & 1 \\end{bmatrix}$$\n注意：如果你不想使用归一化卷积框，你应该使用 cv2.boxFilter()，这时要传入参数 normalize=False。\n下面与第一部分一样的一个例子：\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\n\nblur = cv2.blur(img,(5,5))\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_6_0.png)\n\n\n### 高斯模糊\n　　现在把卷积核换成高斯核（简单来说，方框不变，将原来每个方框的值是相等的，现在里面的值是符合高斯分布的，方框中心的值最大，其余方框根据距离中心元素的距离递减，构成一个高斯小山包。原来的求平均数现在变成求加权平均数，全就是方框里的值）。实现的函数是 cv2.GaussianBlur()。我们需要指定高斯核的宽和高（必须是奇数）。以及高斯函数沿 X，Y 方向的标准差。如果我们只指定了 X 方向的的标准差，Y 方向也会取相同值。如果两个标准差都是 0，那么函数会根据核函数的大小自己计算。高斯滤波可以有效的从图像中去除高斯噪音。\n如果你愿意的话，你也可以使用函数 cv2.getGaussianKernel() 自己构建一个高斯核。\n如果要使用高斯模糊的话，上边的代码应该写成：\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\n\n#0 是指根据窗口大小（ 5,5 ）来计算高斯函数标准差\nblur = cv2.GaussianBlur(img,(5,5),0)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_8_0.png)\n\n\n### 中值模糊\n顾名思义就是用与卷积框对应像素的中值来替代中心像素的值。这个滤波器经常用来去除椒盐噪声。前面的滤波器都是用计算得到的一个新值来取代中心像素的值，而中值滤波是用中心像素周围（也可以使他本身）的值来取代他。他能有效的去除噪声。卷积核的大小也应该是一个奇数。\n在这个例子中，我们给原始图像加上 50% 的噪声然后再使用中值模糊。\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\n\nmedian = cv2.medianBlur(img,5)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_10_0.png)\n\n\n### 双边滤波\n\n函数 cv2.bilateralFilter() 能在保持边界清晰的情况下有效的去除噪音。但是这种操作与其他滤波器相比会比较慢。我们已经知道高斯滤波器是求中心点邻近区域像素的高斯加权平均值。这种高斯滤波器只考虑像素之间的空间关系，而不会考虑像素值之间的关系（像素的相似度）。所以这种方法不会考虑一个像素是否位于边界。因此边界也会别模糊掉，而这正不是我们想要。双边滤波在同时使用空间高斯权重和灰度值相似性高斯权重。空间高斯函数确保只有邻近区域的像素对中心点有影响，灰度值相似性高斯函数确保只有与中心像素灰度值相近的才会被用来做模糊运算。所以这种方法会确保边界不会被模糊掉，因为边界处的灰度值变化比较大。\n\n\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n#cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace)\n#d – Diameter of each pixel neighborhood that is used during filtering.\n# If it is non-positive, it is computed from sigmaSpace\n#9 邻域直径，两个 75 分别是空间高斯函数标准差，灰度值相似性高斯函数标准差\nblur = cv2.bilateralFilter(img,9,75,75)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_12_0.png)\n\n\n## 形态学转换\n形态学操作是根据图像形状进行的简单操作。一般情况下对二值化图像进行的操作。需要输入两个参数，一个是原始图像，第二个被称为结构化元素或核，它是用来决定操作的性质的。两个基本的形态学操作是腐蚀和膨胀。他们的变体构成了开运算，闭运算，梯度等。\n\n\n### 腐蚀\n\n就像土壤侵蚀一样，这个操作会把前景物体的边界腐蚀掉（但是前景仍然是白色）。这是怎么做到的呢？卷积核沿着图像滑动，如果与卷积核对应的原图像的所有像素值都是 1，那么中心元素就保持原来的像素值，否则就变为零。  \n这会产生什么影响呢？根据卷积核的大小靠近前景的所有像素都会被腐蚀掉（变为 0），所以前景物体会变小，整幅图像的白色区域会减少。这对于去除白噪声很有用，也可以用来断开两个连在一块的物体等。\n\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/j.png', 1)\nkernel = np.ones((5,5),np.uint8)\nerosion = cv2.erode(img,kernel,iterations = 1)\n\nplt.imshow(erosion)\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_15_0.png)\n\n\n### 膨胀\n\n与腐蚀相反，与卷积核对应的原图像的像素值中只要有一个是 1，中心元素的像素值就是 1。所以这个操作会增加图像中的白色区域（前景）。一般在去噪声时先用腐蚀再用膨胀。因为腐蚀在去掉白噪声的同时，也会使前景对象变小。所以我们再对他进行膨胀。这时噪声已经被去除了，不会再回来了，但是前景还在并会增加。膨胀也可以用来连接两个分开的物体。\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/j.png', 1)\nkernel = np.ones((5,5),np.uint8)\ndilation = cv2.dilate(img,kernel,iterations = 1)\n\nplt.imshow(dilation)\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_17_0.png)\n\n\n### 开运算\n先进性腐蚀再进行膨胀就叫做开运算。就像我们上面介绍的那样，它被用来去除噪声。这里我们用到的函数是 cv2.morphologyEx()。\n\n### 闭运算\n先膨胀再腐蚀。它经常被用来填充前景物体中的小洞，或者前景物体上的小黑点。\n\n### 形态学梯度\n其实就是一幅图像膨胀与腐蚀的差别。结果看上去就像前景物体的轮廓。\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/OpenCV学习笔记二：图像处理.md","raw":"---\ntitle: OpenCV学习笔记二：图像处理\ndate: 2019-06-22 21:58:29\ntags:\n  - opencv\n---\n** {{ title }} ** <Excerpt in index | 首页摘要> \n\n粗略搬运，仅作个人笔记参考，有时间再美化，搬运自\n* [OpenCV-Python] OpenCV 中的图像处理 部分 IV (一) - _Undo - 博客园  \nhttps://www.cnblogs.com/Undo-self-blog/p/8434906.html \n\n颜色空间转化  \n图像平滑  \n形态学转换\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 颜色空间转化\n* cv2.cvtColor()\n* cv2.inRange() \n\ncv2.cvtColor(input_image ，flag)，其中 flag就是转换类型。  \n对于 BGR↔Gray 的转换，我们要使用的 flag 就是 cv2.COLOR_BGR2GRAY。  \n同样对于 BGR↔HSV 的转换，我们用的 flag 就是 cv2.COLOR_BGR2HSV。  \n\n\n## 几何变换\n* cv2.warpAffine\n* cv2.warpPerspective\n* cv2.getPerspectiveTransform\n\n### 扩展缩放\n* cv2.resize()\n\n### 平移\n### 旋转\n### 仿射变换\n### 透视变换\n\n\n```python\nimport cv2\nimport numpy as np\nimg=cv2.imread('./images/lena.jpg')\n# 下面的 None 本应该是输出图像的尺寸，但是因为后边我们设置了缩放因子\n# 因此这里为 None\nres=cv2.resize(img,None,fx=2,fy=2,interpolation=cv2.INTER_CUBIC)\n#OR\n# 这里呢，我们直接设置输出图像的尺寸，所以不用设置缩放因子\nheight,width=img.shape[:2]\nres=cv2.resize(img,(2*width,2*height),interpolation=cv2.INTER_CUBIC)\nwhile(1):\n    cv2.imshow('res',res)\n    cv2.imshow('img',img)\n    if cv2.waitKey(1) & 0xFF == 27:\n        break\ncv2.destroyAllWindows()\n# Resize(src, dst, interpolation=CV_INTER_LINEAR)\n\n```\n\n## 图像平滑\n\n### 2D卷积\nOpenCV 提供的函数 cv.filter2D() 可以让我们对一幅图像进行卷积操作。下面我们将对一幅图像使用平均滤波器。下面是一个 5x5 的平均滤波器核：\n$$K=\\frac{1}{25}\\left[\\begin{array}{ccccc}{1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1}\\end{array}\\right]$$\n操作如下：将核放在图像的一个像素 A 上，求与核对应的图像上 25（5x5）个像素的和，在取平均数，用这个平均数替代像素 A 的值。重复以上操作直到将图像的每一个像素值都更新一边。代码如下:  \n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nkernel = np.ones((5,5),np.float32)/25\ndst = cv2.filter2D(img, -1, kernel)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(dst),plt.title('Averaging')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_4_0.png)\n\n\n### 图像模糊（图像平滑）\n使用低通滤波器可以达到图像模糊的目的。这对与去除噪音很有帮助。其实就是去除图像中的高频成分（比如：噪音，边界）。所以边界也会被模糊一点。（当然，也有一些模糊技术不会模糊掉边界）。OpenCV 提供了四种模糊技术。  \n\n### 平均\n　　这是由一个归一化卷积框完成的。他只是用卷积框覆盖区域所有像素的平均值来代替中心元素。可以使用函数 cv2.blur() 和 cv2.boxFilter() 来完这个任务。可以同看查看文档了解更多卷积框的细节。我们需要设定卷积框的宽和高。下面是一个 3x3 的归一化卷积框：\n　　　　　$$　K =  \\frac{1}{9} \\begin{bmatrix} 1 & 1 & 1  \\\\ 1 & 1 & 1 \\\\ 1 & 1 & 1 \\end{bmatrix}$$\n注意：如果你不想使用归一化卷积框，你应该使用 cv2.boxFilter()，这时要传入参数 normalize=False。\n下面与第一部分一样的一个例子：\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\n\nblur = cv2.blur(img,(5,5))\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_6_0.png)\n\n\n### 高斯模糊\n　　现在把卷积核换成高斯核（简单来说，方框不变，将原来每个方框的值是相等的，现在里面的值是符合高斯分布的，方框中心的值最大，其余方框根据距离中心元素的距离递减，构成一个高斯小山包。原来的求平均数现在变成求加权平均数，全就是方框里的值）。实现的函数是 cv2.GaussianBlur()。我们需要指定高斯核的宽和高（必须是奇数）。以及高斯函数沿 X，Y 方向的标准差。如果我们只指定了 X 方向的的标准差，Y 方向也会取相同值。如果两个标准差都是 0，那么函数会根据核函数的大小自己计算。高斯滤波可以有效的从图像中去除高斯噪音。\n如果你愿意的话，你也可以使用函数 cv2.getGaussianKernel() 自己构建一个高斯核。\n如果要使用高斯模糊的话，上边的代码应该写成：\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\n\n#0 是指根据窗口大小（ 5,5 ）来计算高斯函数标准差\nblur = cv2.GaussianBlur(img,(5,5),0)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_8_0.png)\n\n\n### 中值模糊\n顾名思义就是用与卷积框对应像素的中值来替代中心像素的值。这个滤波器经常用来去除椒盐噪声。前面的滤波器都是用计算得到的一个新值来取代中心像素的值，而中值滤波是用中心像素周围（也可以使他本身）的值来取代他。他能有效的去除噪声。卷积核的大小也应该是一个奇数。\n在这个例子中，我们给原始图像加上 50% 的噪声然后再使用中值模糊。\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\n\nmedian = cv2.medianBlur(img,5)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_10_0.png)\n\n\n### 双边滤波\n\n函数 cv2.bilateralFilter() 能在保持边界清晰的情况下有效的去除噪音。但是这种操作与其他滤波器相比会比较慢。我们已经知道高斯滤波器是求中心点邻近区域像素的高斯加权平均值。这种高斯滤波器只考虑像素之间的空间关系，而不会考虑像素值之间的关系（像素的相似度）。所以这种方法不会考虑一个像素是否位于边界。因此边界也会别模糊掉，而这正不是我们想要。双边滤波在同时使用空间高斯权重和灰度值相似性高斯权重。空间高斯函数确保只有邻近区域的像素对中心点有影响，灰度值相似性高斯函数确保只有与中心像素灰度值相近的才会被用来做模糊运算。所以这种方法会确保边界不会被模糊掉，因为边界处的灰度值变化比较大。\n\n\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/opencv-logo.png')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n#cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace)\n#d – Diameter of each pixel neighborhood that is used during filtering.\n# If it is non-positive, it is computed from sigmaSpace\n#9 邻域直径，两个 75 分别是空间高斯函数标准差，灰度值相似性高斯函数标准差\nblur = cv2.bilateralFilter(img,9,75,75)\n\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_12_0.png)\n\n\n## 形态学转换\n形态学操作是根据图像形状进行的简单操作。一般情况下对二值化图像进行的操作。需要输入两个参数，一个是原始图像，第二个被称为结构化元素或核，它是用来决定操作的性质的。两个基本的形态学操作是腐蚀和膨胀。他们的变体构成了开运算，闭运算，梯度等。\n\n\n### 腐蚀\n\n就像土壤侵蚀一样，这个操作会把前景物体的边界腐蚀掉（但是前景仍然是白色）。这是怎么做到的呢？卷积核沿着图像滑动，如果与卷积核对应的原图像的所有像素值都是 1，那么中心元素就保持原来的像素值，否则就变为零。  \n这会产生什么影响呢？根据卷积核的大小靠近前景的所有像素都会被腐蚀掉（变为 0），所以前景物体会变小，整幅图像的白色区域会减少。这对于去除白噪声很有用，也可以用来断开两个连在一块的物体等。\n\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/j.png', 1)\nkernel = np.ones((5,5),np.uint8)\nerosion = cv2.erode(img,kernel,iterations = 1)\n\nplt.imshow(erosion)\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_15_0.png)\n\n\n### 膨胀\n\n与腐蚀相反，与卷积核对应的原图像的像素值中只要有一个是 1，中心元素的像素值就是 1。所以这个操作会增加图像中的白色区域（前景）。一般在去噪声时先用腐蚀再用膨胀。因为腐蚀在去掉白噪声的同时，也会使前景对象变小。所以我们再对他进行膨胀。这时噪声已经被去除了，不会再回来了，但是前景还在并会增加。膨胀也可以用来连接两个分开的物体。\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('./images/j.png', 1)\nkernel = np.ones((5,5),np.uint8)\ndilation = cv2.dilate(img,kernel,iterations = 1)\n\nplt.imshow(dilation)\nplt.show()\n```\n\n\n![png](./OpenCV学习笔记二：图像处理/output_17_0.png)\n\n\n### 开运算\n先进性腐蚀再进行膨胀就叫做开运算。就像我们上面介绍的那样，它被用来去除噪声。这里我们用到的函数是 cv2.morphologyEx()。\n\n### 闭运算\n先膨胀再腐蚀。它经常被用来填充前景物体中的小洞，或者前景物体上的小黑点。\n\n### 形态学梯度\n其实就是一幅图像膨胀与腐蚀的差别。结果看上去就像前景物体的轮廓。\n\n\n\n\n\n\n\n\n\n\n","slug":"OpenCV学习笔记二：图像处理","published":1,"updated":"2020-01-05T19:13:24.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50ae005o4cvjjg7oth9g","content":"<p><strong> OpenCV学习笔记二：图像处理 </strong> <excerpt in index | 首页摘要> </excerpt></p>\n<p>粗略搬运，仅作个人笔记参考，有时间再美化，搬运自</p>\n<ul>\n<li>[OpenCV-Python] OpenCV 中的图像处理 部分 IV (一) - _Undo - 博客园<br><a href=\"https://www.cnblogs.com/Undo-self-blog/p/8434906.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Undo-self-blog/p/8434906.html</a> </li>\n</ul>\n<p>颜色空间转化<br>图像平滑<br>形态学转换<br><a id=\"more\"></a></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"颜色空间转化\"><a href=\"#颜色空间转化\" class=\"headerlink\" title=\"颜色空间转化\"></a>颜色空间转化</h2><ul>\n<li>cv2.cvtColor()</li>\n<li>cv2.inRange() </li>\n</ul>\n<p>cv2.cvtColor(input_image ，flag)，其中 flag就是转换类型。<br>对于 BGR↔Gray 的转换，我们要使用的 flag 就是 cv2.COLOR_BGR2GRAY。<br>同样对于 BGR↔HSV 的转换，我们用的 flag 就是 cv2.COLOR_BGR2HSV。  </p>\n<h2 id=\"几何变换\"><a href=\"#几何变换\" class=\"headerlink\" title=\"几何变换\"></a>几何变换</h2><ul>\n<li>cv2.warpAffine</li>\n<li>cv2.warpPerspective</li>\n<li>cv2.getPerspectiveTransform</li>\n</ul>\n<h3 id=\"扩展缩放\"><a href=\"#扩展缩放\" class=\"headerlink\" title=\"扩展缩放\"></a>扩展缩放</h3><ul>\n<li>cv2.resize()</li>\n</ul>\n<h3 id=\"平移\"><a href=\"#平移\" class=\"headerlink\" title=\"平移\"></a>平移</h3><h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><h3 id=\"仿射变换\"><a href=\"#仿射变换\" class=\"headerlink\" title=\"仿射变换\"></a>仿射变换</h3><h3 id=\"透视变换\"><a href=\"#透视变换\" class=\"headerlink\" title=\"透视变换\"></a>透视变换</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">img=cv2.imread(<span class=\"string\">'./images/lena.jpg'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 下面的 None 本应该是输出图像的尺寸，但是因为后边我们设置了缩放因子</span></span><br><span class=\"line\"><span class=\"comment\"># 因此这里为 None</span></span><br><span class=\"line\">res=cv2.resize(img,<span class=\"literal\">None</span>,fx=<span class=\"number\">2</span>,fy=<span class=\"number\">2</span>,interpolation=cv2.INTER_CUBIC)</span><br><span class=\"line\"><span class=\"comment\">#OR</span></span><br><span class=\"line\"><span class=\"comment\"># 这里呢，我们直接设置输出图像的尺寸，所以不用设置缩放因子</span></span><br><span class=\"line\">height,width=img.shape[:<span class=\"number\">2</span>]</span><br><span class=\"line\">res=cv2.resize(img,(<span class=\"number\">2</span>*width,<span class=\"number\">2</span>*height),interpolation=cv2.INTER_CUBIC)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'res'</span>,res)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'img'</span>,img)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cv2.waitKey(<span class=\"number\">1</span>) &amp; <span class=\"number\">0xFF</span> == <span class=\"number\">27</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">cv2.destroyAllWindows()</span><br><span class=\"line\"><span class=\"comment\"># Resize(src, dst, interpolation=CV_INTER_LINEAR)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"图像平滑\"><a href=\"#图像平滑\" class=\"headerlink\" title=\"图像平滑\"></a>图像平滑</h2><h3 id=\"2D卷积\"><a href=\"#2D卷积\" class=\"headerlink\" title=\"2D卷积\"></a>2D卷积</h3><p>OpenCV 提供的函数 cv.filter2D() 可以让我们对一幅图像进行卷积操作。下面我们将对一幅图像使用平均滤波器。下面是一个 5x5 的平均滤波器核：</p>\n<script type=\"math/tex; mode=display\">K=\\frac{1}{25}\\left[\\begin{array}{ccccc}{1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1}\\end{array}\\right]</script><p>操作如下：将核放在图像的一个像素 A 上，求与核对应的图像上 25（5x5）个像素的和，在取平均数，用这个平均数替代像素 A 的值。重复以上操作直到将图像的每一个像素值都更新一边。代码如下:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"></span><br><span class=\"line\">kernel = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>),np.float32)/<span class=\"number\">25</span></span><br><span class=\"line\">dst = cv2.filter2D(img, <span class=\"number\">-1</span>, kernel)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(dst),plt.title(<span class=\"string\">'Averaging'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_4_0.png\" alt=\"png\"></p>\n<h3 id=\"图像模糊（图像平滑）\"><a href=\"#图像模糊（图像平滑）\" class=\"headerlink\" title=\"图像模糊（图像平滑）\"></a>图像模糊（图像平滑）</h3><p>使用低通滤波器可以达到图像模糊的目的。这对与去除噪音很有帮助。其实就是去除图像中的高频成分（比如：噪音，边界）。所以边界也会被模糊一点。（当然，也有一些模糊技术不会模糊掉边界）。OpenCV 提供了四种模糊技术。  </p>\n<h3 id=\"平均\"><a href=\"#平均\" class=\"headerlink\" title=\"平均\"></a>平均</h3><p>　　这是由一个归一化卷积框完成的。他只是用卷积框覆盖区域所有像素的平均值来代替中心元素。可以使用函数 cv2.blur() 和 cv2.boxFilter() 来完这个任务。可以同看查看文档了解更多卷积框的细节。我们需要设定卷积框的宽和高。下面是一个 3x3 的归一化卷积框：<br>　　　　　<script type=\"math/tex\">K =  \\frac{1}{9} \\begin{bmatrix} 1 & 1 & 1  \\\\ 1 & 1 & 1 \\\\ 1 & 1 & 1 \\end{bmatrix}</script><br>注意：如果你不想使用归一化卷积框，你应该使用 cv2.boxFilter()，这时要传入参数 normalize=False。<br>下面与第一部分一样的一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">blur = cv2.blur(img,(<span class=\"number\">5</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_6_0.png\" alt=\"png\"></p>\n<h3 id=\"高斯模糊\"><a href=\"#高斯模糊\" class=\"headerlink\" title=\"高斯模糊\"></a>高斯模糊</h3><p>　　现在把卷积核换成高斯核（简单来说，方框不变，将原来每个方框的值是相等的，现在里面的值是符合高斯分布的，方框中心的值最大，其余方框根据距离中心元素的距离递减，构成一个高斯小山包。原来的求平均数现在变成求加权平均数，全就是方框里的值）。实现的函数是 cv2.GaussianBlur()。我们需要指定高斯核的宽和高（必须是奇数）。以及高斯函数沿 X，Y 方向的标准差。如果我们只指定了 X 方向的的标准差，Y 方向也会取相同值。如果两个标准差都是 0，那么函数会根据核函数的大小自己计算。高斯滤波可以有效的从图像中去除高斯噪音。<br>如果你愿意的话，你也可以使用函数 cv2.getGaussianKernel() 自己构建一个高斯核。<br>如果要使用高斯模糊的话，上边的代码应该写成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0 是指根据窗口大小（ 5,5 ）来计算高斯函数标准差</span></span><br><span class=\"line\">blur = cv2.GaussianBlur(img,(<span class=\"number\">5</span>,<span class=\"number\">5</span>),<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_8_0.png\" alt=\"png\"></p>\n<h3 id=\"中值模糊\"><a href=\"#中值模糊\" class=\"headerlink\" title=\"中值模糊\"></a>中值模糊</h3><p>顾名思义就是用与卷积框对应像素的中值来替代中心像素的值。这个滤波器经常用来去除椒盐噪声。前面的滤波器都是用计算得到的一个新值来取代中心像素的值，而中值滤波是用中心像素周围（也可以使他本身）的值来取代他。他能有效的去除噪声。卷积核的大小也应该是一个奇数。<br>在这个例子中，我们给原始图像加上 50% 的噪声然后再使用中值模糊。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">median = cv2.medianBlur(img,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_10_0.png\" alt=\"png\"></p>\n<h3 id=\"双边滤波\"><a href=\"#双边滤波\" class=\"headerlink\" title=\"双边滤波\"></a>双边滤波</h3><p>函数 cv2.bilateralFilter() 能在保持边界清晰的情况下有效的去除噪音。但是这种操作与其他滤波器相比会比较慢。我们已经知道高斯滤波器是求中心点邻近区域像素的高斯加权平均值。这种高斯滤波器只考虑像素之间的空间关系，而不会考虑像素值之间的关系（像素的相似度）。所以这种方法不会考虑一个像素是否位于边界。因此边界也会别模糊掉，而这正不是我们想要。双边滤波在同时使用空间高斯权重和灰度值相似性高斯权重。空间高斯函数确保只有邻近区域的像素对中心点有影响，灰度值相似性高斯函数确保只有与中心像素灰度值相近的才会被用来做模糊运算。所以这种方法会确保边界不会被模糊掉，因为边界处的灰度值变化比较大。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace)</span></span><br><span class=\"line\"><span class=\"comment\">#d – Diameter of each pixel neighborhood that is used during filtering.</span></span><br><span class=\"line\"><span class=\"comment\"># If it is non-positive, it is computed from sigmaSpace</span></span><br><span class=\"line\"><span class=\"comment\">#9 邻域直径，两个 75 分别是空间高斯函数标准差，灰度值相似性高斯函数标准差</span></span><br><span class=\"line\">blur = cv2.bilateralFilter(img,<span class=\"number\">9</span>,<span class=\"number\">75</span>,<span class=\"number\">75</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_12_0.png\" alt=\"png\"></p>\n<h2 id=\"形态学转换\"><a href=\"#形态学转换\" class=\"headerlink\" title=\"形态学转换\"></a>形态学转换</h2><p>形态学操作是根据图像形状进行的简单操作。一般情况下对二值化图像进行的操作。需要输入两个参数，一个是原始图像，第二个被称为结构化元素或核，它是用来决定操作的性质的。两个基本的形态学操作是腐蚀和膨胀。他们的变体构成了开运算，闭运算，梯度等。</p>\n<h3 id=\"腐蚀\"><a href=\"#腐蚀\" class=\"headerlink\" title=\"腐蚀\"></a>腐蚀</h3><p>就像土壤侵蚀一样，这个操作会把前景物体的边界腐蚀掉（但是前景仍然是白色）。这是怎么做到的呢？卷积核沿着图像滑动，如果与卷积核对应的原图像的所有像素值都是 1，那么中心元素就保持原来的像素值，否则就变为零。<br>这会产生什么影响呢？根据卷积核的大小靠近前景的所有像素都会被腐蚀掉（变为 0），所以前景物体会变小，整幅图像的白色区域会减少。这对于去除白噪声很有用，也可以用来断开两个连在一块的物体等。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/j.png'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">kernel = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>),np.uint8)</span><br><span class=\"line\">erosion = cv2.erode(img,kernel,iterations = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(erosion)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_15_0.png\" alt=\"png\"></p>\n<h3 id=\"膨胀\"><a href=\"#膨胀\" class=\"headerlink\" title=\"膨胀\"></a>膨胀</h3><p>与腐蚀相反，与卷积核对应的原图像的像素值中只要有一个是 1，中心元素的像素值就是 1。所以这个操作会增加图像中的白色区域（前景）。一般在去噪声时先用腐蚀再用膨胀。因为腐蚀在去掉白噪声的同时，也会使前景对象变小。所以我们再对他进行膨胀。这时噪声已经被去除了，不会再回来了，但是前景还在并会增加。膨胀也可以用来连接两个分开的物体。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/j.png'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">kernel = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>),np.uint8)</span><br><span class=\"line\">dilation = cv2.dilate(img,kernel,iterations = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(dilation)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_17_0.png\" alt=\"png\"></p>\n<h3 id=\"开运算\"><a href=\"#开运算\" class=\"headerlink\" title=\"开运算\"></a>开运算</h3><p>先进性腐蚀再进行膨胀就叫做开运算。就像我们上面介绍的那样，它被用来去除噪声。这里我们用到的函数是 cv2.morphologyEx()。</p>\n<h3 id=\"闭运算\"><a href=\"#闭运算\" class=\"headerlink\" title=\"闭运算\"></a>闭运算</h3><p>先膨胀再腐蚀。它经常被用来填充前景物体中的小洞，或者前景物体上的小黑点。</p>\n<h3 id=\"形态学梯度\"><a href=\"#形态学梯度\" class=\"headerlink\" title=\"形态学梯度\"></a>形态学梯度</h3><p>其实就是一幅图像膨胀与腐蚀的差别。结果看上去就像前景物体的轮廓。</p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> OpenCV学习笔记二：图像处理 </strong> <excerpt in index | 首页摘要> </excerpt></p>\n<p>粗略搬运，仅作个人笔记参考，有时间再美化，搬运自</p>\n<ul>\n<li>[OpenCV-Python] OpenCV 中的图像处理 部分 IV (一) - _Undo - 博客园<br><a href=\"https://www.cnblogs.com/Undo-self-blog/p/8434906.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Undo-self-blog/p/8434906.html</a> </li>\n</ul>\n<p>颜色空间转化<br>图像平滑<br>形态学转换<br></p>","more":"<p></p>\n<the rest of contents | 余下全文>\n\n<h2 id=\"颜色空间转化\"><a href=\"#颜色空间转化\" class=\"headerlink\" title=\"颜色空间转化\"></a>颜色空间转化</h2><ul>\n<li>cv2.cvtColor()</li>\n<li>cv2.inRange() </li>\n</ul>\n<p>cv2.cvtColor(input_image ，flag)，其中 flag就是转换类型。<br>对于 BGR↔Gray 的转换，我们要使用的 flag 就是 cv2.COLOR_BGR2GRAY。<br>同样对于 BGR↔HSV 的转换，我们用的 flag 就是 cv2.COLOR_BGR2HSV。  </p>\n<h2 id=\"几何变换\"><a href=\"#几何变换\" class=\"headerlink\" title=\"几何变换\"></a>几何变换</h2><ul>\n<li>cv2.warpAffine</li>\n<li>cv2.warpPerspective</li>\n<li>cv2.getPerspectiveTransform</li>\n</ul>\n<h3 id=\"扩展缩放\"><a href=\"#扩展缩放\" class=\"headerlink\" title=\"扩展缩放\"></a>扩展缩放</h3><ul>\n<li>cv2.resize()</li>\n</ul>\n<h3 id=\"平移\"><a href=\"#平移\" class=\"headerlink\" title=\"平移\"></a>平移</h3><h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><h3 id=\"仿射变换\"><a href=\"#仿射变换\" class=\"headerlink\" title=\"仿射变换\"></a>仿射变换</h3><h3 id=\"透视变换\"><a href=\"#透视变换\" class=\"headerlink\" title=\"透视变换\"></a>透视变换</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">img=cv2.imread(<span class=\"string\">'./images/lena.jpg'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 下面的 None 本应该是输出图像的尺寸，但是因为后边我们设置了缩放因子</span></span><br><span class=\"line\"><span class=\"comment\"># 因此这里为 None</span></span><br><span class=\"line\">res=cv2.resize(img,<span class=\"literal\">None</span>,fx=<span class=\"number\">2</span>,fy=<span class=\"number\">2</span>,interpolation=cv2.INTER_CUBIC)</span><br><span class=\"line\"><span class=\"comment\">#OR</span></span><br><span class=\"line\"><span class=\"comment\"># 这里呢，我们直接设置输出图像的尺寸，所以不用设置缩放因子</span></span><br><span class=\"line\">height,width=img.shape[:<span class=\"number\">2</span>]</span><br><span class=\"line\">res=cv2.resize(img,(<span class=\"number\">2</span>*width,<span class=\"number\">2</span>*height),interpolation=cv2.INTER_CUBIC)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'res'</span>,res)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'img'</span>,img)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cv2.waitKey(<span class=\"number\">1</span>) &amp; <span class=\"number\">0xFF</span> == <span class=\"number\">27</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">cv2.destroyAllWindows()</span><br><span class=\"line\"><span class=\"comment\"># Resize(src, dst, interpolation=CV_INTER_LINEAR)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"图像平滑\"><a href=\"#图像平滑\" class=\"headerlink\" title=\"图像平滑\"></a>图像平滑</h2><h3 id=\"2D卷积\"><a href=\"#2D卷积\" class=\"headerlink\" title=\"2D卷积\"></a>2D卷积</h3><p>OpenCV 提供的函数 cv.filter2D() 可以让我们对一幅图像进行卷积操作。下面我们将对一幅图像使用平均滤波器。下面是一个 5x5 的平均滤波器核：</p>\n<script type=\"math/tex; mode=display\">K=\\frac{1}{25}\\left[\\begin{array}{ccccc}{1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1} \\\\ {1} & {1} & {1} & {1} & {1}\\end{array}\\right]</script><p>操作如下：将核放在图像的一个像素 A 上，求与核对应的图像上 25（5x5）个像素的和，在取平均数，用这个平均数替代像素 A 的值。重复以上操作直到将图像的每一个像素值都更新一边。代码如下:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"></span><br><span class=\"line\">kernel = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>),np.float32)/<span class=\"number\">25</span></span><br><span class=\"line\">dst = cv2.filter2D(img, <span class=\"number\">-1</span>, kernel)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(dst),plt.title(<span class=\"string\">'Averaging'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_4_0.png\" alt=\"png\"></p>\n<h3 id=\"图像模糊（图像平滑）\"><a href=\"#图像模糊（图像平滑）\" class=\"headerlink\" title=\"图像模糊（图像平滑）\"></a>图像模糊（图像平滑）</h3><p>使用低通滤波器可以达到图像模糊的目的。这对与去除噪音很有帮助。其实就是去除图像中的高频成分（比如：噪音，边界）。所以边界也会被模糊一点。（当然，也有一些模糊技术不会模糊掉边界）。OpenCV 提供了四种模糊技术。  </p>\n<h3 id=\"平均\"><a href=\"#平均\" class=\"headerlink\" title=\"平均\"></a>平均</h3><p>　　这是由一个归一化卷积框完成的。他只是用卷积框覆盖区域所有像素的平均值来代替中心元素。可以使用函数 cv2.blur() 和 cv2.boxFilter() 来完这个任务。可以同看查看文档了解更多卷积框的细节。我们需要设定卷积框的宽和高。下面是一个 3x3 的归一化卷积框：<br>　　　　　<script type=\"math/tex\">K =  \\frac{1}{9} \\begin{bmatrix} 1 & 1 & 1  \\\\ 1 & 1 & 1 \\\\ 1 & 1 & 1 \\end{bmatrix}</script><br>注意：如果你不想使用归一化卷积框，你应该使用 cv2.boxFilter()，这时要传入参数 normalize=False。<br>下面与第一部分一样的一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">blur = cv2.blur(img,(<span class=\"number\">5</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_6_0.png\" alt=\"png\"></p>\n<h3 id=\"高斯模糊\"><a href=\"#高斯模糊\" class=\"headerlink\" title=\"高斯模糊\"></a>高斯模糊</h3><p>　　现在把卷积核换成高斯核（简单来说，方框不变，将原来每个方框的值是相等的，现在里面的值是符合高斯分布的，方框中心的值最大，其余方框根据距离中心元素的距离递减，构成一个高斯小山包。原来的求平均数现在变成求加权平均数，全就是方框里的值）。实现的函数是 cv2.GaussianBlur()。我们需要指定高斯核的宽和高（必须是奇数）。以及高斯函数沿 X，Y 方向的标准差。如果我们只指定了 X 方向的的标准差，Y 方向也会取相同值。如果两个标准差都是 0，那么函数会根据核函数的大小自己计算。高斯滤波可以有效的从图像中去除高斯噪音。<br>如果你愿意的话，你也可以使用函数 cv2.getGaussianKernel() 自己构建一个高斯核。<br>如果要使用高斯模糊的话，上边的代码应该写成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0 是指根据窗口大小（ 5,5 ）来计算高斯函数标准差</span></span><br><span class=\"line\">blur = cv2.GaussianBlur(img,(<span class=\"number\">5</span>,<span class=\"number\">5</span>),<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_8_0.png\" alt=\"png\"></p>\n<h3 id=\"中值模糊\"><a href=\"#中值模糊\" class=\"headerlink\" title=\"中值模糊\"></a>中值模糊</h3><p>顾名思义就是用与卷积框对应像素的中值来替代中心像素的值。这个滤波器经常用来去除椒盐噪声。前面的滤波器都是用计算得到的一个新值来取代中心像素的值，而中值滤波是用中心像素周围（也可以使他本身）的值来取代他。他能有效的去除噪声。卷积核的大小也应该是一个奇数。<br>在这个例子中，我们给原始图像加上 50% 的噪声然后再使用中值模糊。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">median = cv2.medianBlur(img,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_10_0.png\" alt=\"png\"></p>\n<h3 id=\"双边滤波\"><a href=\"#双边滤波\" class=\"headerlink\" title=\"双边滤波\"></a>双边滤波</h3><p>函数 cv2.bilateralFilter() 能在保持边界清晰的情况下有效的去除噪音。但是这种操作与其他滤波器相比会比较慢。我们已经知道高斯滤波器是求中心点邻近区域像素的高斯加权平均值。这种高斯滤波器只考虑像素之间的空间关系，而不会考虑像素值之间的关系（像素的相似度）。所以这种方法不会考虑一个像素是否位于边界。因此边界也会别模糊掉，而这正不是我们想要。双边滤波在同时使用空间高斯权重和灰度值相似性高斯权重。空间高斯函数确保只有邻近区域的像素对中心点有影响，灰度值相似性高斯函数确保只有与中心像素灰度值相近的才会被用来做模糊运算。所以这种方法会确保边界不会被模糊掉，因为边界处的灰度值变化比较大。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>)</span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace)</span></span><br><span class=\"line\"><span class=\"comment\">#d – Diameter of each pixel neighborhood that is used during filtering.</span></span><br><span class=\"line\"><span class=\"comment\"># If it is non-positive, it is computed from sigmaSpace</span></span><br><span class=\"line\"><span class=\"comment\">#9 邻域直径，两个 75 分别是空间高斯函数标准差，灰度值相似性高斯函数标准差</span></span><br><span class=\"line\">blur = cv2.bilateralFilter(img,<span class=\"number\">9</span>,<span class=\"number\">75</span>,<span class=\"number\">75</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>),plt.imshow(img),plt.title(<span class=\"string\">'Original'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>),plt.imshow(blur),plt.title(<span class=\"string\">'Blurred'</span>)</span><br><span class=\"line\">plt.xticks([]), plt.yticks([])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_12_0.png\" alt=\"png\"></p>\n<h2 id=\"形态学转换\"><a href=\"#形态学转换\" class=\"headerlink\" title=\"形态学转换\"></a>形态学转换</h2><p>形态学操作是根据图像形状进行的简单操作。一般情况下对二值化图像进行的操作。需要输入两个参数，一个是原始图像，第二个被称为结构化元素或核，它是用来决定操作的性质的。两个基本的形态学操作是腐蚀和膨胀。他们的变体构成了开运算，闭运算，梯度等。</p>\n<h3 id=\"腐蚀\"><a href=\"#腐蚀\" class=\"headerlink\" title=\"腐蚀\"></a>腐蚀</h3><p>就像土壤侵蚀一样，这个操作会把前景物体的边界腐蚀掉（但是前景仍然是白色）。这是怎么做到的呢？卷积核沿着图像滑动，如果与卷积核对应的原图像的所有像素值都是 1，那么中心元素就保持原来的像素值，否则就变为零。<br>这会产生什么影响呢？根据卷积核的大小靠近前景的所有像素都会被腐蚀掉（变为 0），所以前景物体会变小，整幅图像的白色区域会减少。这对于去除白噪声很有用，也可以用来断开两个连在一块的物体等。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/j.png'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">kernel = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>),np.uint8)</span><br><span class=\"line\">erosion = cv2.erode(img,kernel,iterations = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(erosion)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_15_0.png\" alt=\"png\"></p>\n<h3 id=\"膨胀\"><a href=\"#膨胀\" class=\"headerlink\" title=\"膨胀\"></a>膨胀</h3><p>与腐蚀相反，与卷积核对应的原图像的像素值中只要有一个是 1，中心元素的像素值就是 1。所以这个操作会增加图像中的白色区域（前景）。一般在去噪声时先用腐蚀再用膨胀。因为腐蚀在去掉白噪声的同时，也会使前景对象变小。所以我们再对他进行膨胀。这时噪声已经被去除了，不会再回来了，但是前景还在并会增加。膨胀也可以用来连接两个分开的物体。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/j.png'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">kernel = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>),np.uint8)</span><br><span class=\"line\">dilation = cv2.dilate(img,kernel,iterations = <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(dilation)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/22/OpenCV学习笔记二：图像处理/./OpenCV学习笔记二：图像处理/output_17_0.png\" alt=\"png\"></p>\n<h3 id=\"开运算\"><a href=\"#开运算\" class=\"headerlink\" title=\"开运算\"></a>开运算</h3><p>先进性腐蚀再进行膨胀就叫做开运算。就像我们上面介绍的那样，它被用来去除噪声。这里我们用到的函数是 cv2.morphologyEx()。</p>\n<h3 id=\"闭运算\"><a href=\"#闭运算\" class=\"headerlink\" title=\"闭运算\"></a>闭运算</h3><p>先膨胀再腐蚀。它经常被用来填充前景物体中的小洞，或者前景物体上的小黑点。</p>\n<h3 id=\"形态学梯度\"><a href=\"#形态学梯度\" class=\"headerlink\" title=\"形态学梯度\"></a>形态学梯度</h3><p>其实就是一幅图像膨胀与腐蚀的差别。结果看上去就像前景物体的轮廓。</p>\n</the>"},{"title":"OpenCV学习笔记四：目标检测与识别","date":"2019-06-22T16:29:31.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要> \n\n### 目标检测和识别\n传统目标检测算法中的技术：  \n* 梯度直方图（Histogram of Oriented Gradient， HOG）  \n* 图像金字塔（image pyramid）  \n* 滑动窗口（sliding window）  \n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n与特征检测算法不同，这些算法是互补的。如在梯度直方图（HOG）中会使用滑动窗口技术。\n\n### HOG\n* Histogram of Oriented Gradients | Learn OpenCV  \nhttps://www.learnopencv.com/histogram-of-oriented-gradients/  \n\nHOG，全称方向梯度直方图，是一个特征描述符，它基于梯度来计算直方图。\n\n步骤：  \n1）图像预处理  \n包括伽马矫正和灰度化，可选步骤。\n为了减少光照因素的影响，首先需要将整个图像进行规范化（归一化）。在图像的纹理强度中，局部的表层曝光贡献的比重较大，所以，这种压缩处理能够有效地降低图像局部的阴影和光照变化；   \n因为颜色信息作用不大，通常先转化为灰度图。 \n\n2）计算每个像素点的梯度  \n计算图像横坐标和纵坐标方向的梯度，并据此计算每个像素位置的梯度方向值；求导操作不仅能够捕获轮廓，人影和一些纹理信息，还能进一步弱化光照的影响。  \n图像中像素点$(x,y)$的梯度为：  \n$$G_x(x,y) = H(x+1,y) - H(x-1,y) $$\n$$G_y(x,y) = H(x,y+1) - H(x,y-1) $$\n其中$G_x(x,y)$,$G_y(x,y)$,$H(x,y)$分别表示图像中像素点$(x,y)$处的水平方向梯度、垂直方向梯度和像素值。像素点$(x,y)$处的梯度幅度和梯度方向分别为：  \n$$G(x,y) = \\sqrt{G_x(x,y)^2 + G_y(x,y)^2} $$\n$$\\alpha(x,y) = \\tan^{-1}{(\\frac{G_y(x,y)}{G_x(x,y)})} $$  \n最常用的方法是：首先用[-1,0,1]梯度算子对原图像做卷积运算，得到x方向（水平方向，以向右为正方向）的梯度分量gradscalx，然后用[1,0,-1]T梯度算子对原图像做卷积运算，得到y方向（竖直方向，以向上为正方向）的梯度分量gradscaly，最后用以上公式计算该像素点的梯度大小和方向。  \n\n3）计算梯度直方图  \n梯度直方图是在一个8*8的cell里面计算的。那么在8*8的cell里面就会有8*8*2=128个值，其中2包括了梯度强度和梯度方向。通过统计形成梯度直方图，128个值将会变成9个值，大大降低了计算量，同时又对光照等环境变化更加地鲁棒。  \n\n首先将0-180度分成9个bins，分别是0，20，40...160；然后根据梯度方向值的大小，将每一个像素点的梯度幅度值分配到相应的bin上；最终得到如下图所示的直方图，一个长度为9的数组。  \n<img alt=\"HOG02\" src=\"OpenCV学习笔记四：目标检测与识别/hog02.jpg\">\n从上图可以看到，更多的点的梯度方向是倾向于0度和160度，也就是说这些点的梯度方向是向上或者向下，表明图像这个位置存在比较明显的横向边缘。因此HOG是对边角敏感的，由于这样的统计方法，也是对部分像素值变化不敏感的，所以能够适应不同的环境。   \n\nbin值的具体计算方法如下例： \n<img alt=\"HOG01\" src=\"OpenCV学习笔记四：目标检测与识别/hog01.jpg\">  \n先看两个蓝色圈圈。因为蓝圈的方向是80度，大小是2，所以该点就投给80这个bin；  \n再看两个红色圈圈。因为红色圈圈的方向是10，大小是4，因为10距离0点为10，距离20点为也为10，那么有一半的大小是投给0这个bin，还有一半的大小投给20这个bin。  \n\n4）块内归一化梯度直方图  \n归一化的目的是降低光照的影响。  \n归一化的方法是向量的每一个值除以向量的模长。  \n\n5）收集HOG特征  \n将检测窗口中所有重叠的块进行HOG特征的收集，并将它们结合成最终的特征向量供分类使用。  \n一个图像的HOG特征维数计算:  \n对于一个$64\\times128$大小的图像，按照$16\\times16$的大小提取block，将会有7个水平位置和15个竖直位可以取得，所以一共有$7\\times15=105$个block，所以我们整合所有block的vector，形成一个大的一维vector的大小将会是$36\\times105=3780$。\n\n### OpenCV HOGDescriptor \n\n* 窗口大小 winSize(64,128)\n* 块大小 blockSize(16,16)\n* 块滑动增量 blockStride(8,8)\n* 胞元大小 cellSize(8,8)\n* 梯度方向数 nbins(9) \n\n在确定了上述的参数后，就可以计算出一个HOG描述子的维度了。\n\n\n``` cpp\nsize_t HOGDescriptor::getDescriptorSize() const\n{\n    CV_Assert(blockSize.width % cellSize.width == 0 &&\n        blockSize.height % cellSize.height == 0);\n    CV_Assert((winSize.width - blockSize.width) % blockStride.width == 0 &&\n        (winSize.height - blockSize.height) % blockStride.height == 0 );\n    return (size_t)nbins*\n        (blockSize.width/cellSize.width)*\n        (blockSize.height/cellSize.height)*\n        ((winSize.width - blockSize.width)/blockStride.width + 1)*\n        ((winSize.height - blockSize.height)/blockStride.height + 1);\n}\n```\n\n\n``` python\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nplt.figure(figsize=(10,10))\n\n# 确定某矩形是否完全包含在另一个矩形中\ndef is_inside(o, i):\n    ox, oy, ow, oh = o\n    ix, iy, iw, ih = i\n    return ox > ix and oy > iy and ox+ow < ix+iw and oy + oh < iy + ih\n\n# 绘制矩形来框住检测到的人\ndef draw_person(image, person):\n    x, y, w, h = person\n    cv2.rectangle(img, (x, y), (x+w, y + h), (0, 255, 255), 2)\n\n\n# 导入图像，\nimg = cv2.imread(\"./images/run.jpg\")\n# 实例化HOGDescriptor对象，作为检测人的检测器\nhog = cv2.HOGDescriptor()\n# 设置线性SVM分类器的系数\nhog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())\n\n# 该和人脸算法不一样，不需要在使用目标检测方法前将原始图像转换为灰度形式\n# 该方法返回一个与矩形相关的数组，用户可用该数组在图形上绘制形状\n# 若图形上的矩形存在有包含与被包含的关系，说明检测出现了错误\n# 被包含的图形应该被丢弃，此过程由is_inside来实现\n# 在输入图像中检测不同大小的对象。检测到的对象作为列表返回\nfound, w = hog.detectMultiScale(img)\n\nfound_filtered = []\n\n# 遍历检测结果，丢弃不含有检测目标区域的矩形。\nfor ri, r in enumerate(found):\n    for qi, q in enumerate(found):\n        if ri != qi and is_inside(r, q):\n            break\n        else:\n            found_filtered.append(r)\n\nfor person in found_filtered:\n    draw_person(img, person)\n\n# cv2.imshow(\"people detection\", img)\n# cv2.waitKey(0)\n# cv2.destroyAllWindows()\nplt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记四：目标检测与识别/output_4_0.png\">\n\n\n``` python\nimport cv2\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(10,10))\n\nclass Hog_descriptor():\n    def __init__(self, img, cell_size=16, bin_size=9):\n        self.img = img\n        self.img = np.sqrt(img / np.max(img))\n        self.img = img * 255\n        self.cell_size = cell_size\n        self.bin_size = bin_size\n        self.angle_unit = int(360 / self.bin_size)\n        assert type(self.bin_size) == int, \"bin_size should be integer,\"\n        assert type(self.cell_size) == int, \"cell_size should be integer,\"\n        assert type(self.angle_unit) == int, \"bin_size should be divisible by 360\"\n\n    def extract(self):\n        height, width = self.img.shape\n        gradient_magnitude, gradient_angle = self.global_gradient()\n        gradient_magnitude = abs(gradient_magnitude)\n        cell_gradient_vector = np.zeros((int(height / self.cell_size), int(width / self.cell_size), self.bin_size))\n        for i in range(cell_gradient_vector.shape[0]):\n            for j in range(cell_gradient_vector.shape[1]):\n                cell_magnitude = gradient_magnitude[i * self.cell_size:(i + 1) * self.cell_size,\n                                 j * self.cell_size:(j + 1) * self.cell_size]\n                cell_angle = gradient_angle[i * self.cell_size:(i + 1) * self.cell_size,\n                             j * self.cell_size:(j + 1) * self.cell_size]\n                cell_gradient_vector[i][j] = self.cell_gradient(cell_magnitude, cell_angle)\n\n        hog_image = self.render_gradient(np.zeros([height, width]), cell_gradient_vector)\n        hog_vector = []\n        for i in range(cell_gradient_vector.shape[0] - 1):\n            for j in range(cell_gradient_vector.shape[1] - 1):\n                block_vector = []\n                block_vector.extend(cell_gradient_vector[i][j])\n                block_vector.extend(cell_gradient_vector[i][j + 1])\n                block_vector.extend(cell_gradient_vector[i + 1][j])\n                block_vector.extend(cell_gradient_vector[i + 1][j + 1])\n                mag = lambda vector: math.sqrt(sum(i ** 2 for i in vector))\n                magnitude = mag(block_vector)\n                if magnitude != 0:\n                    normalize = lambda block_vector, magnitude: [element / magnitude for element in block_vector]\n                    block_vector = normalize(block_vector, magnitude)\n                hog_vector.append(block_vector)\n        return hog_vector, hog_image\n\n    def global_gradient(self):\n        gradient_values_x = cv2.Sobel(self.img, cv2.CV_64F, 1, 0, ksize=5)\n        gradient_values_y = cv2.Sobel(self.img, cv2.CV_64F, 0, 1, ksize=5)\n        gradient_magnitude = cv2.addWeighted(gradient_values_x, 0.5, gradient_values_y, 0.5, 0)\n        gradient_angle = cv2.phase(gradient_values_x, gradient_values_y, angleInDegrees=True)\n        return gradient_magnitude, gradient_angle\n\n    def cell_gradient(self, cell_magnitude, cell_angle):\n        orientation_centers = [0] * self.bin_size\n        for i in range(cell_magnitude.shape[0]):\n            for j in range(cell_magnitude.shape[1]):\n                gradient_strength = cell_magnitude[i][j]\n                gradient_angle = cell_angle[i][j]\n                min_angle, max_angle, mod = self.get_closest_bins(gradient_angle)\n                orientation_centers[min_angle] += (gradient_strength * (1 - (mod / self.angle_unit)))\n                orientation_centers[max_angle] += (gradient_strength * (mod / self.angle_unit))\n        return orientation_centers\n\n    def get_closest_bins(self, gradient_angle):\n        idx = int(gradient_angle / self.angle_unit)\n        mod = gradient_angle % self.angle_unit\n        return idx, (idx + 1) % self.bin_size, mod\n\n    def render_gradient(self, image, cell_gradient):\n        cell_width = self.cell_size / 2\n        max_mag = np.array(cell_gradient).max()\n        for x in range(cell_gradient.shape[0]):\n            for y in range(cell_gradient.shape[1]):\n                cell_grad = cell_gradient[x][y]\n                cell_grad /= max_mag\n                angle = 0\n                angle_gap = self.angle_unit\n                for magnitude in cell_grad:\n                    angle_radian = math.radians(angle)\n                    x1 = int(x * self.cell_size + magnitude * cell_width * math.cos(angle_radian))\n                    y1 = int(y * self.cell_size + magnitude * cell_width * math.sin(angle_radian))\n                    x2 = int(x * self.cell_size - magnitude * cell_width * math.cos(angle_radian))\n                    y2 = int(y * self.cell_size - magnitude * cell_width * math.sin(angle_radian))\n                    cv2.line(image, (y1, x1), (y2, x2), int(255 * math.sqrt(magnitude)))\n                    angle += angle_gap\n        return image\n\nimg = cv2.imread('./images/car.jpg', cv2.IMREAD_GRAYSCALE)\n# img = cv2.resize(img, (128, 64))\nhog = Hog_descriptor(img, cell_size=8, bin_size=9)\nvector, image = hog.extract()\nprint(np.array(vector).shape)\nplt.imshow(image, cmap=plt.cm.gray)\nplt.show()\n```\n\n\n<img src=\"OpenCV学习笔记四：目标检测与识别/output_5_1.png\">\n\n\n### 图像金字塔\n图像金字塔是图像的多尺度表示。  \n\n构建图像金字塔：  \n1 - 获取图像  \n2 - 使用任意尺度的参数来调整（缩小）图像大小  \n3 - 平滑图像（使用高斯模糊）  \n4 - 如果图像比最小尺寸还大，则从第一步重复该过程。  \n\n### 滑动窗口\n\n滑动窗口通过扫描较大图像的较小区域来解决定位问题，进而在同一图像的不同尺度下重复扫描。  \n\n该技术需将图像分解成多个部分，然后丢掉那些不太可能包含对象的部分，并对可能区域进行分类。  \n\n### 非极大抑制\n\n非极大值抑制（Non-maximum suppression, NMS）释义为抑制不是极大值的元素，搜索局部的极大值。  \n\n如在对象检测中，滑动窗口经提取特征 --> 分类器分类识别后，每个窗口都会得到一个分类和分数，但滑动窗口会导致很多窗口与其他窗口存在包含或大部分交叉的情况，这时就需要用到 NMS 来选取那些邻域里分数最高（某类对象的概率最大），并抑制这些分数低的窗口。 \n\n也可理解为：目标检测的过程中，同一目标位置上会产生大量的候选框，这些候选框相互之间可能会有重叠，此时我们需要利用非极大值抑制找到最佳的目标边界框，消除冗余的边界框。  \n\n### 使用HOG+SVM做行人检测\n\n参考2005年CVPR论文，使用HOG+SVM做行人检测\n论文链接：  \n* Histograms of Oriented Gradients for Human Detection   \nhttps://hal.inria.fr/file/index/docid/548512/filename/hog_cvpr2005.pdf\n\n工作流程：首先对输入的图片进行预处理，然后计算像素点的梯度值，然后形成梯度直方图，然后对blocks进行normalize，最后收集到HOG feature（其实是一行高维的vector）放到SVM里进行监督学习，从而实现行人的检测。  \n![Histograms of Oriented Gradients for Human Detection](./OpenCV学习笔记四：目标检测与识别/Histograms of Oriented Gradients for Human Detection.png)\n\n\n### INRIA数据集\n\nINRIA数据集官方页面：  \n* http://pascal.inrialpes.fr/data/human/\n\n整理版本：  \n* INRIA数据集 - baiyu33的博客 - CSDN博客   \nhttps://blog.csdn.net/baiyu33/article/details/51762368\n\n### HardExample\n\n用分类器对样本进行分类，把其中错误分类的样本(hard negative)放入负样本集合再继续训练分类器。  \n\n难例(或叫做难样本，Hard Example，Hard Negative，Hard Instance)是指利用第一次训练的分类器在负样本原图(肯定没有人体)上进行行人检测时所有检测到的矩形框，这些矩形框区域很明显都是误报，把这些误报的矩形框保存为图片，加入到初始的负样本集合中，重新进行SVM的训练，可显著减少误报。这种方法叫做自举法(Bootstrap)，自举法首先使用初始负样本集来训练一个模型，然后收集被这个初始模型错误分类的负样本来形成一个负样本难例集。用此负样本难例集训练新的模型，此过程可以重复多次。\n\n\n### OHEM\n在线难例挖掘（online hard example miniing）  \n选取loss较大(检测结果与label差异较大)的部分进行训练。  \n\n\n### 基于深度学习的方法\n\n* RCNN \n* Fast-RCNN\n* YOLO\n* SSD\n\n\n### 参考资料\n* OpenCV 学习笔记 07 目标检测与识别 - 耕毅 - 博客园  \nhttps://www.cnblogs.com/gengyi/p/10555622.html\n","source":"_posts/OpenCV学习笔记四：目标检测与识别.md","raw":"---\ntitle: OpenCV学习笔记四：目标检测与识别\ndate: 2019-06-23 00:29:31\ntags:\n  - opencv\n---\n** {{ title }} ** <Excerpt in index | 首页摘要> \n\n### 目标检测和识别\n传统目标检测算法中的技术：  \n* 梯度直方图（Histogram of Oriented Gradient， HOG）  \n* 图像金字塔（image pyramid）  \n* 滑动窗口（sliding window）  \n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n与特征检测算法不同，这些算法是互补的。如在梯度直方图（HOG）中会使用滑动窗口技术。\n\n### HOG\n* Histogram of Oriented Gradients | Learn OpenCV  \nhttps://www.learnopencv.com/histogram-of-oriented-gradients/  \n\nHOG，全称方向梯度直方图，是一个特征描述符，它基于梯度来计算直方图。\n\n步骤：  \n1）图像预处理  \n包括伽马矫正和灰度化，可选步骤。\n为了减少光照因素的影响，首先需要将整个图像进行规范化（归一化）。在图像的纹理强度中，局部的表层曝光贡献的比重较大，所以，这种压缩处理能够有效地降低图像局部的阴影和光照变化；   \n因为颜色信息作用不大，通常先转化为灰度图。 \n\n2）计算每个像素点的梯度  \n计算图像横坐标和纵坐标方向的梯度，并据此计算每个像素位置的梯度方向值；求导操作不仅能够捕获轮廓，人影和一些纹理信息，还能进一步弱化光照的影响。  \n图像中像素点$(x,y)$的梯度为：  \n$$G_x(x,y) = H(x+1,y) - H(x-1,y) $$\n$$G_y(x,y) = H(x,y+1) - H(x,y-1) $$\n其中$G_x(x,y)$,$G_y(x,y)$,$H(x,y)$分别表示图像中像素点$(x,y)$处的水平方向梯度、垂直方向梯度和像素值。像素点$(x,y)$处的梯度幅度和梯度方向分别为：  \n$$G(x,y) = \\sqrt{G_x(x,y)^2 + G_y(x,y)^2} $$\n$$\\alpha(x,y) = \\tan^{-1}{(\\frac{G_y(x,y)}{G_x(x,y)})} $$  \n最常用的方法是：首先用[-1,0,1]梯度算子对原图像做卷积运算，得到x方向（水平方向，以向右为正方向）的梯度分量gradscalx，然后用[1,0,-1]T梯度算子对原图像做卷积运算，得到y方向（竖直方向，以向上为正方向）的梯度分量gradscaly，最后用以上公式计算该像素点的梯度大小和方向。  \n\n3）计算梯度直方图  \n梯度直方图是在一个8*8的cell里面计算的。那么在8*8的cell里面就会有8*8*2=128个值，其中2包括了梯度强度和梯度方向。通过统计形成梯度直方图，128个值将会变成9个值，大大降低了计算量，同时又对光照等环境变化更加地鲁棒。  \n\n首先将0-180度分成9个bins，分别是0，20，40...160；然后根据梯度方向值的大小，将每一个像素点的梯度幅度值分配到相应的bin上；最终得到如下图所示的直方图，一个长度为9的数组。  \n<img alt=\"HOG02\" src=\"OpenCV学习笔记四：目标检测与识别/hog02.jpg\">\n从上图可以看到，更多的点的梯度方向是倾向于0度和160度，也就是说这些点的梯度方向是向上或者向下，表明图像这个位置存在比较明显的横向边缘。因此HOG是对边角敏感的，由于这样的统计方法，也是对部分像素值变化不敏感的，所以能够适应不同的环境。   \n\nbin值的具体计算方法如下例： \n<img alt=\"HOG01\" src=\"OpenCV学习笔记四：目标检测与识别/hog01.jpg\">  \n先看两个蓝色圈圈。因为蓝圈的方向是80度，大小是2，所以该点就投给80这个bin；  \n再看两个红色圈圈。因为红色圈圈的方向是10，大小是4，因为10距离0点为10，距离20点为也为10，那么有一半的大小是投给0这个bin，还有一半的大小投给20这个bin。  \n\n4）块内归一化梯度直方图  \n归一化的目的是降低光照的影响。  \n归一化的方法是向量的每一个值除以向量的模长。  \n\n5）收集HOG特征  \n将检测窗口中所有重叠的块进行HOG特征的收集，并将它们结合成最终的特征向量供分类使用。  \n一个图像的HOG特征维数计算:  \n对于一个$64\\times128$大小的图像，按照$16\\times16$的大小提取block，将会有7个水平位置和15个竖直位可以取得，所以一共有$7\\times15=105$个block，所以我们整合所有block的vector，形成一个大的一维vector的大小将会是$36\\times105=3780$。\n\n### OpenCV HOGDescriptor \n\n* 窗口大小 winSize(64,128)\n* 块大小 blockSize(16,16)\n* 块滑动增量 blockStride(8,8)\n* 胞元大小 cellSize(8,8)\n* 梯度方向数 nbins(9) \n\n在确定了上述的参数后，就可以计算出一个HOG描述子的维度了。\n\n\n``` cpp\nsize_t HOGDescriptor::getDescriptorSize() const\n{\n    CV_Assert(blockSize.width % cellSize.width == 0 &&\n        blockSize.height % cellSize.height == 0);\n    CV_Assert((winSize.width - blockSize.width) % blockStride.width == 0 &&\n        (winSize.height - blockSize.height) % blockStride.height == 0 );\n    return (size_t)nbins*\n        (blockSize.width/cellSize.width)*\n        (blockSize.height/cellSize.height)*\n        ((winSize.width - blockSize.width)/blockStride.width + 1)*\n        ((winSize.height - blockSize.height)/blockStride.height + 1);\n}\n```\n\n\n``` python\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nplt.figure(figsize=(10,10))\n\n# 确定某矩形是否完全包含在另一个矩形中\ndef is_inside(o, i):\n    ox, oy, ow, oh = o\n    ix, iy, iw, ih = i\n    return ox > ix and oy > iy and ox+ow < ix+iw and oy + oh < iy + ih\n\n# 绘制矩形来框住检测到的人\ndef draw_person(image, person):\n    x, y, w, h = person\n    cv2.rectangle(img, (x, y), (x+w, y + h), (0, 255, 255), 2)\n\n\n# 导入图像，\nimg = cv2.imread(\"./images/run.jpg\")\n# 实例化HOGDescriptor对象，作为检测人的检测器\nhog = cv2.HOGDescriptor()\n# 设置线性SVM分类器的系数\nhog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())\n\n# 该和人脸算法不一样，不需要在使用目标检测方法前将原始图像转换为灰度形式\n# 该方法返回一个与矩形相关的数组，用户可用该数组在图形上绘制形状\n# 若图形上的矩形存在有包含与被包含的关系，说明检测出现了错误\n# 被包含的图形应该被丢弃，此过程由is_inside来实现\n# 在输入图像中检测不同大小的对象。检测到的对象作为列表返回\nfound, w = hog.detectMultiScale(img)\n\nfound_filtered = []\n\n# 遍历检测结果，丢弃不含有检测目标区域的矩形。\nfor ri, r in enumerate(found):\n    for qi, q in enumerate(found):\n        if ri != qi and is_inside(r, q):\n            break\n        else:\n            found_filtered.append(r)\n\nfor person in found_filtered:\n    draw_person(img, person)\n\n# cv2.imshow(\"people detection\", img)\n# cv2.waitKey(0)\n# cv2.destroyAllWindows()\nplt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记四：目标检测与识别/output_4_0.png\">\n\n\n``` python\nimport cv2\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(10,10))\n\nclass Hog_descriptor():\n    def __init__(self, img, cell_size=16, bin_size=9):\n        self.img = img\n        self.img = np.sqrt(img / np.max(img))\n        self.img = img * 255\n        self.cell_size = cell_size\n        self.bin_size = bin_size\n        self.angle_unit = int(360 / self.bin_size)\n        assert type(self.bin_size) == int, \"bin_size should be integer,\"\n        assert type(self.cell_size) == int, \"cell_size should be integer,\"\n        assert type(self.angle_unit) == int, \"bin_size should be divisible by 360\"\n\n    def extract(self):\n        height, width = self.img.shape\n        gradient_magnitude, gradient_angle = self.global_gradient()\n        gradient_magnitude = abs(gradient_magnitude)\n        cell_gradient_vector = np.zeros((int(height / self.cell_size), int(width / self.cell_size), self.bin_size))\n        for i in range(cell_gradient_vector.shape[0]):\n            for j in range(cell_gradient_vector.shape[1]):\n                cell_magnitude = gradient_magnitude[i * self.cell_size:(i + 1) * self.cell_size,\n                                 j * self.cell_size:(j + 1) * self.cell_size]\n                cell_angle = gradient_angle[i * self.cell_size:(i + 1) * self.cell_size,\n                             j * self.cell_size:(j + 1) * self.cell_size]\n                cell_gradient_vector[i][j] = self.cell_gradient(cell_magnitude, cell_angle)\n\n        hog_image = self.render_gradient(np.zeros([height, width]), cell_gradient_vector)\n        hog_vector = []\n        for i in range(cell_gradient_vector.shape[0] - 1):\n            for j in range(cell_gradient_vector.shape[1] - 1):\n                block_vector = []\n                block_vector.extend(cell_gradient_vector[i][j])\n                block_vector.extend(cell_gradient_vector[i][j + 1])\n                block_vector.extend(cell_gradient_vector[i + 1][j])\n                block_vector.extend(cell_gradient_vector[i + 1][j + 1])\n                mag = lambda vector: math.sqrt(sum(i ** 2 for i in vector))\n                magnitude = mag(block_vector)\n                if magnitude != 0:\n                    normalize = lambda block_vector, magnitude: [element / magnitude for element in block_vector]\n                    block_vector = normalize(block_vector, magnitude)\n                hog_vector.append(block_vector)\n        return hog_vector, hog_image\n\n    def global_gradient(self):\n        gradient_values_x = cv2.Sobel(self.img, cv2.CV_64F, 1, 0, ksize=5)\n        gradient_values_y = cv2.Sobel(self.img, cv2.CV_64F, 0, 1, ksize=5)\n        gradient_magnitude = cv2.addWeighted(gradient_values_x, 0.5, gradient_values_y, 0.5, 0)\n        gradient_angle = cv2.phase(gradient_values_x, gradient_values_y, angleInDegrees=True)\n        return gradient_magnitude, gradient_angle\n\n    def cell_gradient(self, cell_magnitude, cell_angle):\n        orientation_centers = [0] * self.bin_size\n        for i in range(cell_magnitude.shape[0]):\n            for j in range(cell_magnitude.shape[1]):\n                gradient_strength = cell_magnitude[i][j]\n                gradient_angle = cell_angle[i][j]\n                min_angle, max_angle, mod = self.get_closest_bins(gradient_angle)\n                orientation_centers[min_angle] += (gradient_strength * (1 - (mod / self.angle_unit)))\n                orientation_centers[max_angle] += (gradient_strength * (mod / self.angle_unit))\n        return orientation_centers\n\n    def get_closest_bins(self, gradient_angle):\n        idx = int(gradient_angle / self.angle_unit)\n        mod = gradient_angle % self.angle_unit\n        return idx, (idx + 1) % self.bin_size, mod\n\n    def render_gradient(self, image, cell_gradient):\n        cell_width = self.cell_size / 2\n        max_mag = np.array(cell_gradient).max()\n        for x in range(cell_gradient.shape[0]):\n            for y in range(cell_gradient.shape[1]):\n                cell_grad = cell_gradient[x][y]\n                cell_grad /= max_mag\n                angle = 0\n                angle_gap = self.angle_unit\n                for magnitude in cell_grad:\n                    angle_radian = math.radians(angle)\n                    x1 = int(x * self.cell_size + magnitude * cell_width * math.cos(angle_radian))\n                    y1 = int(y * self.cell_size + magnitude * cell_width * math.sin(angle_radian))\n                    x2 = int(x * self.cell_size - magnitude * cell_width * math.cos(angle_radian))\n                    y2 = int(y * self.cell_size - magnitude * cell_width * math.sin(angle_radian))\n                    cv2.line(image, (y1, x1), (y2, x2), int(255 * math.sqrt(magnitude)))\n                    angle += angle_gap\n        return image\n\nimg = cv2.imread('./images/car.jpg', cv2.IMREAD_GRAYSCALE)\n# img = cv2.resize(img, (128, 64))\nhog = Hog_descriptor(img, cell_size=8, bin_size=9)\nvector, image = hog.extract()\nprint(np.array(vector).shape)\nplt.imshow(image, cmap=plt.cm.gray)\nplt.show()\n```\n\n\n<img src=\"OpenCV学习笔记四：目标检测与识别/output_5_1.png\">\n\n\n### 图像金字塔\n图像金字塔是图像的多尺度表示。  \n\n构建图像金字塔：  \n1 - 获取图像  \n2 - 使用任意尺度的参数来调整（缩小）图像大小  \n3 - 平滑图像（使用高斯模糊）  \n4 - 如果图像比最小尺寸还大，则从第一步重复该过程。  \n\n### 滑动窗口\n\n滑动窗口通过扫描较大图像的较小区域来解决定位问题，进而在同一图像的不同尺度下重复扫描。  \n\n该技术需将图像分解成多个部分，然后丢掉那些不太可能包含对象的部分，并对可能区域进行分类。  \n\n### 非极大抑制\n\n非极大值抑制（Non-maximum suppression, NMS）释义为抑制不是极大值的元素，搜索局部的极大值。  \n\n如在对象检测中，滑动窗口经提取特征 --> 分类器分类识别后，每个窗口都会得到一个分类和分数，但滑动窗口会导致很多窗口与其他窗口存在包含或大部分交叉的情况，这时就需要用到 NMS 来选取那些邻域里分数最高（某类对象的概率最大），并抑制这些分数低的窗口。 \n\n也可理解为：目标检测的过程中，同一目标位置上会产生大量的候选框，这些候选框相互之间可能会有重叠，此时我们需要利用非极大值抑制找到最佳的目标边界框，消除冗余的边界框。  \n\n### 使用HOG+SVM做行人检测\n\n参考2005年CVPR论文，使用HOG+SVM做行人检测\n论文链接：  \n* Histograms of Oriented Gradients for Human Detection   \nhttps://hal.inria.fr/file/index/docid/548512/filename/hog_cvpr2005.pdf\n\n工作流程：首先对输入的图片进行预处理，然后计算像素点的梯度值，然后形成梯度直方图，然后对blocks进行normalize，最后收集到HOG feature（其实是一行高维的vector）放到SVM里进行监督学习，从而实现行人的检测。  \n![Histograms of Oriented Gradients for Human Detection](./OpenCV学习笔记四：目标检测与识别/Histograms of Oriented Gradients for Human Detection.png)\n\n\n### INRIA数据集\n\nINRIA数据集官方页面：  \n* http://pascal.inrialpes.fr/data/human/\n\n整理版本：  \n* INRIA数据集 - baiyu33的博客 - CSDN博客   \nhttps://blog.csdn.net/baiyu33/article/details/51762368\n\n### HardExample\n\n用分类器对样本进行分类，把其中错误分类的样本(hard negative)放入负样本集合再继续训练分类器。  \n\n难例(或叫做难样本，Hard Example，Hard Negative，Hard Instance)是指利用第一次训练的分类器在负样本原图(肯定没有人体)上进行行人检测时所有检测到的矩形框，这些矩形框区域很明显都是误报，把这些误报的矩形框保存为图片，加入到初始的负样本集合中，重新进行SVM的训练，可显著减少误报。这种方法叫做自举法(Bootstrap)，自举法首先使用初始负样本集来训练一个模型，然后收集被这个初始模型错误分类的负样本来形成一个负样本难例集。用此负样本难例集训练新的模型，此过程可以重复多次。\n\n\n### OHEM\n在线难例挖掘（online hard example miniing）  \n选取loss较大(检测结果与label差异较大)的部分进行训练。  \n\n\n### 基于深度学习的方法\n\n* RCNN \n* Fast-RCNN\n* YOLO\n* SSD\n\n\n### 参考资料\n* OpenCV 学习笔记 07 目标检测与识别 - 耕毅 - 博客园  \nhttps://www.cnblogs.com/gengyi/p/10555622.html\n","slug":"OpenCV学习笔记四：目标检测与识别","published":1,"updated":"2020-01-05T19:13:24.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50af005q4cvjf5ql8892","content":"<p><strong> OpenCV学习笔记四：目标检测与识别 </strong> <excerpt in index | 首页摘要> </excerpt></p>\n<h3 id=\"目标检测和识别\"><a href=\"#目标检测和识别\" class=\"headerlink\" title=\"目标检测和识别\"></a>目标检测和识别</h3><p>传统目标检测算法中的技术：  </p>\n<ul>\n<li>梯度直方图（Histogram of Oriented Gradient， HOG）  </li>\n<li>图像金字塔（image pyramid）  </li>\n<li>滑动窗口（sliding window）  </li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<p>与特征检测算法不同，这些算法是互补的。如在梯度直方图（HOG）中会使用滑动窗口技术。</p>\n<h3 id=\"HOG\"><a href=\"#HOG\" class=\"headerlink\" title=\"HOG\"></a>HOG</h3><ul>\n<li>Histogram of Oriented Gradients | Learn OpenCV<br><a href=\"https://www.learnopencv.com/histogram-of-oriented-gradients/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/histogram-of-oriented-gradients/</a>  </li>\n</ul>\n<p>HOG，全称方向梯度直方图，是一个特征描述符，它基于梯度来计算直方图。</p>\n<p>步骤：<br>1）图像预处理<br>包括伽马矫正和灰度化，可选步骤。<br>为了减少光照因素的影响，首先需要将整个图像进行规范化（归一化）。在图像的纹理强度中，局部的表层曝光贡献的比重较大，所以，这种压缩处理能够有效地降低图像局部的阴影和光照变化；<br>因为颜色信息作用不大，通常先转化为灰度图。 </p>\n<p>2）计算每个像素点的梯度<br>计算图像横坐标和纵坐标方向的梯度，并据此计算每个像素位置的梯度方向值；求导操作不仅能够捕获轮廓，人影和一些纹理信息，还能进一步弱化光照的影响。<br>图像中像素点$(x,y)$的梯度为：  </p>\n<script type=\"math/tex; mode=display\">G_x(x,y) = H(x+1,y) - H(x-1,y)</script><script type=\"math/tex; mode=display\">G_y(x,y) = H(x,y+1) - H(x,y-1)</script><p>其中$G_x(x,y)$,$G_y(x,y)$,$H(x,y)$分别表示图像中像素点$(x,y)$处的水平方向梯度、垂直方向梯度和像素值。像素点$(x,y)$处的梯度幅度和梯度方向分别为：  </p>\n<script type=\"math/tex; mode=display\">G(x,y) = \\sqrt{G_x(x,y)^2 + G_y(x,y)^2}</script><script type=\"math/tex; mode=display\">\\alpha(x,y) = \\tan^{-1}{(\\frac{G_y(x,y)}{G_x(x,y)})}</script><p>最常用的方法是：首先用[-1,0,1]梯度算子对原图像做卷积运算，得到x方向（水平方向，以向右为正方向）的梯度分量gradscalx，然后用[1,0,-1]T梯度算子对原图像做卷积运算，得到y方向（竖直方向，以向上为正方向）的梯度分量gradscaly，最后用以上公式计算该像素点的梯度大小和方向。  </p>\n<p>3）计算梯度直方图<br>梯度直方图是在一个8<em>8的cell里面计算的。那么在8</em>8的cell里面就会有8<em>8</em>2=128个值，其中2包括了梯度强度和梯度方向。通过统计形成梯度直方图，128个值将会变成9个值，大大降低了计算量，同时又对光照等环境变化更加地鲁棒。  </p>\n<p>首先将0-180度分成9个bins，分别是0，20，40…160；然后根据梯度方向值的大小，将每一个像素点的梯度幅度值分配到相应的bin上；最终得到如下图所示的直方图，一个长度为9的数组。<br><img alt=\"HOG02\" src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/hog02.jpg\"><br>从上图可以看到，更多的点的梯度方向是倾向于0度和160度，也就是说这些点的梯度方向是向上或者向下，表明图像这个位置存在比较明显的横向边缘。因此HOG是对边角敏感的，由于这样的统计方法，也是对部分像素值变化不敏感的，所以能够适应不同的环境。   </p>\n<p>bin值的具体计算方法如下例：<br><img alt=\"HOG01\" src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/hog01.jpg\"><br>先看两个蓝色圈圈。因为蓝圈的方向是80度，大小是2，所以该点就投给80这个bin；<br>再看两个红色圈圈。因为红色圈圈的方向是10，大小是4，因为10距离0点为10，距离20点为也为10，那么有一半的大小是投给0这个bin，还有一半的大小投给20这个bin。  </p>\n<p>4）块内归一化梯度直方图<br>归一化的目的是降低光照的影响。<br>归一化的方法是向量的每一个值除以向量的模长。  </p>\n<p>5）收集HOG特征<br>将检测窗口中所有重叠的块进行HOG特征的收集，并将它们结合成最终的特征向量供分类使用。<br>一个图像的HOG特征维数计算:<br>对于一个$64\\times128$大小的图像，按照$16\\times16$的大小提取block，将会有7个水平位置和15个竖直位可以取得，所以一共有$7\\times15=105$个block，所以我们整合所有block的vector，形成一个大的一维vector的大小将会是$36\\times105=3780$。</p>\n<h3 id=\"OpenCV-HOGDescriptor\"><a href=\"#OpenCV-HOGDescriptor\" class=\"headerlink\" title=\"OpenCV HOGDescriptor\"></a>OpenCV HOGDescriptor</h3><ul>\n<li>窗口大小 winSize(64,128)</li>\n<li>块大小 blockSize(16,16)</li>\n<li>块滑动增量 blockStride(8,8)</li>\n<li>胞元大小 cellSize(8,8)</li>\n<li>梯度方向数 nbins(9) </li>\n</ul>\n<p>在确定了上述的参数后，就可以计算出一个HOG描述子的维度了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> HOGDescriptor::getDescriptorSize() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CV_Assert(blockSize.width % cellSize.width == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        blockSize.height % cellSize.height == <span class=\"number\">0</span>);</span><br><span class=\"line\">    CV_Assert((winSize.width - blockSize.width) % blockStride.width == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (winSize.height - blockSize.height) % blockStride.height == <span class=\"number\">0</span> );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">size_t</span>)nbins*</span><br><span class=\"line\">        (blockSize.width/cellSize.width)*</span><br><span class=\"line\">        (blockSize.height/cellSize.height)*</span><br><span class=\"line\">        ((winSize.width - blockSize.width)/blockStride.width + <span class=\"number\">1</span>)*</span><br><span class=\"line\">        ((winSize.height - blockSize.height)/blockStride.height + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定某矩形是否完全包含在另一个矩形中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_inside</span><span class=\"params\">(o, i)</span>:</span></span><br><span class=\"line\">    ox, oy, ow, oh = o</span><br><span class=\"line\">    ix, iy, iw, ih = i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ox &gt; ix <span class=\"keyword\">and</span> oy &gt; iy <span class=\"keyword\">and</span> ox+ow &lt; ix+iw <span class=\"keyword\">and</span> oy + oh &lt; iy + ih</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制矩形来框住检测到的人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_person</span><span class=\"params\">(image, person)</span>:</span></span><br><span class=\"line\">    x, y, w, h = person</span><br><span class=\"line\">    cv2.rectangle(img, (x, y), (x+w, y + h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入图像，</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">\"./images/run.jpg\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 实例化HOGDescriptor对象，作为检测人的检测器</span></span><br><span class=\"line\">hog = cv2.HOGDescriptor()</span><br><span class=\"line\"><span class=\"comment\"># 设置线性SVM分类器的系数</span></span><br><span class=\"line\">hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 该和人脸算法不一样，不需要在使用目标检测方法前将原始图像转换为灰度形式</span></span><br><span class=\"line\"><span class=\"comment\"># 该方法返回一个与矩形相关的数组，用户可用该数组在图形上绘制形状</span></span><br><span class=\"line\"><span class=\"comment\"># 若图形上的矩形存在有包含与被包含的关系，说明检测出现了错误</span></span><br><span class=\"line\"><span class=\"comment\"># 被包含的图形应该被丢弃，此过程由is_inside来实现</span></span><br><span class=\"line\"><span class=\"comment\"># 在输入图像中检测不同大小的对象。检测到的对象作为列表返回</span></span><br><span class=\"line\">found, w = hog.detectMultiScale(img)</span><br><span class=\"line\"></span><br><span class=\"line\">found_filtered = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历检测结果，丢弃不含有检测目标区域的矩形。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ri, r <span class=\"keyword\">in</span> enumerate(found):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> qi, q <span class=\"keyword\">in</span> enumerate(found):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ri != qi <span class=\"keyword\">and</span> is_inside(r, q):</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            found_filtered.append(r)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> found_filtered:</span><br><span class=\"line\">    draw_person(img, person)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cv2.imshow(\"people detection\", img)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.waitKey(0)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.destroyAllWindows()</span></span><br><span class=\"line\">plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/output_4_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hog_descriptor</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, img, cell_size=<span class=\"number\">16</span>, bin_size=<span class=\"number\">9</span>)</span>:</span></span><br><span class=\"line\">        self.img = img</span><br><span class=\"line\">        self.img = np.sqrt(img / np.max(img))</span><br><span class=\"line\">        self.img = img * <span class=\"number\">255</span></span><br><span class=\"line\">        self.cell_size = cell_size</span><br><span class=\"line\">        self.bin_size = bin_size</span><br><span class=\"line\">        self.angle_unit = int(<span class=\"number\">360</span> / self.bin_size)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> type(self.bin_size) == int, <span class=\"string\">\"bin_size should be integer,\"</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> type(self.cell_size) == int, <span class=\"string\">\"cell_size should be integer,\"</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> type(self.angle_unit) == int, <span class=\"string\">\"bin_size should be divisible by 360\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extract</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        height, width = self.img.shape</span><br><span class=\"line\">        gradient_magnitude, gradient_angle = self.global_gradient()</span><br><span class=\"line\">        gradient_magnitude = abs(gradient_magnitude)</span><br><span class=\"line\">        cell_gradient_vector = np.zeros((int(height / self.cell_size), int(width / self.cell_size), self.bin_size))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">                cell_magnitude = gradient_magnitude[i * self.cell_size:(i + <span class=\"number\">1</span>) * self.cell_size,</span><br><span class=\"line\">                                 j * self.cell_size:(j + <span class=\"number\">1</span>) * self.cell_size]</span><br><span class=\"line\">                cell_angle = gradient_angle[i * self.cell_size:(i + <span class=\"number\">1</span>) * self.cell_size,</span><br><span class=\"line\">                             j * self.cell_size:(j + <span class=\"number\">1</span>) * self.cell_size]</span><br><span class=\"line\">                cell_gradient_vector[i][j] = self.cell_gradient(cell_magnitude, cell_angle)</span><br><span class=\"line\"></span><br><span class=\"line\">        hog_image = self.render_gradient(np.zeros([height, width]), cell_gradient_vector)</span><br><span class=\"line\">        hog_vector = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">1</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                block_vector = []</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i][j])</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i][j + <span class=\"number\">1</span>])</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i + <span class=\"number\">1</span>][j])</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>])</span><br><span class=\"line\">                mag = <span class=\"keyword\">lambda</span> vector: math.sqrt(sum(i ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> vector))</span><br><span class=\"line\">                magnitude = mag(block_vector)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> magnitude != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    normalize = <span class=\"keyword\">lambda</span> block_vector, magnitude: [element / magnitude <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> block_vector]</span><br><span class=\"line\">                    block_vector = normalize(block_vector, magnitude)</span><br><span class=\"line\">                hog_vector.append(block_vector)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hog_vector, hog_image</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">global_gradient</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        gradient_values_x = cv2.Sobel(self.img, cv2.CV_64F, <span class=\"number\">1</span>, <span class=\"number\">0</span>, ksize=<span class=\"number\">5</span>)</span><br><span class=\"line\">        gradient_values_y = cv2.Sobel(self.img, cv2.CV_64F, <span class=\"number\">0</span>, <span class=\"number\">1</span>, ksize=<span class=\"number\">5</span>)</span><br><span class=\"line\">        gradient_magnitude = cv2.addWeighted(gradient_values_x, <span class=\"number\">0.5</span>, gradient_values_y, <span class=\"number\">0.5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        gradient_angle = cv2.phase(gradient_values_x, gradient_values_y, angleInDegrees=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gradient_magnitude, gradient_angle</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cell_gradient</span><span class=\"params\">(self, cell_magnitude, cell_angle)</span>:</span></span><br><span class=\"line\">        orientation_centers = [<span class=\"number\">0</span>] * self.bin_size</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(cell_magnitude.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(cell_magnitude.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">                gradient_strength = cell_magnitude[i][j]</span><br><span class=\"line\">                gradient_angle = cell_angle[i][j]</span><br><span class=\"line\">                min_angle, max_angle, mod = self.get_closest_bins(gradient_angle)</span><br><span class=\"line\">                orientation_centers[min_angle] += (gradient_strength * (<span class=\"number\">1</span> - (mod / self.angle_unit)))</span><br><span class=\"line\">                orientation_centers[max_angle] += (gradient_strength * (mod / self.angle_unit))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orientation_centers</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_closest_bins</span><span class=\"params\">(self, gradient_angle)</span>:</span></span><br><span class=\"line\">        idx = int(gradient_angle / self.angle_unit)</span><br><span class=\"line\">        mod = gradient_angle % self.angle_unit</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idx, (idx + <span class=\"number\">1</span>) % self.bin_size, mod</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">render_gradient</span><span class=\"params\">(self, image, cell_gradient)</span>:</span></span><br><span class=\"line\">        cell_width = self.cell_size / <span class=\"number\">2</span></span><br><span class=\"line\">        max_mag = np.array(cell_gradient).max()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(cell_gradient.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(cell_gradient.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">                cell_grad = cell_gradient[x][y]</span><br><span class=\"line\">                cell_grad /= max_mag</span><br><span class=\"line\">                angle = <span class=\"number\">0</span></span><br><span class=\"line\">                angle_gap = self.angle_unit</span><br><span class=\"line\">                <span class=\"keyword\">for</span> magnitude <span class=\"keyword\">in</span> cell_grad:</span><br><span class=\"line\">                    angle_radian = math.radians(angle)</span><br><span class=\"line\">                    x1 = int(x * self.cell_size + magnitude * cell_width * math.cos(angle_radian))</span><br><span class=\"line\">                    y1 = int(y * self.cell_size + magnitude * cell_width * math.sin(angle_radian))</span><br><span class=\"line\">                    x2 = int(x * self.cell_size - magnitude * cell_width * math.cos(angle_radian))</span><br><span class=\"line\">                    y2 = int(y * self.cell_size - magnitude * cell_width * math.sin(angle_radian))</span><br><span class=\"line\">                    cv2.line(image, (y1, x1), (y2, x2), int(<span class=\"number\">255</span> * math.sqrt(magnitude)))</span><br><span class=\"line\">                    angle += angle_gap</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/car.jpg'</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class=\"line\"><span class=\"comment\"># img = cv2.resize(img, (128, 64))</span></span><br><span class=\"line\">hog = Hog_descriptor(img, cell_size=<span class=\"number\">8</span>, bin_size=<span class=\"number\">9</span>)</span><br><span class=\"line\">vector, image = hog.extract()</span><br><span class=\"line\">print(np.array(vector).shape)</span><br><span class=\"line\">plt.imshow(image, cmap=plt.cm.gray)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/output_5_1.png\"></p>\n<h3 id=\"图像金字塔\"><a href=\"#图像金字塔\" class=\"headerlink\" title=\"图像金字塔\"></a>图像金字塔</h3><p>图像金字塔是图像的多尺度表示。  </p>\n<p>构建图像金字塔：<br>1 - 获取图像<br>2 - 使用任意尺度的参数来调整（缩小）图像大小<br>3 - 平滑图像（使用高斯模糊）<br>4 - 如果图像比最小尺寸还大，则从第一步重复该过程。  </p>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><p>滑动窗口通过扫描较大图像的较小区域来解决定位问题，进而在同一图像的不同尺度下重复扫描。  </p>\n<p>该技术需将图像分解成多个部分，然后丢掉那些不太可能包含对象的部分，并对可能区域进行分类。  </p>\n<h3 id=\"非极大抑制\"><a href=\"#非极大抑制\" class=\"headerlink\" title=\"非极大抑制\"></a>非极大抑制</h3><p>非极大值抑制（Non-maximum suppression, NMS）释义为抑制不是极大值的元素，搜索局部的极大值。  </p>\n<p>如在对象检测中，滑动窗口经提取特征 —&gt; 分类器分类识别后，每个窗口都会得到一个分类和分数，但滑动窗口会导致很多窗口与其他窗口存在包含或大部分交叉的情况，这时就需要用到 NMS 来选取那些邻域里分数最高（某类对象的概率最大），并抑制这些分数低的窗口。 </p>\n<p>也可理解为：目标检测的过程中，同一目标位置上会产生大量的候选框，这些候选框相互之间可能会有重叠，此时我们需要利用非极大值抑制找到最佳的目标边界框，消除冗余的边界框。  </p>\n<h3 id=\"使用HOG-SVM做行人检测\"><a href=\"#使用HOG-SVM做行人检测\" class=\"headerlink\" title=\"使用HOG+SVM做行人检测\"></a>使用HOG+SVM做行人检测</h3><p>参考2005年CVPR论文，使用HOG+SVM做行人检测<br>论文链接：  </p>\n<ul>\n<li>Histograms of Oriented Gradients for Human Detection<br><a href=\"https://hal.inria.fr/file/index/docid/548512/filename/hog_cvpr2005.pdf\" target=\"_blank\" rel=\"noopener\">https://hal.inria.fr/file/index/docid/548512/filename/hog_cvpr2005.pdf</a></li>\n</ul>\n<p>工作流程：首先对输入的图片进行预处理，然后计算像素点的梯度值，然后形成梯度直方图，然后对blocks进行normalize，最后收集到HOG feature（其实是一行高维的vector）放到SVM里进行监督学习，从而实现行人的检测。<br><img src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/./OpenCV学习笔记四：目标检测与识别/Histograms of Oriented Gradients for Human Detection.png\" alt=\"Histograms of Oriented Gradients for Human Detection\"></p>\n<h3 id=\"INRIA数据集\"><a href=\"#INRIA数据集\" class=\"headerlink\" title=\"INRIA数据集\"></a>INRIA数据集</h3><p>INRIA数据集官方页面：  </p>\n<ul>\n<li><a href=\"http://pascal.inrialpes.fr/data/human/\" target=\"_blank\" rel=\"noopener\">http://pascal.inrialpes.fr/data/human/</a></li>\n</ul>\n<p>整理版本：  </p>\n<ul>\n<li>INRIA数据集 - baiyu33的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/baiyu33/article/details/51762368\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baiyu33/article/details/51762368</a></li>\n</ul>\n<h3 id=\"HardExample\"><a href=\"#HardExample\" class=\"headerlink\" title=\"HardExample\"></a>HardExample</h3><p>用分类器对样本进行分类，把其中错误分类的样本(hard negative)放入负样本集合再继续训练分类器。  </p>\n<p>难例(或叫做难样本，Hard Example，Hard Negative，Hard Instance)是指利用第一次训练的分类器在负样本原图(肯定没有人体)上进行行人检测时所有检测到的矩形框，这些矩形框区域很明显都是误报，把这些误报的矩形框保存为图片，加入到初始的负样本集合中，重新进行SVM的训练，可显著减少误报。这种方法叫做自举法(Bootstrap)，自举法首先使用初始负样本集来训练一个模型，然后收集被这个初始模型错误分类的负样本来形成一个负样本难例集。用此负样本难例集训练新的模型，此过程可以重复多次。</p>\n<h3 id=\"OHEM\"><a href=\"#OHEM\" class=\"headerlink\" title=\"OHEM\"></a>OHEM</h3><p>在线难例挖掘（online hard example miniing）<br>选取loss较大(检测结果与label差异较大)的部分进行训练。  </p>\n<h3 id=\"基于深度学习的方法\"><a href=\"#基于深度学习的方法\" class=\"headerlink\" title=\"基于深度学习的方法\"></a>基于深度学习的方法</h3><ul>\n<li>RCNN </li>\n<li>Fast-RCNN</li>\n<li>YOLO</li>\n<li>SSD</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>OpenCV 学习笔记 07 目标检测与识别 - 耕毅 - 博客园<br><a href=\"https://www.cnblogs.com/gengyi/p/10555622.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/gengyi/p/10555622.html</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> OpenCV学习笔记四：目标检测与识别 </strong> <excerpt in index | 首页摘要> </excerpt></p>\n<h3 id=\"目标检测和识别\"><a href=\"#目标检测和识别\" class=\"headerlink\" title=\"目标检测和识别\"></a>目标检测和识别</h3><p>传统目标检测算法中的技术：  </p>\n<ul>\n<li>梯度直方图（Histogram of Oriented Gradient， HOG）  </li>\n<li>图像金字塔（image pyramid）  </li>\n<li>滑动窗口（sliding window）  </li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<p>与特征检测算法不同，这些算法是互补的。如在梯度直方图（HOG）中会使用滑动窗口技术。</p>\n<h3 id=\"HOG\"><a href=\"#HOG\" class=\"headerlink\" title=\"HOG\"></a>HOG</h3><ul>\n<li>Histogram of Oriented Gradients | Learn OpenCV<br><a href=\"https://www.learnopencv.com/histogram-of-oriented-gradients/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/histogram-of-oriented-gradients/</a>  </li>\n</ul>\n<p>HOG，全称方向梯度直方图，是一个特征描述符，它基于梯度来计算直方图。</p>\n<p>步骤：<br>1）图像预处理<br>包括伽马矫正和灰度化，可选步骤。<br>为了减少光照因素的影响，首先需要将整个图像进行规范化（归一化）。在图像的纹理强度中，局部的表层曝光贡献的比重较大，所以，这种压缩处理能够有效地降低图像局部的阴影和光照变化；<br>因为颜色信息作用不大，通常先转化为灰度图。 </p>\n<p>2）计算每个像素点的梯度<br>计算图像横坐标和纵坐标方向的梯度，并据此计算每个像素位置的梯度方向值；求导操作不仅能够捕获轮廓，人影和一些纹理信息，还能进一步弱化光照的影响。<br>图像中像素点$(x,y)$的梯度为：  </p>\n<script type=\"math/tex; mode=display\">G_x(x,y) = H(x+1,y) - H(x-1,y)</script><script type=\"math/tex; mode=display\">G_y(x,y) = H(x,y+1) - H(x,y-1)</script><p>其中$G_x(x,y)$,$G_y(x,y)$,$H(x,y)$分别表示图像中像素点$(x,y)$处的水平方向梯度、垂直方向梯度和像素值。像素点$(x,y)$处的梯度幅度和梯度方向分别为：  </p>\n<script type=\"math/tex; mode=display\">G(x,y) = \\sqrt{G_x(x,y)^2 + G_y(x,y)^2}</script><script type=\"math/tex; mode=display\">\\alpha(x,y) = \\tan^{-1}{(\\frac{G_y(x,y)}{G_x(x,y)})}</script><p>最常用的方法是：首先用[-1,0,1]梯度算子对原图像做卷积运算，得到x方向（水平方向，以向右为正方向）的梯度分量gradscalx，然后用[1,0,-1]T梯度算子对原图像做卷积运算，得到y方向（竖直方向，以向上为正方向）的梯度分量gradscaly，最后用以上公式计算该像素点的梯度大小和方向。  </p>\n<p>3）计算梯度直方图<br>梯度直方图是在一个8<em>8的cell里面计算的。那么在8</em>8的cell里面就会有8<em>8</em>2=128个值，其中2包括了梯度强度和梯度方向。通过统计形成梯度直方图，128个值将会变成9个值，大大降低了计算量，同时又对光照等环境变化更加地鲁棒。  </p>\n<p>首先将0-180度分成9个bins，分别是0，20，40…160；然后根据梯度方向值的大小，将每一个像素点的梯度幅度值分配到相应的bin上；最终得到如下图所示的直方图，一个长度为9的数组。<br><img alt=\"HOG02\" src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/hog02.jpg\"><br>从上图可以看到，更多的点的梯度方向是倾向于0度和160度，也就是说这些点的梯度方向是向上或者向下，表明图像这个位置存在比较明显的横向边缘。因此HOG是对边角敏感的，由于这样的统计方法，也是对部分像素值变化不敏感的，所以能够适应不同的环境。   </p>\n<p>bin值的具体计算方法如下例：<br><img alt=\"HOG01\" src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/hog01.jpg\"><br>先看两个蓝色圈圈。因为蓝圈的方向是80度，大小是2，所以该点就投给80这个bin；<br>再看两个红色圈圈。因为红色圈圈的方向是10，大小是4，因为10距离0点为10，距离20点为也为10，那么有一半的大小是投给0这个bin，还有一半的大小投给20这个bin。  </p>\n<p>4）块内归一化梯度直方图<br>归一化的目的是降低光照的影响。<br>归一化的方法是向量的每一个值除以向量的模长。  </p>\n<p>5）收集HOG特征<br>将检测窗口中所有重叠的块进行HOG特征的收集，并将它们结合成最终的特征向量供分类使用。<br>一个图像的HOG特征维数计算:<br>对于一个$64\\times128$大小的图像，按照$16\\times16$的大小提取block，将会有7个水平位置和15个竖直位可以取得，所以一共有$7\\times15=105$个block，所以我们整合所有block的vector，形成一个大的一维vector的大小将会是$36\\times105=3780$。</p>\n<h3 id=\"OpenCV-HOGDescriptor\"><a href=\"#OpenCV-HOGDescriptor\" class=\"headerlink\" title=\"OpenCV HOGDescriptor\"></a>OpenCV HOGDescriptor</h3><ul>\n<li>窗口大小 winSize(64,128)</li>\n<li>块大小 blockSize(16,16)</li>\n<li>块滑动增量 blockStride(8,8)</li>\n<li>胞元大小 cellSize(8,8)</li>\n<li>梯度方向数 nbins(9) </li>\n</ul>\n<p>在确定了上述的参数后，就可以计算出一个HOG描述子的维度了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> HOGDescriptor::getDescriptorSize() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CV_Assert(blockSize.width % cellSize.width == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        blockSize.height % cellSize.height == <span class=\"number\">0</span>);</span><br><span class=\"line\">    CV_Assert((winSize.width - blockSize.width) % blockStride.width == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (winSize.height - blockSize.height) % blockStride.height == <span class=\"number\">0</span> );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">size_t</span>)nbins*</span><br><span class=\"line\">        (blockSize.width/cellSize.width)*</span><br><span class=\"line\">        (blockSize.height/cellSize.height)*</span><br><span class=\"line\">        ((winSize.width - blockSize.width)/blockStride.width + <span class=\"number\">1</span>)*</span><br><span class=\"line\">        ((winSize.height - blockSize.height)/blockStride.height + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定某矩形是否完全包含在另一个矩形中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_inside</span><span class=\"params\">(o, i)</span>:</span></span><br><span class=\"line\">    ox, oy, ow, oh = o</span><br><span class=\"line\">    ix, iy, iw, ih = i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ox &gt; ix <span class=\"keyword\">and</span> oy &gt; iy <span class=\"keyword\">and</span> ox+ow &lt; ix+iw <span class=\"keyword\">and</span> oy + oh &lt; iy + ih</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制矩形来框住检测到的人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_person</span><span class=\"params\">(image, person)</span>:</span></span><br><span class=\"line\">    x, y, w, h = person</span><br><span class=\"line\">    cv2.rectangle(img, (x, y), (x+w, y + h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入图像，</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">\"./images/run.jpg\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 实例化HOGDescriptor对象，作为检测人的检测器</span></span><br><span class=\"line\">hog = cv2.HOGDescriptor()</span><br><span class=\"line\"><span class=\"comment\"># 设置线性SVM分类器的系数</span></span><br><span class=\"line\">hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 该和人脸算法不一样，不需要在使用目标检测方法前将原始图像转换为灰度形式</span></span><br><span class=\"line\"><span class=\"comment\"># 该方法返回一个与矩形相关的数组，用户可用该数组在图形上绘制形状</span></span><br><span class=\"line\"><span class=\"comment\"># 若图形上的矩形存在有包含与被包含的关系，说明检测出现了错误</span></span><br><span class=\"line\"><span class=\"comment\"># 被包含的图形应该被丢弃，此过程由is_inside来实现</span></span><br><span class=\"line\"><span class=\"comment\"># 在输入图像中检测不同大小的对象。检测到的对象作为列表返回</span></span><br><span class=\"line\">found, w = hog.detectMultiScale(img)</span><br><span class=\"line\"></span><br><span class=\"line\">found_filtered = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历检测结果，丢弃不含有检测目标区域的矩形。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ri, r <span class=\"keyword\">in</span> enumerate(found):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> qi, q <span class=\"keyword\">in</span> enumerate(found):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ri != qi <span class=\"keyword\">and</span> is_inside(r, q):</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            found_filtered.append(r)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> found_filtered:</span><br><span class=\"line\">    draw_person(img, person)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cv2.imshow(\"people detection\", img)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.waitKey(0)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.destroyAllWindows()</span></span><br><span class=\"line\">plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/output_4_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hog_descriptor</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, img, cell_size=<span class=\"number\">16</span>, bin_size=<span class=\"number\">9</span>)</span>:</span></span><br><span class=\"line\">        self.img = img</span><br><span class=\"line\">        self.img = np.sqrt(img / np.max(img))</span><br><span class=\"line\">        self.img = img * <span class=\"number\">255</span></span><br><span class=\"line\">        self.cell_size = cell_size</span><br><span class=\"line\">        self.bin_size = bin_size</span><br><span class=\"line\">        self.angle_unit = int(<span class=\"number\">360</span> / self.bin_size)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> type(self.bin_size) == int, <span class=\"string\">\"bin_size should be integer,\"</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> type(self.cell_size) == int, <span class=\"string\">\"cell_size should be integer,\"</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> type(self.angle_unit) == int, <span class=\"string\">\"bin_size should be divisible by 360\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extract</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        height, width = self.img.shape</span><br><span class=\"line\">        gradient_magnitude, gradient_angle = self.global_gradient()</span><br><span class=\"line\">        gradient_magnitude = abs(gradient_magnitude)</span><br><span class=\"line\">        cell_gradient_vector = np.zeros((int(height / self.cell_size), int(width / self.cell_size), self.bin_size))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">                cell_magnitude = gradient_magnitude[i * self.cell_size:(i + <span class=\"number\">1</span>) * self.cell_size,</span><br><span class=\"line\">                                 j * self.cell_size:(j + <span class=\"number\">1</span>) * self.cell_size]</span><br><span class=\"line\">                cell_angle = gradient_angle[i * self.cell_size:(i + <span class=\"number\">1</span>) * self.cell_size,</span><br><span class=\"line\">                             j * self.cell_size:(j + <span class=\"number\">1</span>) * self.cell_size]</span><br><span class=\"line\">                cell_gradient_vector[i][j] = self.cell_gradient(cell_magnitude, cell_angle)</span><br><span class=\"line\"></span><br><span class=\"line\">        hog_image = self.render_gradient(np.zeros([height, width]), cell_gradient_vector)</span><br><span class=\"line\">        hog_vector = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(cell_gradient_vector.shape[<span class=\"number\">1</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                block_vector = []</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i][j])</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i][j + <span class=\"number\">1</span>])</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i + <span class=\"number\">1</span>][j])</span><br><span class=\"line\">                block_vector.extend(cell_gradient_vector[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>])</span><br><span class=\"line\">                mag = <span class=\"keyword\">lambda</span> vector: math.sqrt(sum(i ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> vector))</span><br><span class=\"line\">                magnitude = mag(block_vector)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> magnitude != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    normalize = <span class=\"keyword\">lambda</span> block_vector, magnitude: [element / magnitude <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> block_vector]</span><br><span class=\"line\">                    block_vector = normalize(block_vector, magnitude)</span><br><span class=\"line\">                hog_vector.append(block_vector)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hog_vector, hog_image</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">global_gradient</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        gradient_values_x = cv2.Sobel(self.img, cv2.CV_64F, <span class=\"number\">1</span>, <span class=\"number\">0</span>, ksize=<span class=\"number\">5</span>)</span><br><span class=\"line\">        gradient_values_y = cv2.Sobel(self.img, cv2.CV_64F, <span class=\"number\">0</span>, <span class=\"number\">1</span>, ksize=<span class=\"number\">5</span>)</span><br><span class=\"line\">        gradient_magnitude = cv2.addWeighted(gradient_values_x, <span class=\"number\">0.5</span>, gradient_values_y, <span class=\"number\">0.5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        gradient_angle = cv2.phase(gradient_values_x, gradient_values_y, angleInDegrees=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gradient_magnitude, gradient_angle</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cell_gradient</span><span class=\"params\">(self, cell_magnitude, cell_angle)</span>:</span></span><br><span class=\"line\">        orientation_centers = [<span class=\"number\">0</span>] * self.bin_size</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(cell_magnitude.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(cell_magnitude.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">                gradient_strength = cell_magnitude[i][j]</span><br><span class=\"line\">                gradient_angle = cell_angle[i][j]</span><br><span class=\"line\">                min_angle, max_angle, mod = self.get_closest_bins(gradient_angle)</span><br><span class=\"line\">                orientation_centers[min_angle] += (gradient_strength * (<span class=\"number\">1</span> - (mod / self.angle_unit)))</span><br><span class=\"line\">                orientation_centers[max_angle] += (gradient_strength * (mod / self.angle_unit))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orientation_centers</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_closest_bins</span><span class=\"params\">(self, gradient_angle)</span>:</span></span><br><span class=\"line\">        idx = int(gradient_angle / self.angle_unit)</span><br><span class=\"line\">        mod = gradient_angle % self.angle_unit</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idx, (idx + <span class=\"number\">1</span>) % self.bin_size, mod</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">render_gradient</span><span class=\"params\">(self, image, cell_gradient)</span>:</span></span><br><span class=\"line\">        cell_width = self.cell_size / <span class=\"number\">2</span></span><br><span class=\"line\">        max_mag = np.array(cell_gradient).max()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(cell_gradient.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(cell_gradient.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">                cell_grad = cell_gradient[x][y]</span><br><span class=\"line\">                cell_grad /= max_mag</span><br><span class=\"line\">                angle = <span class=\"number\">0</span></span><br><span class=\"line\">                angle_gap = self.angle_unit</span><br><span class=\"line\">                <span class=\"keyword\">for</span> magnitude <span class=\"keyword\">in</span> cell_grad:</span><br><span class=\"line\">                    angle_radian = math.radians(angle)</span><br><span class=\"line\">                    x1 = int(x * self.cell_size + magnitude * cell_width * math.cos(angle_radian))</span><br><span class=\"line\">                    y1 = int(y * self.cell_size + magnitude * cell_width * math.sin(angle_radian))</span><br><span class=\"line\">                    x2 = int(x * self.cell_size - magnitude * cell_width * math.cos(angle_radian))</span><br><span class=\"line\">                    y2 = int(y * self.cell_size - magnitude * cell_width * math.sin(angle_radian))</span><br><span class=\"line\">                    cv2.line(image, (y1, x1), (y2, x2), int(<span class=\"number\">255</span> * math.sqrt(magnitude)))</span><br><span class=\"line\">                    angle += angle_gap</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/car.jpg'</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class=\"line\"><span class=\"comment\"># img = cv2.resize(img, (128, 64))</span></span><br><span class=\"line\">hog = Hog_descriptor(img, cell_size=<span class=\"number\">8</span>, bin_size=<span class=\"number\">9</span>)</span><br><span class=\"line\">vector, image = hog.extract()</span><br><span class=\"line\">print(np.array(vector).shape)</span><br><span class=\"line\">plt.imshow(image, cmap=plt.cm.gray)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/output_5_1.png\"></p>\n<h3 id=\"图像金字塔\"><a href=\"#图像金字塔\" class=\"headerlink\" title=\"图像金字塔\"></a>图像金字塔</h3><p>图像金字塔是图像的多尺度表示。  </p>\n<p>构建图像金字塔：<br>1 - 获取图像<br>2 - 使用任意尺度的参数来调整（缩小）图像大小<br>3 - 平滑图像（使用高斯模糊）<br>4 - 如果图像比最小尺寸还大，则从第一步重复该过程。  </p>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><p>滑动窗口通过扫描较大图像的较小区域来解决定位问题，进而在同一图像的不同尺度下重复扫描。  </p>\n<p>该技术需将图像分解成多个部分，然后丢掉那些不太可能包含对象的部分，并对可能区域进行分类。  </p>\n<h3 id=\"非极大抑制\"><a href=\"#非极大抑制\" class=\"headerlink\" title=\"非极大抑制\"></a>非极大抑制</h3><p>非极大值抑制（Non-maximum suppression, NMS）释义为抑制不是极大值的元素，搜索局部的极大值。  </p>\n<p>如在对象检测中，滑动窗口经提取特征 —&gt; 分类器分类识别后，每个窗口都会得到一个分类和分数，但滑动窗口会导致很多窗口与其他窗口存在包含或大部分交叉的情况，这时就需要用到 NMS 来选取那些邻域里分数最高（某类对象的概率最大），并抑制这些分数低的窗口。 </p>\n<p>也可理解为：目标检测的过程中，同一目标位置上会产生大量的候选框，这些候选框相互之间可能会有重叠，此时我们需要利用非极大值抑制找到最佳的目标边界框，消除冗余的边界框。  </p>\n<h3 id=\"使用HOG-SVM做行人检测\"><a href=\"#使用HOG-SVM做行人检测\" class=\"headerlink\" title=\"使用HOG+SVM做行人检测\"></a>使用HOG+SVM做行人检测</h3><p>参考2005年CVPR论文，使用HOG+SVM做行人检测<br>论文链接：  </p>\n<ul>\n<li>Histograms of Oriented Gradients for Human Detection<br><a href=\"https://hal.inria.fr/file/index/docid/548512/filename/hog_cvpr2005.pdf\" target=\"_blank\" rel=\"noopener\">https://hal.inria.fr/file/index/docid/548512/filename/hog_cvpr2005.pdf</a></li>\n</ul>\n<p>工作流程：首先对输入的图片进行预处理，然后计算像素点的梯度值，然后形成梯度直方图，然后对blocks进行normalize，最后收集到HOG feature（其实是一行高维的vector）放到SVM里进行监督学习，从而实现行人的检测。<br><img src=\"/2019/06/23/OpenCV学习笔记四：目标检测与识别/./OpenCV学习笔记四：目标检测与识别/Histograms of Oriented Gradients for Human Detection.png\" alt=\"Histograms of Oriented Gradients for Human Detection\"></p>\n<h3 id=\"INRIA数据集\"><a href=\"#INRIA数据集\" class=\"headerlink\" title=\"INRIA数据集\"></a>INRIA数据集</h3><p>INRIA数据集官方页面：  </p>\n<ul>\n<li><a href=\"http://pascal.inrialpes.fr/data/human/\" target=\"_blank\" rel=\"noopener\">http://pascal.inrialpes.fr/data/human/</a></li>\n</ul>\n<p>整理版本：  </p>\n<ul>\n<li>INRIA数据集 - baiyu33的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/baiyu33/article/details/51762368\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baiyu33/article/details/51762368</a></li>\n</ul>\n<h3 id=\"HardExample\"><a href=\"#HardExample\" class=\"headerlink\" title=\"HardExample\"></a>HardExample</h3><p>用分类器对样本进行分类，把其中错误分类的样本(hard negative)放入负样本集合再继续训练分类器。  </p>\n<p>难例(或叫做难样本，Hard Example，Hard Negative，Hard Instance)是指利用第一次训练的分类器在负样本原图(肯定没有人体)上进行行人检测时所有检测到的矩形框，这些矩形框区域很明显都是误报，把这些误报的矩形框保存为图片，加入到初始的负样本集合中，重新进行SVM的训练，可显著减少误报。这种方法叫做自举法(Bootstrap)，自举法首先使用初始负样本集来训练一个模型，然后收集被这个初始模型错误分类的负样本来形成一个负样本难例集。用此负样本难例集训练新的模型，此过程可以重复多次。</p>\n<h3 id=\"OHEM\"><a href=\"#OHEM\" class=\"headerlink\" title=\"OHEM\"></a>OHEM</h3><p>在线难例挖掘（online hard example miniing）<br>选取loss较大(检测结果与label差异较大)的部分进行训练。  </p>\n<h3 id=\"基于深度学习的方法\"><a href=\"#基于深度学习的方法\" class=\"headerlink\" title=\"基于深度学习的方法\"></a>基于深度学习的方法</h3><ul>\n<li>RCNN </li>\n<li>Fast-RCNN</li>\n<li>YOLO</li>\n<li>SSD</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>OpenCV 学习笔记 07 目标检测与识别 - 耕毅 - 博客园<br><a href=\"https://www.cnblogs.com/gengyi/p/10555622.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/gengyi/p/10555622.html</a></li>\n</ul>\n</the>"},{"title":"Pixar-Lamp二：ST-GCN动作识别","date":"2019-07-16T16:16:39.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n做个跳跳灯！\n\n* 解读：基于动态骨骼的动作识别方法ST-GCN（时空图卷积网络模型） - 浪浪的博客 - CSDN博客  \nhttps://blog.csdn.net/qq_36893052/article/details/79860328\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<html>\n<head>\n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n\n### Ubuntu16.04下环境配置\n\n安装图神经网络库DGL\n* Overview of DGL — DGL 0.3 documentation  \nhttps://docs.dgl.ai/index.html\n``` bash\npip install dgl\n```\n\n* http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl \n\n安装pytorch，直接下载.whl文件，在本地进行安装\n``` bash\npip install torch-0.3.1-cp35-cp35m-linux_x86_64.whl\npip install torchvision\n\ncd Workplace/\njupyter notebook --ip=0.0.0.0 --no-browser --allow-root\n```\n\n\n\n\n## GCN\n\n\nGCN 是一种可直接作用于图并利用其结构信息的神经网络。\n\n给定图 $G = (V, E)$ ，GCN 的输入为：\n\n- 1. 一个输入维度为 $N × F^0$ 的特征矩阵 $X$，其中 $N$ 是图网络中的节点数而 $F^0$ 是每个节点的输入特征数。\n- 2. 一个图结构的维度为 $N × N$ 的矩阵表征，例如图 $G$ 的邻接矩阵 $A$ 。 \n\n因此，GCN 中的隐藏层可以写作 $$H = f(H^{-1}, A))$$\n其中，$H⁰ = X$ ，$f$ 是一种传播规则。  \n每一个隐藏层 $H$ⁱ 都对应一个维度为 $N×Fⁱ$ 的特征矩阵，该矩阵中的每一行都是某个节点的特征表征。  \n在每一层中，GCN 会使用传播规则 $f$ 将这些信息聚合起来，从而形成下一层的特征。这样一来，在每个连续的层中特征就会变得越来越抽象。  \n在该框架下，GCN 的各种变体只不过是在传播规则 $f$ 的选择上有所不同。  \n\n\n图卷积操作就是传统的卷积操作在拓扑图上的概念延伸和转移。\n<center>\n    <img src=\"Pixar-Lamp二：ST-GCN动作识别/01.jpg\" width=\"400\" >\n    <img src=\"Pixar-Lamp二：ST-GCN动作识别/02.jpg\" width=\"400\" >\n</center>\n\nGCN的本质就是提取图的结构特征，关键在于如何定义局部接受域(receptive field)，主要有两种方式：\n- Spatial approach 基于空域的图卷积  \n 如何定义局部感受域或者是邻居和节点的顺序 比如给节点的边指定方向\n- Spectral approach 基于谱域的图卷积  \n 通过图的拉普拉斯矩阵的特征值和特征向量对图结构进行处理。\n\n\n\n\n### 示例\n$$\nf(H^l, A)=D^{-1} \\hat{A} H^l W\n$$\n\n* GCN学习笔记：第一部分，手把手用Numpy实现GCN - weixin_42052081的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_42052081/article/details/89108966\n* 浅谈GCN - 宁静致远 - CSDN博客  \nhttps://blog.csdn.net/weiyudang11/article/details/92662420\n\n* NetworkX系列教程(1)-创建graph - ７秒记忆的战斗机 - 博客园  \nhttps://www.cnblogs.com/wushaogui/p/9199726.html\n\n\nNetworkX提供了4种常见网络的建模方法:\n- 规则图  \n  规则图差不多是最没有复杂性的一类图，random_graphs.random_regular_graph(d, n)方法可以生成一个含有n个节点，每个节点有d个邻居节点的规则图。\n ``` python\n # generate a regular graph which has 20 nodes & each node has 3 neghbour nodes.\n RG = nx.random_graphs.random_regular_graph(3, 20)\n ```\n- ER随机图  \n  ER随机图是早期研究得比较多的一类“复杂”网络，模型的基本思想是以概率p连接N个节点中的每一对节点。用random_graphs.erdos_renyi_graph(n,p)方法生成一个含有n个节点、以概率p连接的ER随机图。\n ``` python\n # generate a graph which has n=20 nodes, probablity p = 0.2.\n ER = nx.random_graphs.erdos_renyi_graph(20, 0.2)\n ```\n- WS小世界网络  \n  用random_graphs.watts_strogatz_graph(n, k, p)方法生成一个含有n个节点、每个节点有k个邻居、以概率p随机化重连边的WS小世界网络。\n ``` python\n # random reconnection probability was 0.3.\n WS = nx.random_graphs.watts_strogatz_graph(20, 4, 0.3)\n ```\n- BA无标度网络  \n  用random_graphs.barabasi_albert_graph(n, m)方法生成一个含有n个节点、每次加入m条边的BA无标度网络。\n ``` python \n # generalize BA network which has 20 nodes, m = 1\n BA = nx.random_graphs.barabasi_albert_graph(20, 1)\n ```\n\n生成有5个节点的小世界网络，A是图的邻接矩阵。\n\n\n\n```python\nimport networkx as nx\n\nn = 5\ncolors = list(range(n))\n\ng=nx.random_graphs.watts_strogatz_graph(5, 3, 0.3)\n# g = nx.random_graphs.barabasi_albert_graph(5, 2)\n\nnx.draw_kamada_kawai(g, with_labels=True, node_color=colors, alpha=0.7, node_size=600, font_size =18)\nA = nx.adjacency_matrix(g).todense()\nA\n```\n\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_10_1.png)\n\n\nX是节点的信息。  \n现实中每个node都有自己的特征，这里生成一个简单的$feature = [i, -i] $\n\n\n```python\nimport numpy as np\nX = np.matrix([\n            [i, -i]\n            for i in range(A.shape[0])\n        ], dtype=float)\nX\n```\n\n\n\n$AX$只是对邻接域节点进行求和。\n- 简单的sum对特征提取具有关于节点度的倾向性即节点度越大，聚合的信息就越大。\n- $A$中不存在self-loop，提取的信息不包含节点本身的信息。\n![mailbox](https://s3.us-east-2.amazonaws.com/dgl.ai/tutorial/1_first/mailbox.png)\n\n\n```python\nA*X\n```\n\n\n\n问题一：节点的聚合表征不包含它自己的特征，该表征是相邻节点的特征聚合，因此只有具有自环（self-loop）的节点才会在该聚合中包含自己的特征。\n\n增加自环可以解决这一个问题，通过在应用传播规则之前将邻接矩阵$A$与单位矩阵$I$相加来实现。\n\n\n\n```python\nA_hat = A + np.eye(A.shape[0])\nprint(\"A_hat:\\n\", A_hat)\nprint(\"A_hat * X:\\n\", A_hat * X)\n```\n\n\n问题二：度大的节点在其特征表征中将具有较大的值，度小的节点将具有较小的值，这可能会导致梯度消失或梯度爆炸。\n\n对特征表征进行归一化处理，通过将邻接矩阵 $A$ 与度矩阵 $D$ 的逆相乘，对其进行变换，从而通过节点的度对特征表征进行归一化。  \n定义$D=\\Sigma_{\\jmath} A_{i j}$为节点度的对角矩阵。\n\n\n```python\nD = np.array(np.sum(A, axis=0))[0]\nD = np.matrix(np.diag(D))\nprint(\"D:\")\nprint(D)\n\nD_hat = np.array(np.sum(A_hat, axis=0))[0]\nD_hat = np.matrix(np.diag(D_hat))\nprint(\"D_hat:\")\nprint(D_hat)\n```\n\n```python\nD**-1 * A\n```\n\n\n```python\nD**-1 * A * X\n```\n\n\n```python\nD_hat**-1 * A_hat * X\n```\n\n\n\n添加权重\n\n\n```python\nW = np.matrix([\n             [1, -1],\n             [-1, 1]\n         ])\nD_hat**-1 * A_hat * X * W\n```\n\n\n添加激活函数\n\n\n```python\ndef relu(x):\n    return (abs(x) + x) / 2\n```\n\n```python\nrelu(D_hat**-1 * A_hat * X * W)\n```\n\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n```python\nimport networkx as nx\nfrom networkx import to_numpy_matrix\n\ng = nx.karate_club_graph()\nA = to_numpy_matrix(g, nodelist = g.nodes())\n\nA_hat = A + np.eye(A.shape[0])\nD_hat = np.array(np.sum(A_hat, axis=0))[0]\nD_hat = np.matrix(np.diag(D_hat))\n\nI = np.eye(A.shape[0])\n\n```\n\n\n\n```python\ndef gcn_layer(A_hat, D_hat, X, W):\n#     return relu(D_hat**-1 * A_hat * X * W)\n    return (D_hat**-1 * A_hat * X * W)\n```\n\n\n```python\nW_1 = np.random.normal(\n    loc=0, scale=1, size=(g.number_of_nodes(), 4))\nW_2 = np.random.normal(\n    loc=0, size=(W_1.shape[1], 2))\n```\n\n\n```python\nH_1 = gcn_layer(A_hat, D_hat, I, W_1)\nH_2 = gcn_layer(A_hat, D_hat, H_1, W_2)\noutput = H_2\noutput\n```\n\n\n```python\nimport matplotlib.pyplot as plt\n\n\nfor i in range (34):\n    if g.nodes[i]['club'] == 'Mr. Hi':\n        plt.scatter(np.array(output)[i,0],np.array(output)[i,1] ,label=str(i),color = 'b',alpha=0.5,s = 250)\n        plt.text(np.array(output)[i,0],np.array(output)[i,1] ,i, horizontalalignment='center',verticalalignment='center', fontdict={'color':'black'})\n        # 为每个点添加标签，一些形如（x轴，y轴，标签）的元组，水平及垂直位置，背景颜色\n    else:\n        plt.scatter(np.array(output)[i,0],np.array(output)[i,1] ,label = 'i',color = 'r',alpha=0.5,s = 250)\n        plt.text(np.array(output)[i,0],np.array(output)[i,1] ,i, horizontalalignment='center',verticalalignment='center', fontdict={'color':'black'})\n        # plt.scatter(np.array(output)[:,0],np.array(output)[:,1],label = 0:33)\n\n```\n</div>\n</div>\n</body>\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_33_0.png)\n\n\n这样的特征表征可以很好地将 Zachary 空手道俱乐部的两个社区划分开来。至此，我们甚至都没有开始训练模型。\n\n\n\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        ``` python\n        from networkx import karate_club_graph,to_numpy_matrix\n        import numpy as np\n        import tensorflow as tf\n        import matplotlib.pyplot as plt\n\n        # step1: Data preparation\n        zkc = karate_club_graph()\n        order = sorted(list(zkc.nodes()))\n\n        NODE_SIZE = len(order)\n        #Adjacency matrix\n        A = to_numpy_matrix(zkc, nodelist=order)\n\n        #identity matrix\n        I = np.eye(zkc.number_of_nodes())\n\n        node_label = []\n        for i in range(34):\n            label = zkc.node[i]\n        #     node_label.append(np.random.randint(10)%4)\n            if label['club'] == 'Officer':\n                if np.random.randint(10)%2 == 0:\n                    node_label.append(1)       \n                else:\n                    node_label.append(3)\n            else:\n                if np.random.randint(10)%2 == 0:\n                    node_label.append(2)       \n                else:\n                    node_label.append(0)\n        \n\n\n        # step2:  Parameter Settings             \n        NODE_SIZE = 34\n        NODE_FEATURE_DIM = 34\n        HIDDEN_DIM1 = 10\n        num_classes = 4\n        training_epochs = 10000\n        step = 10\n        lr=0.1\n        \n        # step3: network define\n        X = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_FEATURE_DIM])\n        Y = tf.placeholder(tf.int32, shape=[NODE_SIZE])\n        label = tf.one_hot(Y, num_classes)\n\n        adj = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_SIZE])\n        weights = {\"hidden1\": tf.Variable(tf.random_normal(dtype=tf.float32, shape=[NODE_FEATURE_DIM, HIDDEN_DIM1]), name='w1'),\n                \"hidden2\": tf.Variable(tf.random_normal(dtype=tf.float32, shape=[HIDDEN_DIM1, num_classes]), name='w2')}\n        D_hat = tf.matrix_inverse(tf.matrix_diag(tf.reduce_sum(adj, axis=0)))\n\n        # GCN layer1\n        l1 = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), X), weights['hidden1'])\n        # GCN layer2\n        output = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), l1), weights['hidden2'])\n\n\n\n        # step4:define loss func and train\n        loss = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(labels=label, logits=output))\n        train_op = tf.train.AdamOptimizer(learning_rate=lr).minimize(loss)\n        init_op = tf.global_variables_initializer()\n        feed_dict = {adj: A, X: I, Y: node_label}\n\n\n        from mpl_toolkits.mplot3d import Axes3D  # 空间三维画图\n\n        plt.ion()\n        # 绘制散点图\n        fig = plt.figure()\n        ax = Axes3D(fig)\n\n\n        with tf.Session() as sess:\n            sess.run(init_op)\n\n            for epoch in range(training_epochs):\n                c, _ = sess.run([loss, train_op], feed_dict)\n                if epoch % 1000 == 0:\n                    print(f'Epoch:{epoch} Loss {c}')\n\n\n            represent = sess.run(output, feed_dict)\n            print(represent)\n            ax.scatter(represent[:, 0], represent[:, 1], represent[:, 2], s=200, c=node_label)\n            \n            # 添加坐标轴(顺序是Z, Y, X)\n            ax.set_zlabel('Z', fontdict={'size': 15, 'color': 'red'})\n            ax.set_ylabel('Y', fontdict={'size': 15, 'color': 'red'})\n            ax.set_xlabel('X', fontdict={'size': 15, 'color': 'red'})\n            plt.show()\n            \n            plt.scatter(represent[:, 0], represent[:, 1], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()\n            \n            plt.scatter(represent[:, 1], represent[:, 2], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()  \n\n            plt.scatter(represent[:, 0], represent[:, 2], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()\n            \n            plt.scatter(represent[:, 0], represent[:, 3], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()\n            \n            plt.scatter(represent[:, 1], represent[:, 3], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()  \n\n            plt.scatter(represent[:, 2], represent[:, 3], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()   \n        ```\n</div>\n</div>\n</body>\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_12_1.png)\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_12_2.png)\n\n\n```python\nax.scatter(represent[:, 0], represent[:, 1], represent[:, 2], s=200, c=node_label)\n    \n# 添加坐标轴(顺序是Z, Y, X)\nax.set_zlabel('Z', fontdict={'size': 15, 'color': 'red'})\nax.set_ylabel('Y', fontdict={'size': 15, 'color': 'red'})\nax.set_xlabel('X', fontdict={'size': 15, 'color': 'red'})\n\n\nplt.subplot(4, 1, 1)\nplt.scatter(represent[:, 0], [0]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.subplot(4, 1, 2)\nplt.scatter(represent[:, 1], [1]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.subplot(4, 1, 3)\nplt.scatter(represent[:, 2], [1]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.subplot(4, 1, 4)\nplt.scatter(represent[:, 3], [1]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.show()\n```\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_13_0.png)\n\n\n","source":"_posts/Pixar-Lamp二：ST-GCN动作识别.md","raw":"---\ntitle: Pixar-Lamp二：ST-GCN动作识别\ndate: 2019-07-17 00:16:39\ntags:\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n做个跳跳灯！\n\n* 解读：基于动态骨骼的动作识别方法ST-GCN（时空图卷积网络模型） - 浪浪的博客 - CSDN博客  \nhttps://blog.csdn.net/qq_36893052/article/details/79860328\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n<html>\n<head>\n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n\n### Ubuntu16.04下环境配置\n\n安装图神经网络库DGL\n* Overview of DGL — DGL 0.3 documentation  \nhttps://docs.dgl.ai/index.html\n``` bash\npip install dgl\n```\n\n* http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl \n\n安装pytorch，直接下载.whl文件，在本地进行安装\n``` bash\npip install torch-0.3.1-cp35-cp35m-linux_x86_64.whl\npip install torchvision\n\ncd Workplace/\njupyter notebook --ip=0.0.0.0 --no-browser --allow-root\n```\n\n\n\n\n## GCN\n\n\nGCN 是一种可直接作用于图并利用其结构信息的神经网络。\n\n给定图 $G = (V, E)$ ，GCN 的输入为：\n\n- 1. 一个输入维度为 $N × F^0$ 的特征矩阵 $X$，其中 $N$ 是图网络中的节点数而 $F^0$ 是每个节点的输入特征数。\n- 2. 一个图结构的维度为 $N × N$ 的矩阵表征，例如图 $G$ 的邻接矩阵 $A$ 。 \n\n因此，GCN 中的隐藏层可以写作 $$H = f(H^{-1}, A))$$\n其中，$H⁰ = X$ ，$f$ 是一种传播规则。  \n每一个隐藏层 $H$ⁱ 都对应一个维度为 $N×Fⁱ$ 的特征矩阵，该矩阵中的每一行都是某个节点的特征表征。  \n在每一层中，GCN 会使用传播规则 $f$ 将这些信息聚合起来，从而形成下一层的特征。这样一来，在每个连续的层中特征就会变得越来越抽象。  \n在该框架下，GCN 的各种变体只不过是在传播规则 $f$ 的选择上有所不同。  \n\n\n图卷积操作就是传统的卷积操作在拓扑图上的概念延伸和转移。\n<center>\n    <img src=\"Pixar-Lamp二：ST-GCN动作识别/01.jpg\" width=\"400\" >\n    <img src=\"Pixar-Lamp二：ST-GCN动作识别/02.jpg\" width=\"400\" >\n</center>\n\nGCN的本质就是提取图的结构特征，关键在于如何定义局部接受域(receptive field)，主要有两种方式：\n- Spatial approach 基于空域的图卷积  \n 如何定义局部感受域或者是邻居和节点的顺序 比如给节点的边指定方向\n- Spectral approach 基于谱域的图卷积  \n 通过图的拉普拉斯矩阵的特征值和特征向量对图结构进行处理。\n\n\n\n\n### 示例\n$$\nf(H^l, A)=D^{-1} \\hat{A} H^l W\n$$\n\n* GCN学习笔记：第一部分，手把手用Numpy实现GCN - weixin_42052081的博客 - CSDN博客  \nhttps://blog.csdn.net/weixin_42052081/article/details/89108966\n* 浅谈GCN - 宁静致远 - CSDN博客  \nhttps://blog.csdn.net/weiyudang11/article/details/92662420\n\n* NetworkX系列教程(1)-创建graph - ７秒记忆的战斗机 - 博客园  \nhttps://www.cnblogs.com/wushaogui/p/9199726.html\n\n\nNetworkX提供了4种常见网络的建模方法:\n- 规则图  \n  规则图差不多是最没有复杂性的一类图，random_graphs.random_regular_graph(d, n)方法可以生成一个含有n个节点，每个节点有d个邻居节点的规则图。\n ``` python\n # generate a regular graph which has 20 nodes & each node has 3 neghbour nodes.\n RG = nx.random_graphs.random_regular_graph(3, 20)\n ```\n- ER随机图  \n  ER随机图是早期研究得比较多的一类“复杂”网络，模型的基本思想是以概率p连接N个节点中的每一对节点。用random_graphs.erdos_renyi_graph(n,p)方法生成一个含有n个节点、以概率p连接的ER随机图。\n ``` python\n # generate a graph which has n=20 nodes, probablity p = 0.2.\n ER = nx.random_graphs.erdos_renyi_graph(20, 0.2)\n ```\n- WS小世界网络  \n  用random_graphs.watts_strogatz_graph(n, k, p)方法生成一个含有n个节点、每个节点有k个邻居、以概率p随机化重连边的WS小世界网络。\n ``` python\n # random reconnection probability was 0.3.\n WS = nx.random_graphs.watts_strogatz_graph(20, 4, 0.3)\n ```\n- BA无标度网络  \n  用random_graphs.barabasi_albert_graph(n, m)方法生成一个含有n个节点、每次加入m条边的BA无标度网络。\n ``` python \n # generalize BA network which has 20 nodes, m = 1\n BA = nx.random_graphs.barabasi_albert_graph(20, 1)\n ```\n\n生成有5个节点的小世界网络，A是图的邻接矩阵。\n\n\n\n```python\nimport networkx as nx\n\nn = 5\ncolors = list(range(n))\n\ng=nx.random_graphs.watts_strogatz_graph(5, 3, 0.3)\n# g = nx.random_graphs.barabasi_albert_graph(5, 2)\n\nnx.draw_kamada_kawai(g, with_labels=True, node_color=colors, alpha=0.7, node_size=600, font_size =18)\nA = nx.adjacency_matrix(g).todense()\nA\n```\n\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_10_1.png)\n\n\nX是节点的信息。  \n现实中每个node都有自己的特征，这里生成一个简单的$feature = [i, -i] $\n\n\n```python\nimport numpy as np\nX = np.matrix([\n            [i, -i]\n            for i in range(A.shape[0])\n        ], dtype=float)\nX\n```\n\n\n\n$AX$只是对邻接域节点进行求和。\n- 简单的sum对特征提取具有关于节点度的倾向性即节点度越大，聚合的信息就越大。\n- $A$中不存在self-loop，提取的信息不包含节点本身的信息。\n![mailbox](https://s3.us-east-2.amazonaws.com/dgl.ai/tutorial/1_first/mailbox.png)\n\n\n```python\nA*X\n```\n\n\n\n问题一：节点的聚合表征不包含它自己的特征，该表征是相邻节点的特征聚合，因此只有具有自环（self-loop）的节点才会在该聚合中包含自己的特征。\n\n增加自环可以解决这一个问题，通过在应用传播规则之前将邻接矩阵$A$与单位矩阵$I$相加来实现。\n\n\n\n```python\nA_hat = A + np.eye(A.shape[0])\nprint(\"A_hat:\\n\", A_hat)\nprint(\"A_hat * X:\\n\", A_hat * X)\n```\n\n\n问题二：度大的节点在其特征表征中将具有较大的值，度小的节点将具有较小的值，这可能会导致梯度消失或梯度爆炸。\n\n对特征表征进行归一化处理，通过将邻接矩阵 $A$ 与度矩阵 $D$ 的逆相乘，对其进行变换，从而通过节点的度对特征表征进行归一化。  \n定义$D=\\Sigma_{\\jmath} A_{i j}$为节点度的对角矩阵。\n\n\n```python\nD = np.array(np.sum(A, axis=0))[0]\nD = np.matrix(np.diag(D))\nprint(\"D:\")\nprint(D)\n\nD_hat = np.array(np.sum(A_hat, axis=0))[0]\nD_hat = np.matrix(np.diag(D_hat))\nprint(\"D_hat:\")\nprint(D_hat)\n```\n\n```python\nD**-1 * A\n```\n\n\n```python\nD**-1 * A * X\n```\n\n\n```python\nD_hat**-1 * A_hat * X\n```\n\n\n\n添加权重\n\n\n```python\nW = np.matrix([\n             [1, -1],\n             [-1, 1]\n         ])\nD_hat**-1 * A_hat * X * W\n```\n\n\n添加激活函数\n\n\n```python\ndef relu(x):\n    return (abs(x) + x) / 2\n```\n\n```python\nrelu(D_hat**-1 * A_hat * X * W)\n```\n\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n```python\nimport networkx as nx\nfrom networkx import to_numpy_matrix\n\ng = nx.karate_club_graph()\nA = to_numpy_matrix(g, nodelist = g.nodes())\n\nA_hat = A + np.eye(A.shape[0])\nD_hat = np.array(np.sum(A_hat, axis=0))[0]\nD_hat = np.matrix(np.diag(D_hat))\n\nI = np.eye(A.shape[0])\n\n```\n\n\n\n```python\ndef gcn_layer(A_hat, D_hat, X, W):\n#     return relu(D_hat**-1 * A_hat * X * W)\n    return (D_hat**-1 * A_hat * X * W)\n```\n\n\n```python\nW_1 = np.random.normal(\n    loc=0, scale=1, size=(g.number_of_nodes(), 4))\nW_2 = np.random.normal(\n    loc=0, size=(W_1.shape[1], 2))\n```\n\n\n```python\nH_1 = gcn_layer(A_hat, D_hat, I, W_1)\nH_2 = gcn_layer(A_hat, D_hat, H_1, W_2)\noutput = H_2\noutput\n```\n\n\n```python\nimport matplotlib.pyplot as plt\n\n\nfor i in range (34):\n    if g.nodes[i]['club'] == 'Mr. Hi':\n        plt.scatter(np.array(output)[i,0],np.array(output)[i,1] ,label=str(i),color = 'b',alpha=0.5,s = 250)\n        plt.text(np.array(output)[i,0],np.array(output)[i,1] ,i, horizontalalignment='center',verticalalignment='center', fontdict={'color':'black'})\n        # 为每个点添加标签，一些形如（x轴，y轴，标签）的元组，水平及垂直位置，背景颜色\n    else:\n        plt.scatter(np.array(output)[i,0],np.array(output)[i,1] ,label = 'i',color = 'r',alpha=0.5,s = 250)\n        plt.text(np.array(output)[i,0],np.array(output)[i,1] ,i, horizontalalignment='center',verticalalignment='center', fontdict={'color':'black'})\n        # plt.scatter(np.array(output)[:,0],np.array(output)[:,1],label = 0:33)\n\n```\n</div>\n</div>\n</body>\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_33_0.png)\n\n\n这样的特征表征可以很好地将 Zachary 空手道俱乐部的两个社区划分开来。至此，我们甚至都没有开始训练模型。\n\n\n\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        ``` python\n        from networkx import karate_club_graph,to_numpy_matrix\n        import numpy as np\n        import tensorflow as tf\n        import matplotlib.pyplot as plt\n\n        # step1: Data preparation\n        zkc = karate_club_graph()\n        order = sorted(list(zkc.nodes()))\n\n        NODE_SIZE = len(order)\n        #Adjacency matrix\n        A = to_numpy_matrix(zkc, nodelist=order)\n\n        #identity matrix\n        I = np.eye(zkc.number_of_nodes())\n\n        node_label = []\n        for i in range(34):\n            label = zkc.node[i]\n        #     node_label.append(np.random.randint(10)%4)\n            if label['club'] == 'Officer':\n                if np.random.randint(10)%2 == 0:\n                    node_label.append(1)       \n                else:\n                    node_label.append(3)\n            else:\n                if np.random.randint(10)%2 == 0:\n                    node_label.append(2)       \n                else:\n                    node_label.append(0)\n        \n\n\n        # step2:  Parameter Settings             \n        NODE_SIZE = 34\n        NODE_FEATURE_DIM = 34\n        HIDDEN_DIM1 = 10\n        num_classes = 4\n        training_epochs = 10000\n        step = 10\n        lr=0.1\n        \n        # step3: network define\n        X = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_FEATURE_DIM])\n        Y = tf.placeholder(tf.int32, shape=[NODE_SIZE])\n        label = tf.one_hot(Y, num_classes)\n\n        adj = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_SIZE])\n        weights = {\"hidden1\": tf.Variable(tf.random_normal(dtype=tf.float32, shape=[NODE_FEATURE_DIM, HIDDEN_DIM1]), name='w1'),\n                \"hidden2\": tf.Variable(tf.random_normal(dtype=tf.float32, shape=[HIDDEN_DIM1, num_classes]), name='w2')}\n        D_hat = tf.matrix_inverse(tf.matrix_diag(tf.reduce_sum(adj, axis=0)))\n\n        # GCN layer1\n        l1 = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), X), weights['hidden1'])\n        # GCN layer2\n        output = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), l1), weights['hidden2'])\n\n\n\n        # step4:define loss func and train\n        loss = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(labels=label, logits=output))\n        train_op = tf.train.AdamOptimizer(learning_rate=lr).minimize(loss)\n        init_op = tf.global_variables_initializer()\n        feed_dict = {adj: A, X: I, Y: node_label}\n\n\n        from mpl_toolkits.mplot3d import Axes3D  # 空间三维画图\n\n        plt.ion()\n        # 绘制散点图\n        fig = plt.figure()\n        ax = Axes3D(fig)\n\n\n        with tf.Session() as sess:\n            sess.run(init_op)\n\n            for epoch in range(training_epochs):\n                c, _ = sess.run([loss, train_op], feed_dict)\n                if epoch % 1000 == 0:\n                    print(f'Epoch:{epoch} Loss {c}')\n\n\n            represent = sess.run(output, feed_dict)\n            print(represent)\n            ax.scatter(represent[:, 0], represent[:, 1], represent[:, 2], s=200, c=node_label)\n            \n            # 添加坐标轴(顺序是Z, Y, X)\n            ax.set_zlabel('Z', fontdict={'size': 15, 'color': 'red'})\n            ax.set_ylabel('Y', fontdict={'size': 15, 'color': 'red'})\n            ax.set_xlabel('X', fontdict={'size': 15, 'color': 'red'})\n            plt.show()\n            \n            plt.scatter(represent[:, 0], represent[:, 1], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()\n            \n            plt.scatter(represent[:, 1], represent[:, 2], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()  \n\n            plt.scatter(represent[:, 0], represent[:, 2], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()\n            \n            plt.scatter(represent[:, 0], represent[:, 3], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()\n            \n            plt.scatter(represent[:, 1], represent[:, 3], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()  \n\n            plt.scatter(represent[:, 2], represent[:, 3], s=200, c=node_label)\n            plt.pause(0.1)\n            plt.cla()   \n        ```\n</div>\n</div>\n</body>\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_12_1.png)\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_12_2.png)\n\n\n```python\nax.scatter(represent[:, 0], represent[:, 1], represent[:, 2], s=200, c=node_label)\n    \n# 添加坐标轴(顺序是Z, Y, X)\nax.set_zlabel('Z', fontdict={'size': 15, 'color': 'red'})\nax.set_ylabel('Y', fontdict={'size': 15, 'color': 'red'})\nax.set_xlabel('X', fontdict={'size': 15, 'color': 'red'})\n\n\nplt.subplot(4, 1, 1)\nplt.scatter(represent[:, 0], [0]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.subplot(4, 1, 2)\nplt.scatter(represent[:, 1], [1]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.subplot(4, 1, 3)\nplt.scatter(represent[:, 2], [1]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.subplot(4, 1, 4)\nplt.scatter(represent[:, 3], [1]*34, s=200, c=node_label)\nplt.axvline(x=0, c='r')\n\nplt.show()\n```\n\n\n![png](Pixar-Lamp二：ST-GCN动作识别/output_13_0.png)\n\n\n","slug":"Pixar-Lamp二：ST-GCN动作识别","published":1,"updated":"2020-01-05T19:13:24.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50at005t4cvjbifsqobd","content":"<p><strong> Pixar-Lamp二：ST-GCN动作识别 </strong> <excerpt in index | 首页摘要><br>做个跳跳灯！</excerpt></p>\n<ul>\n<li>解读：基于动态骨骼的动作识别方法ST-GCN（时空图卷积网络模型） - 浪浪的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36893052/article/details/79860328\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36893052/article/details/79860328</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n\n<h3 id=\"Ubuntu16-04下环境配置\"><a href=\"#Ubuntu16-04下环境配置\" class=\"headerlink\" title=\"Ubuntu16.04下环境配置\"></a>Ubuntu16.04下环境配置</h3><p>安装图神经网络库DGL</p>\n<ul>\n<li><p>Overview of DGL — DGL 0.3 documentation<br><a href=\"https://docs.dgl.ai/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.dgl.ai/index.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install dgl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl\" target=\"_blank\" rel=\"noopener\">http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl</a> </p>\n</li>\n</ul>\n<p>安装pytorch，直接下载.whl文件，在本地进行安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install torch-0.3.1-cp35-cp35m-linux_x86_64.whl</span><br><span class=\"line\">pip install torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> Workplace/</span><br><span class=\"line\">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"GCN\"><a href=\"#GCN\" class=\"headerlink\" title=\"GCN\"></a>GCN</h2><p>GCN 是一种可直接作用于图并利用其结构信息的神经网络。</p>\n<p>给定图 $G = (V, E)$ ，GCN 的输入为：</p>\n<ul>\n<li><ol>\n<li>一个输入维度为 $N × F^0$ 的特征矩阵 $X$，其中 $N$ 是图网络中的节点数而 $F^0$ 是每个节点的输入特征数。</li>\n</ol>\n</li>\n<li><ol>\n<li>一个图结构的维度为 $N × N$ 的矩阵表征，例如图 $G$ 的邻接矩阵 $A$ 。 </li>\n</ol>\n</li>\n</ul>\n<p>因此，GCN 中的隐藏层可以写作 <script type=\"math/tex\">H = f(H^{-1}, A))</script><br>其中，$H⁰ = X$ ，$f$ 是一种传播规则。<br>每一个隐藏层 $H$ⁱ 都对应一个维度为 $N×Fⁱ$ 的特征矩阵，该矩阵中的每一行都是某个节点的特征表征。<br>在每一层中，GCN 会使用传播规则 $f$ 将这些信息聚合起来，从而形成下一层的特征。这样一来，在每个连续的层中特征就会变得越来越抽象。<br>在该框架下，GCN 的各种变体只不过是在传播规则 $f$ 的选择上有所不同。  </p>\n<p>图卷积操作就是传统的卷积操作在拓扑图上的概念延伸和转移。</p>\n<center>\n    <img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/01.jpg\" width=\"400\">\n    <img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/02.jpg\" width=\"400\">\n</center>\n\n<p>GCN的本质就是提取图的结构特征，关键在于如何定义局部接受域(receptive field)，主要有两种方式：</p>\n<ul>\n<li>Spatial approach 基于空域的图卷积<br>如何定义局部感受域或者是邻居和节点的顺序 比如给节点的边指定方向</li>\n<li>Spectral approach 基于谱域的图卷积<br>通过图的拉普拉斯矩阵的特征值和特征向量对图结构进行处理。</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><script type=\"math/tex; mode=display\">\nf(H^l, A)=D^{-1} \\hat{A} H^l W</script><ul>\n<li>GCN学习笔记：第一部分，手把手用Numpy实现GCN - weixin_42052081的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_42052081/article/details/89108966\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_42052081/article/details/89108966</a></li>\n<li><p>浅谈GCN - 宁静致远 - CSDN博客<br><a href=\"https://blog.csdn.net/weiyudang11/article/details/92662420\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weiyudang11/article/details/92662420</a></p>\n</li>\n<li><p>NetworkX系列教程(1)-创建graph - ７秒记忆的战斗机 - 博客园<br><a href=\"https://www.cnblogs.com/wushaogui/p/9199726.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wushaogui/p/9199726.html</a></p>\n</li>\n</ul>\n<p>NetworkX提供了4种常见网络的建模方法:</p>\n<ul>\n<li><p>规则图<br>规则图差不多是最没有复杂性的一类图，random_graphs.random_regular_graph(d, n)方法可以生成一个含有n个节点，每个节点有d个邻居节点的规则图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># generate a regular graph which has 20 nodes &amp; each node has 3 neghbour nodes.</span></span><br><span class=\"line\">RG = nx.random_graphs.random_regular_graph(<span class=\"number\">3</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ER随机图<br>ER随机图是早期研究得比较多的一类“复杂”网络，模型的基本思想是以概率p连接N个节点中的每一对节点。用random_graphs.erdos_renyi_graph(n,p)方法生成一个含有n个节点、以概率p连接的ER随机图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># generate a graph which has n=20 nodes, probablity p = 0.2.</span></span><br><span class=\"line\">ER = nx.random_graphs.erdos_renyi_graph(<span class=\"number\">20</span>, <span class=\"number\">0.2</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>WS小世界网络<br>用random_graphs.watts_strogatz_graph(n, k, p)方法生成一个含有n个节点、每个节点有k个邻居、以概率p随机化重连边的WS小世界网络。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># random reconnection probability was 0.3.</span></span><br><span class=\"line\">WS = nx.random_graphs.watts_strogatz_graph(<span class=\"number\">20</span>, <span class=\"number\">4</span>, <span class=\"number\">0.3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>BA无标度网络<br>用random_graphs.barabasi_albert_graph(n, m)方法生成一个含有n个节点、每次加入m条边的BA无标度网络。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># generalize BA network which has 20 nodes, m = 1</span></span><br><span class=\"line\">BA = nx.random_graphs.barabasi_albert_graph(<span class=\"number\">20</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>生成有5个节点的小世界网络，A是图的邻接矩阵。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\">colors = list(range(n))</span><br><span class=\"line\"></span><br><span class=\"line\">g=nx.random_graphs.watts_strogatz_graph(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">0.3</span>)</span><br><span class=\"line\"><span class=\"comment\"># g = nx.random_graphs.barabasi_albert_graph(5, 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">nx.draw_kamada_kawai(g, with_labels=<span class=\"literal\">True</span>, node_color=colors, alpha=<span class=\"number\">0.7</span>, node_size=<span class=\"number\">600</span>, font_size =<span class=\"number\">18</span>)</span><br><span class=\"line\">A = nx.adjacency_matrix(g).todense()</span><br><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_10_1.png\" alt=\"png\"></p>\n<p>X是节点的信息。<br>现实中每个node都有自己的特征，这里生成一个简单的$feature = [i, -i] $</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">X = np.matrix([</span><br><span class=\"line\">            [i, -i]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">        ], dtype=float)</span><br><span class=\"line\">X</span><br></pre></td></tr></table></figure>\n<p>$AX$只是对邻接域节点进行求和。</p>\n<ul>\n<li>简单的sum对特征提取具有关于节点度的倾向性即节点度越大，聚合的信息就越大。</li>\n<li>$A$中不存在self-loop，提取的信息不包含节点本身的信息。<br><img src=\"https://s3.us-east-2.amazonaws.com/dgl.ai/tutorial/1_first/mailbox.png\" alt=\"mailbox\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A*X</span><br></pre></td></tr></table></figure>\n<p>问题一：节点的聚合表征不包含它自己的特征，该表征是相邻节点的特征聚合，因此只有具有自环（self-loop）的节点才会在该聚合中包含自己的特征。</p>\n<p>增加自环可以解决这一个问题，通过在应用传播规则之前将邻接矩阵$A$与单位矩阵$I$相加来实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A_hat = A + np.eye(A.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(<span class=\"string\">\"A_hat:\\n\"</span>, A_hat)</span><br><span class=\"line\">print(<span class=\"string\">\"A_hat * X:\\n\"</span>, A_hat * X)</span><br></pre></td></tr></table></figure>\n<p>问题二：度大的节点在其特征表征中将具有较大的值，度小的节点将具有较小的值，这可能会导致梯度消失或梯度爆炸。</p>\n<p>对特征表征进行归一化处理，通过将邻接矩阵 $A$ 与度矩阵 $D$ 的逆相乘，对其进行变换，从而通过节点的度对特征表征进行归一化。<br>定义$D=\\Sigma_{\\jmath} A_{i j}$为节点度的对角矩阵。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D = np.array(np.sum(A, axis=<span class=\"number\">0</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">D = np.matrix(np.diag(D))</span><br><span class=\"line\">print(<span class=\"string\">\"D:\"</span>)</span><br><span class=\"line\">print(D)</span><br><span class=\"line\"></span><br><span class=\"line\">D_hat = np.array(np.sum(A_hat, axis=<span class=\"number\">0</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">D_hat = np.matrix(np.diag(D_hat))</span><br><span class=\"line\">print(<span class=\"string\">\"D_hat:\"</span>)</span><br><span class=\"line\">print(D_hat)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D**<span class=\"number\">-1</span> * A</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D**<span class=\"number\">-1</span> * A * X</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D_hat**<span class=\"number\">-1</span> * A_hat * X</span><br></pre></td></tr></table></figure>\n<p>添加权重</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W = np.matrix([</span><br><span class=\"line\">             [<span class=\"number\">1</span>, <span class=\"number\">-1</span>],</span><br><span class=\"line\">             [<span class=\"number\">-1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">         ])</span><br><span class=\"line\">D_hat**<span class=\"number\">-1</span> * A_hat * X * W</span><br></pre></td></tr></table></figure>\n<p>添加激活函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (abs(x) + x) / <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">relu(D_hat**<span class=\"number\">-1</span> * A_hat * X * W)</span><br></pre></td></tr></table></figure>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">from</span> networkx <span class=\"keyword\">import</span> to_numpy_matrix</span><br><span class=\"line\"></span><br><span class=\"line\">g = nx.karate_club_graph()</span><br><span class=\"line\">A = to_numpy_matrix(g, nodelist = g.nodes())</span><br><span class=\"line\"></span><br><span class=\"line\">A_hat = A + np.eye(A.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">D_hat = np.array(np.sum(A_hat, axis=<span class=\"number\">0</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">D_hat = np.matrix(np.diag(D_hat))</span><br><span class=\"line\"></span><br><span class=\"line\">I = np.eye(A.shape[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcn_layer</span><span class=\"params\">(A_hat, D_hat, X, W)</span>:</span></span><br><span class=\"line\"><span class=\"comment\">#     return relu(D_hat**-1 * A_hat * X * W)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (D_hat**<span class=\"number\">-1</span> * A_hat * X * W)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W_1 = np.random.normal(</span><br><span class=\"line\">    loc=<span class=\"number\">0</span>, scale=<span class=\"number\">1</span>, size=(g.number_of_nodes(), <span class=\"number\">4</span>))</span><br><span class=\"line\">W_2 = np.random.normal(</span><br><span class=\"line\">    loc=<span class=\"number\">0</span>, size=(W_1.shape[<span class=\"number\">1</span>], <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H_1 = gcn_layer(A_hat, D_hat, I, W_1)</span><br><span class=\"line\">H_2 = gcn_layer(A_hat, D_hat, H_1, W_2)</span><br><span class=\"line\">output = H_2</span><br><span class=\"line\">output</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range (<span class=\"number\">34</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> g.nodes[i][<span class=\"string\">'club'</span>] == <span class=\"string\">'Mr. Hi'</span>:</span><br><span class=\"line\">        plt.scatter(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,label=str(i),color = <span class=\"string\">'b'</span>,alpha=<span class=\"number\">0.5</span>,s = <span class=\"number\">250</span>)</span><br><span class=\"line\">        plt.text(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,i, horizontalalignment=<span class=\"string\">'center'</span>,verticalalignment=<span class=\"string\">'center'</span>, fontdict=&#123;<span class=\"string\">'color'</span>:<span class=\"string\">'black'</span>&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># 为每个点添加标签，一些形如（x轴，y轴，标签）的元组，水平及垂直位置，背景颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        plt.scatter(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,label = <span class=\"string\">'i'</span>,color = <span class=\"string\">'r'</span>,alpha=<span class=\"number\">0.5</span>,s = <span class=\"number\">250</span>)</span><br><span class=\"line\">        plt.text(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,i, horizontalalignment=<span class=\"string\">'center'</span>,verticalalignment=<span class=\"string\">'center'</span>, fontdict=&#123;<span class=\"string\">'color'</span>:<span class=\"string\">'black'</span>&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># plt.scatter(np.array(output)[:,0],np.array(output)[:,1],label = 0:33)</span></span><br></pre></td></tr></table></figure>\n\n</div>\n</div>\n</body>\n\n\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_33_0.png\" alt=\"png\"></p>\n<p>这样的特征表征可以很好地将 Zachary 空手道俱乐部的两个社区划分开来。至此，我们甚至都没有开始训练模型。</p>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> networkx <span class=\"keyword\">import</span> karate_club_graph,to_numpy_matrix</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step1: Data preparation</span></span><br><span class=\"line\">zkc = karate_club_graph()</span><br><span class=\"line\">order = sorted(list(zkc.nodes()))</span><br><span class=\"line\"></span><br><span class=\"line\">NODE_SIZE = len(order)</span><br><span class=\"line\"><span class=\"comment\">#Adjacency matrix</span></span><br><span class=\"line\">A = to_numpy_matrix(zkc, nodelist=order)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#identity matrix</span></span><br><span class=\"line\">I = np.eye(zkc.number_of_nodes())</span><br><span class=\"line\"></span><br><span class=\"line\">node_label = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">34</span>):</span><br><span class=\"line\">    label = zkc.node[i]</span><br><span class=\"line\"><span class=\"comment\">#     node_label.append(np.random.randint(10)%4)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> label[<span class=\"string\">'club'</span>] == <span class=\"string\">'Officer'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.random.randint(<span class=\"number\">10</span>)%<span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">1</span>)       </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.random.randint(<span class=\"number\">10</span>)%<span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">2</span>)       </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step2:  Parameter Settings             </span></span><br><span class=\"line\">NODE_SIZE = <span class=\"number\">34</span></span><br><span class=\"line\">NODE_FEATURE_DIM = <span class=\"number\">34</span></span><br><span class=\"line\">HIDDEN_DIM1 = <span class=\"number\">10</span></span><br><span class=\"line\">num_classes = <span class=\"number\">4</span></span><br><span class=\"line\">training_epochs = <span class=\"number\">10000</span></span><br><span class=\"line\">step = <span class=\"number\">10</span></span><br><span class=\"line\">lr=<span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step3: network define</span></span><br><span class=\"line\">X = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_FEATURE_DIM])</span><br><span class=\"line\">Y = tf.placeholder(tf.int32, shape=[NODE_SIZE])</span><br><span class=\"line\">label = tf.one_hot(Y, num_classes)</span><br><span class=\"line\"></span><br><span class=\"line\">adj = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_SIZE])</span><br><span class=\"line\">weights = &#123;<span class=\"string\">\"hidden1\"</span>: tf.Variable(tf.random_normal(dtype=tf.float32, shape=[NODE_FEATURE_DIM, HIDDEN_DIM1]), name=<span class=\"string\">'w1'</span>),</span><br><span class=\"line\">        <span class=\"string\">\"hidden2\"</span>: tf.Variable(tf.random_normal(dtype=tf.float32, shape=[HIDDEN_DIM1, num_classes]), name=<span class=\"string\">'w2'</span>)&#125;</span><br><span class=\"line\">D_hat = tf.matrix_inverse(tf.matrix_diag(tf.reduce_sum(adj, axis=<span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GCN layer1</span></span><br><span class=\"line\">l1 = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), X), weights[<span class=\"string\">'hidden1'</span>])</span><br><span class=\"line\"><span class=\"comment\"># GCN layer2</span></span><br><span class=\"line\">output = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), l1), weights[<span class=\"string\">'hidden2'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step4:define loss func and train</span></span><br><span class=\"line\">loss = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(labels=label, logits=output))</span><br><span class=\"line\">train_op = tf.train.AdamOptimizer(learning_rate=lr).minimize(loss)</span><br><span class=\"line\">init_op = tf.global_variables_initializer()</span><br><span class=\"line\">feed_dict = &#123;adj: A, X: I, Y: node_label&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D  <span class=\"comment\"># 空间三维画图</span></span><br><span class=\"line\"></span><br><span class=\"line\">plt.ion()</span><br><span class=\"line\"><span class=\"comment\"># 绘制散点图</span></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">ax = Axes3D(fig)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> range(training_epochs):</span><br><span class=\"line\">        c, _ = sess.run([loss, train_op], feed_dict)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> epoch % <span class=\"number\">1000</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            print(<span class=\"string\">f'Epoch:<span class=\"subst\">&#123;epoch&#125;</span> Loss <span class=\"subst\">&#123;c&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    represent = sess.run(output, feed_dict)</span><br><span class=\"line\">    print(represent)</span><br><span class=\"line\">    ax.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 添加坐标轴(顺序是Z, Y, X)</span></span><br><span class=\"line\">    ax.set_zlabel(<span class=\"string\">'Z'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">    ax.set_ylabel(<span class=\"string\">'Y'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">    ax.set_xlabel(<span class=\"string\">'X'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">1</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()  </span><br><span class=\"line\"></span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">3</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">3</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()  </span><br><span class=\"line\"></span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">2</span>], represent[:, <span class=\"number\">3</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br></pre></td></tr></table></figure>\n\n</div>\n</div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n\n\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_12_1.png\" alt=\"png\"></p>\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_12_2.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 添加坐标轴(顺序是Z, Y, X)</span></span><br><span class=\"line\">ax.set_zlabel(<span class=\"string\">'Z'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">'Y'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">'X'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">0</span>], [<span class=\"number\">0</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">1</span>], [<span class=\"number\">1</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">2</span>], [<span class=\"number\">1</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">3</span>], [<span class=\"number\">1</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_13_0.png\" alt=\"png\"></p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> Pixar-Lamp二：ST-GCN动作识别 </strong> <excerpt in index | 首页摘要><br>做个跳跳灯！</excerpt></p>\n<ul>\n<li>解读：基于动态骨骼的动作识别方法ST-GCN（时空图卷积网络模型） - 浪浪的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_36893052/article/details/79860328\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36893052/article/details/79860328</a></li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n<script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\n</script>\n<script>\n$(document).ready(function(){\n    $(document).on('click', '.fold_hider', function(){\n        $('>.fold', this.parentNode).slideToggle();\n        $('>:first', this).toggleClass('open');\n    });\n    $(\"div.fold\").css(\"display\",\"none\");\n});\n</script>\n</head>\n</html>\n\n\n<h3 id=\"Ubuntu16-04下环境配置\"><a href=\"#Ubuntu16-04下环境配置\" class=\"headerlink\" title=\"Ubuntu16.04下环境配置\"></a>Ubuntu16.04下环境配置</h3><p>安装图神经网络库DGL</p>\n<ul>\n<li><p>Overview of DGL — DGL 0.3 documentation<br><a href=\"https://docs.dgl.ai/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.dgl.ai/index.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install dgl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl\" target=\"_blank\" rel=\"noopener\">http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl</a> </p>\n</li>\n</ul>\n<p>安装pytorch，直接下载.whl文件，在本地进行安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install torch-0.3.1-cp35-cp35m-linux_x86_64.whl</span><br><span class=\"line\">pip install torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> Workplace/</span><br><span class=\"line\">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"GCN\"><a href=\"#GCN\" class=\"headerlink\" title=\"GCN\"></a>GCN</h2><p>GCN 是一种可直接作用于图并利用其结构信息的神经网络。</p>\n<p>给定图 $G = (V, E)$ ，GCN 的输入为：</p>\n<ul>\n<li><ol>\n<li>一个输入维度为 $N × F^0$ 的特征矩阵 $X$，其中 $N$ 是图网络中的节点数而 $F^0$ 是每个节点的输入特征数。</li>\n</ol>\n</li>\n<li><ol>\n<li>一个图结构的维度为 $N × N$ 的矩阵表征，例如图 $G$ 的邻接矩阵 $A$ 。 </li>\n</ol>\n</li>\n</ul>\n<p>因此，GCN 中的隐藏层可以写作 <script type=\"math/tex\">H = f(H^{-1}, A))</script><br>其中，$H⁰ = X$ ，$f$ 是一种传播规则。<br>每一个隐藏层 $H$ⁱ 都对应一个维度为 $N×Fⁱ$ 的特征矩阵，该矩阵中的每一行都是某个节点的特征表征。<br>在每一层中，GCN 会使用传播规则 $f$ 将这些信息聚合起来，从而形成下一层的特征。这样一来，在每个连续的层中特征就会变得越来越抽象。<br>在该框架下，GCN 的各种变体只不过是在传播规则 $f$ 的选择上有所不同。  </p>\n<p>图卷积操作就是传统的卷积操作在拓扑图上的概念延伸和转移。</p>\n<center>\n    <img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/01.jpg\" width=\"400\">\n    <img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/02.jpg\" width=\"400\">\n</center>\n\n<p>GCN的本质就是提取图的结构特征，关键在于如何定义局部接受域(receptive field)，主要有两种方式：</p>\n<ul>\n<li>Spatial approach 基于空域的图卷积<br>如何定义局部感受域或者是邻居和节点的顺序 比如给节点的边指定方向</li>\n<li>Spectral approach 基于谱域的图卷积<br>通过图的拉普拉斯矩阵的特征值和特征向量对图结构进行处理。</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><script type=\"math/tex; mode=display\">\nf(H^l, A)=D^{-1} \\hat{A} H^l W</script><ul>\n<li>GCN学习笔记：第一部分，手把手用Numpy实现GCN - weixin_42052081的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/weixin_42052081/article/details/89108966\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_42052081/article/details/89108966</a></li>\n<li><p>浅谈GCN - 宁静致远 - CSDN博客<br><a href=\"https://blog.csdn.net/weiyudang11/article/details/92662420\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weiyudang11/article/details/92662420</a></p>\n</li>\n<li><p>NetworkX系列教程(1)-创建graph - ７秒记忆的战斗机 - 博客园<br><a href=\"https://www.cnblogs.com/wushaogui/p/9199726.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wushaogui/p/9199726.html</a></p>\n</li>\n</ul>\n<p>NetworkX提供了4种常见网络的建模方法:</p>\n<ul>\n<li><p>规则图<br>规则图差不多是最没有复杂性的一类图，random_graphs.random_regular_graph(d, n)方法可以生成一个含有n个节点，每个节点有d个邻居节点的规则图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># generate a regular graph which has 20 nodes &amp; each node has 3 neghbour nodes.</span></span><br><span class=\"line\">RG = nx.random_graphs.random_regular_graph(<span class=\"number\">3</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ER随机图<br>ER随机图是早期研究得比较多的一类“复杂”网络，模型的基本思想是以概率p连接N个节点中的每一对节点。用random_graphs.erdos_renyi_graph(n,p)方法生成一个含有n个节点、以概率p连接的ER随机图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># generate a graph which has n=20 nodes, probablity p = 0.2.</span></span><br><span class=\"line\">ER = nx.random_graphs.erdos_renyi_graph(<span class=\"number\">20</span>, <span class=\"number\">0.2</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>WS小世界网络<br>用random_graphs.watts_strogatz_graph(n, k, p)方法生成一个含有n个节点、每个节点有k个邻居、以概率p随机化重连边的WS小世界网络。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># random reconnection probability was 0.3.</span></span><br><span class=\"line\">WS = nx.random_graphs.watts_strogatz_graph(<span class=\"number\">20</span>, <span class=\"number\">4</span>, <span class=\"number\">0.3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>BA无标度网络<br>用random_graphs.barabasi_albert_graph(n, m)方法生成一个含有n个节点、每次加入m条边的BA无标度网络。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># generalize BA network which has 20 nodes, m = 1</span></span><br><span class=\"line\">BA = nx.random_graphs.barabasi_albert_graph(<span class=\"number\">20</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>生成有5个节点的小世界网络，A是图的邻接矩阵。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\">colors = list(range(n))</span><br><span class=\"line\"></span><br><span class=\"line\">g=nx.random_graphs.watts_strogatz_graph(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">0.3</span>)</span><br><span class=\"line\"><span class=\"comment\"># g = nx.random_graphs.barabasi_albert_graph(5, 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">nx.draw_kamada_kawai(g, with_labels=<span class=\"literal\">True</span>, node_color=colors, alpha=<span class=\"number\">0.7</span>, node_size=<span class=\"number\">600</span>, font_size =<span class=\"number\">18</span>)</span><br><span class=\"line\">A = nx.adjacency_matrix(g).todense()</span><br><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_10_1.png\" alt=\"png\"></p>\n<p>X是节点的信息。<br>现实中每个node都有自己的特征，这里生成一个简单的$feature = [i, -i] $</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">X = np.matrix([</span><br><span class=\"line\">            [i, -i]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">        ], dtype=float)</span><br><span class=\"line\">X</span><br></pre></td></tr></table></figure>\n<p>$AX$只是对邻接域节点进行求和。</p>\n<ul>\n<li>简单的sum对特征提取具有关于节点度的倾向性即节点度越大，聚合的信息就越大。</li>\n<li>$A$中不存在self-loop，提取的信息不包含节点本身的信息。<br><img src=\"https://s3.us-east-2.amazonaws.com/dgl.ai/tutorial/1_first/mailbox.png\" alt=\"mailbox\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A*X</span><br></pre></td></tr></table></figure>\n<p>问题一：节点的聚合表征不包含它自己的特征，该表征是相邻节点的特征聚合，因此只有具有自环（self-loop）的节点才会在该聚合中包含自己的特征。</p>\n<p>增加自环可以解决这一个问题，通过在应用传播规则之前将邻接矩阵$A$与单位矩阵$I$相加来实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A_hat = A + np.eye(A.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(<span class=\"string\">\"A_hat:\\n\"</span>, A_hat)</span><br><span class=\"line\">print(<span class=\"string\">\"A_hat * X:\\n\"</span>, A_hat * X)</span><br></pre></td></tr></table></figure>\n<p>问题二：度大的节点在其特征表征中将具有较大的值，度小的节点将具有较小的值，这可能会导致梯度消失或梯度爆炸。</p>\n<p>对特征表征进行归一化处理，通过将邻接矩阵 $A$ 与度矩阵 $D$ 的逆相乘，对其进行变换，从而通过节点的度对特征表征进行归一化。<br>定义$D=\\Sigma_{\\jmath} A_{i j}$为节点度的对角矩阵。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D = np.array(np.sum(A, axis=<span class=\"number\">0</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">D = np.matrix(np.diag(D))</span><br><span class=\"line\">print(<span class=\"string\">\"D:\"</span>)</span><br><span class=\"line\">print(D)</span><br><span class=\"line\"></span><br><span class=\"line\">D_hat = np.array(np.sum(A_hat, axis=<span class=\"number\">0</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">D_hat = np.matrix(np.diag(D_hat))</span><br><span class=\"line\">print(<span class=\"string\">\"D_hat:\"</span>)</span><br><span class=\"line\">print(D_hat)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D**<span class=\"number\">-1</span> * A</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D**<span class=\"number\">-1</span> * A * X</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D_hat**<span class=\"number\">-1</span> * A_hat * X</span><br></pre></td></tr></table></figure>\n<p>添加权重</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W = np.matrix([</span><br><span class=\"line\">             [<span class=\"number\">1</span>, <span class=\"number\">-1</span>],</span><br><span class=\"line\">             [<span class=\"number\">-1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">         ])</span><br><span class=\"line\">D_hat**<span class=\"number\">-1</span> * A_hat * X * W</span><br></pre></td></tr></table></figure>\n<p>添加激活函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (abs(x) + x) / <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">relu(D_hat**<span class=\"number\">-1</span> * A_hat * X * W)</span><br></pre></td></tr></table></figure>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">from</span> networkx <span class=\"keyword\">import</span> to_numpy_matrix</span><br><span class=\"line\"></span><br><span class=\"line\">g = nx.karate_club_graph()</span><br><span class=\"line\">A = to_numpy_matrix(g, nodelist = g.nodes())</span><br><span class=\"line\"></span><br><span class=\"line\">A_hat = A + np.eye(A.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">D_hat = np.array(np.sum(A_hat, axis=<span class=\"number\">0</span>))[<span class=\"number\">0</span>]</span><br><span class=\"line\">D_hat = np.matrix(np.diag(D_hat))</span><br><span class=\"line\"></span><br><span class=\"line\">I = np.eye(A.shape[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcn_layer</span><span class=\"params\">(A_hat, D_hat, X, W)</span>:</span></span><br><span class=\"line\"><span class=\"comment\">#     return relu(D_hat**-1 * A_hat * X * W)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (D_hat**<span class=\"number\">-1</span> * A_hat * X * W)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W_1 = np.random.normal(</span><br><span class=\"line\">    loc=<span class=\"number\">0</span>, scale=<span class=\"number\">1</span>, size=(g.number_of_nodes(), <span class=\"number\">4</span>))</span><br><span class=\"line\">W_2 = np.random.normal(</span><br><span class=\"line\">    loc=<span class=\"number\">0</span>, size=(W_1.shape[<span class=\"number\">1</span>], <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H_1 = gcn_layer(A_hat, D_hat, I, W_1)</span><br><span class=\"line\">H_2 = gcn_layer(A_hat, D_hat, H_1, W_2)</span><br><span class=\"line\">output = H_2</span><br><span class=\"line\">output</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range (<span class=\"number\">34</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> g.nodes[i][<span class=\"string\">'club'</span>] == <span class=\"string\">'Mr. Hi'</span>:</span><br><span class=\"line\">        plt.scatter(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,label=str(i),color = <span class=\"string\">'b'</span>,alpha=<span class=\"number\">0.5</span>,s = <span class=\"number\">250</span>)</span><br><span class=\"line\">        plt.text(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,i, horizontalalignment=<span class=\"string\">'center'</span>,verticalalignment=<span class=\"string\">'center'</span>, fontdict=&#123;<span class=\"string\">'color'</span>:<span class=\"string\">'black'</span>&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># 为每个点添加标签，一些形如（x轴，y轴，标签）的元组，水平及垂直位置，背景颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        plt.scatter(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,label = <span class=\"string\">'i'</span>,color = <span class=\"string\">'r'</span>,alpha=<span class=\"number\">0.5</span>,s = <span class=\"number\">250</span>)</span><br><span class=\"line\">        plt.text(np.array(output)[i,<span class=\"number\">0</span>],np.array(output)[i,<span class=\"number\">1</span>] ,i, horizontalalignment=<span class=\"string\">'center'</span>,verticalalignment=<span class=\"string\">'center'</span>, fontdict=&#123;<span class=\"string\">'color'</span>:<span class=\"string\">'black'</span>&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># plt.scatter(np.array(output)[:,0],np.array(output)[:,1],label = 0:33)</span></span><br></pre></td></tr></table></figure>\n\n</div>\n</div>\n</body>\n\n\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_33_0.png\" alt=\"png\"></p>\n<p>这样的特征表征可以很好地将 Zachary 空手道俱乐部的两个社区划分开来。至此，我们甚至都没有开始训练模型。</p>\n<body>\n<div>\n    <div class=\"fold_hider\">\n        <div class=\"close hider_title\">点击显示/隐藏代码</div>\n    </div>\n    <div class=\"fold\">\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> networkx <span class=\"keyword\">import</span> karate_club_graph,to_numpy_matrix</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step1: Data preparation</span></span><br><span class=\"line\">zkc = karate_club_graph()</span><br><span class=\"line\">order = sorted(list(zkc.nodes()))</span><br><span class=\"line\"></span><br><span class=\"line\">NODE_SIZE = len(order)</span><br><span class=\"line\"><span class=\"comment\">#Adjacency matrix</span></span><br><span class=\"line\">A = to_numpy_matrix(zkc, nodelist=order)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#identity matrix</span></span><br><span class=\"line\">I = np.eye(zkc.number_of_nodes())</span><br><span class=\"line\"></span><br><span class=\"line\">node_label = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">34</span>):</span><br><span class=\"line\">    label = zkc.node[i]</span><br><span class=\"line\"><span class=\"comment\">#     node_label.append(np.random.randint(10)%4)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> label[<span class=\"string\">'club'</span>] == <span class=\"string\">'Officer'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.random.randint(<span class=\"number\">10</span>)%<span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">1</span>)       </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.random.randint(<span class=\"number\">10</span>)%<span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">2</span>)       </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node_label.append(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step2:  Parameter Settings             </span></span><br><span class=\"line\">NODE_SIZE = <span class=\"number\">34</span></span><br><span class=\"line\">NODE_FEATURE_DIM = <span class=\"number\">34</span></span><br><span class=\"line\">HIDDEN_DIM1 = <span class=\"number\">10</span></span><br><span class=\"line\">num_classes = <span class=\"number\">4</span></span><br><span class=\"line\">training_epochs = <span class=\"number\">10000</span></span><br><span class=\"line\">step = <span class=\"number\">10</span></span><br><span class=\"line\">lr=<span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step3: network define</span></span><br><span class=\"line\">X = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_FEATURE_DIM])</span><br><span class=\"line\">Y = tf.placeholder(tf.int32, shape=[NODE_SIZE])</span><br><span class=\"line\">label = tf.one_hot(Y, num_classes)</span><br><span class=\"line\"></span><br><span class=\"line\">adj = tf.placeholder(tf.float32, shape=[NODE_SIZE, NODE_SIZE])</span><br><span class=\"line\">weights = &#123;<span class=\"string\">\"hidden1\"</span>: tf.Variable(tf.random_normal(dtype=tf.float32, shape=[NODE_FEATURE_DIM, HIDDEN_DIM1]), name=<span class=\"string\">'w1'</span>),</span><br><span class=\"line\">        <span class=\"string\">\"hidden2\"</span>: tf.Variable(tf.random_normal(dtype=tf.float32, shape=[HIDDEN_DIM1, num_classes]), name=<span class=\"string\">'w2'</span>)&#125;</span><br><span class=\"line\">D_hat = tf.matrix_inverse(tf.matrix_diag(tf.reduce_sum(adj, axis=<span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GCN layer1</span></span><br><span class=\"line\">l1 = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), X), weights[<span class=\"string\">'hidden1'</span>])</span><br><span class=\"line\"><span class=\"comment\"># GCN layer2</span></span><br><span class=\"line\">output = tf.matmul(tf.matmul(tf.matmul(D_hat, adj), l1), weights[<span class=\"string\">'hidden2'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step4:define loss func and train</span></span><br><span class=\"line\">loss = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(labels=label, logits=output))</span><br><span class=\"line\">train_op = tf.train.AdamOptimizer(learning_rate=lr).minimize(loss)</span><br><span class=\"line\">init_op = tf.global_variables_initializer()</span><br><span class=\"line\">feed_dict = &#123;adj: A, X: I, Y: node_label&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D  <span class=\"comment\"># 空间三维画图</span></span><br><span class=\"line\"></span><br><span class=\"line\">plt.ion()</span><br><span class=\"line\"><span class=\"comment\"># 绘制散点图</span></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">ax = Axes3D(fig)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> range(training_epochs):</span><br><span class=\"line\">        c, _ = sess.run([loss, train_op], feed_dict)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> epoch % <span class=\"number\">1000</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            print(<span class=\"string\">f'Epoch:<span class=\"subst\">&#123;epoch&#125;</span> Loss <span class=\"subst\">&#123;c&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    represent = sess.run(output, feed_dict)</span><br><span class=\"line\">    print(represent)</span><br><span class=\"line\">    ax.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 添加坐标轴(顺序是Z, Y, X)</span></span><br><span class=\"line\">    ax.set_zlabel(<span class=\"string\">'Z'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">    ax.set_ylabel(<span class=\"string\">'Y'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">    ax.set_xlabel(<span class=\"string\">'X'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">1</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()  </span><br><span class=\"line\"></span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">3</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">3</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()  </span><br><span class=\"line\"></span><br><span class=\"line\">    plt.scatter(represent[:, <span class=\"number\">2</span>], represent[:, <span class=\"number\">3</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    plt.cla()</span><br></pre></td></tr></table></figure>\n\n</div>\n</div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n\n\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_12_1.png\" alt=\"png\"></p>\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_12_2.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ax.scatter(represent[:, <span class=\"number\">0</span>], represent[:, <span class=\"number\">1</span>], represent[:, <span class=\"number\">2</span>], s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 添加坐标轴(顺序是Z, Y, X)</span></span><br><span class=\"line\">ax.set_zlabel(<span class=\"string\">'Z'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">ax.set_ylabel(<span class=\"string\">'Y'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\">ax.set_xlabel(<span class=\"string\">'X'</span>, fontdict=&#123;<span class=\"string\">'size'</span>: <span class=\"number\">15</span>, <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">0</span>], [<span class=\"number\">0</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">1</span>], [<span class=\"number\">1</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">2</span>], [<span class=\"number\">1</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">plt.scatter(represent[:, <span class=\"number\">3</span>], [<span class=\"number\">1</span>]*<span class=\"number\">34</span>, s=<span class=\"number\">200</span>, c=node_label)</span><br><span class=\"line\">plt.axvline(x=<span class=\"number\">0</span>, c=<span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/07/17/Pixar-Lamp二：ST-GCN动作识别/output_13_0.png\" alt=\"png\"></p>\n</the>"},{"title":"keras版本yolov3使用和训练","date":"2019-08-14T14:40:26.000Z","_content":"\n## 准备\n安装tensorflow和keras\n\n下载yolov3代码\n* qqwweee/keras-yolo3: A Keras implementation of YOLOv3 (Tensorflow backend) \nhttps://github.com/qqwweee/keras-yolo3\n\n\n## 使用\n\n下载权重文件\n* https://pjreddie.com/media/files/yolov3.weights\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n将darknet下的yolov3文件转换成keras适用的h5文件\n``` bash\npython convert.py yolov3.cfg yolov3.weights model_data/yolo.h5\n```\n\n运行测试程序\n``` bash\npython yolo.py\n```\n\n## 训练\n需要新建和生成一些文件夹和文件，主要目录如下\n``` html\n\\KREAS-YOLOV3-MASTER\n│  2007_test.txt\n│  2007_train.txt\n│  2007_val.txt\n│  voc_annotation.py\n│  yolov3.cfg\n│  train.py\n│  yolo.py\n│  \n├─model_data\n│      voc_classes.txt\n│      yolo_anchors.txt\n│      \n├─VOCdevkit\n│  └─VOC2007\n│      │  Main_files_generate.py\n│      │  \n│      ├─Annotations\n│      │      xxxxxx.xml\n│      │      \n│      ├─ImageSets\n│      │  ├─Layout\n│      │  ├─Main\n│      │  │      test.txt\n│      │  │      train.txt\n│      │  │      trainval.txt\n│      │  │      val.txt\n│      │  │      \n│      │  └─Segmentation\n│      ├─JPEGImages\n│      │      xxxxxx.jpg\n│      │      \n│      ├─SegmentationClass\n│      └─SegmentationObject\n├─logs\n│  └─000\n└─yolo3\n    │  model.py\n    │  utils.py\n    └─ __init__.py\n```\n\n在工程下新建一个文件夹VOCdevkit，该文件夹下新建文件夹VOC2007，在目录VOCdevkit/VOC2007/下面新建五个的文件夹：\n* JPEGImages    存放图片文件xxx.jpg\n* Annotation    存放标签文件xxx.xml\n* ImageSet      该目录下还有三个文件：Layout Main Segmentation\n* SegmentationClass\n* SegmentationObject\n\n其中，Annotation文件夹下的标签文件文件，可以使用工具labelImg生成。\n\nImageSet/Main文件夹下的四个txt文件，由 VOCdevkit/VOC2007/Main_files_generate.py 生成。\n\n``` python\nimport os\nimport random\n \ntrainval_percent = 0.2\ntrain_percent = 0.8\nxmlfilepath = 'Annotations'\ntxtsavepath = 'ImageSets\\Main'\ntotal_xml = os.listdir(xmlfilepath)\n \nnum = len(total_xml)\nlist = range(num)\ntv = int(num * trainval_percent)\ntr = int(tv * train_percent)\ntrainval = random.sample(list, tv)\ntrain = random.sample(trainval, tr)\n \nftrainval = open('ImageSets/Main/trainval.txt', 'w')\nftest = open('ImageSets/Main/test.txt', 'w')\nftrain = open('ImageSets/Main/train.txt', 'w')\nfval = open('ImageSets/Main/val.txt', 'w')\n \nfor i in list:\n    name = total_xml[i][:-4] + '\\n'\n    if i in trainval:\n        ftrainval.write(name)\n        if i in train:\n            ftest.write(name)\n        else:\n            fval.write(name)\n    else:\n        ftrain.write(name)\n \nftrainval.close()\nftrain.close()\nfval.close()\nftest.close()\n```\n\n生成的数据集不能供yolov3直接使用，需要运行voc_annotation.py，在根目录下生成yolo3所需的2007_train.txt，2007_val.txt，2007_test.txt文件。  \n在 voc_annotation.py 文件中根据你的数据集修改：\n``` python\nclasses = [\"holothurian\", \"scallop\", \"starfish\", \"echinus\"]\n```\n\n修改yolo3.cfg文件中的参数，可以搜索[yolo]，其共出现三次，每次都按下图修改\n``` python\n[convolutional]\nsize=1\nstride=1\npad=1\nfilters=27  # 修改为 3*(5+len(classes))\nactivation=linear\n\n[yolo]\nmask = 3,4,5\nanchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326\nclasses=4 # 修改为要识别的类别数量\nnum=9\njitter=.3\nignore_thresh = .5\ntruth_thresh = 1\nrandom=0 # 显存小的话改为0\n```\n\n修改model_data下的voc_classes.txt为自己训练的类别\n``` txt\nholothurian\nscallop\nstarfish\nechinus\n```\n\n创建logs/000/目录，该目录用于存放训练得到的模型。\n\n训练\n``` python\n\"\"\"\nRetrain the YOLO model for your own dataset.\n\"\"\"\nimport numpy as np\nimport keras.backend as K\nfrom keras.layers import Input, Lambda\nfrom keras.models import Model\nfrom keras.callbacks import TensorBoard, ModelCheckpoint, EarlyStopping\n \nfrom yolo3.model import preprocess_true_boxes, yolo_body, tiny_yolo_body, yolo_loss\nfrom yolo3.utils import get_random_data\n \n \ndef _main():\n    annotation_path = '2007_train.txt'\n    log_dir = 'logs/000/'\n    classes_path = 'model_data/voc_classes.txt'\n    anchors_path = 'model_data/yolo_anchors.txt'\n    class_names = get_classes(classes_path)\n    anchors = get_anchors(anchors_path)\n    input_shape = (416,416) # multiple of 32, hw\n    model = create_model(input_shape, anchors, len(class_names) )\n    train(model, annotation_path, input_shape, anchors, len(class_names), log_dir=log_dir)\n \ndef train(model, annotation_path, input_shape, anchors, num_classes, log_dir='logs/'):\n    model.compile(optimizer='adam', loss={\n        'yolo_loss': lambda y_true, y_pred: y_pred})\n    logging = TensorBoard(log_dir=log_dir)\n    checkpoint = ModelCheckpoint(log_dir + \"ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5\",\n        monitor='val_loss', save_weights_only=True, save_best_only=True, period=1)\n    batch_size = 10\n    val_split = 0.1\n    with open(annotation_path) as f:\n        lines = f.readlines()\n    np.random.shuffle(lines)\n    num_val = int(len(lines)*val_split)\n    num_train = len(lines) - num_val\n    print('Train on {} samples, val on {} samples, with batch size {}.'.format(num_train, num_val, batch_size))\n \n    model.fit_generator(data_generator_wrap(lines[:num_train], batch_size, input_shape, anchors, num_classes),\n            steps_per_epoch=max(1, num_train//batch_size),\n            validation_data=data_generator_wrap(lines[num_train:], batch_size, input_shape, anchors, num_classes),\n            validation_steps=max(1, num_val//batch_size),\n            epochs=500,\n            initial_epoch=0)\n    model.save_weights(log_dir + 'trained_weights.h5')\n \ndef get_classes(classes_path):\n    with open(classes_path) as f:\n        class_names = f.readlines()\n    class_names = [c.strip() for c in class_names]\n    return class_names\n \ndef get_anchors(anchors_path):\n    with open(anchors_path) as f:\n        anchors = f.readline()\n    anchors = [float(x) for x in anchors.split(',')]\n    return np.array(anchors).reshape(-1, 2)\n \ndef create_model(input_shape, anchors, num_classes, load_pretrained=False, freeze_body=False,\n            weights_path='model_data/yolo_weights.h5'):\n    K.clear_session() # get a new session\n    image_input = Input(shape=(None, None, 3))\n    h, w = input_shape\n    num_anchors = len(anchors)\n    y_true = [Input(shape=(h//{0:32, 1:16, 2:8}[l], w//{0:32, 1:16, 2:8}[l], \\\n        num_anchors//3, num_classes+5)) for l in range(3)]\n \n    model_body = yolo_body(image_input, num_anchors//3, num_classes)\n    print('Create YOLOv3 model with {} anchors and {} classes.'.format(num_anchors, num_classes))\n \n    if load_pretrained:\n        model_body.load_weights(weights_path, by_name=True, skip_mismatch=True)\n        print('Load weights {}.'.format(weights_path))\n        if freeze_body:\n            # Do not freeze 3 output layers.\n            num = len(model_body.layers)-7\n            for i in range(num): model_body.layers[i].trainable = False\n            print('Freeze the first {} layers of total {} layers.'.format(num, len(model_body.layers)))\n \n    model_loss = Lambda(yolo_loss, output_shape=(1,), name='yolo_loss',\n        arguments={'anchors': anchors, 'num_classes': num_classes, 'ignore_thresh': 0.5})(\n        [*model_body.output, *y_true])\n    model = Model([model_body.input, *y_true], model_loss)\n    return model\ndef data_generator(annotation_lines, batch_size, input_shape, anchors, num_classes):\n    n = len(annotation_lines)\n    np.random.shuffle(annotation_lines)\n    i = 0\n    while True:\n        image_data = []\n        box_data = []\n        for b in range(batch_size):\n            i %= n\n            image, box = get_random_data(annotation_lines[i], input_shape, random=True)\n            image_data.append(image)\n            box_data.append(box)\n            i += 1\n        image_data = np.array(image_data)\n        box_data = np.array(box_data)\n        y_true = preprocess_true_boxes(box_data, input_shape, anchors, num_classes)\n        yield [image_data, *y_true], np.zeros(batch_size)\n \ndef data_generator_wrap(annotation_lines, batch_size, input_shape, anchors, num_classes):\n    n = len(annotation_lines)\n    if n==0 or batch_size<=0: return None\n    return data_generator(annotation_lines, batch_size, input_shape, anchors, num_classes)\n \nif __name__ == '__main__':\n    _main()\n```\n\n\n## 参考博客\n* windows10+keras下的yolov3的快速使用及自己数据集的训练 - wangzhwsme的博客 - CSDN博客  \nhttps://blog.csdn.net/u012746060/article/details/81183006\n\n\n## 问题记录\n\n### 问题1：运行voc_label时报错 difficult = obj.find('difficult').text AttributeError: 'NoneType' object has no ...\n* VOC2007_xml格式，属性示例  \nhttps://blog.csdn.net/w5688414/article/details/78489064\n\n``` python    \n# difficult = obj.find('difficult').text\ncls = obj.find('name').text\nif cls not in classes: # or int(difficult)==1:\n    continue\n```\n\n## 问题2：anchor设置\n* YOLO-v3模型参数anchor设置 - m_buddy的博客 - CSDN博客  \nhttps://blog.csdn.net/m_buddy/article/details/82926024\n修改相应文件路径，运行根目录下的 kmeans.py 文件\n\n``` bash\n(base) C:\\Users\\Administrator\\Desktop\\keras-yolo3-master>python kmeans.py\nK anchors:\n [[ 27  24]\n [ 37  35]\n [ 47  49]\n [ 58  37]\n [ 66  57]\n [ 84  79]\n [131 105]\n [204 164]\n [377 289]]\nAccuracy: 76.86%\n```\n\n","source":"_posts/keras版本yolov3使用和训练.md","raw":"---\ntitle: keras版本yolov3使用和训练\ndate: 2019-08-14 22:40:26\ntags:\n  - yolo\n---\n\n## 准备\n安装tensorflow和keras\n\n下载yolov3代码\n* qqwweee/keras-yolo3: A Keras implementation of YOLOv3 (Tensorflow backend) \nhttps://github.com/qqwweee/keras-yolo3\n\n\n## 使用\n\n下载权重文件\n* https://pjreddie.com/media/files/yolov3.weights\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n将darknet下的yolov3文件转换成keras适用的h5文件\n``` bash\npython convert.py yolov3.cfg yolov3.weights model_data/yolo.h5\n```\n\n运行测试程序\n``` bash\npython yolo.py\n```\n\n## 训练\n需要新建和生成一些文件夹和文件，主要目录如下\n``` html\n\\KREAS-YOLOV3-MASTER\n│  2007_test.txt\n│  2007_train.txt\n│  2007_val.txt\n│  voc_annotation.py\n│  yolov3.cfg\n│  train.py\n│  yolo.py\n│  \n├─model_data\n│      voc_classes.txt\n│      yolo_anchors.txt\n│      \n├─VOCdevkit\n│  └─VOC2007\n│      │  Main_files_generate.py\n│      │  \n│      ├─Annotations\n│      │      xxxxxx.xml\n│      │      \n│      ├─ImageSets\n│      │  ├─Layout\n│      │  ├─Main\n│      │  │      test.txt\n│      │  │      train.txt\n│      │  │      trainval.txt\n│      │  │      val.txt\n│      │  │      \n│      │  └─Segmentation\n│      ├─JPEGImages\n│      │      xxxxxx.jpg\n│      │      \n│      ├─SegmentationClass\n│      └─SegmentationObject\n├─logs\n│  └─000\n└─yolo3\n    │  model.py\n    │  utils.py\n    └─ __init__.py\n```\n\n在工程下新建一个文件夹VOCdevkit，该文件夹下新建文件夹VOC2007，在目录VOCdevkit/VOC2007/下面新建五个的文件夹：\n* JPEGImages    存放图片文件xxx.jpg\n* Annotation    存放标签文件xxx.xml\n* ImageSet      该目录下还有三个文件：Layout Main Segmentation\n* SegmentationClass\n* SegmentationObject\n\n其中，Annotation文件夹下的标签文件文件，可以使用工具labelImg生成。\n\nImageSet/Main文件夹下的四个txt文件，由 VOCdevkit/VOC2007/Main_files_generate.py 生成。\n\n``` python\nimport os\nimport random\n \ntrainval_percent = 0.2\ntrain_percent = 0.8\nxmlfilepath = 'Annotations'\ntxtsavepath = 'ImageSets\\Main'\ntotal_xml = os.listdir(xmlfilepath)\n \nnum = len(total_xml)\nlist = range(num)\ntv = int(num * trainval_percent)\ntr = int(tv * train_percent)\ntrainval = random.sample(list, tv)\ntrain = random.sample(trainval, tr)\n \nftrainval = open('ImageSets/Main/trainval.txt', 'w')\nftest = open('ImageSets/Main/test.txt', 'w')\nftrain = open('ImageSets/Main/train.txt', 'w')\nfval = open('ImageSets/Main/val.txt', 'w')\n \nfor i in list:\n    name = total_xml[i][:-4] + '\\n'\n    if i in trainval:\n        ftrainval.write(name)\n        if i in train:\n            ftest.write(name)\n        else:\n            fval.write(name)\n    else:\n        ftrain.write(name)\n \nftrainval.close()\nftrain.close()\nfval.close()\nftest.close()\n```\n\n生成的数据集不能供yolov3直接使用，需要运行voc_annotation.py，在根目录下生成yolo3所需的2007_train.txt，2007_val.txt，2007_test.txt文件。  \n在 voc_annotation.py 文件中根据你的数据集修改：\n``` python\nclasses = [\"holothurian\", \"scallop\", \"starfish\", \"echinus\"]\n```\n\n修改yolo3.cfg文件中的参数，可以搜索[yolo]，其共出现三次，每次都按下图修改\n``` python\n[convolutional]\nsize=1\nstride=1\npad=1\nfilters=27  # 修改为 3*(5+len(classes))\nactivation=linear\n\n[yolo]\nmask = 3,4,5\nanchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326\nclasses=4 # 修改为要识别的类别数量\nnum=9\njitter=.3\nignore_thresh = .5\ntruth_thresh = 1\nrandom=0 # 显存小的话改为0\n```\n\n修改model_data下的voc_classes.txt为自己训练的类别\n``` txt\nholothurian\nscallop\nstarfish\nechinus\n```\n\n创建logs/000/目录，该目录用于存放训练得到的模型。\n\n训练\n``` python\n\"\"\"\nRetrain the YOLO model for your own dataset.\n\"\"\"\nimport numpy as np\nimport keras.backend as K\nfrom keras.layers import Input, Lambda\nfrom keras.models import Model\nfrom keras.callbacks import TensorBoard, ModelCheckpoint, EarlyStopping\n \nfrom yolo3.model import preprocess_true_boxes, yolo_body, tiny_yolo_body, yolo_loss\nfrom yolo3.utils import get_random_data\n \n \ndef _main():\n    annotation_path = '2007_train.txt'\n    log_dir = 'logs/000/'\n    classes_path = 'model_data/voc_classes.txt'\n    anchors_path = 'model_data/yolo_anchors.txt'\n    class_names = get_classes(classes_path)\n    anchors = get_anchors(anchors_path)\n    input_shape = (416,416) # multiple of 32, hw\n    model = create_model(input_shape, anchors, len(class_names) )\n    train(model, annotation_path, input_shape, anchors, len(class_names), log_dir=log_dir)\n \ndef train(model, annotation_path, input_shape, anchors, num_classes, log_dir='logs/'):\n    model.compile(optimizer='adam', loss={\n        'yolo_loss': lambda y_true, y_pred: y_pred})\n    logging = TensorBoard(log_dir=log_dir)\n    checkpoint = ModelCheckpoint(log_dir + \"ep{epoch:03d}-loss{loss:.3f}-val_loss{val_loss:.3f}.h5\",\n        monitor='val_loss', save_weights_only=True, save_best_only=True, period=1)\n    batch_size = 10\n    val_split = 0.1\n    with open(annotation_path) as f:\n        lines = f.readlines()\n    np.random.shuffle(lines)\n    num_val = int(len(lines)*val_split)\n    num_train = len(lines) - num_val\n    print('Train on {} samples, val on {} samples, with batch size {}.'.format(num_train, num_val, batch_size))\n \n    model.fit_generator(data_generator_wrap(lines[:num_train], batch_size, input_shape, anchors, num_classes),\n            steps_per_epoch=max(1, num_train//batch_size),\n            validation_data=data_generator_wrap(lines[num_train:], batch_size, input_shape, anchors, num_classes),\n            validation_steps=max(1, num_val//batch_size),\n            epochs=500,\n            initial_epoch=0)\n    model.save_weights(log_dir + 'trained_weights.h5')\n \ndef get_classes(classes_path):\n    with open(classes_path) as f:\n        class_names = f.readlines()\n    class_names = [c.strip() for c in class_names]\n    return class_names\n \ndef get_anchors(anchors_path):\n    with open(anchors_path) as f:\n        anchors = f.readline()\n    anchors = [float(x) for x in anchors.split(',')]\n    return np.array(anchors).reshape(-1, 2)\n \ndef create_model(input_shape, anchors, num_classes, load_pretrained=False, freeze_body=False,\n            weights_path='model_data/yolo_weights.h5'):\n    K.clear_session() # get a new session\n    image_input = Input(shape=(None, None, 3))\n    h, w = input_shape\n    num_anchors = len(anchors)\n    y_true = [Input(shape=(h//{0:32, 1:16, 2:8}[l], w//{0:32, 1:16, 2:8}[l], \\\n        num_anchors//3, num_classes+5)) for l in range(3)]\n \n    model_body = yolo_body(image_input, num_anchors//3, num_classes)\n    print('Create YOLOv3 model with {} anchors and {} classes.'.format(num_anchors, num_classes))\n \n    if load_pretrained:\n        model_body.load_weights(weights_path, by_name=True, skip_mismatch=True)\n        print('Load weights {}.'.format(weights_path))\n        if freeze_body:\n            # Do not freeze 3 output layers.\n            num = len(model_body.layers)-7\n            for i in range(num): model_body.layers[i].trainable = False\n            print('Freeze the first {} layers of total {} layers.'.format(num, len(model_body.layers)))\n \n    model_loss = Lambda(yolo_loss, output_shape=(1,), name='yolo_loss',\n        arguments={'anchors': anchors, 'num_classes': num_classes, 'ignore_thresh': 0.5})(\n        [*model_body.output, *y_true])\n    model = Model([model_body.input, *y_true], model_loss)\n    return model\ndef data_generator(annotation_lines, batch_size, input_shape, anchors, num_classes):\n    n = len(annotation_lines)\n    np.random.shuffle(annotation_lines)\n    i = 0\n    while True:\n        image_data = []\n        box_data = []\n        for b in range(batch_size):\n            i %= n\n            image, box = get_random_data(annotation_lines[i], input_shape, random=True)\n            image_data.append(image)\n            box_data.append(box)\n            i += 1\n        image_data = np.array(image_data)\n        box_data = np.array(box_data)\n        y_true = preprocess_true_boxes(box_data, input_shape, anchors, num_classes)\n        yield [image_data, *y_true], np.zeros(batch_size)\n \ndef data_generator_wrap(annotation_lines, batch_size, input_shape, anchors, num_classes):\n    n = len(annotation_lines)\n    if n==0 or batch_size<=0: return None\n    return data_generator(annotation_lines, batch_size, input_shape, anchors, num_classes)\n \nif __name__ == '__main__':\n    _main()\n```\n\n\n## 参考博客\n* windows10+keras下的yolov3的快速使用及自己数据集的训练 - wangzhwsme的博客 - CSDN博客  \nhttps://blog.csdn.net/u012746060/article/details/81183006\n\n\n## 问题记录\n\n### 问题1：运行voc_label时报错 difficult = obj.find('difficult').text AttributeError: 'NoneType' object has no ...\n* VOC2007_xml格式，属性示例  \nhttps://blog.csdn.net/w5688414/article/details/78489064\n\n``` python    \n# difficult = obj.find('difficult').text\ncls = obj.find('name').text\nif cls not in classes: # or int(difficult)==1:\n    continue\n```\n\n## 问题2：anchor设置\n* YOLO-v3模型参数anchor设置 - m_buddy的博客 - CSDN博客  \nhttps://blog.csdn.net/m_buddy/article/details/82926024\n修改相应文件路径，运行根目录下的 kmeans.py 文件\n\n``` bash\n(base) C:\\Users\\Administrator\\Desktop\\keras-yolo3-master>python kmeans.py\nK anchors:\n [[ 27  24]\n [ 37  35]\n [ 47  49]\n [ 58  37]\n [ 66  57]\n [ 84  79]\n [131 105]\n [204 164]\n [377 289]]\nAccuracy: 76.86%\n```\n\n","slug":"keras版本yolov3使用和训练","published":1,"updated":"2020-01-05T19:13:24.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50au005v4cvjetug2tbr","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>安装tensorflow和keras</p>\n<p>下载yolov3代码</p>\n<ul>\n<li>qqwweee/keras-yolo3: A Keras implementation of YOLOv3 (Tensorflow backend)<br><a href=\"https://github.com/qqwweee/keras-yolo3\" target=\"_blank\" rel=\"noopener\">https://github.com/qqwweee/keras-yolo3</a></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>下载权重文件</p>\n<ul>\n<li><a href=\"https://pjreddie.com/media/files/yolov3.weights\" target=\"_blank\" rel=\"noopener\">https://pjreddie.com/media/files/yolov3.weights</a></li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<p>将darknet下的yolov3文件转换成keras适用的h5文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python convert.py yolov3.cfg yolov3.weights model_data/yolo.h5</span><br></pre></td></tr></table></figure></p>\n<p>运行测试程序<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python yolo.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><p>需要新建和生成一些文件夹和文件，主要目录如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\KREAS-YOLOV3-MASTER</span><br><span class=\"line\">│  2007_test.txt</span><br><span class=\"line\">│  2007_train.txt</span><br><span class=\"line\">│  2007_val.txt</span><br><span class=\"line\">│  voc_annotation.py</span><br><span class=\"line\">│  yolov3.cfg</span><br><span class=\"line\">│  train.py</span><br><span class=\"line\">│  yolo.py</span><br><span class=\"line\">│  </span><br><span class=\"line\">├─model_data</span><br><span class=\"line\">│      voc_classes.txt</span><br><span class=\"line\">│      yolo_anchors.txt</span><br><span class=\"line\">│      </span><br><span class=\"line\">├─VOCdevkit</span><br><span class=\"line\">│  └─VOC2007</span><br><span class=\"line\">│      │  Main_files_generate.py</span><br><span class=\"line\">│      │  </span><br><span class=\"line\">│      ├─Annotations</span><br><span class=\"line\">│      │      xxxxxx.xml</span><br><span class=\"line\">│      │      </span><br><span class=\"line\">│      ├─ImageSets</span><br><span class=\"line\">│      │  ├─Layout</span><br><span class=\"line\">│      │  ├─Main</span><br><span class=\"line\">│      │  │      test.txt</span><br><span class=\"line\">│      │  │      train.txt</span><br><span class=\"line\">│      │  │      trainval.txt</span><br><span class=\"line\">│      │  │      val.txt</span><br><span class=\"line\">│      │  │      </span><br><span class=\"line\">│      │  └─Segmentation</span><br><span class=\"line\">│      ├─JPEGImages</span><br><span class=\"line\">│      │      xxxxxx.jpg</span><br><span class=\"line\">│      │      </span><br><span class=\"line\">│      ├─SegmentationClass</span><br><span class=\"line\">│      └─SegmentationObject</span><br><span class=\"line\">├─logs</span><br><span class=\"line\">│  └─000</span><br><span class=\"line\">└─yolo3</span><br><span class=\"line\">    │  model.py</span><br><span class=\"line\">    │  utils.py</span><br><span class=\"line\">    └─ __init__.py</span><br></pre></td></tr></table></figure></p>\n<p>在工程下新建一个文件夹VOCdevkit，该文件夹下新建文件夹VOC2007，在目录VOCdevkit/VOC2007/下面新建五个的文件夹：</p>\n<ul>\n<li>JPEGImages    存放图片文件xxx.jpg</li>\n<li>Annotation    存放标签文件xxx.xml</li>\n<li>ImageSet      该目录下还有三个文件：Layout Main Segmentation</li>\n<li>SegmentationClass</li>\n<li>SegmentationObject</li>\n</ul>\n<p>其中，Annotation文件夹下的标签文件文件，可以使用工具labelImg生成。</p>\n<p>ImageSet/Main文件夹下的四个txt文件，由 VOCdevkit/VOC2007/Main_files_generate.py 生成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"> </span><br><span class=\"line\">trainval_percent = <span class=\"number\">0.2</span></span><br><span class=\"line\">train_percent = <span class=\"number\">0.8</span></span><br><span class=\"line\">xmlfilepath = <span class=\"string\">'Annotations'</span></span><br><span class=\"line\">txtsavepath = <span class=\"string\">'ImageSets\\Main'</span></span><br><span class=\"line\">total_xml = os.listdir(xmlfilepath)</span><br><span class=\"line\"> </span><br><span class=\"line\">num = len(total_xml)</span><br><span class=\"line\">list = range(num)</span><br><span class=\"line\">tv = int(num * trainval_percent)</span><br><span class=\"line\">tr = int(tv * train_percent)</span><br><span class=\"line\">trainval = random.sample(list, tv)</span><br><span class=\"line\">train = random.sample(trainval, tr)</span><br><span class=\"line\"> </span><br><span class=\"line\">ftrainval = open(<span class=\"string\">'ImageSets/Main/trainval.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">ftest = open(<span class=\"string\">'ImageSets/Main/test.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">ftrain = open(<span class=\"string\">'ImageSets/Main/train.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">fval = open(<span class=\"string\">'ImageSets/Main/val.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    name = total_xml[i][:<span class=\"number\">-4</span>] + <span class=\"string\">'\\n'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">        ftrainval.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">            ftest.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fval.write(name)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ftrain.write(name)</span><br><span class=\"line\"> </span><br><span class=\"line\">ftrainval.close()</span><br><span class=\"line\">ftrain.close()</span><br><span class=\"line\">fval.close()</span><br><span class=\"line\">ftest.close()</span><br></pre></td></tr></table></figure>\n<p>生成的数据集不能供yolov3直接使用，需要运行voc_annotation.py，在根目录下生成yolo3所需的2007_train.txt，2007_val.txt，2007_test.txt文件。<br>在 voc_annotation.py 文件中根据你的数据集修改：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classes = [<span class=\"string\">\"holothurian\"</span>, <span class=\"string\">\"scallop\"</span>, <span class=\"string\">\"starfish\"</span>, <span class=\"string\">\"echinus\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>修改yolo3.cfg文件中的参数，可以搜索[yolo]，其共出现三次，每次都按下图修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[convolutional]</span><br><span class=\"line\">size=<span class=\"number\">1</span></span><br><span class=\"line\">stride=<span class=\"number\">1</span></span><br><span class=\"line\">pad=<span class=\"number\">1</span></span><br><span class=\"line\">filters=<span class=\"number\">27</span>  <span class=\"comment\"># 修改为 3*(5+len(classes))</span></span><br><span class=\"line\">activation=linear</span><br><span class=\"line\"></span><br><span class=\"line\">[yolo]</span><br><span class=\"line\">mask = <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\">anchors = <span class=\"number\">10</span>,<span class=\"number\">13</span>,  <span class=\"number\">16</span>,<span class=\"number\">30</span>,  <span class=\"number\">33</span>,<span class=\"number\">23</span>,  <span class=\"number\">30</span>,<span class=\"number\">61</span>,  <span class=\"number\">62</span>,<span class=\"number\">45</span>,  <span class=\"number\">59</span>,<span class=\"number\">119</span>,  <span class=\"number\">116</span>,<span class=\"number\">90</span>,  <span class=\"number\">156</span>,<span class=\"number\">198</span>,  <span class=\"number\">373</span>,<span class=\"number\">326</span></span><br><span class=\"line\">classes=<span class=\"number\">4</span> <span class=\"comment\"># 修改为要识别的类别数量</span></span><br><span class=\"line\">num=<span class=\"number\">9</span></span><br><span class=\"line\">jitter=<span class=\"number\">.3</span></span><br><span class=\"line\">ignore_thresh = <span class=\"number\">.5</span></span><br><span class=\"line\">truth_thresh = <span class=\"number\">1</span></span><br><span class=\"line\">random=<span class=\"number\">0</span> <span class=\"comment\"># 显存小的话改为0</span></span><br></pre></td></tr></table></figure></p>\n<p>修改model_data下的voc_classes.txt为自己训练的类别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">holothurian</span><br><span class=\"line\">scallop</span><br><span class=\"line\">starfish</span><br><span class=\"line\">echinus</span><br></pre></td></tr></table></figure></p>\n<p>创建logs/000/目录，该目录用于存放训练得到的模型。</p>\n<p>训练<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Retrain the YOLO model for your own dataset.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> keras.backend <span class=\"keyword\">as</span> K</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Input, Lambda</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.callbacks <span class=\"keyword\">import</span> TensorBoard, ModelCheckpoint, EarlyStopping</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> yolo3.model <span class=\"keyword\">import</span> preprocess_true_boxes, yolo_body, tiny_yolo_body, yolo_loss</span><br><span class=\"line\"><span class=\"keyword\">from</span> yolo3.utils <span class=\"keyword\">import</span> get_random_data</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    annotation_path = <span class=\"string\">'2007_train.txt'</span></span><br><span class=\"line\">    log_dir = <span class=\"string\">'logs/000/'</span></span><br><span class=\"line\">    classes_path = <span class=\"string\">'model_data/voc_classes.txt'</span></span><br><span class=\"line\">    anchors_path = <span class=\"string\">'model_data/yolo_anchors.txt'</span></span><br><span class=\"line\">    class_names = get_classes(classes_path)</span><br><span class=\"line\">    anchors = get_anchors(anchors_path)</span><br><span class=\"line\">    input_shape = (<span class=\"number\">416</span>,<span class=\"number\">416</span>) <span class=\"comment\"># multiple of 32, hw</span></span><br><span class=\"line\">    model = create_model(input_shape, anchors, len(class_names) )</span><br><span class=\"line\">    train(model, annotation_path, input_shape, anchors, len(class_names), log_dir=log_dir)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span><span class=\"params\">(model, annotation_path, input_shape, anchors, num_classes, log_dir=<span class=\"string\">'logs/'</span>)</span>:</span></span><br><span class=\"line\">    model.compile(optimizer=<span class=\"string\">'adam'</span>, loss=&#123;</span><br><span class=\"line\">        <span class=\"string\">'yolo_loss'</span>: <span class=\"keyword\">lambda</span> y_true, y_pred: y_pred&#125;)</span><br><span class=\"line\">    logging = TensorBoard(log_dir=log_dir)</span><br><span class=\"line\">    checkpoint = ModelCheckpoint(log_dir + <span class=\"string\">\"ep&#123;epoch:03d&#125;-loss&#123;loss:.3f&#125;-val_loss&#123;val_loss:.3f&#125;.h5\"</span>,</span><br><span class=\"line\">        monitor=<span class=\"string\">'val_loss'</span>, save_weights_only=<span class=\"literal\">True</span>, save_best_only=<span class=\"literal\">True</span>, period=<span class=\"number\">1</span>)</span><br><span class=\"line\">    batch_size = <span class=\"number\">10</span></span><br><span class=\"line\">    val_split = <span class=\"number\">0.1</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(annotation_path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        lines = f.readlines()</span><br><span class=\"line\">    np.random.shuffle(lines)</span><br><span class=\"line\">    num_val = int(len(lines)*val_split)</span><br><span class=\"line\">    num_train = len(lines) - num_val</span><br><span class=\"line\">    print(<span class=\"string\">'Train on &#123;&#125; samples, val on &#123;&#125; samples, with batch size &#123;&#125;.'</span>.format(num_train, num_val, batch_size))</span><br><span class=\"line\"> </span><br><span class=\"line\">    model.fit_generator(data_generator_wrap(lines[:num_train], batch_size, input_shape, anchors, num_classes),</span><br><span class=\"line\">            steps_per_epoch=max(<span class=\"number\">1</span>, num_train//batch_size),</span><br><span class=\"line\">            validation_data=data_generator_wrap(lines[num_train:], batch_size, input_shape, anchors, num_classes),</span><br><span class=\"line\">            validation_steps=max(<span class=\"number\">1</span>, num_val//batch_size),</span><br><span class=\"line\">            epochs=<span class=\"number\">500</span>,</span><br><span class=\"line\">            initial_epoch=<span class=\"number\">0</span>)</span><br><span class=\"line\">    model.save_weights(log_dir + <span class=\"string\">'trained_weights.h5'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_classes</span><span class=\"params\">(classes_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(classes_path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        class_names = f.readlines()</span><br><span class=\"line\">    class_names = [c.strip() <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> class_names]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> class_names</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_anchors</span><span class=\"params\">(anchors_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(anchors_path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        anchors = f.readline()</span><br><span class=\"line\">    anchors = [float(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> anchors.split(<span class=\"string\">','</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.array(anchors).reshape(<span class=\"number\">-1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_model</span><span class=\"params\">(input_shape, anchors, num_classes, load_pretrained=False, freeze_body=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            weights_path=<span class=\"string\">'model_data/yolo_weights.h5'</span>)</span>:</span></span><br><span class=\"line\">    K.clear_session() <span class=\"comment\"># get a new session</span></span><br><span class=\"line\">    image_input = Input(shape=(<span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">    h, w = input_shape</span><br><span class=\"line\">    num_anchors = len(anchors)</span><br><span class=\"line\">    y_true = [Input(shape=(h//&#123;<span class=\"number\">0</span>:<span class=\"number\">32</span>, <span class=\"number\">1</span>:<span class=\"number\">16</span>, <span class=\"number\">2</span>:<span class=\"number\">8</span>&#125;[l], w//&#123;<span class=\"number\">0</span>:<span class=\"number\">32</span>, <span class=\"number\">1</span>:<span class=\"number\">16</span>, <span class=\"number\">2</span>:<span class=\"number\">8</span>&#125;[l], \\</span><br><span class=\"line\">        num_anchors//<span class=\"number\">3</span>, num_classes+<span class=\"number\">5</span>)) <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>)]</span><br><span class=\"line\"> </span><br><span class=\"line\">    model_body = yolo_body(image_input, num_anchors//<span class=\"number\">3</span>, num_classes)</span><br><span class=\"line\">    print(<span class=\"string\">'Create YOLOv3 model with &#123;&#125; anchors and &#123;&#125; classes.'</span>.format(num_anchors, num_classes))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> load_pretrained:</span><br><span class=\"line\">        model_body.load_weights(weights_path, by_name=<span class=\"literal\">True</span>, skip_mismatch=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'Load weights &#123;&#125;.'</span>.format(weights_path))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> freeze_body:</span><br><span class=\"line\">            <span class=\"comment\"># Do not freeze 3 output layers.</span></span><br><span class=\"line\">            num = len(model_body.layers)<span class=\"number\">-7</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num): model_body.layers[i].trainable = <span class=\"literal\">False</span></span><br><span class=\"line\">            print(<span class=\"string\">'Freeze the first &#123;&#125; layers of total &#123;&#125; layers.'</span>.format(num, len(model_body.layers)))</span><br><span class=\"line\"> </span><br><span class=\"line\">    model_loss = Lambda(yolo_loss, output_shape=(<span class=\"number\">1</span>,), name=<span class=\"string\">'yolo_loss'</span>,</span><br><span class=\"line\">        arguments=&#123;<span class=\"string\">'anchors'</span>: anchors, <span class=\"string\">'num_classes'</span>: num_classes, <span class=\"string\">'ignore_thresh'</span>: <span class=\"number\">0.5</span>&#125;)(</span><br><span class=\"line\">        [*model_body.output, *y_true])</span><br><span class=\"line\">    model = Model([model_body.input, *y_true], model_loss)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> model</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_generator</span><span class=\"params\">(annotation_lines, batch_size, input_shape, anchors, num_classes)</span>:</span></span><br><span class=\"line\">    n = len(annotation_lines)</span><br><span class=\"line\">    np.random.shuffle(annotation_lines)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        image_data = []</span><br><span class=\"line\">        box_data = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> range(batch_size):</span><br><span class=\"line\">            i %= n</span><br><span class=\"line\">            image, box = get_random_data(annotation_lines[i], input_shape, random=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            image_data.append(image)</span><br><span class=\"line\">            box_data.append(box)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        image_data = np.array(image_data)</span><br><span class=\"line\">        box_data = np.array(box_data)</span><br><span class=\"line\">        y_true = preprocess_true_boxes(box_data, input_shape, anchors, num_classes)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> [image_data, *y_true], np.zeros(batch_size)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_generator_wrap</span><span class=\"params\">(annotation_lines, batch_size, input_shape, anchors, num_classes)</span>:</span></span><br><span class=\"line\">    n = len(annotation_lines)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">0</span> <span class=\"keyword\">or</span> batch_size&lt;=<span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data_generator(annotation_lines, batch_size, input_shape, anchors, num_classes)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>windows10+keras下的yolov3的快速使用及自己数据集的训练 - wangzhwsme的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/u012746060/article/details/81183006\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012746060/article/details/81183006</a></li>\n</ul>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"问题1：运行voc-label时报错-difficult-obj-find-‘difficult’-text-AttributeError-‘NoneType’-object-has-no-…\"><a href=\"#问题1：运行voc-label时报错-difficult-obj-find-‘difficult’-text-AttributeError-‘NoneType’-object-has-no-…\" class=\"headerlink\" title=\"问题1：运行voc_label时报错 difficult = obj.find(‘difficult’).text AttributeError: ‘NoneType’ object has no …\"></a>问题1：运行voc_label时报错 difficult = obj.find(‘difficult’).text AttributeError: ‘NoneType’ object has no …</h3><ul>\n<li>VOC2007_xml格式，属性示例<br><a href=\"https://blog.csdn.net/w5688414/article/details/78489064\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/w5688414/article/details/78489064</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># difficult = obj.find('difficult').text</span></span><br><span class=\"line\">cls = obj.find(<span class=\"string\">'name'</span>).text</span><br><span class=\"line\"><span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> classes: <span class=\"comment\"># or int(difficult)==1:</span></span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"问题2：anchor设置\"><a href=\"#问题2：anchor设置\" class=\"headerlink\" title=\"问题2：anchor设置\"></a>问题2：anchor设置</h2><ul>\n<li>YOLO-v3模型参数anchor设置 - m_buddy的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/m_buddy/article/details/82926024\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/m_buddy/article/details/82926024</a><br>修改相应文件路径，运行根目录下的 kmeans.py 文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) C:\\Users\\Administrator\\Desktop\\keras-yolo3-master&gt;python kmeans.py</span><br><span class=\"line\">K anchors:</span><br><span class=\"line\"> [[ 27  24]</span><br><span class=\"line\"> [ 37  35]</span><br><span class=\"line\"> [ 47  49]</span><br><span class=\"line\"> [ 58  37]</span><br><span class=\"line\"> [ 66  57]</span><br><span class=\"line\"> [ 84  79]</span><br><span class=\"line\"> [131 105]</span><br><span class=\"line\"> [204 164]</span><br><span class=\"line\"> [377 289]]</span><br><span class=\"line\">Accuracy: 76.86%</span><br></pre></td></tr></table></figure>\n</the>","site":{"data":{}},"excerpt":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>安装tensorflow和keras</p>\n<p>下载yolov3代码</p>\n<ul>\n<li>qqwweee/keras-yolo3: A Keras implementation of YOLOv3 (Tensorflow backend)<br><a href=\"https://github.com/qqwweee/keras-yolo3\" target=\"_blank\" rel=\"noopener\">https://github.com/qqwweee/keras-yolo3</a></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>下载权重文件</p>\n<ul>\n<li><a href=\"https://pjreddie.com/media/files/yolov3.weights\" target=\"_blank\" rel=\"noopener\">https://pjreddie.com/media/files/yolov3.weights</a></li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<p>将darknet下的yolov3文件转换成keras适用的h5文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python convert.py yolov3.cfg yolov3.weights model_data/yolo.h5</span><br></pre></td></tr></table></figure></p>\n<p>运行测试程序<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python yolo.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><p>需要新建和生成一些文件夹和文件，主要目录如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\KREAS-YOLOV3-MASTER</span><br><span class=\"line\">│  2007_test.txt</span><br><span class=\"line\">│  2007_train.txt</span><br><span class=\"line\">│  2007_val.txt</span><br><span class=\"line\">│  voc_annotation.py</span><br><span class=\"line\">│  yolov3.cfg</span><br><span class=\"line\">│  train.py</span><br><span class=\"line\">│  yolo.py</span><br><span class=\"line\">│  </span><br><span class=\"line\">├─model_data</span><br><span class=\"line\">│      voc_classes.txt</span><br><span class=\"line\">│      yolo_anchors.txt</span><br><span class=\"line\">│      </span><br><span class=\"line\">├─VOCdevkit</span><br><span class=\"line\">│  └─VOC2007</span><br><span class=\"line\">│      │  Main_files_generate.py</span><br><span class=\"line\">│      │  </span><br><span class=\"line\">│      ├─Annotations</span><br><span class=\"line\">│      │      xxxxxx.xml</span><br><span class=\"line\">│      │      </span><br><span class=\"line\">│      ├─ImageSets</span><br><span class=\"line\">│      │  ├─Layout</span><br><span class=\"line\">│      │  ├─Main</span><br><span class=\"line\">│      │  │      test.txt</span><br><span class=\"line\">│      │  │      train.txt</span><br><span class=\"line\">│      │  │      trainval.txt</span><br><span class=\"line\">│      │  │      val.txt</span><br><span class=\"line\">│      │  │      </span><br><span class=\"line\">│      │  └─Segmentation</span><br><span class=\"line\">│      ├─JPEGImages</span><br><span class=\"line\">│      │      xxxxxx.jpg</span><br><span class=\"line\">│      │      </span><br><span class=\"line\">│      ├─SegmentationClass</span><br><span class=\"line\">│      └─SegmentationObject</span><br><span class=\"line\">├─logs</span><br><span class=\"line\">│  └─000</span><br><span class=\"line\">└─yolo3</span><br><span class=\"line\">    │  model.py</span><br><span class=\"line\">    │  utils.py</span><br><span class=\"line\">    └─ __init__.py</span><br></pre></td></tr></table></figure></p>\n<p>在工程下新建一个文件夹VOCdevkit，该文件夹下新建文件夹VOC2007，在目录VOCdevkit/VOC2007/下面新建五个的文件夹：</p>\n<ul>\n<li>JPEGImages    存放图片文件xxx.jpg</li>\n<li>Annotation    存放标签文件xxx.xml</li>\n<li>ImageSet      该目录下还有三个文件：Layout Main Segmentation</li>\n<li>SegmentationClass</li>\n<li>SegmentationObject</li>\n</ul>\n<p>其中，Annotation文件夹下的标签文件文件，可以使用工具labelImg生成。</p>\n<p>ImageSet/Main文件夹下的四个txt文件，由 VOCdevkit/VOC2007/Main_files_generate.py 生成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"> </span><br><span class=\"line\">trainval_percent = <span class=\"number\">0.2</span></span><br><span class=\"line\">train_percent = <span class=\"number\">0.8</span></span><br><span class=\"line\">xmlfilepath = <span class=\"string\">'Annotations'</span></span><br><span class=\"line\">txtsavepath = <span class=\"string\">'ImageSets\\Main'</span></span><br><span class=\"line\">total_xml = os.listdir(xmlfilepath)</span><br><span class=\"line\"> </span><br><span class=\"line\">num = len(total_xml)</span><br><span class=\"line\">list = range(num)</span><br><span class=\"line\">tv = int(num * trainval_percent)</span><br><span class=\"line\">tr = int(tv * train_percent)</span><br><span class=\"line\">trainval = random.sample(list, tv)</span><br><span class=\"line\">train = random.sample(trainval, tr)</span><br><span class=\"line\"> </span><br><span class=\"line\">ftrainval = open(<span class=\"string\">'ImageSets/Main/trainval.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">ftest = open(<span class=\"string\">'ImageSets/Main/test.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">ftrain = open(<span class=\"string\">'ImageSets/Main/train.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">fval = open(<span class=\"string\">'ImageSets/Main/val.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    name = total_xml[i][:<span class=\"number\">-4</span>] + <span class=\"string\">'\\n'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">        ftrainval.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">            ftest.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fval.write(name)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ftrain.write(name)</span><br><span class=\"line\"> </span><br><span class=\"line\">ftrainval.close()</span><br><span class=\"line\">ftrain.close()</span><br><span class=\"line\">fval.close()</span><br><span class=\"line\">ftest.close()</span><br></pre></td></tr></table></figure>\n<p>生成的数据集不能供yolov3直接使用，需要运行voc_annotation.py，在根目录下生成yolo3所需的2007_train.txt，2007_val.txt，2007_test.txt文件。<br>在 voc_annotation.py 文件中根据你的数据集修改：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classes = [<span class=\"string\">\"holothurian\"</span>, <span class=\"string\">\"scallop\"</span>, <span class=\"string\">\"starfish\"</span>, <span class=\"string\">\"echinus\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>修改yolo3.cfg文件中的参数，可以搜索[yolo]，其共出现三次，每次都按下图修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[convolutional]</span><br><span class=\"line\">size=<span class=\"number\">1</span></span><br><span class=\"line\">stride=<span class=\"number\">1</span></span><br><span class=\"line\">pad=<span class=\"number\">1</span></span><br><span class=\"line\">filters=<span class=\"number\">27</span>  <span class=\"comment\"># 修改为 3*(5+len(classes))</span></span><br><span class=\"line\">activation=linear</span><br><span class=\"line\"></span><br><span class=\"line\">[yolo]</span><br><span class=\"line\">mask = <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\">anchors = <span class=\"number\">10</span>,<span class=\"number\">13</span>,  <span class=\"number\">16</span>,<span class=\"number\">30</span>,  <span class=\"number\">33</span>,<span class=\"number\">23</span>,  <span class=\"number\">30</span>,<span class=\"number\">61</span>,  <span class=\"number\">62</span>,<span class=\"number\">45</span>,  <span class=\"number\">59</span>,<span class=\"number\">119</span>,  <span class=\"number\">116</span>,<span class=\"number\">90</span>,  <span class=\"number\">156</span>,<span class=\"number\">198</span>,  <span class=\"number\">373</span>,<span class=\"number\">326</span></span><br><span class=\"line\">classes=<span class=\"number\">4</span> <span class=\"comment\"># 修改为要识别的类别数量</span></span><br><span class=\"line\">num=<span class=\"number\">9</span></span><br><span class=\"line\">jitter=<span class=\"number\">.3</span></span><br><span class=\"line\">ignore_thresh = <span class=\"number\">.5</span></span><br><span class=\"line\">truth_thresh = <span class=\"number\">1</span></span><br><span class=\"line\">random=<span class=\"number\">0</span> <span class=\"comment\"># 显存小的话改为0</span></span><br></pre></td></tr></table></figure></p>\n<p>修改model_data下的voc_classes.txt为自己训练的类别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">holothurian</span><br><span class=\"line\">scallop</span><br><span class=\"line\">starfish</span><br><span class=\"line\">echinus</span><br></pre></td></tr></table></figure></p>\n<p>创建logs/000/目录，该目录用于存放训练得到的模型。</p>\n<p>训练<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Retrain the YOLO model for your own dataset.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> keras.backend <span class=\"keyword\">as</span> K</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Input, Lambda</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.callbacks <span class=\"keyword\">import</span> TensorBoard, ModelCheckpoint, EarlyStopping</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> yolo3.model <span class=\"keyword\">import</span> preprocess_true_boxes, yolo_body, tiny_yolo_body, yolo_loss</span><br><span class=\"line\"><span class=\"keyword\">from</span> yolo3.utils <span class=\"keyword\">import</span> get_random_data</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    annotation_path = <span class=\"string\">'2007_train.txt'</span></span><br><span class=\"line\">    log_dir = <span class=\"string\">'logs/000/'</span></span><br><span class=\"line\">    classes_path = <span class=\"string\">'model_data/voc_classes.txt'</span></span><br><span class=\"line\">    anchors_path = <span class=\"string\">'model_data/yolo_anchors.txt'</span></span><br><span class=\"line\">    class_names = get_classes(classes_path)</span><br><span class=\"line\">    anchors = get_anchors(anchors_path)</span><br><span class=\"line\">    input_shape = (<span class=\"number\">416</span>,<span class=\"number\">416</span>) <span class=\"comment\"># multiple of 32, hw</span></span><br><span class=\"line\">    model = create_model(input_shape, anchors, len(class_names) )</span><br><span class=\"line\">    train(model, annotation_path, input_shape, anchors, len(class_names), log_dir=log_dir)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span><span class=\"params\">(model, annotation_path, input_shape, anchors, num_classes, log_dir=<span class=\"string\">'logs/'</span>)</span>:</span></span><br><span class=\"line\">    model.compile(optimizer=<span class=\"string\">'adam'</span>, loss=&#123;</span><br><span class=\"line\">        <span class=\"string\">'yolo_loss'</span>: <span class=\"keyword\">lambda</span> y_true, y_pred: y_pred&#125;)</span><br><span class=\"line\">    logging = TensorBoard(log_dir=log_dir)</span><br><span class=\"line\">    checkpoint = ModelCheckpoint(log_dir + <span class=\"string\">\"ep&#123;epoch:03d&#125;-loss&#123;loss:.3f&#125;-val_loss&#123;val_loss:.3f&#125;.h5\"</span>,</span><br><span class=\"line\">        monitor=<span class=\"string\">'val_loss'</span>, save_weights_only=<span class=\"literal\">True</span>, save_best_only=<span class=\"literal\">True</span>, period=<span class=\"number\">1</span>)</span><br><span class=\"line\">    batch_size = <span class=\"number\">10</span></span><br><span class=\"line\">    val_split = <span class=\"number\">0.1</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(annotation_path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        lines = f.readlines()</span><br><span class=\"line\">    np.random.shuffle(lines)</span><br><span class=\"line\">    num_val = int(len(lines)*val_split)</span><br><span class=\"line\">    num_train = len(lines) - num_val</span><br><span class=\"line\">    print(<span class=\"string\">'Train on &#123;&#125; samples, val on &#123;&#125; samples, with batch size &#123;&#125;.'</span>.format(num_train, num_val, batch_size))</span><br><span class=\"line\"> </span><br><span class=\"line\">    model.fit_generator(data_generator_wrap(lines[:num_train], batch_size, input_shape, anchors, num_classes),</span><br><span class=\"line\">            steps_per_epoch=max(<span class=\"number\">1</span>, num_train//batch_size),</span><br><span class=\"line\">            validation_data=data_generator_wrap(lines[num_train:], batch_size, input_shape, anchors, num_classes),</span><br><span class=\"line\">            validation_steps=max(<span class=\"number\">1</span>, num_val//batch_size),</span><br><span class=\"line\">            epochs=<span class=\"number\">500</span>,</span><br><span class=\"line\">            initial_epoch=<span class=\"number\">0</span>)</span><br><span class=\"line\">    model.save_weights(log_dir + <span class=\"string\">'trained_weights.h5'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_classes</span><span class=\"params\">(classes_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(classes_path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        class_names = f.readlines()</span><br><span class=\"line\">    class_names = [c.strip() <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> class_names]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> class_names</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_anchors</span><span class=\"params\">(anchors_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(anchors_path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        anchors = f.readline()</span><br><span class=\"line\">    anchors = [float(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> anchors.split(<span class=\"string\">','</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.array(anchors).reshape(<span class=\"number\">-1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_model</span><span class=\"params\">(input_shape, anchors, num_classes, load_pretrained=False, freeze_body=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            weights_path=<span class=\"string\">'model_data/yolo_weights.h5'</span>)</span>:</span></span><br><span class=\"line\">    K.clear_session() <span class=\"comment\"># get a new session</span></span><br><span class=\"line\">    image_input = Input(shape=(<span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">    h, w = input_shape</span><br><span class=\"line\">    num_anchors = len(anchors)</span><br><span class=\"line\">    y_true = [Input(shape=(h//&#123;<span class=\"number\">0</span>:<span class=\"number\">32</span>, <span class=\"number\">1</span>:<span class=\"number\">16</span>, <span class=\"number\">2</span>:<span class=\"number\">8</span>&#125;[l], w//&#123;<span class=\"number\">0</span>:<span class=\"number\">32</span>, <span class=\"number\">1</span>:<span class=\"number\">16</span>, <span class=\"number\">2</span>:<span class=\"number\">8</span>&#125;[l], \\</span><br><span class=\"line\">        num_anchors//<span class=\"number\">3</span>, num_classes+<span class=\"number\">5</span>)) <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>)]</span><br><span class=\"line\"> </span><br><span class=\"line\">    model_body = yolo_body(image_input, num_anchors//<span class=\"number\">3</span>, num_classes)</span><br><span class=\"line\">    print(<span class=\"string\">'Create YOLOv3 model with &#123;&#125; anchors and &#123;&#125; classes.'</span>.format(num_anchors, num_classes))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> load_pretrained:</span><br><span class=\"line\">        model_body.load_weights(weights_path, by_name=<span class=\"literal\">True</span>, skip_mismatch=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'Load weights &#123;&#125;.'</span>.format(weights_path))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> freeze_body:</span><br><span class=\"line\">            <span class=\"comment\"># Do not freeze 3 output layers.</span></span><br><span class=\"line\">            num = len(model_body.layers)<span class=\"number\">-7</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num): model_body.layers[i].trainable = <span class=\"literal\">False</span></span><br><span class=\"line\">            print(<span class=\"string\">'Freeze the first &#123;&#125; layers of total &#123;&#125; layers.'</span>.format(num, len(model_body.layers)))</span><br><span class=\"line\"> </span><br><span class=\"line\">    model_loss = Lambda(yolo_loss, output_shape=(<span class=\"number\">1</span>,), name=<span class=\"string\">'yolo_loss'</span>,</span><br><span class=\"line\">        arguments=&#123;<span class=\"string\">'anchors'</span>: anchors, <span class=\"string\">'num_classes'</span>: num_classes, <span class=\"string\">'ignore_thresh'</span>: <span class=\"number\">0.5</span>&#125;)(</span><br><span class=\"line\">        [*model_body.output, *y_true])</span><br><span class=\"line\">    model = Model([model_body.input, *y_true], model_loss)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> model</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_generator</span><span class=\"params\">(annotation_lines, batch_size, input_shape, anchors, num_classes)</span>:</span></span><br><span class=\"line\">    n = len(annotation_lines)</span><br><span class=\"line\">    np.random.shuffle(annotation_lines)</span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        image_data = []</span><br><span class=\"line\">        box_data = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> range(batch_size):</span><br><span class=\"line\">            i %= n</span><br><span class=\"line\">            image, box = get_random_data(annotation_lines[i], input_shape, random=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            image_data.append(image)</span><br><span class=\"line\">            box_data.append(box)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        image_data = np.array(image_data)</span><br><span class=\"line\">        box_data = np.array(box_data)</span><br><span class=\"line\">        y_true = preprocess_true_boxes(box_data, input_shape, anchors, num_classes)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> [image_data, *y_true], np.zeros(batch_size)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_generator_wrap</span><span class=\"params\">(annotation_lines, batch_size, input_shape, anchors, num_classes)</span>:</span></span><br><span class=\"line\">    n = len(annotation_lines)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">0</span> <span class=\"keyword\">or</span> batch_size&lt;=<span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data_generator(annotation_lines, batch_size, input_shape, anchors, num_classes)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>windows10+keras下的yolov3的快速使用及自己数据集的训练 - wangzhwsme的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/u012746060/article/details/81183006\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012746060/article/details/81183006</a></li>\n</ul>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"问题1：运行voc-label时报错-difficult-obj-find-‘difficult’-text-AttributeError-‘NoneType’-object-has-no-…\"><a href=\"#问题1：运行voc-label时报错-difficult-obj-find-‘difficult’-text-AttributeError-‘NoneType’-object-has-no-…\" class=\"headerlink\" title=\"问题1：运行voc_label时报错 difficult = obj.find(‘difficult’).text AttributeError: ‘NoneType’ object has no …\"></a>问题1：运行voc_label时报错 difficult = obj.find(‘difficult’).text AttributeError: ‘NoneType’ object has no …</h3><ul>\n<li>VOC2007_xml格式，属性示例<br><a href=\"https://blog.csdn.net/w5688414/article/details/78489064\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/w5688414/article/details/78489064</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># difficult = obj.find('difficult').text</span></span><br><span class=\"line\">cls = obj.find(<span class=\"string\">'name'</span>).text</span><br><span class=\"line\"><span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> classes: <span class=\"comment\"># or int(difficult)==1:</span></span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"问题2：anchor设置\"><a href=\"#问题2：anchor设置\" class=\"headerlink\" title=\"问题2：anchor设置\"></a>问题2：anchor设置</h2><ul>\n<li>YOLO-v3模型参数anchor设置 - m_buddy的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/m_buddy/article/details/82926024\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/m_buddy/article/details/82926024</a><br>修改相应文件路径，运行根目录下的 kmeans.py 文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) C:\\Users\\Administrator\\Desktop\\keras-yolo3-master&gt;python kmeans.py</span><br><span class=\"line\">K anchors:</span><br><span class=\"line\"> [[ 27  24]</span><br><span class=\"line\"> [ 37  35]</span><br><span class=\"line\"> [ 47  49]</span><br><span class=\"line\"> [ 58  37]</span><br><span class=\"line\"> [ 66  57]</span><br><span class=\"line\"> [ 84  79]</span><br><span class=\"line\"> [131 105]</span><br><span class=\"line\"> [204 164]</span><br><span class=\"line\"> [377 289]]</span><br><span class=\"line\">Accuracy: 76.86%</span><br></pre></td></tr></table></figure>\n</the>"},{"title":"人生苦短，我用python","date":"2019-05-16T15:56:01.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\nLife is short, you need Python \n1989 年，为了打发无所事事的圣诞节假期，Guido 开始写 Python 语言的编译/解释器，Python这个名字来自他所喜欢的电视剧 Monty Python's Flying Circus (一部情景幽默剧)。两年后，Python 第一个版本终于问世。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 迭代器\n迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。\n\n``` python\ni = iter(range(10))\nnext(i)\n```\n我们简单说迭代器就是访问集合元素，迭代器就是有一个next()方法的对象，而不是通过索引来计数的。\n\n### yield\n\n以生产者消费者模式为例\n``` python\ndef consume():\n    while True:\n        # consumr协程等待接受数据\n        number = yield\n        print(\"开始消费\", number)\n\nconsumer = consume()\n# 让初始化状态的协程先执行起来，在yield处停止\nnext(consumer)\n\nfor num in range(100):\n    print(\"开始生产\", num)\n    # 发送数据给consumer协程\n    consumer.send(num)\n```\n当协程执行到yield关键字时，会暂停在那一行，等到主线程调用send方法发送了数据，协程才会接到数据继续执行。但是，yield让协程暂停，和线程的阻塞是有本质区别的。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。因此，协程的开销远远小于线程的开销。  \n\n* 漫画：什么是协程？  \nhttp://www.sohu.com/a/237171690_465221\n\n\n\n\n## test\nQ1: 计算一年的第几天\n``` python\nimport datetime\nres = datetime.date(year, month, day) - datetime.date(year-1, 12, 31)\n```\n\nQ2: 找最小数\n``` python\nalist = list(map(int, input().split()))\nres = min(alist)\n```\n\nQ3: 大于平均值的数的和\n``` python\nres = sum([i for i in alist if i > sum(alist)/len(alist)])\n```\n\nQ4: 数列求和\n``` python\nres = sum([1/(i*2) for i in range(1, n)])\n```\n\n\n\n\n## 云服务器运行Jupyter Notebook\n\n配置云服务器的安全组  \n控制台>轻量应用服务器>服务器列表>Ubuntu>安全>防火墙>添加规则\n\n|应用类型 | 协议 | 端口范围 |\n|:---------|:--------------------|:----------------|\n|自定义 | TCP | 8888/8890 |\n\n安装Jupyter\n``` bash\n$ apt-get update\n$ sudo apt install jupyter-notebook\n$ apt-get install python3-pip\n$ pip3 install --upgrade pip\n$ pip3 install jupyter\n```\n创建Jupyter默认配置文件\n``` bash\n$ jupyter notebook --generate-config\n```\n生成SHA1加密的密钥，保存密钥，如'sha1:XXXXXX'\n``` bash\n$ python\n>>> from notebook.auth import passwd \n>>> passwd()\n```\n设置密钥，修改配置文件\n``` bash\n$ sudo vim ~/.jupyter/jupyter_notebook_config.py\n\n    c.NotebookApp.allow_remote_access = True\n    c.NotebookApp.ip = '*'\n    c.NotebookApp.open_browser = False\n    c.NotebookApp.password = u'sha1:XXXXXX'\n    c.NotebookApp.port = 8888\n```\n启动Jupter notebook\n``` bash\n$ jupyter notebook --ip=0.0.0.0 --no-browser --allow-root\n```\n\n## 一些加速技巧\n\n加速查找  \n``` python\ndata = (i**2+1 for i in range(1000000))\n%%time\nlist_data = list(data)\n4535251 in list_data\n\n%%time\nset_data = set(data)\n4535251 in set_data\n```\n\n加速函数  \n``` python\n%%time\ndef fib(n):\n    return(1 if n in (1,2) else fib(n-1)+fib(n-2))\nfib(30)\n```\n大量重复计算，时间复杂度为$O(2^n)$  \n* 用缓存机制加速递归函数  \n``` python\n%%time\nfrom functools import lru_cache\n@lru_cache(100)\ndef fib(n):\n    return(1 if n in (1,2) else fib(n-1)+fib(n-2))\nfib(30)\n```\n* 用循环机制代替递归函数  \n``` python\n%%time\ndef fib(n):\n    if n in (1,2):\n        return n\n    a, b = 1, 1\n    for i in range(2,n):\n        a, b = b, a+b\n    return b\nfib(30)\n```\n* 使用map代替推导式进行加速  \n``` python \n%%time\nalist = [i**2 for i in range(1000)]\n%%time\nalist = map(lambda x: x**2, range(1000))\n```\n* 使用filter代替推导式进行加速  \n``` python \n%%time\nalist = [i for i in range(1000) if i%7==0]\n%%time\nalist = filter(lambda x: x%7==0, range(1000))\n```\n\n使用np.where代替if  \n``` python\n%%time\nrelu = lambda x:np.where(x>0, x, 0)\narray_b = relu(array_a)\n```\n\n应用多线程加速IO密集型任务  \n应用多进程加速CPU密集型任务  \n\n\n\n\n### \n\n* 03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客  \nhttps://blog.csdn.net/ds19991999/article/details/81275580\n\n\n\n\n\n### numpy\n\n布尔矩阵转0/1矩阵\n``` python\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# 载入数据集\nmnist = input_data.read_data_sets(\"MNIST_data\", one_hot = True) \n\nA =  mnist.train.images[1]\n# 得到布尔矩阵\nB = (A==0)\n# 法1：布尔矩阵转0/1矩阵\nC= B.astype(int)\n# 法2：布尔矩阵转0/1矩阵\nC = B+0\n```\n\n\n## 一些奇淫巧技\n\n*  print 打印带有颜色的信息\n``` python\n# 从colorama中导入init，使显示颜色生效\nfrom colorama import init\ninit(autoreset=True)\n\nprint(esc('0;31;40') + 'Error:'+esc() + 'important')\ndef esc(code=0):\n    return f'\\033[{code}m'\ndef print_color(str='', color='0;37;40'):\n    print(esc(color) + str + esc(), end='')\n\nprint_color('Error:', color='0;31;40')\nprint('important')\n```\n可以设置的参数\n``` txt\n-------------------------------------------\n-------------------------------------------\n字体色     |       背景色     |      颜色描述\n-------------------------------------------\n30        |        40       |       黑色\n31        |        41       |       红色\n32        |        42       |       绿色\n33        |        43       |       黃色\n34        |        44       |       蓝色\n35        |        45       |       紫红色\n36        |        46       |       青蓝色\n37        |        47       |       白色\n-------------------------------------------\n-------------------------------\n显示方式     |      效果\n-------------------------------\n0           |     终端默认设置\n1           |     高亮显示\n4           |     使用下划线\n5           |     闪烁\n7           |     反白显示\n8           |     不可见\n-------------------------------\n\ne.g.\nprint('\\033[1;35;0m字体变色，但无背景色 \\033[0m')  # 有高亮 或者 print('\\033[1;35m字体有色，但无背景色 \\033[0m')\nprint('\\033[1;45m 字体不变色，有背景色 \\033[0m')  # 有高亮\nprint('\\033[1;35;46m 字体有色，且有背景色 \\033[0m')  # 有高亮\nprint('\\033[0;35;46m 字体有色，且有背景色 \\033[0m')  # 无高亮\n```\n\n* 实现一个进度条\n``` python\nfrom time import sleep\n\ndef progress(percent=0, width=30):\n    left = width * percent // 100\n    right = width - left\n    print('\\r[', '#' * left, ' ' * right, ']',\n          f' {percent:.0f}%',\n          sep='', end='', flush=True)\n\nfor i in range(101):\n    progress(i)\n    sleep(0.1)\n```\n\n\n## python3.8 里的一些功能\n\n* f-string里的'='\n``` python\na = 5\nprint(f\"{a=}\")\n```\n\n*  海象运算符:=\n赋值的时候同时可以进行运算\n\n\n\n\n\n## 《Effective Python：编写高质量Python代码的59个有效方法》\n\n本书赞誉\n译者序\n前　　言\n致　　谢\n第1章　用Pythonic方式来思考 1\n第1条：确认自己所用的Python版本 1\n第2条：遵循PEP 8风格指南 3\n第3条：了解bytes、str与unicode的区别 5\n第4条：用辅助函数来取代复杂的表达式 8\n第5条：了解切割序列的办法 10\n第6条：在单次切片操作内，不要同时指定start、end和stride 13\n第7条：用列表推导来取代map和f?ilter 15\n第8条：不要使用含有两个以上表达式的列表推导 16\n第9条：用生成器表达式来改写数据量较大的列表推导 18\n第10条：尽量用enumerate取代range 20\n第11条：用zip函数同时遍历两个迭代器 21\n第12条：不要在for和while循环后面写else块 23\n第13条：合理利用try/except/else/f?inally结构中的每个代码块 25\n第2章　函数 28\n第14条：尽量用异常来表示特殊情况，而不要返回None 28\n第15条：了解如何在闭包里使用外围作用域中的变量 30\n第16条：考虑用生成器来改写直接返回列表的函数 35\n第17条：在参数上面迭代时，要多加小心 37\n第18条：用数量可变的位置参数减少视觉杂讯 41\n第19条：用关键字参数来表达可选的行为 43\n第20条：用None和文档字符串来描述具有动态默认值的参数 46\n第21条：用只能以关键字形式指定的参数来确保代码明晰 49\n第3章　类与继承 53\n第22条：尽量用辅助类来维护程序的状态，而不要用字典和元组 53\n第23条：简单的接口应该接受函数，而不是类的实例 58\n第24条：以@classmethod形式的多态去通用地构建对象 62\n第25条：用super初始化父类 67\n第26条：只在使用Mix-in组件制作工具类时进行多重继承 71\n第27条：多用public属性，少用private属性 75\n第28条：继承collections.abc以实现自定义的容器类型 79\n第4章　元类及属性 84\n第29条：用纯属性取代get和set方法 84\n第30条：考虑用@property来代替属性重构 88\n第31条：用描述符来改写需要复用的@property方法 92\n第32条：用__getattr__、__getattribute__和__setattr__实现按需生成的属性 97\n第33条：用元类来验证子类 102\n第34条：用元类来注册子类 104\n第35条：用元类来注解类的属性 108\n第5章　并发及并行 112\n第36条：用subprocess模块来管理子进程 113\n第37条：可以用线程来执行阻塞式I/O，但不要用它做平行计算 117\n第38条：在线程中使用Lock来防止数据竞争 121\n第39条：用Queue来协调各线程之间的工作 124\n第40条：考虑用协程来并发地运行多个函数 131\n第41条：考虑用concurrent.futures来实现真正的平行计算 141\n第6章　内置模块 145\n第42条：用functools.wraps定义函数修饰器 145\n第43条：考虑以contextlib和with语句来改写可复用的try/f?inally代码 148\n第44条：用copyreg实现可靠的pickle操作 151\n第45条：应该用datetime模块来处理本地时间，而不是用time模块 157\n第46条：使用内置算法与数据结构 161\n第47条：在重视精确度的场合，应该使用decimal 166\n第48条：学会安装由Python开发者社区所构建的模块 168\n第7章　协作开发 170\n第49条：为每个函数、类和模块编写文档字符串 170\n第50条：用包来安排模块，并提供稳固的API 174\n第51条：为自编的模块定义根异常，以便将调用者与API相隔离 179\n第52条：用适当的方式打破循环依赖关系 182\n第53条：用虚拟环境隔离项目，并重建其依赖关系 187\n第8章　部署 193\n第54条：考虑用模块级别的代码来配置不同的部署环境 193\n第55条：通过repr字符串来输出调试信息 195\n第56条：用unittest来测试全部代码 198\n第57条：考虑用pdb实现交互调试 201\n第58条：先分析性能，然后再优化 203\n第59条：用tracemalloc来掌握内存的使用及泄漏情况 208\n\n* 《Effective Python：编写高质量Python代码的59个有效方法》([美]布雷特·斯拉特金)【摘要 书评 试读】- 京东图书  \nhttps://item.jd.com/11864820.html\n\n\n## python数据科学手册\n\n* jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks  \nhttps://github.com/jakevdp/PythonDataScienceHandbook\n","source":"_posts/人生苦短，我用python.md","raw":"---\ntitle: 人生苦短，我用python\ndate: 2019-05-16 23:56:01\ntags:\n  - python\n  - jupyter notebook\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\nLife is short, you need Python \n1989 年，为了打发无所事事的圣诞节假期，Guido 开始写 Python 语言的编译/解释器，Python这个名字来自他所喜欢的电视剧 Monty Python's Flying Circus (一部情景幽默剧)。两年后，Python 第一个版本终于问世。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 迭代器\n迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。\n\n``` python\ni = iter(range(10))\nnext(i)\n```\n我们简单说迭代器就是访问集合元素，迭代器就是有一个next()方法的对象，而不是通过索引来计数的。\n\n### yield\n\n以生产者消费者模式为例\n``` python\ndef consume():\n    while True:\n        # consumr协程等待接受数据\n        number = yield\n        print(\"开始消费\", number)\n\nconsumer = consume()\n# 让初始化状态的协程先执行起来，在yield处停止\nnext(consumer)\n\nfor num in range(100):\n    print(\"开始生产\", num)\n    # 发送数据给consumer协程\n    consumer.send(num)\n```\n当协程执行到yield关键字时，会暂停在那一行，等到主线程调用send方法发送了数据，协程才会接到数据继续执行。但是，yield让协程暂停，和线程的阻塞是有本质区别的。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。因此，协程的开销远远小于线程的开销。  \n\n* 漫画：什么是协程？  \nhttp://www.sohu.com/a/237171690_465221\n\n\n\n\n## test\nQ1: 计算一年的第几天\n``` python\nimport datetime\nres = datetime.date(year, month, day) - datetime.date(year-1, 12, 31)\n```\n\nQ2: 找最小数\n``` python\nalist = list(map(int, input().split()))\nres = min(alist)\n```\n\nQ3: 大于平均值的数的和\n``` python\nres = sum([i for i in alist if i > sum(alist)/len(alist)])\n```\n\nQ4: 数列求和\n``` python\nres = sum([1/(i*2) for i in range(1, n)])\n```\n\n\n\n\n## 云服务器运行Jupyter Notebook\n\n配置云服务器的安全组  \n控制台>轻量应用服务器>服务器列表>Ubuntu>安全>防火墙>添加规则\n\n|应用类型 | 协议 | 端口范围 |\n|:---------|:--------------------|:----------------|\n|自定义 | TCP | 8888/8890 |\n\n安装Jupyter\n``` bash\n$ apt-get update\n$ sudo apt install jupyter-notebook\n$ apt-get install python3-pip\n$ pip3 install --upgrade pip\n$ pip3 install jupyter\n```\n创建Jupyter默认配置文件\n``` bash\n$ jupyter notebook --generate-config\n```\n生成SHA1加密的密钥，保存密钥，如'sha1:XXXXXX'\n``` bash\n$ python\n>>> from notebook.auth import passwd \n>>> passwd()\n```\n设置密钥，修改配置文件\n``` bash\n$ sudo vim ~/.jupyter/jupyter_notebook_config.py\n\n    c.NotebookApp.allow_remote_access = True\n    c.NotebookApp.ip = '*'\n    c.NotebookApp.open_browser = False\n    c.NotebookApp.password = u'sha1:XXXXXX'\n    c.NotebookApp.port = 8888\n```\n启动Jupter notebook\n``` bash\n$ jupyter notebook --ip=0.0.0.0 --no-browser --allow-root\n```\n\n## 一些加速技巧\n\n加速查找  \n``` python\ndata = (i**2+1 for i in range(1000000))\n%%time\nlist_data = list(data)\n4535251 in list_data\n\n%%time\nset_data = set(data)\n4535251 in set_data\n```\n\n加速函数  \n``` python\n%%time\ndef fib(n):\n    return(1 if n in (1,2) else fib(n-1)+fib(n-2))\nfib(30)\n```\n大量重复计算，时间复杂度为$O(2^n)$  \n* 用缓存机制加速递归函数  \n``` python\n%%time\nfrom functools import lru_cache\n@lru_cache(100)\ndef fib(n):\n    return(1 if n in (1,2) else fib(n-1)+fib(n-2))\nfib(30)\n```\n* 用循环机制代替递归函数  \n``` python\n%%time\ndef fib(n):\n    if n in (1,2):\n        return n\n    a, b = 1, 1\n    for i in range(2,n):\n        a, b = b, a+b\n    return b\nfib(30)\n```\n* 使用map代替推导式进行加速  \n``` python \n%%time\nalist = [i**2 for i in range(1000)]\n%%time\nalist = map(lambda x: x**2, range(1000))\n```\n* 使用filter代替推导式进行加速  \n``` python \n%%time\nalist = [i for i in range(1000) if i%7==0]\n%%time\nalist = filter(lambda x: x%7==0, range(1000))\n```\n\n使用np.where代替if  \n``` python\n%%time\nrelu = lambda x:np.where(x>0, x, 0)\narray_b = relu(array_a)\n```\n\n应用多线程加速IO密集型任务  \n应用多进程加速CPU密集型任务  \n\n\n\n\n### \n\n* 03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客  \nhttps://blog.csdn.net/ds19991999/article/details/81275580\n\n\n\n\n\n### numpy\n\n布尔矩阵转0/1矩阵\n``` python\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# 载入数据集\nmnist = input_data.read_data_sets(\"MNIST_data\", one_hot = True) \n\nA =  mnist.train.images[1]\n# 得到布尔矩阵\nB = (A==0)\n# 法1：布尔矩阵转0/1矩阵\nC= B.astype(int)\n# 法2：布尔矩阵转0/1矩阵\nC = B+0\n```\n\n\n## 一些奇淫巧技\n\n*  print 打印带有颜色的信息\n``` python\n# 从colorama中导入init，使显示颜色生效\nfrom colorama import init\ninit(autoreset=True)\n\nprint(esc('0;31;40') + 'Error:'+esc() + 'important')\ndef esc(code=0):\n    return f'\\033[{code}m'\ndef print_color(str='', color='0;37;40'):\n    print(esc(color) + str + esc(), end='')\n\nprint_color('Error:', color='0;31;40')\nprint('important')\n```\n可以设置的参数\n``` txt\n-------------------------------------------\n-------------------------------------------\n字体色     |       背景色     |      颜色描述\n-------------------------------------------\n30        |        40       |       黑色\n31        |        41       |       红色\n32        |        42       |       绿色\n33        |        43       |       黃色\n34        |        44       |       蓝色\n35        |        45       |       紫红色\n36        |        46       |       青蓝色\n37        |        47       |       白色\n-------------------------------------------\n-------------------------------\n显示方式     |      效果\n-------------------------------\n0           |     终端默认设置\n1           |     高亮显示\n4           |     使用下划线\n5           |     闪烁\n7           |     反白显示\n8           |     不可见\n-------------------------------\n\ne.g.\nprint('\\033[1;35;0m字体变色，但无背景色 \\033[0m')  # 有高亮 或者 print('\\033[1;35m字体有色，但无背景色 \\033[0m')\nprint('\\033[1;45m 字体不变色，有背景色 \\033[0m')  # 有高亮\nprint('\\033[1;35;46m 字体有色，且有背景色 \\033[0m')  # 有高亮\nprint('\\033[0;35;46m 字体有色，且有背景色 \\033[0m')  # 无高亮\n```\n\n* 实现一个进度条\n``` python\nfrom time import sleep\n\ndef progress(percent=0, width=30):\n    left = width * percent // 100\n    right = width - left\n    print('\\r[', '#' * left, ' ' * right, ']',\n          f' {percent:.0f}%',\n          sep='', end='', flush=True)\n\nfor i in range(101):\n    progress(i)\n    sleep(0.1)\n```\n\n\n## python3.8 里的一些功能\n\n* f-string里的'='\n``` python\na = 5\nprint(f\"{a=}\")\n```\n\n*  海象运算符:=\n赋值的时候同时可以进行运算\n\n\n\n\n\n## 《Effective Python：编写高质量Python代码的59个有效方法》\n\n本书赞誉\n译者序\n前　　言\n致　　谢\n第1章　用Pythonic方式来思考 1\n第1条：确认自己所用的Python版本 1\n第2条：遵循PEP 8风格指南 3\n第3条：了解bytes、str与unicode的区别 5\n第4条：用辅助函数来取代复杂的表达式 8\n第5条：了解切割序列的办法 10\n第6条：在单次切片操作内，不要同时指定start、end和stride 13\n第7条：用列表推导来取代map和f?ilter 15\n第8条：不要使用含有两个以上表达式的列表推导 16\n第9条：用生成器表达式来改写数据量较大的列表推导 18\n第10条：尽量用enumerate取代range 20\n第11条：用zip函数同时遍历两个迭代器 21\n第12条：不要在for和while循环后面写else块 23\n第13条：合理利用try/except/else/f?inally结构中的每个代码块 25\n第2章　函数 28\n第14条：尽量用异常来表示特殊情况，而不要返回None 28\n第15条：了解如何在闭包里使用外围作用域中的变量 30\n第16条：考虑用生成器来改写直接返回列表的函数 35\n第17条：在参数上面迭代时，要多加小心 37\n第18条：用数量可变的位置参数减少视觉杂讯 41\n第19条：用关键字参数来表达可选的行为 43\n第20条：用None和文档字符串来描述具有动态默认值的参数 46\n第21条：用只能以关键字形式指定的参数来确保代码明晰 49\n第3章　类与继承 53\n第22条：尽量用辅助类来维护程序的状态，而不要用字典和元组 53\n第23条：简单的接口应该接受函数，而不是类的实例 58\n第24条：以@classmethod形式的多态去通用地构建对象 62\n第25条：用super初始化父类 67\n第26条：只在使用Mix-in组件制作工具类时进行多重继承 71\n第27条：多用public属性，少用private属性 75\n第28条：继承collections.abc以实现自定义的容器类型 79\n第4章　元类及属性 84\n第29条：用纯属性取代get和set方法 84\n第30条：考虑用@property来代替属性重构 88\n第31条：用描述符来改写需要复用的@property方法 92\n第32条：用__getattr__、__getattribute__和__setattr__实现按需生成的属性 97\n第33条：用元类来验证子类 102\n第34条：用元类来注册子类 104\n第35条：用元类来注解类的属性 108\n第5章　并发及并行 112\n第36条：用subprocess模块来管理子进程 113\n第37条：可以用线程来执行阻塞式I/O，但不要用它做平行计算 117\n第38条：在线程中使用Lock来防止数据竞争 121\n第39条：用Queue来协调各线程之间的工作 124\n第40条：考虑用协程来并发地运行多个函数 131\n第41条：考虑用concurrent.futures来实现真正的平行计算 141\n第6章　内置模块 145\n第42条：用functools.wraps定义函数修饰器 145\n第43条：考虑以contextlib和with语句来改写可复用的try/f?inally代码 148\n第44条：用copyreg实现可靠的pickle操作 151\n第45条：应该用datetime模块来处理本地时间，而不是用time模块 157\n第46条：使用内置算法与数据结构 161\n第47条：在重视精确度的场合，应该使用decimal 166\n第48条：学会安装由Python开发者社区所构建的模块 168\n第7章　协作开发 170\n第49条：为每个函数、类和模块编写文档字符串 170\n第50条：用包来安排模块，并提供稳固的API 174\n第51条：为自编的模块定义根异常，以便将调用者与API相隔离 179\n第52条：用适当的方式打破循环依赖关系 182\n第53条：用虚拟环境隔离项目，并重建其依赖关系 187\n第8章　部署 193\n第54条：考虑用模块级别的代码来配置不同的部署环境 193\n第55条：通过repr字符串来输出调试信息 195\n第56条：用unittest来测试全部代码 198\n第57条：考虑用pdb实现交互调试 201\n第58条：先分析性能，然后再优化 203\n第59条：用tracemalloc来掌握内存的使用及泄漏情况 208\n\n* 《Effective Python：编写高质量Python代码的59个有效方法》([美]布雷特·斯拉特金)【摘要 书评 试读】- 京东图书  \nhttps://item.jd.com/11864820.html\n\n\n## python数据科学手册\n\n* jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks  \nhttps://github.com/jakevdp/PythonDataScienceHandbook\n","slug":"人生苦短，我用python","published":1,"updated":"2020-01-05T19:13:24.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50b4005y4cvjli0t6p4n","content":"<p><strong> 人生苦短，我用python </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>Life is short, you need Python<br>1989 年，为了打发无所事事的圣诞节假期，Guido 开始写 Python 语言的编译/解释器，Python这个名字来自他所喜欢的电视剧 Monty Python’s Flying Circus (一部情景幽默剧)。两年后，Python 第一个版本终于问世。</p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = iter(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">next(i)</span><br></pre></td></tr></table></figure>\n<p>我们简单说迭代器就是访问集合元素，迭代器就是有一个next()方法的对象，而不是通过索引来计数的。</p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p>以生产者消费者模式为例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consume</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># consumr协程等待接受数据</span></span><br><span class=\"line\">        number = <span class=\"keyword\">yield</span></span><br><span class=\"line\">        print(<span class=\"string\">\"开始消费\"</span>, number)</span><br><span class=\"line\"></span><br><span class=\"line\">consumer = consume()</span><br><span class=\"line\"><span class=\"comment\"># 让初始化状态的协程先执行起来，在yield处停止</span></span><br><span class=\"line\">next(consumer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"开始生产\"</span>, num)</span><br><span class=\"line\">    <span class=\"comment\"># 发送数据给consumer协程</span></span><br><span class=\"line\">    consumer.send(num)</span><br></pre></td></tr></table></figure></p>\n<p>当协程执行到yield关键字时，会暂停在那一行，等到主线程调用send方法发送了数据，协程才会接到数据继续执行。但是，yield让协程暂停，和线程的阻塞是有本质区别的。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。因此，协程的开销远远小于线程的开销。  </p>\n<ul>\n<li>漫画：什么是协程？<br><a href=\"http://www.sohu.com/a/237171690_465221\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/237171690_465221</a></li>\n</ul>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>Q1: 计算一年的第几天<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">res = datetime.date(year, month, day) - datetime.date(year<span class=\"number\">-1</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Q2: 找最小数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alist = list(map(int, input().split()))</span><br><span class=\"line\">res = min(alist)</span><br></pre></td></tr></table></figure></p>\n<p>Q3: 大于平均值的数的和<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = sum([i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> alist <span class=\"keyword\">if</span> i &gt; sum(alist)/len(alist)])</span><br></pre></td></tr></table></figure></p>\n<p>Q4: 数列求和<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = sum([<span class=\"number\">1</span>/(i*<span class=\"number\">2</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n)])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"云服务器运行Jupyter-Notebook\"><a href=\"#云服务器运行Jupyter-Notebook\" class=\"headerlink\" title=\"云服务器运行Jupyter Notebook\"></a>云服务器运行Jupyter Notebook</h2><p>配置云服务器的安全组<br>控制台&gt;轻量应用服务器&gt;服务器列表&gt;Ubuntu&gt;安全&gt;防火墙&gt;添加规则</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">应用类型</th>\n<th style=\"text-align:left\">协议</th>\n<th style=\"text-align:left\">端口范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">自定义</td>\n<td style=\"text-align:left\">TCP</td>\n<td style=\"text-align:left\">8888/8890</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>安装Jupyter<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update</span><br><span class=\"line\">$ sudo apt install jupyter-notebook</span><br><span class=\"line\">$ apt-get install python3-pip</span><br><span class=\"line\">$ pip3 install --upgrade pip</span><br><span class=\"line\">$ pip3 install jupyter</span><br></pre></td></tr></table></figure></p>\n<p>创建Jupyter默认配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jupyter notebook --generate-config</span><br></pre></td></tr></table></figure></p>\n<p>生成SHA1加密的密钥，保存密钥，如’sha1:XXXXXX’<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python</span><br><span class=\"line\">&gt;&gt;&gt; from notebook.auth import passwd </span><br><span class=\"line\">&gt;&gt;&gt; passwd()</span><br></pre></td></tr></table></figure></p>\n<p>设置密钥，修改配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim ~/.jupyter/jupyter_notebook_config.py</span><br><span class=\"line\"></span><br><span class=\"line\">    c.NotebookApp.allow_remote_access = True</span><br><span class=\"line\">    c.NotebookApp.ip = <span class=\"string\">'*'</span></span><br><span class=\"line\">    c.NotebookApp.open_browser = False</span><br><span class=\"line\">    c.NotebookApp.password = u<span class=\"string\">'sha1:XXXXXX'</span></span><br><span class=\"line\">    c.NotebookApp.port = 8888</span><br></pre></td></tr></table></figure></p>\n<p>启动Jupter notebook<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些加速技巧\"><a href=\"#一些加速技巧\" class=\"headerlink\" title=\"一些加速技巧\"></a>一些加速技巧</h2><p>加速查找<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = (i**<span class=\"number\">2</span>+<span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000000</span>))</span><br><span class=\"line\">%%time</span><br><span class=\"line\">list_data = list(data)</span><br><span class=\"line\"><span class=\"number\">4535251</span> <span class=\"keyword\">in</span> list_data</span><br><span class=\"line\"></span><br><span class=\"line\">%%time</span><br><span class=\"line\">set_data = set(data)</span><br><span class=\"line\"><span class=\"number\">4535251</span> <span class=\"keyword\">in</span> set_data</span><br></pre></td></tr></table></figure></p>\n<p>加速函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">1</span> <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"keyword\">else</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>))</span><br><span class=\"line\">fib(<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure></p>\n<p>大量重复计算，时间复杂度为$O(2^n)$  </p>\n<ul>\n<li><p>用缓存机制加速递归函数  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> lru_cache</span><br><span class=\"line\"><span class=\"meta\">@lru_cache(100)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">1</span> <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"keyword\">else</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>))</span><br><span class=\"line\">fib(<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用循环机制代替递归函数  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    a, b = <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,n):</span><br><span class=\"line\">        a, b = b, a+b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">fib(<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用map代替推导式进行加速  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\">alist = [i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>)]</span><br><span class=\"line\">%%time</span><br><span class=\"line\">alist = map(<span class=\"keyword\">lambda</span> x: x**<span class=\"number\">2</span>, range(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用filter代替推导式进行加速  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\">alist = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>) <span class=\"keyword\">if</span> i%<span class=\"number\">7</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\">%%time</span><br><span class=\"line\">alist = filter(<span class=\"keyword\">lambda</span> x: x%<span class=\"number\">7</span>==<span class=\"number\">0</span>, range(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用np.where代替if<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\">relu = <span class=\"keyword\">lambda</span> x:np.where(x&gt;<span class=\"number\">0</span>, x, <span class=\"number\">0</span>)</span><br><span class=\"line\">array_b = relu(array_a)</span><br></pre></td></tr></table></figure></p>\n<p>应用多线程加速IO密集型任务<br>应用多进程加速CPU密集型任务  </p>\n<h3 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h3><ul>\n<li>03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/ds19991999/article/details/81275580\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ds19991999/article/details/81275580</a></li>\n</ul>\n<h3 id=\"numpy\"><a href=\"#numpy\" class=\"headerlink\" title=\"numpy\"></a>numpy</h3><p>布尔矩阵转0/1矩阵<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.examples.tutorials.mnist <span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 载入数据集</span></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">\"MNIST_data\"</span>, one_hot = <span class=\"literal\">True</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">A =  mnist.train.images[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># 得到布尔矩阵</span></span><br><span class=\"line\">B = (A==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># 法1：布尔矩阵转0/1矩阵</span></span><br><span class=\"line\">C= B.astype(int)</span><br><span class=\"line\"><span class=\"comment\"># 法2：布尔矩阵转0/1矩阵</span></span><br><span class=\"line\">C = B+<span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些奇淫巧技\"><a href=\"#一些奇淫巧技\" class=\"headerlink\" title=\"一些奇淫巧技\"></a>一些奇淫巧技</h2><ul>\n<li>print 打印带有颜色的信息<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从colorama中导入init，使显示颜色生效</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> colorama <span class=\"keyword\">import</span> init</span><br><span class=\"line\">init(autoreset=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(esc(<span class=\"string\">'0;31;40'</span>) + <span class=\"string\">'Error:'</span>+esc() + <span class=\"string\">'important'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">esc</span><span class=\"params\">(code=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f'\\033[<span class=\"subst\">&#123;code&#125;</span>m'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_color</span><span class=\"params\">(str=<span class=\"string\">''</span>, color=<span class=\"string\">'0;37;40'</span>)</span>:</span></span><br><span class=\"line\">    print(esc(color) + str + esc(), end=<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print_color(<span class=\"string\">'Error:'</span>, color=<span class=\"string\">'0;31;40'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'important'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可以设置的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">字体色     |       背景色     |      颜色描述</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">30        |        40       |       黑色</span><br><span class=\"line\">31        |        41       |       红色</span><br><span class=\"line\">32        |        42       |       绿色</span><br><span class=\"line\">33        |        43       |       黃色</span><br><span class=\"line\">34        |        44       |       蓝色</span><br><span class=\"line\">35        |        45       |       紫红色</span><br><span class=\"line\">36        |        46       |       青蓝色</span><br><span class=\"line\">37        |        47       |       白色</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\">显示方式     |      效果</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\">0           |     终端默认设置</span><br><span class=\"line\">1           |     高亮显示</span><br><span class=\"line\">4           |     使用下划线</span><br><span class=\"line\">5           |     闪烁</span><br><span class=\"line\">7           |     反白显示</span><br><span class=\"line\">8           |     不可见</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">e.g.</span><br><span class=\"line\">print(&apos;\\033[1;35;0m字体变色，但无背景色 \\033[0m&apos;)  # 有高亮 或者 print(&apos;\\033[1;35m字体有色，但无背景色 \\033[0m&apos;)</span><br><span class=\"line\">print(&apos;\\033[1;45m 字体不变色，有背景色 \\033[0m&apos;)  # 有高亮</span><br><span class=\"line\">print(&apos;\\033[1;35;46m 字体有色，且有背景色 \\033[0m&apos;)  # 有高亮</span><br><span class=\"line\">print(&apos;\\033[0;35;46m 字体有色，且有背景色 \\033[0m&apos;)  # 无高亮</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>实现一个进度条<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">progress</span><span class=\"params\">(percent=<span class=\"number\">0</span>, width=<span class=\"number\">30</span>)</span>:</span></span><br><span class=\"line\">    left = width * percent // <span class=\"number\">100</span></span><br><span class=\"line\">    right = width - left</span><br><span class=\"line\">    print(<span class=\"string\">'\\r['</span>, <span class=\"string\">'#'</span> * left, <span class=\"string\">' '</span> * right, <span class=\"string\">']'</span>,</span><br><span class=\"line\">          <span class=\"string\">f' <span class=\"subst\">&#123;percent:<span class=\"number\">.0</span>f&#125;</span>%'</span>,</span><br><span class=\"line\">          sep=<span class=\"string\">''</span>, end=<span class=\"string\">''</span>, flush=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>):</span><br><span class=\"line\">    progress(i)</span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"python3-8-里的一些功能\"><a href=\"#python3-8-里的一些功能\" class=\"headerlink\" title=\"python3.8 里的一些功能\"></a>python3.8 里的一些功能</h2><ul>\n<li><p>f-string里的’=’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\">print(<span class=\"string\">f\"<span class=\"subst\">&#123;a=&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>海象运算符:=<br>赋值的时候同时可以进行运算</p>\n</li>\n</ul>\n<h2 id=\"《Effective-Python：编写高质量Python代码的59个有效方法》\"><a href=\"#《Effective-Python：编写高质量Python代码的59个有效方法》\" class=\"headerlink\" title=\"《Effective Python：编写高质量Python代码的59个有效方法》\"></a>《Effective Python：编写高质量Python代码的59个有效方法》</h2><p>本书赞誉<br>译者序<br>前　　言<br>致　　谢<br>第1章　用Pythonic方式来思考 1<br>第1条：确认自己所用的Python版本 1<br>第2条：遵循PEP 8风格指南 3<br>第3条：了解bytes、str与unicode的区别 5<br>第4条：用辅助函数来取代复杂的表达式 8<br>第5条：了解切割序列的办法 10<br>第6条：在单次切片操作内，不要同时指定start、end和stride 13<br>第7条：用列表推导来取代map和f?ilter 15<br>第8条：不要使用含有两个以上表达式的列表推导 16<br>第9条：用生成器表达式来改写数据量较大的列表推导 18<br>第10条：尽量用enumerate取代range 20<br>第11条：用zip函数同时遍历两个迭代器 21<br>第12条：不要在for和while循环后面写else块 23<br>第13条：合理利用try/except/else/f?inally结构中的每个代码块 25<br>第2章　函数 28<br>第14条：尽量用异常来表示特殊情况，而不要返回None 28<br>第15条：了解如何在闭包里使用外围作用域中的变量 30<br>第16条：考虑用生成器来改写直接返回列表的函数 35<br>第17条：在参数上面迭代时，要多加小心 37<br>第18条：用数量可变的位置参数减少视觉杂讯 41<br>第19条：用关键字参数来表达可选的行为 43<br>第20条：用None和文档字符串来描述具有动态默认值的参数 46<br>第21条：用只能以关键字形式指定的参数来确保代码明晰 49<br>第3章　类与继承 53<br>第22条：尽量用辅助类来维护程序的状态，而不要用字典和元组 53<br>第23条：简单的接口应该接受函数，而不是类的实例 58<br>第24条：以@classmethod形式的多态去通用地构建对象 62<br>第25条：用super初始化父类 67<br>第26条：只在使用Mix-in组件制作工具类时进行多重继承 71<br>第27条：多用public属性，少用private属性 75<br>第28条：继承collections.abc以实现自定义的容器类型 79<br>第4章　元类及属性 84<br>第29条：用纯属性取代get和set方法 84<br>第30条：考虑用@property来代替属性重构 88<br>第31条：用描述符来改写需要复用的@property方法 92<br>第32条：用<strong>getattr</strong>、<strong>getattribute</strong>和<strong>setattr</strong>实现按需生成的属性 97<br>第33条：用元类来验证子类 102<br>第34条：用元类来注册子类 104<br>第35条：用元类来注解类的属性 108<br>第5章　并发及并行 112<br>第36条：用subprocess模块来管理子进程 113<br>第37条：可以用线程来执行阻塞式I/O，但不要用它做平行计算 117<br>第38条：在线程中使用Lock来防止数据竞争 121<br>第39条：用Queue来协调各线程之间的工作 124<br>第40条：考虑用协程来并发地运行多个函数 131<br>第41条：考虑用concurrent.futures来实现真正的平行计算 141<br>第6章　内置模块 145<br>第42条：用functools.wraps定义函数修饰器 145<br>第43条：考虑以contextlib和with语句来改写可复用的try/f?inally代码 148<br>第44条：用copyreg实现可靠的pickle操作 151<br>第45条：应该用datetime模块来处理本地时间，而不是用time模块 157<br>第46条：使用内置算法与数据结构 161<br>第47条：在重视精确度的场合，应该使用decimal 166<br>第48条：学会安装由Python开发者社区所构建的模块 168<br>第7章　协作开发 170<br>第49条：为每个函数、类和模块编写文档字符串 170<br>第50条：用包来安排模块，并提供稳固的API 174<br>第51条：为自编的模块定义根异常，以便将调用者与API相隔离 179<br>第52条：用适当的方式打破循环依赖关系 182<br>第53条：用虚拟环境隔离项目，并重建其依赖关系 187<br>第8章　部署 193<br>第54条：考虑用模块级别的代码来配置不同的部署环境 193<br>第55条：通过repr字符串来输出调试信息 195<br>第56条：用unittest来测试全部代码 198<br>第57条：考虑用pdb实现交互调试 201<br>第58条：先分析性能，然后再优化 203<br>第59条：用tracemalloc来掌握内存的使用及泄漏情况 208</p>\n<ul>\n<li>《Effective Python：编写高质量Python代码的59个有效方法》([美]布雷特·斯拉特金)【摘要 书评 试读】- 京东图书<br><a href=\"https://item.jd.com/11864820.html\" target=\"_blank\" rel=\"noopener\">https://item.jd.com/11864820.html</a></li>\n</ul>\n<h2 id=\"python数据科学手册\"><a href=\"#python数据科学手册\" class=\"headerlink\" title=\"python数据科学手册\"></a>python数据科学手册</h2><ul>\n<li>jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks<br><a href=\"https://github.com/jakevdp/PythonDataScienceHandbook\" target=\"_blank\" rel=\"noopener\">https://github.com/jakevdp/PythonDataScienceHandbook</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 人生苦短，我用python </strong> <excerpt in index | 首页摘要></excerpt></p>\n<p>Life is short, you need Python<br>1989 年，为了打发无所事事的圣诞节假期，Guido 开始写 Python 语言的编译/解释器，Python这个名字来自他所喜欢的电视剧 Monty Python’s Flying Circus (一部情景幽默剧)。两年后，Python 第一个版本终于问世。</p>","more":"<the rest of contents | 余下全文>\n\n\n\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = iter(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">next(i)</span><br></pre></td></tr></table></figure>\n<p>我们简单说迭代器就是访问集合元素，迭代器就是有一个next()方法的对象，而不是通过索引来计数的。</p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p>以生产者消费者模式为例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consume</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># consumr协程等待接受数据</span></span><br><span class=\"line\">        number = <span class=\"keyword\">yield</span></span><br><span class=\"line\">        print(<span class=\"string\">\"开始消费\"</span>, number)</span><br><span class=\"line\"></span><br><span class=\"line\">consumer = consume()</span><br><span class=\"line\"><span class=\"comment\"># 让初始化状态的协程先执行起来，在yield处停止</span></span><br><span class=\"line\">next(consumer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"开始生产\"</span>, num)</span><br><span class=\"line\">    <span class=\"comment\"># 发送数据给consumer协程</span></span><br><span class=\"line\">    consumer.send(num)</span><br></pre></td></tr></table></figure></p>\n<p>当协程执行到yield关键字时，会暂停在那一行，等到主线程调用send方法发送了数据，协程才会接到数据继续执行。但是，yield让协程暂停，和线程的阻塞是有本质区别的。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。因此，协程的开销远远小于线程的开销。  </p>\n<ul>\n<li>漫画：什么是协程？<br><a href=\"http://www.sohu.com/a/237171690_465221\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/237171690_465221</a></li>\n</ul>\n<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>Q1: 计算一年的第几天<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">res = datetime.date(year, month, day) - datetime.date(year<span class=\"number\">-1</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Q2: 找最小数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alist = list(map(int, input().split()))</span><br><span class=\"line\">res = min(alist)</span><br></pre></td></tr></table></figure></p>\n<p>Q3: 大于平均值的数的和<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = sum([i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> alist <span class=\"keyword\">if</span> i &gt; sum(alist)/len(alist)])</span><br></pre></td></tr></table></figure></p>\n<p>Q4: 数列求和<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = sum([<span class=\"number\">1</span>/(i*<span class=\"number\">2</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n)])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"云服务器运行Jupyter-Notebook\"><a href=\"#云服务器运行Jupyter-Notebook\" class=\"headerlink\" title=\"云服务器运行Jupyter Notebook\"></a>云服务器运行Jupyter Notebook</h2><p>配置云服务器的安全组<br>控制台&gt;轻量应用服务器&gt;服务器列表&gt;Ubuntu&gt;安全&gt;防火墙&gt;添加规则</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">应用类型</th>\n<th style=\"text-align:left\">协议</th>\n<th style=\"text-align:left\">端口范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">自定义</td>\n<td style=\"text-align:left\">TCP</td>\n<td style=\"text-align:left\">8888/8890</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>安装Jupyter<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update</span><br><span class=\"line\">$ sudo apt install jupyter-notebook</span><br><span class=\"line\">$ apt-get install python3-pip</span><br><span class=\"line\">$ pip3 install --upgrade pip</span><br><span class=\"line\">$ pip3 install jupyter</span><br></pre></td></tr></table></figure></p>\n<p>创建Jupyter默认配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jupyter notebook --generate-config</span><br></pre></td></tr></table></figure></p>\n<p>生成SHA1加密的密钥，保存密钥，如’sha1:XXXXXX’<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python</span><br><span class=\"line\">&gt;&gt;&gt; from notebook.auth import passwd </span><br><span class=\"line\">&gt;&gt;&gt; passwd()</span><br></pre></td></tr></table></figure></p>\n<p>设置密钥，修改配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim ~/.jupyter/jupyter_notebook_config.py</span><br><span class=\"line\"></span><br><span class=\"line\">    c.NotebookApp.allow_remote_access = True</span><br><span class=\"line\">    c.NotebookApp.ip = <span class=\"string\">'*'</span></span><br><span class=\"line\">    c.NotebookApp.open_browser = False</span><br><span class=\"line\">    c.NotebookApp.password = u<span class=\"string\">'sha1:XXXXXX'</span></span><br><span class=\"line\">    c.NotebookApp.port = 8888</span><br></pre></td></tr></table></figure></p>\n<p>启动Jupter notebook<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些加速技巧\"><a href=\"#一些加速技巧\" class=\"headerlink\" title=\"一些加速技巧\"></a>一些加速技巧</h2><p>加速查找<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = (i**<span class=\"number\">2</span>+<span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000000</span>))</span><br><span class=\"line\">%%time</span><br><span class=\"line\">list_data = list(data)</span><br><span class=\"line\"><span class=\"number\">4535251</span> <span class=\"keyword\">in</span> list_data</span><br><span class=\"line\"></span><br><span class=\"line\">%%time</span><br><span class=\"line\">set_data = set(data)</span><br><span class=\"line\"><span class=\"number\">4535251</span> <span class=\"keyword\">in</span> set_data</span><br></pre></td></tr></table></figure></p>\n<p>加速函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">1</span> <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"keyword\">else</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>))</span><br><span class=\"line\">fib(<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure></p>\n<p>大量重复计算，时间复杂度为$O(2^n)$  </p>\n<ul>\n<li><p>用缓存机制加速递归函数  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> lru_cache</span><br><span class=\"line\"><span class=\"meta\">@lru_cache(100)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">1</span> <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"keyword\">else</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>))</span><br><span class=\"line\">fib(<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用循环机制代替递归函数  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    a, b = <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,n):</span><br><span class=\"line\">        a, b = b, a+b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">fib(<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用map代替推导式进行加速  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\">alist = [i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>)]</span><br><span class=\"line\">%%time</span><br><span class=\"line\">alist = map(<span class=\"keyword\">lambda</span> x: x**<span class=\"number\">2</span>, range(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用filter代替推导式进行加速  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\">alist = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>) <span class=\"keyword\">if</span> i%<span class=\"number\">7</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\">%%time</span><br><span class=\"line\">alist = filter(<span class=\"keyword\">lambda</span> x: x%<span class=\"number\">7</span>==<span class=\"number\">0</span>, range(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用np.where代替if<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%time</span><br><span class=\"line\">relu = <span class=\"keyword\">lambda</span> x:np.where(x&gt;<span class=\"number\">0</span>, x, <span class=\"number\">0</span>)</span><br><span class=\"line\">array_b = relu(array_a)</span><br></pre></td></tr></table></figure></p>\n<p>应用多线程加速IO密集型任务<br>应用多进程加速CPU密集型任务  </p>\n<h3 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h3><ul>\n<li>03-用Jupyter编写数学公式 - ds19991999的博客 - CSDN博客<br><a href=\"https://blog.csdn.net/ds19991999/article/details/81275580\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ds19991999/article/details/81275580</a></li>\n</ul>\n<h3 id=\"numpy\"><a href=\"#numpy\" class=\"headerlink\" title=\"numpy\"></a>numpy</h3><p>布尔矩阵转0/1矩阵<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.examples.tutorials.mnist <span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 载入数据集</span></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">\"MNIST_data\"</span>, one_hot = <span class=\"literal\">True</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">A =  mnist.train.images[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># 得到布尔矩阵</span></span><br><span class=\"line\">B = (A==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># 法1：布尔矩阵转0/1矩阵</span></span><br><span class=\"line\">C= B.astype(int)</span><br><span class=\"line\"><span class=\"comment\"># 法2：布尔矩阵转0/1矩阵</span></span><br><span class=\"line\">C = B+<span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些奇淫巧技\"><a href=\"#一些奇淫巧技\" class=\"headerlink\" title=\"一些奇淫巧技\"></a>一些奇淫巧技</h2><ul>\n<li>print 打印带有颜色的信息<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从colorama中导入init，使显示颜色生效</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> colorama <span class=\"keyword\">import</span> init</span><br><span class=\"line\">init(autoreset=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(esc(<span class=\"string\">'0;31;40'</span>) + <span class=\"string\">'Error:'</span>+esc() + <span class=\"string\">'important'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">esc</span><span class=\"params\">(code=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f'\\033[<span class=\"subst\">&#123;code&#125;</span>m'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_color</span><span class=\"params\">(str=<span class=\"string\">''</span>, color=<span class=\"string\">'0;37;40'</span>)</span>:</span></span><br><span class=\"line\">    print(esc(color) + str + esc(), end=<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print_color(<span class=\"string\">'Error:'</span>, color=<span class=\"string\">'0;31;40'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'important'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可以设置的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">字体色     |       背景色     |      颜色描述</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">30        |        40       |       黑色</span><br><span class=\"line\">31        |        41       |       红色</span><br><span class=\"line\">32        |        42       |       绿色</span><br><span class=\"line\">33        |        43       |       黃色</span><br><span class=\"line\">34        |        44       |       蓝色</span><br><span class=\"line\">35        |        45       |       紫红色</span><br><span class=\"line\">36        |        46       |       青蓝色</span><br><span class=\"line\">37        |        47       |       白色</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\">显示方式     |      效果</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\">0           |     终端默认设置</span><br><span class=\"line\">1           |     高亮显示</span><br><span class=\"line\">4           |     使用下划线</span><br><span class=\"line\">5           |     闪烁</span><br><span class=\"line\">7           |     反白显示</span><br><span class=\"line\">8           |     不可见</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">e.g.</span><br><span class=\"line\">print(&apos;\\033[1;35;0m字体变色，但无背景色 \\033[0m&apos;)  # 有高亮 或者 print(&apos;\\033[1;35m字体有色，但无背景色 \\033[0m&apos;)</span><br><span class=\"line\">print(&apos;\\033[1;45m 字体不变色，有背景色 \\033[0m&apos;)  # 有高亮</span><br><span class=\"line\">print(&apos;\\033[1;35;46m 字体有色，且有背景色 \\033[0m&apos;)  # 有高亮</span><br><span class=\"line\">print(&apos;\\033[0;35;46m 字体有色，且有背景色 \\033[0m&apos;)  # 无高亮</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>实现一个进度条<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">progress</span><span class=\"params\">(percent=<span class=\"number\">0</span>, width=<span class=\"number\">30</span>)</span>:</span></span><br><span class=\"line\">    left = width * percent // <span class=\"number\">100</span></span><br><span class=\"line\">    right = width - left</span><br><span class=\"line\">    print(<span class=\"string\">'\\r['</span>, <span class=\"string\">'#'</span> * left, <span class=\"string\">' '</span> * right, <span class=\"string\">']'</span>,</span><br><span class=\"line\">          <span class=\"string\">f' <span class=\"subst\">&#123;percent:<span class=\"number\">.0</span>f&#125;</span>%'</span>,</span><br><span class=\"line\">          sep=<span class=\"string\">''</span>, end=<span class=\"string\">''</span>, flush=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>):</span><br><span class=\"line\">    progress(i)</span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"python3-8-里的一些功能\"><a href=\"#python3-8-里的一些功能\" class=\"headerlink\" title=\"python3.8 里的一些功能\"></a>python3.8 里的一些功能</h2><ul>\n<li><p>f-string里的’=’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\">print(<span class=\"string\">f\"<span class=\"subst\">&#123;a=&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>海象运算符:=<br>赋值的时候同时可以进行运算</p>\n</li>\n</ul>\n<h2 id=\"《Effective-Python：编写高质量Python代码的59个有效方法》\"><a href=\"#《Effective-Python：编写高质量Python代码的59个有效方法》\" class=\"headerlink\" title=\"《Effective Python：编写高质量Python代码的59个有效方法》\"></a>《Effective Python：编写高质量Python代码的59个有效方法》</h2><p>本书赞誉<br>译者序<br>前　　言<br>致　　谢<br>第1章　用Pythonic方式来思考 1<br>第1条：确认自己所用的Python版本 1<br>第2条：遵循PEP 8风格指南 3<br>第3条：了解bytes、str与unicode的区别 5<br>第4条：用辅助函数来取代复杂的表达式 8<br>第5条：了解切割序列的办法 10<br>第6条：在单次切片操作内，不要同时指定start、end和stride 13<br>第7条：用列表推导来取代map和f?ilter 15<br>第8条：不要使用含有两个以上表达式的列表推导 16<br>第9条：用生成器表达式来改写数据量较大的列表推导 18<br>第10条：尽量用enumerate取代range 20<br>第11条：用zip函数同时遍历两个迭代器 21<br>第12条：不要在for和while循环后面写else块 23<br>第13条：合理利用try/except/else/f?inally结构中的每个代码块 25<br>第2章　函数 28<br>第14条：尽量用异常来表示特殊情况，而不要返回None 28<br>第15条：了解如何在闭包里使用外围作用域中的变量 30<br>第16条：考虑用生成器来改写直接返回列表的函数 35<br>第17条：在参数上面迭代时，要多加小心 37<br>第18条：用数量可变的位置参数减少视觉杂讯 41<br>第19条：用关键字参数来表达可选的行为 43<br>第20条：用None和文档字符串来描述具有动态默认值的参数 46<br>第21条：用只能以关键字形式指定的参数来确保代码明晰 49<br>第3章　类与继承 53<br>第22条：尽量用辅助类来维护程序的状态，而不要用字典和元组 53<br>第23条：简单的接口应该接受函数，而不是类的实例 58<br>第24条：以@classmethod形式的多态去通用地构建对象 62<br>第25条：用super初始化父类 67<br>第26条：只在使用Mix-in组件制作工具类时进行多重继承 71<br>第27条：多用public属性，少用private属性 75<br>第28条：继承collections.abc以实现自定义的容器类型 79<br>第4章　元类及属性 84<br>第29条：用纯属性取代get和set方法 84<br>第30条：考虑用@property来代替属性重构 88<br>第31条：用描述符来改写需要复用的@property方法 92<br>第32条：用<strong>getattr</strong>、<strong>getattribute</strong>和<strong>setattr</strong>实现按需生成的属性 97<br>第33条：用元类来验证子类 102<br>第34条：用元类来注册子类 104<br>第35条：用元类来注解类的属性 108<br>第5章　并发及并行 112<br>第36条：用subprocess模块来管理子进程 113<br>第37条：可以用线程来执行阻塞式I/O，但不要用它做平行计算 117<br>第38条：在线程中使用Lock来防止数据竞争 121<br>第39条：用Queue来协调各线程之间的工作 124<br>第40条：考虑用协程来并发地运行多个函数 131<br>第41条：考虑用concurrent.futures来实现真正的平行计算 141<br>第6章　内置模块 145<br>第42条：用functools.wraps定义函数修饰器 145<br>第43条：考虑以contextlib和with语句来改写可复用的try/f?inally代码 148<br>第44条：用copyreg实现可靠的pickle操作 151<br>第45条：应该用datetime模块来处理本地时间，而不是用time模块 157<br>第46条：使用内置算法与数据结构 161<br>第47条：在重视精确度的场合，应该使用decimal 166<br>第48条：学会安装由Python开发者社区所构建的模块 168<br>第7章　协作开发 170<br>第49条：为每个函数、类和模块编写文档字符串 170<br>第50条：用包来安排模块，并提供稳固的API 174<br>第51条：为自编的模块定义根异常，以便将调用者与API相隔离 179<br>第52条：用适当的方式打破循环依赖关系 182<br>第53条：用虚拟环境隔离项目，并重建其依赖关系 187<br>第8章　部署 193<br>第54条：考虑用模块级别的代码来配置不同的部署环境 193<br>第55条：通过repr字符串来输出调试信息 195<br>第56条：用unittest来测试全部代码 198<br>第57条：考虑用pdb实现交互调试 201<br>第58条：先分析性能，然后再优化 203<br>第59条：用tracemalloc来掌握内存的使用及泄漏情况 208</p>\n<ul>\n<li>《Effective Python：编写高质量Python代码的59个有效方法》([美]布雷特·斯拉特金)【摘要 书评 试读】- 京东图书<br><a href=\"https://item.jd.com/11864820.html\" target=\"_blank\" rel=\"noopener\">https://item.jd.com/11864820.html</a></li>\n</ul>\n<h2 id=\"python数据科学手册\"><a href=\"#python数据科学手册\" class=\"headerlink\" title=\"python数据科学手册\"></a>python数据科学手册</h2><ul>\n<li>jakevdp/PythonDataScienceHandbook: Python Data Science Handbook: full text in Jupyter Notebooks<br><a href=\"https://github.com/jakevdp/PythonDataScienceHandbook\" target=\"_blank\" rel=\"noopener\">https://github.com/jakevdp/PythonDataScienceHandbook</a></li>\n</ul>\n</the>"},{"title":"天猫精灵，开灯","date":"2019-04-20T13:20:13.000Z","_content":"\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n## 整体方案\n\n天猫精灵协议的对接是云服务器与云服务器的对接，并不支持与硬件设备的直接对接。下图展示了智能硬件的接入方式：用户的语音指令通过天猫精灵上传阿里云语音服务器通过解析后发送响应的协议到云服务器，然后控制云再与硬件设备进行沟通控制。\n<div align=center>\n<img src = \"天猫精灵，开灯/1.png\" width=600 height=300>\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n采用花生壳内网穿透的方法，部署一台ubuntu 16.04作为服务器。使用Apache2搭建一个web服务器用于解析域名和php文本，为域名申请SSL证书，部署Apahce2下的https服务器，安装MySQL数据库用于http协议下频繁的数据存储和查询读取和OAuth2.0服务器的搭建。AliGenie平台通过OAuth2.0在不需要注册新设备用户的同时使用用户已有的账号获得智能硬件的认证系统的授权，使得天猫精灵能够访问智能硬件，然后完成指令的交互。\n<div align=center>\n<img src = \"天猫精灵，开灯/2.png\" width=600 height=300>\n</div>\n懒得搭服务器可以考虑下第三方平台，比如HomeAssistant、贝壳物联\n\n## 准备\n* 路由器\n* 实验室主机一台\n* 花生棒\n* esp8266\n* 天猫精灵\n\n## 花生棒设置\n访问https://b.oray.com/ \n内网穿透中增加两个映射\n映射一\n* 映射类型 HTTP80\n* 外网端口 80\n* 内网主机 192.168.1.241\n* 内网端口 80\n映射二\n* 映射类型 通用应用\n* 外网端口 动态端口号\n* 内网主机 192.168.1.241\n* 内网端口 443\n\n## 服务器部署\n### apache2+php7.0 web服务器的构建\n安装apathe\n``` bash\n$ sudo apt-get install apache2\n```\n安装php\n``` bash\n$ sudo apt-get install php\n```\n配置apache2支持php7\n``` bash\n$ sudo apt-get install libapache2-mod-php\n```\n重启一下apache2\n``` bash\n$ sudo service apache2 restart\n```\n\n配置DPO\n``` bash\n$ sudo apt-get install php7.0-mysql\n$ sudo phpenmod pdo_mysql\n$ sudo service apache2 restart\n```\n\n``` bash\n$ sudo vim /etc/php/7.0/mods-available/pdo.ini\n\n    ;extension=pdo.so\n```\n\n``` bash\n$ sudo vim /etc/php/7.0/apache2/php.ini\n\n    extension=/usr/lib/php/20151012/mysqli.so\n    extension=/usr/lib/php/20151012/mysqlnd.so\n    extension=/usr/lib/php/20151012/pdo.so\n    extension=/usr/lib/php/20151012/pdo_mysql.so\n```\n\n\n### 申请SSL证书\nSSL For Free工具官方网站\n* https://www.sslforfree.com/\n\n输入域名点击后面的Create Free SSL Certificate按钮获取，选择手工验证方式Manual Verification，点击Manually Verify Domain，根据提示的步骤进行，下载文件，然后对应添加文件夹，然后激活验证链接\n``` bash\n$ cd /var/www/html/\n$ sudo mkdir .well-known\n$ cd .well-known/\n$ sudo mkdir acme-challenge\n$ cd acme-challenge/\n$ sudo chmod 777 -R /var/www/html/\n```\n设置到期后通知邮箱，下载证书\n\n### 部署HTTPS服务器\n安装openssl\n``` bash\n$ sudo apt-get install openssl\n```\n开启SSL模块\n``` bash\n$ sudo a2enmod ssl\n```\n拷贝证书到相应目录，指定SSL证书\n\n``` bash\nSSLCertificateFile      /etc/ssl/certs/certificate.crt\nSSLCertificateKeyFile   /etc/ssl/private/private.key\nSSLCertificateChainFile /etc/ssl/private/ca_bundle.crt\n```\n\n``` bash\n$ sudo chmod 777 -R /etc/ssl/\n$ cd /etc/apache2/\n$ cat ports.conf\n    \n    # If you just change the port or add more ports here, you will likely also\n    # have to change the VirtualHost statement in\n    # /etc/apache2/sites-enabled/000-default.conf\n\n    Listen 80\n\n    <IfModule ssl_module>\n            Listen 443\n    </IfModule>\n\n    <IfModule mod_gnutls.c>\n            Listen 443\n    </IfModule>\n```\n建立软链\n``` bash\n$ sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/\n```\n修改default-ssl.conf\n``` bash\n$ sudo apt-get install vim\n$ sudo vim /etc/apache2/sites-available/default-ssl.conf\n\n    SSLProtocol all -SSLv2 -SSLv3\n    SSLCertificateFile      /etc/ssl/certs/certificate.crt\n    SSLCertificateKeyFile   /etc/ssl/private/private.key\n    SSLCertificateChainFile /etc/ssl/private/ca_bundle.crt\n```\n\n通过a2ensite激活站点\n``` bash\n$ sudo a2ensite default-ssl.conf\n```\n重启apache\n``` bash\n$ sudo service apache2 restart\n```\n### 安装MySQL\n``` bash\n$ sudo apt-get install mysql-server mysql-client\n```\n下载安装oauth2-server\n``` bash\n$ cd /var/www/html/\n$ sudo apt-get install git\n$ git clone https://github.com/bshaffer/oauth2-server-php.git -b master\n```\n建立数据库\n``` bash\n$ mysql -u root -p\n```\n\n``` bash\nmysql> create database ilamp;\nmysql> use ilamp;\nmysql> CREATE TABLE `oauth_access_tokens` (\n         `access_token` VARCHAR(40) NOT NULL,\n         `client_id`    VARCHAR(80) NOT NULL,\n         `user_id`  VARCHAR(255),\n         `expires` TIMESTAMP NOT NULL,\n         `scope` VARCHAR(2000),\n         PRIMARY KEY (access_token));\nmysql>  CREATE TABLE `oauth_authorization_codes` (\n         `authorization_code` VARCHAR(40) NOT NULL,\n         `client_id` VARCHAR(80) NOT NULL,\n         `user_id` VARCHAR(255),\n         `redirect_uri` VARCHAR(2000),\n         `expires` TIMESTAMP NOT NULL,\n         `scope` VARCHAR(2000),\n         'id_token' VARCHAR(1000),\n         PRIMARY KEY (authorization_code));\nmysql>  CREATE TABLE 'oauth_clients' (\n         'client_id' VARCHAR(80) not null,\n         'client_secret' VARCHAR(80), \n         'redirect_uri' VARCHAR(2000),\n         'grant_types' VARCHAR(80),\n         'scope' VARCHAR(4000),\n         'user_id' VARCHAR(80), \n         PRIMARY KEY (client_id));\nmysql>  CREATE TABLE `oauth_refresh_tokens` ( \n         `refresh_token` VARCHAR(40) NOT NULL,\n         `client_id` VARCHAR(80) NOT NULL,\n         `user_id` VARCHAR(255),\n         `expires` TIMESTAMP NOT NULL,\n         `scope` VARCHAR(2000),\n         PRIMARY KEY (refresh_token));\nmysql> CREATE TABLE `oauth_users` (\n         `username` VARCHAR(255) NOT NULL,\n         `password` VARCHAR(2000),\n         `first_name` VARCHAR(255),\n         `last_name` VARCHAR(255),\n         PRIMARY KEY (username));\nmysql> CREATE TABLE `oauth_scopes` (\n         'scope' VARCHAR(80) not null,\n         'is_default' boolean,\n         PRIMARY KEY(scope));\nmysql> CREATE TABLE `oauth_jwt` (\n         'client_id' VARCHAR(80) not null,\n         'subject' VARCHAR(80),\n         'public_key' VARCHAR(2000) not null);\nmysql> show tables;\n+---------------------------+\n| Tables_in_ilamp           |\n+---------------------------+\n| oauth_access_tokens       |\n| oauth_authorization_codes |\n| oauth_clients             |\n| oauth_jwt                 |\n| oauth_refresh_tokens      |\n| oauth_scopes              |\n| oauth_users               |\n+---------------------------+\nmysql> insert into oauth_clients (client_id, client_secret, redirect_uri ) values (\"id\",\"psw\",\"https://open.bot.tmall.com/oauth/callback\");\n```\n\n## 天猫精灵新加技能\n\n登录开发者平台AliGenie - 语音开发者平台  https://open.aligenie.com/\n发布新技能。\n\n### 服务设置\nOAuth2\n* 账户授权连接: https://xxxx/authorize.php\n* ClientID: id\n* Client Secret: psw\n* 跳转 URL: https://open.bot.tmall.com/oauth/callback\n* Access Token URL: https://xxx/token.php\n* 厂商登出 URL: 暂无描述\n\n设备管理\n* 开发者网关地址: https://xxx/gate.php\n* 设备管理跳转连接: 暂无描述\n\n\n### 开机跳过用户登录\n打开 系统设置 中的 用户帐户;  \n打开用户帐户设置窗口后，点击右上角的\"解锁\"按钮;  \n将自动登录设置为“开启”。\n\n\n## 参考博客\n* esp8266对接天猫精灵（1）前言 - CSDN博客  \nhttps://blog.csdn.net/qq_35527832/article/details/79143899\n* 天猫精灵接入HomeAssistant  \nhttps://weibo.com/ttarticle/p/show?id=2309404195482120392395\n* GitHub - c1pher-cn/tmall-bot-x1: 天猫精灵智能家居技能对接homeassistant  \nhttps://github.com/c1pher-cn/tmall-bot-x1\n* 【新提醒】天猫精灵接入HomeAssistant【智能家居技能接入，非webhook调用】 - 『HomeAssistant』智能硬件讨论区 - 『瀚思彼岸』» 智能家居第一站 - Hassbian.com  \nhttps://bbs.hassbian.com/thread-1862-1-1.html\n* AliGenie开发者平台  \nhttp://doc-bot.tmall.com/support/hotProblemDetail.htm?spm=0.0.0.0.cTGpHI&id=332356&tagId=null\n","source":"_posts/天猫精灵，开灯.md","raw":"---\ntitle: 天猫精灵，开灯\ndate: 2019-04-20 21:20:13\ntags: \n  - 天猫精灵\n  - esp8266\n  - php\n  - mysql\n---\n\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n## 整体方案\n\n天猫精灵协议的对接是云服务器与云服务器的对接，并不支持与硬件设备的直接对接。下图展示了智能硬件的接入方式：用户的语音指令通过天猫精灵上传阿里云语音服务器通过解析后发送响应的协议到云服务器，然后控制云再与硬件设备进行沟通控制。\n<div align=center>\n<img src = \"天猫精灵，开灯/1.png\" width=600 height=300>\n</div>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n采用花生壳内网穿透的方法，部署一台ubuntu 16.04作为服务器。使用Apache2搭建一个web服务器用于解析域名和php文本，为域名申请SSL证书，部署Apahce2下的https服务器，安装MySQL数据库用于http协议下频繁的数据存储和查询读取和OAuth2.0服务器的搭建。AliGenie平台通过OAuth2.0在不需要注册新设备用户的同时使用用户已有的账号获得智能硬件的认证系统的授权，使得天猫精灵能够访问智能硬件，然后完成指令的交互。\n<div align=center>\n<img src = \"天猫精灵，开灯/2.png\" width=600 height=300>\n</div>\n懒得搭服务器可以考虑下第三方平台，比如HomeAssistant、贝壳物联\n\n## 准备\n* 路由器\n* 实验室主机一台\n* 花生棒\n* esp8266\n* 天猫精灵\n\n## 花生棒设置\n访问https://b.oray.com/ \n内网穿透中增加两个映射\n映射一\n* 映射类型 HTTP80\n* 外网端口 80\n* 内网主机 192.168.1.241\n* 内网端口 80\n映射二\n* 映射类型 通用应用\n* 外网端口 动态端口号\n* 内网主机 192.168.1.241\n* 内网端口 443\n\n## 服务器部署\n### apache2+php7.0 web服务器的构建\n安装apathe\n``` bash\n$ sudo apt-get install apache2\n```\n安装php\n``` bash\n$ sudo apt-get install php\n```\n配置apache2支持php7\n``` bash\n$ sudo apt-get install libapache2-mod-php\n```\n重启一下apache2\n``` bash\n$ sudo service apache2 restart\n```\n\n配置DPO\n``` bash\n$ sudo apt-get install php7.0-mysql\n$ sudo phpenmod pdo_mysql\n$ sudo service apache2 restart\n```\n\n``` bash\n$ sudo vim /etc/php/7.0/mods-available/pdo.ini\n\n    ;extension=pdo.so\n```\n\n``` bash\n$ sudo vim /etc/php/7.0/apache2/php.ini\n\n    extension=/usr/lib/php/20151012/mysqli.so\n    extension=/usr/lib/php/20151012/mysqlnd.so\n    extension=/usr/lib/php/20151012/pdo.so\n    extension=/usr/lib/php/20151012/pdo_mysql.so\n```\n\n\n### 申请SSL证书\nSSL For Free工具官方网站\n* https://www.sslforfree.com/\n\n输入域名点击后面的Create Free SSL Certificate按钮获取，选择手工验证方式Manual Verification，点击Manually Verify Domain，根据提示的步骤进行，下载文件，然后对应添加文件夹，然后激活验证链接\n``` bash\n$ cd /var/www/html/\n$ sudo mkdir .well-known\n$ cd .well-known/\n$ sudo mkdir acme-challenge\n$ cd acme-challenge/\n$ sudo chmod 777 -R /var/www/html/\n```\n设置到期后通知邮箱，下载证书\n\n### 部署HTTPS服务器\n安装openssl\n``` bash\n$ sudo apt-get install openssl\n```\n开启SSL模块\n``` bash\n$ sudo a2enmod ssl\n```\n拷贝证书到相应目录，指定SSL证书\n\n``` bash\nSSLCertificateFile      /etc/ssl/certs/certificate.crt\nSSLCertificateKeyFile   /etc/ssl/private/private.key\nSSLCertificateChainFile /etc/ssl/private/ca_bundle.crt\n```\n\n``` bash\n$ sudo chmod 777 -R /etc/ssl/\n$ cd /etc/apache2/\n$ cat ports.conf\n    \n    # If you just change the port or add more ports here, you will likely also\n    # have to change the VirtualHost statement in\n    # /etc/apache2/sites-enabled/000-default.conf\n\n    Listen 80\n\n    <IfModule ssl_module>\n            Listen 443\n    </IfModule>\n\n    <IfModule mod_gnutls.c>\n            Listen 443\n    </IfModule>\n```\n建立软链\n``` bash\n$ sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/\n```\n修改default-ssl.conf\n``` bash\n$ sudo apt-get install vim\n$ sudo vim /etc/apache2/sites-available/default-ssl.conf\n\n    SSLProtocol all -SSLv2 -SSLv3\n    SSLCertificateFile      /etc/ssl/certs/certificate.crt\n    SSLCertificateKeyFile   /etc/ssl/private/private.key\n    SSLCertificateChainFile /etc/ssl/private/ca_bundle.crt\n```\n\n通过a2ensite激活站点\n``` bash\n$ sudo a2ensite default-ssl.conf\n```\n重启apache\n``` bash\n$ sudo service apache2 restart\n```\n### 安装MySQL\n``` bash\n$ sudo apt-get install mysql-server mysql-client\n```\n下载安装oauth2-server\n``` bash\n$ cd /var/www/html/\n$ sudo apt-get install git\n$ git clone https://github.com/bshaffer/oauth2-server-php.git -b master\n```\n建立数据库\n``` bash\n$ mysql -u root -p\n```\n\n``` bash\nmysql> create database ilamp;\nmysql> use ilamp;\nmysql> CREATE TABLE `oauth_access_tokens` (\n         `access_token` VARCHAR(40) NOT NULL,\n         `client_id`    VARCHAR(80) NOT NULL,\n         `user_id`  VARCHAR(255),\n         `expires` TIMESTAMP NOT NULL,\n         `scope` VARCHAR(2000),\n         PRIMARY KEY (access_token));\nmysql>  CREATE TABLE `oauth_authorization_codes` (\n         `authorization_code` VARCHAR(40) NOT NULL,\n         `client_id` VARCHAR(80) NOT NULL,\n         `user_id` VARCHAR(255),\n         `redirect_uri` VARCHAR(2000),\n         `expires` TIMESTAMP NOT NULL,\n         `scope` VARCHAR(2000),\n         'id_token' VARCHAR(1000),\n         PRIMARY KEY (authorization_code));\nmysql>  CREATE TABLE 'oauth_clients' (\n         'client_id' VARCHAR(80) not null,\n         'client_secret' VARCHAR(80), \n         'redirect_uri' VARCHAR(2000),\n         'grant_types' VARCHAR(80),\n         'scope' VARCHAR(4000),\n         'user_id' VARCHAR(80), \n         PRIMARY KEY (client_id));\nmysql>  CREATE TABLE `oauth_refresh_tokens` ( \n         `refresh_token` VARCHAR(40) NOT NULL,\n         `client_id` VARCHAR(80) NOT NULL,\n         `user_id` VARCHAR(255),\n         `expires` TIMESTAMP NOT NULL,\n         `scope` VARCHAR(2000),\n         PRIMARY KEY (refresh_token));\nmysql> CREATE TABLE `oauth_users` (\n         `username` VARCHAR(255) NOT NULL,\n         `password` VARCHAR(2000),\n         `first_name` VARCHAR(255),\n         `last_name` VARCHAR(255),\n         PRIMARY KEY (username));\nmysql> CREATE TABLE `oauth_scopes` (\n         'scope' VARCHAR(80) not null,\n         'is_default' boolean,\n         PRIMARY KEY(scope));\nmysql> CREATE TABLE `oauth_jwt` (\n         'client_id' VARCHAR(80) not null,\n         'subject' VARCHAR(80),\n         'public_key' VARCHAR(2000) not null);\nmysql> show tables;\n+---------------------------+\n| Tables_in_ilamp           |\n+---------------------------+\n| oauth_access_tokens       |\n| oauth_authorization_codes |\n| oauth_clients             |\n| oauth_jwt                 |\n| oauth_refresh_tokens      |\n| oauth_scopes              |\n| oauth_users               |\n+---------------------------+\nmysql> insert into oauth_clients (client_id, client_secret, redirect_uri ) values (\"id\",\"psw\",\"https://open.bot.tmall.com/oauth/callback\");\n```\n\n## 天猫精灵新加技能\n\n登录开发者平台AliGenie - 语音开发者平台  https://open.aligenie.com/\n发布新技能。\n\n### 服务设置\nOAuth2\n* 账户授权连接: https://xxxx/authorize.php\n* ClientID: id\n* Client Secret: psw\n* 跳转 URL: https://open.bot.tmall.com/oauth/callback\n* Access Token URL: https://xxx/token.php\n* 厂商登出 URL: 暂无描述\n\n设备管理\n* 开发者网关地址: https://xxx/gate.php\n* 设备管理跳转连接: 暂无描述\n\n\n### 开机跳过用户登录\n打开 系统设置 中的 用户帐户;  \n打开用户帐户设置窗口后，点击右上角的\"解锁\"按钮;  \n将自动登录设置为“开启”。\n\n\n## 参考博客\n* esp8266对接天猫精灵（1）前言 - CSDN博客  \nhttps://blog.csdn.net/qq_35527832/article/details/79143899\n* 天猫精灵接入HomeAssistant  \nhttps://weibo.com/ttarticle/p/show?id=2309404195482120392395\n* GitHub - c1pher-cn/tmall-bot-x1: 天猫精灵智能家居技能对接homeassistant  \nhttps://github.com/c1pher-cn/tmall-bot-x1\n* 【新提醒】天猫精灵接入HomeAssistant【智能家居技能接入，非webhook调用】 - 『HomeAssistant』智能硬件讨论区 - 『瀚思彼岸』» 智能家居第一站 - Hassbian.com  \nhttps://bbs.hassbian.com/thread-1862-1-1.html\n* AliGenie开发者平台  \nhttp://doc-bot.tmall.com/support/hotProblemDetail.htm?spm=0.0.0.0.cTGpHI&id=332356&tagId=null\n","slug":"天猫精灵，开灯","published":1,"updated":"2020-01-05T19:13:24.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50b600604cvj27pw1r1k","content":"<p><strong> 天猫精灵，开灯 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"整体方案\"><a href=\"#整体方案\" class=\"headerlink\" title=\"整体方案\"></a>整体方案</h2><p>天猫精灵协议的对接是云服务器与云服务器的对接，并不支持与硬件设备的直接对接。下图展示了智能硬件的接入方式：用户的语音指令通过天猫精灵上传阿里云语音服务器通过解析后发送响应的协议到云服务器，然后控制云再与硬件设备进行沟通控制。</p>\n<div align=\"center\">\n<img src=\"/2019/04/20/天猫精灵，开灯/1.png\" width=\"600\" height=\"300\">\n</div>\n\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<p>采用花生壳内网穿透的方法，部署一台ubuntu 16.04作为服务器。使用Apache2搭建一个web服务器用于解析域名和php文本，为域名申请SSL证书，部署Apahce2下的https服务器，安装MySQL数据库用于http协议下频繁的数据存储和查询读取和OAuth2.0服务器的搭建。AliGenie平台通过OAuth2.0在不需要注册新设备用户的同时使用用户已有的账号获得智能硬件的认证系统的授权，使得天猫精灵能够访问智能硬件，然后完成指令的交互。</p>\n<p><div align=\"center\">\n<img src=\"/2019/04/20/天猫精灵，开灯/2.png\" width=\"600\" height=\"300\">\n</div><br>懒得搭服务器可以考虑下第三方平台，比如HomeAssistant、贝壳物联</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>路由器</li>\n<li>实验室主机一台</li>\n<li>花生棒</li>\n<li>esp8266</li>\n<li>天猫精灵</li>\n</ul>\n<h2 id=\"花生棒设置\"><a href=\"#花生棒设置\" class=\"headerlink\" title=\"花生棒设置\"></a>花生棒设置</h2><p>访问<a href=\"https://b.oray.com/\" target=\"_blank\" rel=\"noopener\">https://b.oray.com/</a><br>内网穿透中增加两个映射<br>映射一</p>\n<ul>\n<li>映射类型 HTTP80</li>\n<li>外网端口 80</li>\n<li>内网主机 192.168.1.241</li>\n<li>内网端口 80<br>映射二</li>\n<li>映射类型 通用应用</li>\n<li>外网端口 动态端口号</li>\n<li>内网主机 192.168.1.241</li>\n<li>内网端口 443</li>\n</ul>\n<h2 id=\"服务器部署\"><a href=\"#服务器部署\" class=\"headerlink\" title=\"服务器部署\"></a>服务器部署</h2><h3 id=\"apache2-php7-0-web服务器的构建\"><a href=\"#apache2-php7-0-web服务器的构建\" class=\"headerlink\" title=\"apache2+php7.0 web服务器的构建\"></a>apache2+php7.0 web服务器的构建</h3><p>安装apathe<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install apache2</span><br></pre></td></tr></table></figure></p>\n<p>安装php<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install php</span><br></pre></td></tr></table></figure></p>\n<p>配置apache2支持php7<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure></p>\n<p>重启一下apache2<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>\n<p>配置DPO<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install php7.0-mysql</span><br><span class=\"line\">$ sudo phpenmod pdo_mysql</span><br><span class=\"line\">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/php/7.0/mods-available/pdo.ini</span><br><span class=\"line\"></span><br><span class=\"line\">    ;extension=pdo.so</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/php/7.0/apache2/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\">    extension=/usr/lib/php/20151012/mysqli.so</span><br><span class=\"line\">    extension=/usr/lib/php/20151012/mysqlnd.so</span><br><span class=\"line\">    extension=/usr/lib/php/20151012/pdo.so</span><br><span class=\"line\">    extension=/usr/lib/php/20151012/pdo_mysql.so</span><br></pre></td></tr></table></figure>\n<h3 id=\"申请SSL证书\"><a href=\"#申请SSL证书\" class=\"headerlink\" title=\"申请SSL证书\"></a>申请SSL证书</h3><p>SSL For Free工具官方网站</p>\n<ul>\n<li><a href=\"https://www.sslforfree.com/\" target=\"_blank\" rel=\"noopener\">https://www.sslforfree.com/</a></li>\n</ul>\n<p>输入域名点击后面的Create Free SSL Certificate按钮获取，选择手工验证方式Manual Verification，点击Manually Verify Domain，根据提示的步骤进行，下载文件，然后对应添加文件夹，然后激活验证链接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/www/html/</span><br><span class=\"line\">$ sudo mkdir .well-known</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> .well-known/</span><br><span class=\"line\">$ sudo mkdir acme-challenge</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> acme-challenge/</span><br><span class=\"line\">$ sudo chmod 777 -R /var/www/html/</span><br></pre></td></tr></table></figure></p>\n<p>设置到期后通知邮箱，下载证书</p>\n<h3 id=\"部署HTTPS服务器\"><a href=\"#部署HTTPS服务器\" class=\"headerlink\" title=\"部署HTTPS服务器\"></a>部署HTTPS服务器</h3><p>安装openssl<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openssl</span><br></pre></td></tr></table></figure></p>\n<p>开启SSL模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo a2enmod ssl</span><br></pre></td></tr></table></figure></p>\n<p>拷贝证书到相应目录，指定SSL证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile      /etc/ssl/certs/certificate.crt</span><br><span class=\"line\">SSLCertificateKeyFile   /etc/ssl/private/private.key</span><br><span class=\"line\">SSLCertificateChainFile /etc/ssl/private/ca_bundle.crt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod 777 -R /etc/ssl/</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/apache2/</span><br><span class=\"line\">$ cat ports.conf</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># If you just change the port or add more ports here, you will likely also</span></span><br><span class=\"line\">    <span class=\"comment\"># have to change the VirtualHost statement in</span></span><br><span class=\"line\">    <span class=\"comment\"># /etc/apache2/sites-enabled/000-default.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Listen 80</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;IfModule ssl_module&gt;</span><br><span class=\"line\">            Listen 443</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;IfModule mod_gnutls.c&gt;</span><br><span class=\"line\">            Listen 443</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n<p>建立软链<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/</span><br></pre></td></tr></table></figure></p>\n<p>修改default-ssl.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install vim</span><br><span class=\"line\">$ sudo vim /etc/apache2/sites-available/default-ssl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">    SSLProtocol all -SSLv2 -SSLv3</span><br><span class=\"line\">    SSLCertificateFile      /etc/ssl/certs/certificate.crt</span><br><span class=\"line\">    SSLCertificateKeyFile   /etc/ssl/private/private.key</span><br><span class=\"line\">    SSLCertificateChainFile /etc/ssl/private/ca_bundle.crt</span><br></pre></td></tr></table></figure></p>\n<p>通过a2ensite激活站点<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo a2ensite default-ssl.conf</span><br></pre></td></tr></table></figure></p>\n<p>重启apache<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>\n<p>下载安装oauth2-server<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/www/html/</span><br><span class=\"line\">$ sudo apt-get install git</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bshaffer/oauth2-server-php.git -b master</span><br></pre></td></tr></table></figure></p>\n<p>建立数据库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database ilamp;</span><br><span class=\"line\">mysql&gt; use ilamp;</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_access_tokens` (</span><br><span class=\"line\">         `access_token` VARCHAR(40) NOT NULL,</span><br><span class=\"line\">         `client_id`    VARCHAR(80) NOT NULL,</span><br><span class=\"line\">         `user_id`  VARCHAR(255),</span><br><span class=\"line\">         `expires` TIMESTAMP NOT NULL,</span><br><span class=\"line\">         `scope` VARCHAR(2000),</span><br><span class=\"line\">         PRIMARY KEY (access_token));</span><br><span class=\"line\">mysql&gt;  CREATE TABLE `oauth_authorization_codes` (</span><br><span class=\"line\">         `authorization_code` VARCHAR(40) NOT NULL,</span><br><span class=\"line\">         `client_id` VARCHAR(80) NOT NULL,</span><br><span class=\"line\">         `user_id` VARCHAR(255),</span><br><span class=\"line\">         `redirect_uri` VARCHAR(2000),</span><br><span class=\"line\">         `expires` TIMESTAMP NOT NULL,</span><br><span class=\"line\">         `scope` VARCHAR(2000),</span><br><span class=\"line\">         <span class=\"string\">'id_token'</span> VARCHAR(1000),</span><br><span class=\"line\">         PRIMARY KEY (authorization_code));</span><br><span class=\"line\">mysql&gt;  CREATE TABLE <span class=\"string\">'oauth_clients'</span> (</span><br><span class=\"line\">         <span class=\"string\">'client_id'</span> VARCHAR(80) not null,</span><br><span class=\"line\">         <span class=\"string\">'client_secret'</span> VARCHAR(80), </span><br><span class=\"line\">         <span class=\"string\">'redirect_uri'</span> VARCHAR(2000),</span><br><span class=\"line\">         <span class=\"string\">'grant_types'</span> VARCHAR(80),</span><br><span class=\"line\">         <span class=\"string\">'scope'</span> VARCHAR(4000),</span><br><span class=\"line\">         <span class=\"string\">'user_id'</span> VARCHAR(80), </span><br><span class=\"line\">         PRIMARY KEY (client_id));</span><br><span class=\"line\">mysql&gt;  CREATE TABLE `oauth_refresh_tokens` ( </span><br><span class=\"line\">         `refresh_token` VARCHAR(40) NOT NULL,</span><br><span class=\"line\">         `client_id` VARCHAR(80) NOT NULL,</span><br><span class=\"line\">         `user_id` VARCHAR(255),</span><br><span class=\"line\">         `expires` TIMESTAMP NOT NULL,</span><br><span class=\"line\">         `scope` VARCHAR(2000),</span><br><span class=\"line\">         PRIMARY KEY (refresh_token));</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_users` (</span><br><span class=\"line\">         `username` VARCHAR(255) NOT NULL,</span><br><span class=\"line\">         `password` VARCHAR(2000),</span><br><span class=\"line\">         `first_name` VARCHAR(255),</span><br><span class=\"line\">         `last_name` VARCHAR(255),</span><br><span class=\"line\">         PRIMARY KEY (username));</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_scopes` (</span><br><span class=\"line\">         <span class=\"string\">'scope'</span> VARCHAR(80) not null,</span><br><span class=\"line\">         <span class=\"string\">'is_default'</span> boolean,</span><br><span class=\"line\">         PRIMARY KEY(scope));</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_jwt` (</span><br><span class=\"line\">         <span class=\"string\">'client_id'</span> VARCHAR(80) not null,</span><br><span class=\"line\">         <span class=\"string\">'subject'</span> VARCHAR(80),</span><br><span class=\"line\">         <span class=\"string\">'public_key'</span> VARCHAR(2000) not null);</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| Tables_in_ilamp           |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| oauth_access_tokens       |</span><br><span class=\"line\">| oauth_authorization_codes |</span><br><span class=\"line\">| oauth_clients             |</span><br><span class=\"line\">| oauth_jwt                 |</span><br><span class=\"line\">| oauth_refresh_tokens      |</span><br><span class=\"line\">| oauth_scopes              |</span><br><span class=\"line\">| oauth_users               |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">mysql&gt; insert into oauth_clients (client_id, client_secret, redirect_uri ) values (<span class=\"string\">\"id\"</span>,<span class=\"string\">\"psw\"</span>,<span class=\"string\">\"https://open.bot.tmall.com/oauth/callback\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"天猫精灵新加技能\"><a href=\"#天猫精灵新加技能\" class=\"headerlink\" title=\"天猫精灵新加技能\"></a>天猫精灵新加技能</h2><p>登录开发者平台AliGenie - 语音开发者平台  <a href=\"https://open.aligenie.com/\" target=\"_blank\" rel=\"noopener\">https://open.aligenie.com/</a><br>发布新技能。</p>\n<h3 id=\"服务设置\"><a href=\"#服务设置\" class=\"headerlink\" title=\"服务设置\"></a>服务设置</h3><p>OAuth2</p>\n<ul>\n<li>账户授权连接: <a href=\"https://xxxx/authorize.php\" target=\"_blank\" rel=\"noopener\">https://xxxx/authorize.php</a></li>\n<li>ClientID: id</li>\n<li>Client Secret: psw</li>\n<li>跳转 URL: <a href=\"https://open.bot.tmall.com/oauth/callback\" target=\"_blank\" rel=\"noopener\">https://open.bot.tmall.com/oauth/callback</a></li>\n<li>Access Token URL: <a href=\"https://xxx/token.php\" target=\"_blank\" rel=\"noopener\">https://xxx/token.php</a></li>\n<li>厂商登出 URL: 暂无描述</li>\n</ul>\n<p>设备管理</p>\n<ul>\n<li>开发者网关地址: <a href=\"https://xxx/gate.php\" target=\"_blank\" rel=\"noopener\">https://xxx/gate.php</a></li>\n<li>设备管理跳转连接: 暂无描述</li>\n</ul>\n<h3 id=\"开机跳过用户登录\"><a href=\"#开机跳过用户登录\" class=\"headerlink\" title=\"开机跳过用户登录\"></a>开机跳过用户登录</h3><p>打开 系统设置 中的 用户帐户;<br>打开用户帐户设置窗口后，点击右上角的”解锁”按钮;<br>将自动登录设置为“开启”。</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>esp8266对接天猫精灵（1）前言 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_35527832/article/details/79143899\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_35527832/article/details/79143899</a></li>\n<li>天猫精灵接入HomeAssistant<br><a href=\"https://weibo.com/ttarticle/p/show?id=2309404195482120392395\" target=\"_blank\" rel=\"noopener\">https://weibo.com/ttarticle/p/show?id=2309404195482120392395</a></li>\n<li>GitHub - c1pher-cn/tmall-bot-x1: 天猫精灵智能家居技能对接homeassistant<br><a href=\"https://github.com/c1pher-cn/tmall-bot-x1\" target=\"_blank\" rel=\"noopener\">https://github.com/c1pher-cn/tmall-bot-x1</a></li>\n<li>【新提醒】天猫精灵接入HomeAssistant【智能家居技能接入，非webhook调用】 - 『HomeAssistant』智能硬件讨论区 - 『瀚思彼岸』» 智能家居第一站 - Hassbian.com<br><a href=\"https://bbs.hassbian.com/thread-1862-1-1.html\" target=\"_blank\" rel=\"noopener\">https://bbs.hassbian.com/thread-1862-1-1.html</a></li>\n<li>AliGenie开发者平台<br><a href=\"http://doc-bot.tmall.com/support/hotProblemDetail.htm?spm=0.0.0.0.cTGpHI&amp;id=332356&amp;tagId=null\" target=\"_blank\" rel=\"noopener\">http://doc-bot.tmall.com/support/hotProblemDetail.htm?spm=0.0.0.0.cTGpHI&amp;id=332356&amp;tagId=null</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 天猫精灵，开灯 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"整体方案\"><a href=\"#整体方案\" class=\"headerlink\" title=\"整体方案\"></a>整体方案</h2><p>天猫精灵协议的对接是云服务器与云服务器的对接，并不支持与硬件设备的直接对接。下图展示了智能硬件的接入方式：用户的语音指令通过天猫精灵上传阿里云语音服务器通过解析后发送响应的协议到云服务器，然后控制云再与硬件设备进行沟通控制。</p>\n<div align=\"center\">\n<img src=\"/2019/04/20/天猫精灵，开灯/1.png\" width=\"600\" height=\"300\">\n</div>","more":"<the rest of contents | 余下全文>\n\n<p>采用花生壳内网穿透的方法，部署一台ubuntu 16.04作为服务器。使用Apache2搭建一个web服务器用于解析域名和php文本，为域名申请SSL证书，部署Apahce2下的https服务器，安装MySQL数据库用于http协议下频繁的数据存储和查询读取和OAuth2.0服务器的搭建。AliGenie平台通过OAuth2.0在不需要注册新设备用户的同时使用用户已有的账号获得智能硬件的认证系统的授权，使得天猫精灵能够访问智能硬件，然后完成指令的交互。</p>\n<p><div align=\"center\">\n<img src=\"/2019/04/20/天猫精灵，开灯/2.png\" width=\"600\" height=\"300\">\n</div><br>懒得搭服务器可以考虑下第三方平台，比如HomeAssistant、贝壳物联</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>路由器</li>\n<li>实验室主机一台</li>\n<li>花生棒</li>\n<li>esp8266</li>\n<li>天猫精灵</li>\n</ul>\n<h2 id=\"花生棒设置\"><a href=\"#花生棒设置\" class=\"headerlink\" title=\"花生棒设置\"></a>花生棒设置</h2><p>访问<a href=\"https://b.oray.com/\" target=\"_blank\" rel=\"noopener\">https://b.oray.com/</a><br>内网穿透中增加两个映射<br>映射一</p>\n<ul>\n<li>映射类型 HTTP80</li>\n<li>外网端口 80</li>\n<li>内网主机 192.168.1.241</li>\n<li>内网端口 80<br>映射二</li>\n<li>映射类型 通用应用</li>\n<li>外网端口 动态端口号</li>\n<li>内网主机 192.168.1.241</li>\n<li>内网端口 443</li>\n</ul>\n<h2 id=\"服务器部署\"><a href=\"#服务器部署\" class=\"headerlink\" title=\"服务器部署\"></a>服务器部署</h2><h3 id=\"apache2-php7-0-web服务器的构建\"><a href=\"#apache2-php7-0-web服务器的构建\" class=\"headerlink\" title=\"apache2+php7.0 web服务器的构建\"></a>apache2+php7.0 web服务器的构建</h3><p>安装apathe<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install apache2</span><br></pre></td></tr></table></figure></p>\n<p>安装php<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install php</span><br></pre></td></tr></table></figure></p>\n<p>配置apache2支持php7<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure></p>\n<p>重启一下apache2<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>\n<p>配置DPO<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install php7.0-mysql</span><br><span class=\"line\">$ sudo phpenmod pdo_mysql</span><br><span class=\"line\">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/php/7.0/mods-available/pdo.ini</span><br><span class=\"line\"></span><br><span class=\"line\">    ;extension=pdo.so</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/php/7.0/apache2/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\">    extension=/usr/lib/php/20151012/mysqli.so</span><br><span class=\"line\">    extension=/usr/lib/php/20151012/mysqlnd.so</span><br><span class=\"line\">    extension=/usr/lib/php/20151012/pdo.so</span><br><span class=\"line\">    extension=/usr/lib/php/20151012/pdo_mysql.so</span><br></pre></td></tr></table></figure>\n<h3 id=\"申请SSL证书\"><a href=\"#申请SSL证书\" class=\"headerlink\" title=\"申请SSL证书\"></a>申请SSL证书</h3><p>SSL For Free工具官方网站</p>\n<ul>\n<li><a href=\"https://www.sslforfree.com/\" target=\"_blank\" rel=\"noopener\">https://www.sslforfree.com/</a></li>\n</ul>\n<p>输入域名点击后面的Create Free SSL Certificate按钮获取，选择手工验证方式Manual Verification，点击Manually Verify Domain，根据提示的步骤进行，下载文件，然后对应添加文件夹，然后激活验证链接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/www/html/</span><br><span class=\"line\">$ sudo mkdir .well-known</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> .well-known/</span><br><span class=\"line\">$ sudo mkdir acme-challenge</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> acme-challenge/</span><br><span class=\"line\">$ sudo chmod 777 -R /var/www/html/</span><br></pre></td></tr></table></figure></p>\n<p>设置到期后通知邮箱，下载证书</p>\n<h3 id=\"部署HTTPS服务器\"><a href=\"#部署HTTPS服务器\" class=\"headerlink\" title=\"部署HTTPS服务器\"></a>部署HTTPS服务器</h3><p>安装openssl<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openssl</span><br></pre></td></tr></table></figure></p>\n<p>开启SSL模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo a2enmod ssl</span><br></pre></td></tr></table></figure></p>\n<p>拷贝证书到相应目录，指定SSL证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile      /etc/ssl/certs/certificate.crt</span><br><span class=\"line\">SSLCertificateKeyFile   /etc/ssl/private/private.key</span><br><span class=\"line\">SSLCertificateChainFile /etc/ssl/private/ca_bundle.crt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod 777 -R /etc/ssl/</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/apache2/</span><br><span class=\"line\">$ cat ports.conf</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># If you just change the port or add more ports here, you will likely also</span></span><br><span class=\"line\">    <span class=\"comment\"># have to change the VirtualHost statement in</span></span><br><span class=\"line\">    <span class=\"comment\"># /etc/apache2/sites-enabled/000-default.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Listen 80</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;IfModule ssl_module&gt;</span><br><span class=\"line\">            Listen 443</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;IfModule mod_gnutls.c&gt;</span><br><span class=\"line\">            Listen 443</span><br><span class=\"line\">    &lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n<p>建立软链<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/</span><br></pre></td></tr></table></figure></p>\n<p>修改default-ssl.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install vim</span><br><span class=\"line\">$ sudo vim /etc/apache2/sites-available/default-ssl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">    SSLProtocol all -SSLv2 -SSLv3</span><br><span class=\"line\">    SSLCertificateFile      /etc/ssl/certs/certificate.crt</span><br><span class=\"line\">    SSLCertificateKeyFile   /etc/ssl/private/private.key</span><br><span class=\"line\">    SSLCertificateChainFile /etc/ssl/private/ca_bundle.crt</span><br></pre></td></tr></table></figure></p>\n<p>通过a2ensite激活站点<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo a2ensite default-ssl.conf</span><br></pre></td></tr></table></figure></p>\n<p>重启apache<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>\n<p>下载安装oauth2-server<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /var/www/html/</span><br><span class=\"line\">$ sudo apt-get install git</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bshaffer/oauth2-server-php.git -b master</span><br></pre></td></tr></table></figure></p>\n<p>建立数据库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database ilamp;</span><br><span class=\"line\">mysql&gt; use ilamp;</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_access_tokens` (</span><br><span class=\"line\">         `access_token` VARCHAR(40) NOT NULL,</span><br><span class=\"line\">         `client_id`    VARCHAR(80) NOT NULL,</span><br><span class=\"line\">         `user_id`  VARCHAR(255),</span><br><span class=\"line\">         `expires` TIMESTAMP NOT NULL,</span><br><span class=\"line\">         `scope` VARCHAR(2000),</span><br><span class=\"line\">         PRIMARY KEY (access_token));</span><br><span class=\"line\">mysql&gt;  CREATE TABLE `oauth_authorization_codes` (</span><br><span class=\"line\">         `authorization_code` VARCHAR(40) NOT NULL,</span><br><span class=\"line\">         `client_id` VARCHAR(80) NOT NULL,</span><br><span class=\"line\">         `user_id` VARCHAR(255),</span><br><span class=\"line\">         `redirect_uri` VARCHAR(2000),</span><br><span class=\"line\">         `expires` TIMESTAMP NOT NULL,</span><br><span class=\"line\">         `scope` VARCHAR(2000),</span><br><span class=\"line\">         <span class=\"string\">'id_token'</span> VARCHAR(1000),</span><br><span class=\"line\">         PRIMARY KEY (authorization_code));</span><br><span class=\"line\">mysql&gt;  CREATE TABLE <span class=\"string\">'oauth_clients'</span> (</span><br><span class=\"line\">         <span class=\"string\">'client_id'</span> VARCHAR(80) not null,</span><br><span class=\"line\">         <span class=\"string\">'client_secret'</span> VARCHAR(80), </span><br><span class=\"line\">         <span class=\"string\">'redirect_uri'</span> VARCHAR(2000),</span><br><span class=\"line\">         <span class=\"string\">'grant_types'</span> VARCHAR(80),</span><br><span class=\"line\">         <span class=\"string\">'scope'</span> VARCHAR(4000),</span><br><span class=\"line\">         <span class=\"string\">'user_id'</span> VARCHAR(80), </span><br><span class=\"line\">         PRIMARY KEY (client_id));</span><br><span class=\"line\">mysql&gt;  CREATE TABLE `oauth_refresh_tokens` ( </span><br><span class=\"line\">         `refresh_token` VARCHAR(40) NOT NULL,</span><br><span class=\"line\">         `client_id` VARCHAR(80) NOT NULL,</span><br><span class=\"line\">         `user_id` VARCHAR(255),</span><br><span class=\"line\">         `expires` TIMESTAMP NOT NULL,</span><br><span class=\"line\">         `scope` VARCHAR(2000),</span><br><span class=\"line\">         PRIMARY KEY (refresh_token));</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_users` (</span><br><span class=\"line\">         `username` VARCHAR(255) NOT NULL,</span><br><span class=\"line\">         `password` VARCHAR(2000),</span><br><span class=\"line\">         `first_name` VARCHAR(255),</span><br><span class=\"line\">         `last_name` VARCHAR(255),</span><br><span class=\"line\">         PRIMARY KEY (username));</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_scopes` (</span><br><span class=\"line\">         <span class=\"string\">'scope'</span> VARCHAR(80) not null,</span><br><span class=\"line\">         <span class=\"string\">'is_default'</span> boolean,</span><br><span class=\"line\">         PRIMARY KEY(scope));</span><br><span class=\"line\">mysql&gt; CREATE TABLE `oauth_jwt` (</span><br><span class=\"line\">         <span class=\"string\">'client_id'</span> VARCHAR(80) not null,</span><br><span class=\"line\">         <span class=\"string\">'subject'</span> VARCHAR(80),</span><br><span class=\"line\">         <span class=\"string\">'public_key'</span> VARCHAR(2000) not null);</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| Tables_in_ilamp           |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| oauth_access_tokens       |</span><br><span class=\"line\">| oauth_authorization_codes |</span><br><span class=\"line\">| oauth_clients             |</span><br><span class=\"line\">| oauth_jwt                 |</span><br><span class=\"line\">| oauth_refresh_tokens      |</span><br><span class=\"line\">| oauth_scopes              |</span><br><span class=\"line\">| oauth_users               |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">mysql&gt; insert into oauth_clients (client_id, client_secret, redirect_uri ) values (<span class=\"string\">\"id\"</span>,<span class=\"string\">\"psw\"</span>,<span class=\"string\">\"https://open.bot.tmall.com/oauth/callback\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"天猫精灵新加技能\"><a href=\"#天猫精灵新加技能\" class=\"headerlink\" title=\"天猫精灵新加技能\"></a>天猫精灵新加技能</h2><p>登录开发者平台AliGenie - 语音开发者平台  <a href=\"https://open.aligenie.com/\" target=\"_blank\" rel=\"noopener\">https://open.aligenie.com/</a><br>发布新技能。</p>\n<h3 id=\"服务设置\"><a href=\"#服务设置\" class=\"headerlink\" title=\"服务设置\"></a>服务设置</h3><p>OAuth2</p>\n<ul>\n<li>账户授权连接: <a href=\"https://xxxx/authorize.php\" target=\"_blank\" rel=\"noopener\">https://xxxx/authorize.php</a></li>\n<li>ClientID: id</li>\n<li>Client Secret: psw</li>\n<li>跳转 URL: <a href=\"https://open.bot.tmall.com/oauth/callback\" target=\"_blank\" rel=\"noopener\">https://open.bot.tmall.com/oauth/callback</a></li>\n<li>Access Token URL: <a href=\"https://xxx/token.php\" target=\"_blank\" rel=\"noopener\">https://xxx/token.php</a></li>\n<li>厂商登出 URL: 暂无描述</li>\n</ul>\n<p>设备管理</p>\n<ul>\n<li>开发者网关地址: <a href=\"https://xxx/gate.php\" target=\"_blank\" rel=\"noopener\">https://xxx/gate.php</a></li>\n<li>设备管理跳转连接: 暂无描述</li>\n</ul>\n<h3 id=\"开机跳过用户登录\"><a href=\"#开机跳过用户登录\" class=\"headerlink\" title=\"开机跳过用户登录\"></a>开机跳过用户登录</h3><p>打开 系统设置 中的 用户帐户;<br>打开用户帐户设置窗口后，点击右上角的”解锁”按钮;<br>将自动登录设置为“开启”。</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><ul>\n<li>esp8266对接天猫精灵（1）前言 - CSDN博客<br><a href=\"https://blog.csdn.net/qq_35527832/article/details/79143899\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_35527832/article/details/79143899</a></li>\n<li>天猫精灵接入HomeAssistant<br><a href=\"https://weibo.com/ttarticle/p/show?id=2309404195482120392395\" target=\"_blank\" rel=\"noopener\">https://weibo.com/ttarticle/p/show?id=2309404195482120392395</a></li>\n<li>GitHub - c1pher-cn/tmall-bot-x1: 天猫精灵智能家居技能对接homeassistant<br><a href=\"https://github.com/c1pher-cn/tmall-bot-x1\" target=\"_blank\" rel=\"noopener\">https://github.com/c1pher-cn/tmall-bot-x1</a></li>\n<li>【新提醒】天猫精灵接入HomeAssistant【智能家居技能接入，非webhook调用】 - 『HomeAssistant』智能硬件讨论区 - 『瀚思彼岸』» 智能家居第一站 - Hassbian.com<br><a href=\"https://bbs.hassbian.com/thread-1862-1-1.html\" target=\"_blank\" rel=\"noopener\">https://bbs.hassbian.com/thread-1862-1-1.html</a></li>\n<li>AliGenie开发者平台<br><a href=\"http://doc-bot.tmall.com/support/hotProblemDetail.htm?spm=0.0.0.0.cTGpHI&amp;id=332356&amp;tagId=null\" target=\"_blank\" rel=\"noopener\">http://doc-bot.tmall.com/support/hotProblemDetail.htm?spm=0.0.0.0.cTGpHI&amp;id=332356&amp;tagId=null</a></li>\n</ul>\n</the>"},{"title":"好玩的_基于视觉控制的无传感器机械臂","date":"2019-06-16T07:29:46.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n机械之心今天发布了计算机视觉领域顶级会议 CVPR 2019 入选论文《CRAVES: Controlling Robotic Arm with a Vision-based, Economic System》的解读，该论文由约翰霍普金斯大学、清华大学和北京大学王亦洲课题组共同合作完成。  \n\n论文提出了一种基于视觉的机械臂控制系统。仅借助一个额外的摄像头，系统使用深度卷积神经网络，实时估计机械臂的三维姿态，并通过强化学习训练的智能体输出控制信号。进而，系统可以实现控制机械臂到达空间中任意给定三维坐标。基于此，我们还实现了自动抓取骰子的任务。此外，姿态估计和强化学习的训练完全依赖在虚拟环境中生成的数据，不需要人为进行标注与监督。\n\n项目网站：https://craves.ai（含代码和数据）\n\n论文地址：https://arxiv.org/abs/1812.00725\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n简介\n\n如何赋予机器人视觉，让其在多变的环境中完成复杂的任务，近年来吸引了越来越多研究者的关注。然而，以往的研究大多使用昂贵的工业级机器人（价值一万美元以上），这无疑限制了一般的研究者进入这个领域。因此，本文希望通过低成本的硬件来搭建一个机器人研究和教育的平台，以降低相关领域研究的硬件门槛。\n\n我们选用了 OWI-535 机械臂，因为其：\n\n非常廉价，只需要 40 美元左右；\n\n易于获得，在淘宝网或亚马逊上就可以买到；\n\n非常流行，在 Youtube 上有大量用户上传相关的改装与操作的视频。\n\n与此同时，其缺点也非常明显：没有任何传感器，因此无法获得反馈信号并对其进行精确控制。但人可以通过观察机械臂，通过遥控器完成一些高级机械臂才能完成的任务, 例如叠筛子。如何用视觉算法像人一样对没有传感器的机械臂进行控制是本文关注的焦点。\n\n我们选择使用一个外部的 RGB 摄像头作为视觉传感器，实时估计机械臂的三维姿态，并生成反馈控制信号。系统框图如下图所示：\n\n\n\n系统首先读入输入 RGB 视频流中的一帧（图中绿色部分），将其输入到姿态估计网络当中（图中蓝色部分），还原机械臂的三维姿态信息。最后，由强化学习智能体构成的控制器（图中橙色部分）接收三维姿态信息，生成控制信号，控制机械臂的电机运动。\n\n本文的主要贡献包括：\n\n设计了一个低成本的、无传感器的机械臂系统的实现方案;\n\n提出了一种结合几何先验的半监督域适应方法, 实现机械臂位姿估计模块从虚拟到真实的迁移；\n\n提供了三个带标注的数据集和一个虚拟环境，以促进未来该领域研究的发展。\n\n下面将分别介绍数据集收集、姿态估计模块和实验结果。\n\n数据集收集\n\n因为获取带有精确标注的真实数据代价十分高昂，所以我们构建了一个虚拟环境来自动生成标注数据，用于训练。为了验证模型在真实场景的性能，我们额外收集了两个真实数据集，并进行了人工标注。三个数据集及虚拟环境均开放下载。\n\n第一个数据集是虚拟数据集（Virtual Dataset）。我们使用了虚幻 4 引擎及其插件 Unrealcv[2] 来进行场景的渲染和数据采集。在生成训练数据时，我们对摄像机的位置、场景光照和背景进行随机化，以增强网络在真实场景中的泛化能力。我们共采集了 5000 张图片作为训练数据。虚拟数据集的标注自动生成，包括三维姿态信息。\n\n第二个数据集是实验室数据集（Lab Dataset）。我们在实验室环境拍摄了机械臂的图片，标定了相机的内外参数和机械臂的三维姿态。实验室数据集由 500 张左右图片构成，只用于测试。\n\n第三个数据集是 YouTube 数据集。我们爬取了 YouTube 中 OWI-535 机械臂的相关视频，并进行了手工标注，由于相机内外参数未知，因此我们只标注了二维关键点的位置。YouTube 数据集由 500 张左右图片构成，只用于测试。\n\n数据集样例图片见下图：\n\n\n\n上两行：虚拟数据；第三行：实验室数据；最后一行：YouTube 数据\n\n可迁移的三维姿态估计\n\n机械臂三维姿态估计模块是系统的核心组成部分。其输入是 RGB 图像，输出是机械臂的三维姿态，也即各个转轴的角度。具体而言，其由两个子模块构成：第一个子模块是二维关键点估计神经网络，由输入图像还原出二维关键点坐标；第二个子模块依据二维关键点还原出三维姿态。\n\n二维关键点估计神经网络使用的是 Stacked Hourglass Network[1]，网络采用全卷积结构。我们预先定义好机械臂上的 17 个关键点，网络的输出是与其对应的 17 个通道的热点图。在预测时，我们取热点图上响应最明显的位置作为预测结果。\n\n获取了二维姿态后，第二个子模块进行三维还原。我们将机械臂建模为一个 4 个自由度的多刚体模型，因此 17 个关键点的位置满足一定的约束关系。我们通过在线的解一个优化方程，即最小化二维关键点的预测位置和三维模型重投影位置之间的误差，来获得机械臂各转轴角度的最优解。\n\n此外，我们提出了新的半监督域迁移算法。只使用虚拟数据进行训练的网络，在真实图片上的表现不够好，而采用了我们的算法之后，泛化性能有大幅度提升。下图展示了我们的域迁移算法框图。我们首先使用虚拟图片对神经网络进行预训练。之后，我们将没有标注过的真实图片送入网络，生成初始预测结果。由于域间的差异，初始预测结果可能会产生错误。我们基于初始预测结果进行三维重建，并将此结果投影回二维，就获得了优化后的关键点预测结果。由于在此过程中引入了机械臂刚性结构的强先验信息，所以优化后的预测结果会好于初始预测结果。最后，我们用真实图片及用这种方法生成的虚假标签来对神经网络进行微调。\n\n\n\n我们首先使用虚拟图片对神经网络进行预训练（图中绿色虚线）。然后，我们将没有标注过的真实图片送入网络，生成初始预测结果。接下来，基于初始预测结果进行三维重建，并将此结果投影回二维，获得优化后的关键点预测结果。最后对网络进行微调（图中蓝色部分）。\n\n实验结果\n\n二维关键点预测结果\n\n如下表所示，我们证明了在实验室环境下，我们提出的半监督域迁移算法（最后一行）相比于只使用虚拟数据训练的网络（第一行）性能有很大提升。且此方法优于其他的无监督域迁移算法，包括 CycleGAN[3] 等。参与对比的几种域迁移方法都以 Lab 数据集作为目标域。其在从未见过的 YouTube 数据上的准确率相对其他方法有更大提高，说明网络整体泛化能力获得提升。\n\n上表为不同迁移方法下得到的模型的二维关键点检测准确率。测试数据分别在虚拟数据集、实验室数据集、YouTube 数据集，其中 YouTube-vis 为只计算可见的关键点的结果。\n\n三维重建结果\n\n下图展示了三维重建的定性结果。上图是原始图片，下图是经过三维重建并渲染可视化的图片。可见，系统可以在复杂背景下对机械臂进行三维重建。实验室数据集上的定量结果表明，机械臂转角的重建误差约为 4.8 度。\n\n机械臂控制结果\n\n我们使用 DDPG 算法训练强化学习智能体，在虚拟环境中进行交互。智能体的输入是当前状态、目标状态和上一时刻的决策。输出是对 4 个电机马达的控制信号。我们在两个任务上进行了测试。\n\n第一个任务是 Reach，即让机械臂的前端达到特定目标点的正上方。这是机械臂的「基本功」。通过测量终止位置和目标位置之间的水平距离来评价结果的好坏。上图是我们的实验装置示意图，下方参考板上的 9 个黑色圆点即为目标位置。在这个任务上，我们达到了与人类控制相近的精度。\n\n\n\n在不同的视角、背景下也能很好地工作。\n\n\n\n第二个任务是夹取骰子，现阶段骰子的三维空间位置由人工测量给定。\n\n\n\n参考文献：\n\n[1] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hourglass networks for human pose estimation. In European Conference on Computer Vision, 2016.\n\n[2] Weichao Qiu, Fangwei Zhong, Yi Zhang, Siyuan Qiao, Zihao Xiao, Tae Soo Kim, Yizhou Wang, and Alan Yuille. Unrealcv: Virtual worlds for computer vision. In Proceedings of the 25th ACM International Conference on Multimedia, 2017.\n\n[3] Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A.Efros. Unpaired image-to-image translation using cycleconsistent adversarial networks. In International Conference on Computer Vision, 2017.\n\n","source":"_posts/好玩的-基于视觉控制的无传感器机械臂.md","raw":"---\ntitle: 好玩的_基于视觉控制的无传感器机械臂\ndate: 2019-06-16 15:29:46\ntags:\n\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n机械之心今天发布了计算机视觉领域顶级会议 CVPR 2019 入选论文《CRAVES: Controlling Robotic Arm with a Vision-based, Economic System》的解读，该论文由约翰霍普金斯大学、清华大学和北京大学王亦洲课题组共同合作完成。  \n\n论文提出了一种基于视觉的机械臂控制系统。仅借助一个额外的摄像头，系统使用深度卷积神经网络，实时估计机械臂的三维姿态，并通过强化学习训练的智能体输出控制信号。进而，系统可以实现控制机械臂到达空间中任意给定三维坐标。基于此，我们还实现了自动抓取骰子的任务。此外，姿态估计和强化学习的训练完全依赖在虚拟环境中生成的数据，不需要人为进行标注与监督。\n\n项目网站：https://craves.ai（含代码和数据）\n\n论文地址：https://arxiv.org/abs/1812.00725\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n简介\n\n如何赋予机器人视觉，让其在多变的环境中完成复杂的任务，近年来吸引了越来越多研究者的关注。然而，以往的研究大多使用昂贵的工业级机器人（价值一万美元以上），这无疑限制了一般的研究者进入这个领域。因此，本文希望通过低成本的硬件来搭建一个机器人研究和教育的平台，以降低相关领域研究的硬件门槛。\n\n我们选用了 OWI-535 机械臂，因为其：\n\n非常廉价，只需要 40 美元左右；\n\n易于获得，在淘宝网或亚马逊上就可以买到；\n\n非常流行，在 Youtube 上有大量用户上传相关的改装与操作的视频。\n\n与此同时，其缺点也非常明显：没有任何传感器，因此无法获得反馈信号并对其进行精确控制。但人可以通过观察机械臂，通过遥控器完成一些高级机械臂才能完成的任务, 例如叠筛子。如何用视觉算法像人一样对没有传感器的机械臂进行控制是本文关注的焦点。\n\n我们选择使用一个外部的 RGB 摄像头作为视觉传感器，实时估计机械臂的三维姿态，并生成反馈控制信号。系统框图如下图所示：\n\n\n\n系统首先读入输入 RGB 视频流中的一帧（图中绿色部分），将其输入到姿态估计网络当中（图中蓝色部分），还原机械臂的三维姿态信息。最后，由强化学习智能体构成的控制器（图中橙色部分）接收三维姿态信息，生成控制信号，控制机械臂的电机运动。\n\n本文的主要贡献包括：\n\n设计了一个低成本的、无传感器的机械臂系统的实现方案;\n\n提出了一种结合几何先验的半监督域适应方法, 实现机械臂位姿估计模块从虚拟到真实的迁移；\n\n提供了三个带标注的数据集和一个虚拟环境，以促进未来该领域研究的发展。\n\n下面将分别介绍数据集收集、姿态估计模块和实验结果。\n\n数据集收集\n\n因为获取带有精确标注的真实数据代价十分高昂，所以我们构建了一个虚拟环境来自动生成标注数据，用于训练。为了验证模型在真实场景的性能，我们额外收集了两个真实数据集，并进行了人工标注。三个数据集及虚拟环境均开放下载。\n\n第一个数据集是虚拟数据集（Virtual Dataset）。我们使用了虚幻 4 引擎及其插件 Unrealcv[2] 来进行场景的渲染和数据采集。在生成训练数据时，我们对摄像机的位置、场景光照和背景进行随机化，以增强网络在真实场景中的泛化能力。我们共采集了 5000 张图片作为训练数据。虚拟数据集的标注自动生成，包括三维姿态信息。\n\n第二个数据集是实验室数据集（Lab Dataset）。我们在实验室环境拍摄了机械臂的图片，标定了相机的内外参数和机械臂的三维姿态。实验室数据集由 500 张左右图片构成，只用于测试。\n\n第三个数据集是 YouTube 数据集。我们爬取了 YouTube 中 OWI-535 机械臂的相关视频，并进行了手工标注，由于相机内外参数未知，因此我们只标注了二维关键点的位置。YouTube 数据集由 500 张左右图片构成，只用于测试。\n\n数据集样例图片见下图：\n\n\n\n上两行：虚拟数据；第三行：实验室数据；最后一行：YouTube 数据\n\n可迁移的三维姿态估计\n\n机械臂三维姿态估计模块是系统的核心组成部分。其输入是 RGB 图像，输出是机械臂的三维姿态，也即各个转轴的角度。具体而言，其由两个子模块构成：第一个子模块是二维关键点估计神经网络，由输入图像还原出二维关键点坐标；第二个子模块依据二维关键点还原出三维姿态。\n\n二维关键点估计神经网络使用的是 Stacked Hourglass Network[1]，网络采用全卷积结构。我们预先定义好机械臂上的 17 个关键点，网络的输出是与其对应的 17 个通道的热点图。在预测时，我们取热点图上响应最明显的位置作为预测结果。\n\n获取了二维姿态后，第二个子模块进行三维还原。我们将机械臂建模为一个 4 个自由度的多刚体模型，因此 17 个关键点的位置满足一定的约束关系。我们通过在线的解一个优化方程，即最小化二维关键点的预测位置和三维模型重投影位置之间的误差，来获得机械臂各转轴角度的最优解。\n\n此外，我们提出了新的半监督域迁移算法。只使用虚拟数据进行训练的网络，在真实图片上的表现不够好，而采用了我们的算法之后，泛化性能有大幅度提升。下图展示了我们的域迁移算法框图。我们首先使用虚拟图片对神经网络进行预训练。之后，我们将没有标注过的真实图片送入网络，生成初始预测结果。由于域间的差异，初始预测结果可能会产生错误。我们基于初始预测结果进行三维重建，并将此结果投影回二维，就获得了优化后的关键点预测结果。由于在此过程中引入了机械臂刚性结构的强先验信息，所以优化后的预测结果会好于初始预测结果。最后，我们用真实图片及用这种方法生成的虚假标签来对神经网络进行微调。\n\n\n\n我们首先使用虚拟图片对神经网络进行预训练（图中绿色虚线）。然后，我们将没有标注过的真实图片送入网络，生成初始预测结果。接下来，基于初始预测结果进行三维重建，并将此结果投影回二维，获得优化后的关键点预测结果。最后对网络进行微调（图中蓝色部分）。\n\n实验结果\n\n二维关键点预测结果\n\n如下表所示，我们证明了在实验室环境下，我们提出的半监督域迁移算法（最后一行）相比于只使用虚拟数据训练的网络（第一行）性能有很大提升。且此方法优于其他的无监督域迁移算法，包括 CycleGAN[3] 等。参与对比的几种域迁移方法都以 Lab 数据集作为目标域。其在从未见过的 YouTube 数据上的准确率相对其他方法有更大提高，说明网络整体泛化能力获得提升。\n\n上表为不同迁移方法下得到的模型的二维关键点检测准确率。测试数据分别在虚拟数据集、实验室数据集、YouTube 数据集，其中 YouTube-vis 为只计算可见的关键点的结果。\n\n三维重建结果\n\n下图展示了三维重建的定性结果。上图是原始图片，下图是经过三维重建并渲染可视化的图片。可见，系统可以在复杂背景下对机械臂进行三维重建。实验室数据集上的定量结果表明，机械臂转角的重建误差约为 4.8 度。\n\n机械臂控制结果\n\n我们使用 DDPG 算法训练强化学习智能体，在虚拟环境中进行交互。智能体的输入是当前状态、目标状态和上一时刻的决策。输出是对 4 个电机马达的控制信号。我们在两个任务上进行了测试。\n\n第一个任务是 Reach，即让机械臂的前端达到特定目标点的正上方。这是机械臂的「基本功」。通过测量终止位置和目标位置之间的水平距离来评价结果的好坏。上图是我们的实验装置示意图，下方参考板上的 9 个黑色圆点即为目标位置。在这个任务上，我们达到了与人类控制相近的精度。\n\n\n\n在不同的视角、背景下也能很好地工作。\n\n\n\n第二个任务是夹取骰子，现阶段骰子的三维空间位置由人工测量给定。\n\n\n\n参考文献：\n\n[1] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hourglass networks for human pose estimation. In European Conference on Computer Vision, 2016.\n\n[2] Weichao Qiu, Fangwei Zhong, Yi Zhang, Siyuan Qiao, Zihao Xiao, Tae Soo Kim, Yizhou Wang, and Alan Yuille. Unrealcv: Virtual worlds for computer vision. In Proceedings of the 25th ACM International Conference on Multimedia, 2017.\n\n[3] Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A.Efros. Unpaired image-to-image translation using cycleconsistent adversarial networks. In International Conference on Computer Vision, 2017.\n\n","slug":"好玩的-基于视觉控制的无传感器机械臂","published":1,"updated":"2020-01-05T19:13:24.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50b700624cvjb3nri52f","content":"<p><strong> 好玩的_基于视觉控制的无传感器机械臂 </strong> <excerpt in index | 首页摘要><br>机械之心今天发布了计算机视觉领域顶级会议 CVPR 2019 入选论文《CRAVES: Controlling Robotic Arm with a Vision-based, Economic System》的解读，该论文由约翰霍普金斯大学、清华大学和北京大学王亦洲课题组共同合作完成。  </excerpt></p>\n<p>论文提出了一种基于视觉的机械臂控制系统。仅借助一个额外的摄像头，系统使用深度卷积神经网络，实时估计机械臂的三维姿态，并通过强化学习训练的智能体输出控制信号。进而，系统可以实现控制机械臂到达空间中任意给定三维坐标。基于此，我们还实现了自动抓取骰子的任务。此外，姿态估计和强化学习的训练完全依赖在虚拟环境中生成的数据，不需要人为进行标注与监督。</p>\n<p>项目网站：<a href=\"https://craves.ai（含代码和数据）\" target=\"_blank\" rel=\"noopener\">https://craves.ai（含代码和数据）</a></p>\n<p>论文地址：<a href=\"https://arxiv.org/abs/1812.00725\" target=\"_blank\" rel=\"noopener\">https://arxiv.org/abs/1812.00725</a></p>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<p>简介</p>\n<p>如何赋予机器人视觉，让其在多变的环境中完成复杂的任务，近年来吸引了越来越多研究者的关注。然而，以往的研究大多使用昂贵的工业级机器人（价值一万美元以上），这无疑限制了一般的研究者进入这个领域。因此，本文希望通过低成本的硬件来搭建一个机器人研究和教育的平台，以降低相关领域研究的硬件门槛。</p>\n<p>我们选用了 OWI-535 机械臂，因为其：</p>\n<p>非常廉价，只需要 40 美元左右；</p>\n<p>易于获得，在淘宝网或亚马逊上就可以买到；</p>\n<p>非常流行，在 Youtube 上有大量用户上传相关的改装与操作的视频。</p>\n<p>与此同时，其缺点也非常明显：没有任何传感器，因此无法获得反馈信号并对其进行精确控制。但人可以通过观察机械臂，通过遥控器完成一些高级机械臂才能完成的任务, 例如叠筛子。如何用视觉算法像人一样对没有传感器的机械臂进行控制是本文关注的焦点。</p>\n<p>我们选择使用一个外部的 RGB 摄像头作为视觉传感器，实时估计机械臂的三维姿态，并生成反馈控制信号。系统框图如下图所示：</p>\n<p>系统首先读入输入 RGB 视频流中的一帧（图中绿色部分），将其输入到姿态估计网络当中（图中蓝色部分），还原机械臂的三维姿态信息。最后，由强化学习智能体构成的控制器（图中橙色部分）接收三维姿态信息，生成控制信号，控制机械臂的电机运动。</p>\n<p>本文的主要贡献包括：</p>\n<p>设计了一个低成本的、无传感器的机械臂系统的实现方案;</p>\n<p>提出了一种结合几何先验的半监督域适应方法, 实现机械臂位姿估计模块从虚拟到真实的迁移；</p>\n<p>提供了三个带标注的数据集和一个虚拟环境，以促进未来该领域研究的发展。</p>\n<p>下面将分别介绍数据集收集、姿态估计模块和实验结果。</p>\n<p>数据集收集</p>\n<p>因为获取带有精确标注的真实数据代价十分高昂，所以我们构建了一个虚拟环境来自动生成标注数据，用于训练。为了验证模型在真实场景的性能，我们额外收集了两个真实数据集，并进行了人工标注。三个数据集及虚拟环境均开放下载。</p>\n<p>第一个数据集是虚拟数据集（Virtual Dataset）。我们使用了虚幻 4 引擎及其插件 Unrealcv[2] 来进行场景的渲染和数据采集。在生成训练数据时，我们对摄像机的位置、场景光照和背景进行随机化，以增强网络在真实场景中的泛化能力。我们共采集了 5000 张图片作为训练数据。虚拟数据集的标注自动生成，包括三维姿态信息。</p>\n<p>第二个数据集是实验室数据集（Lab Dataset）。我们在实验室环境拍摄了机械臂的图片，标定了相机的内外参数和机械臂的三维姿态。实验室数据集由 500 张左右图片构成，只用于测试。</p>\n<p>第三个数据集是 YouTube 数据集。我们爬取了 YouTube 中 OWI-535 机械臂的相关视频，并进行了手工标注，由于相机内外参数未知，因此我们只标注了二维关键点的位置。YouTube 数据集由 500 张左右图片构成，只用于测试。</p>\n<p>数据集样例图片见下图：</p>\n<p>上两行：虚拟数据；第三行：实验室数据；最后一行：YouTube 数据</p>\n<p>可迁移的三维姿态估计</p>\n<p>机械臂三维姿态估计模块是系统的核心组成部分。其输入是 RGB 图像，输出是机械臂的三维姿态，也即各个转轴的角度。具体而言，其由两个子模块构成：第一个子模块是二维关键点估计神经网络，由输入图像还原出二维关键点坐标；第二个子模块依据二维关键点还原出三维姿态。</p>\n<p>二维关键点估计神经网络使用的是 Stacked Hourglass Network[1]，网络采用全卷积结构。我们预先定义好机械臂上的 17 个关键点，网络的输出是与其对应的 17 个通道的热点图。在预测时，我们取热点图上响应最明显的位置作为预测结果。</p>\n<p>获取了二维姿态后，第二个子模块进行三维还原。我们将机械臂建模为一个 4 个自由度的多刚体模型，因此 17 个关键点的位置满足一定的约束关系。我们通过在线的解一个优化方程，即最小化二维关键点的预测位置和三维模型重投影位置之间的误差，来获得机械臂各转轴角度的最优解。</p>\n<p>此外，我们提出了新的半监督域迁移算法。只使用虚拟数据进行训练的网络，在真实图片上的表现不够好，而采用了我们的算法之后，泛化性能有大幅度提升。下图展示了我们的域迁移算法框图。我们首先使用虚拟图片对神经网络进行预训练。之后，我们将没有标注过的真实图片送入网络，生成初始预测结果。由于域间的差异，初始预测结果可能会产生错误。我们基于初始预测结果进行三维重建，并将此结果投影回二维，就获得了优化后的关键点预测结果。由于在此过程中引入了机械臂刚性结构的强先验信息，所以优化后的预测结果会好于初始预测结果。最后，我们用真实图片及用这种方法生成的虚假标签来对神经网络进行微调。</p>\n<p>我们首先使用虚拟图片对神经网络进行预训练（图中绿色虚线）。然后，我们将没有标注过的真实图片送入网络，生成初始预测结果。接下来，基于初始预测结果进行三维重建，并将此结果投影回二维，获得优化后的关键点预测结果。最后对网络进行微调（图中蓝色部分）。</p>\n<p>实验结果</p>\n<p>二维关键点预测结果</p>\n<p>如下表所示，我们证明了在实验室环境下，我们提出的半监督域迁移算法（最后一行）相比于只使用虚拟数据训练的网络（第一行）性能有很大提升。且此方法优于其他的无监督域迁移算法，包括 CycleGAN[3] 等。参与对比的几种域迁移方法都以 Lab 数据集作为目标域。其在从未见过的 YouTube 数据上的准确率相对其他方法有更大提高，说明网络整体泛化能力获得提升。</p>\n<p>上表为不同迁移方法下得到的模型的二维关键点检测准确率。测试数据分别在虚拟数据集、实验室数据集、YouTube 数据集，其中 YouTube-vis 为只计算可见的关键点的结果。</p>\n<p>三维重建结果</p>\n<p>下图展示了三维重建的定性结果。上图是原始图片，下图是经过三维重建并渲染可视化的图片。可见，系统可以在复杂背景下对机械臂进行三维重建。实验室数据集上的定量结果表明，机械臂转角的重建误差约为 4.8 度。</p>\n<p>机械臂控制结果</p>\n<p>我们使用 DDPG 算法训练强化学习智能体，在虚拟环境中进行交互。智能体的输入是当前状态、目标状态和上一时刻的决策。输出是对 4 个电机马达的控制信号。我们在两个任务上进行了测试。</p>\n<p>第一个任务是 Reach，即让机械臂的前端达到特定目标点的正上方。这是机械臂的「基本功」。通过测量终止位置和目标位置之间的水平距离来评价结果的好坏。上图是我们的实验装置示意图，下方参考板上的 9 个黑色圆点即为目标位置。在这个任务上，我们达到了与人类控制相近的精度。</p>\n<p>在不同的视角、背景下也能很好地工作。</p>\n<p>第二个任务是夹取骰子，现阶段骰子的三维空间位置由人工测量给定。</p>\n<p>参考文献：</p>\n<p>[1] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hourglass networks for human pose estimation. In European Conference on Computer Vision, 2016.</p>\n<p>[2] Weichao Qiu, Fangwei Zhong, Yi Zhang, Siyuan Qiao, Zihao Xiao, Tae Soo Kim, Yizhou Wang, and Alan Yuille. Unrealcv: Virtual worlds for computer vision. In Proceedings of the 25th ACM International Conference on Multimedia, 2017.</p>\n<p>[3] Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A.Efros. Unpaired image-to-image translation using cycleconsistent adversarial networks. In International Conference on Computer Vision, 2017.</p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 好玩的_基于视觉控制的无传感器机械臂 </strong> <excerpt in index | 首页摘要><br>机械之心今天发布了计算机视觉领域顶级会议 CVPR 2019 入选论文《CRAVES: Controlling Robotic Arm with a Vision-based, Economic System》的解读，该论文由约翰霍普金斯大学、清华大学和北京大学王亦洲课题组共同合作完成。  </excerpt></p>\n<p>论文提出了一种基于视觉的机械臂控制系统。仅借助一个额外的摄像头，系统使用深度卷积神经网络，实时估计机械臂的三维姿态，并通过强化学习训练的智能体输出控制信号。进而，系统可以实现控制机械臂到达空间中任意给定三维坐标。基于此，我们还实现了自动抓取骰子的任务。此外，姿态估计和强化学习的训练完全依赖在虚拟环境中生成的数据，不需要人为进行标注与监督。</p>\n<p>项目网站：<a href=\"https://craves.ai（含代码和数据）\" target=\"_blank\" rel=\"noopener\">https://craves.ai（含代码和数据）</a></p>\n<p>论文地址：<a href=\"https://arxiv.org/abs/1812.00725\" target=\"_blank\" rel=\"noopener\">https://arxiv.org/abs/1812.00725</a></p>","more":"<the rest of contents | 余下全文>\n\n\n<p>简介</p>\n<p>如何赋予机器人视觉，让其在多变的环境中完成复杂的任务，近年来吸引了越来越多研究者的关注。然而，以往的研究大多使用昂贵的工业级机器人（价值一万美元以上），这无疑限制了一般的研究者进入这个领域。因此，本文希望通过低成本的硬件来搭建一个机器人研究和教育的平台，以降低相关领域研究的硬件门槛。</p>\n<p>我们选用了 OWI-535 机械臂，因为其：</p>\n<p>非常廉价，只需要 40 美元左右；</p>\n<p>易于获得，在淘宝网或亚马逊上就可以买到；</p>\n<p>非常流行，在 Youtube 上有大量用户上传相关的改装与操作的视频。</p>\n<p>与此同时，其缺点也非常明显：没有任何传感器，因此无法获得反馈信号并对其进行精确控制。但人可以通过观察机械臂，通过遥控器完成一些高级机械臂才能完成的任务, 例如叠筛子。如何用视觉算法像人一样对没有传感器的机械臂进行控制是本文关注的焦点。</p>\n<p>我们选择使用一个外部的 RGB 摄像头作为视觉传感器，实时估计机械臂的三维姿态，并生成反馈控制信号。系统框图如下图所示：</p>\n<p>系统首先读入输入 RGB 视频流中的一帧（图中绿色部分），将其输入到姿态估计网络当中（图中蓝色部分），还原机械臂的三维姿态信息。最后，由强化学习智能体构成的控制器（图中橙色部分）接收三维姿态信息，生成控制信号，控制机械臂的电机运动。</p>\n<p>本文的主要贡献包括：</p>\n<p>设计了一个低成本的、无传感器的机械臂系统的实现方案;</p>\n<p>提出了一种结合几何先验的半监督域适应方法, 实现机械臂位姿估计模块从虚拟到真实的迁移；</p>\n<p>提供了三个带标注的数据集和一个虚拟环境，以促进未来该领域研究的发展。</p>\n<p>下面将分别介绍数据集收集、姿态估计模块和实验结果。</p>\n<p>数据集收集</p>\n<p>因为获取带有精确标注的真实数据代价十分高昂，所以我们构建了一个虚拟环境来自动生成标注数据，用于训练。为了验证模型在真实场景的性能，我们额外收集了两个真实数据集，并进行了人工标注。三个数据集及虚拟环境均开放下载。</p>\n<p>第一个数据集是虚拟数据集（Virtual Dataset）。我们使用了虚幻 4 引擎及其插件 Unrealcv[2] 来进行场景的渲染和数据采集。在生成训练数据时，我们对摄像机的位置、场景光照和背景进行随机化，以增强网络在真实场景中的泛化能力。我们共采集了 5000 张图片作为训练数据。虚拟数据集的标注自动生成，包括三维姿态信息。</p>\n<p>第二个数据集是实验室数据集（Lab Dataset）。我们在实验室环境拍摄了机械臂的图片，标定了相机的内外参数和机械臂的三维姿态。实验室数据集由 500 张左右图片构成，只用于测试。</p>\n<p>第三个数据集是 YouTube 数据集。我们爬取了 YouTube 中 OWI-535 机械臂的相关视频，并进行了手工标注，由于相机内外参数未知，因此我们只标注了二维关键点的位置。YouTube 数据集由 500 张左右图片构成，只用于测试。</p>\n<p>数据集样例图片见下图：</p>\n<p>上两行：虚拟数据；第三行：实验室数据；最后一行：YouTube 数据</p>\n<p>可迁移的三维姿态估计</p>\n<p>机械臂三维姿态估计模块是系统的核心组成部分。其输入是 RGB 图像，输出是机械臂的三维姿态，也即各个转轴的角度。具体而言，其由两个子模块构成：第一个子模块是二维关键点估计神经网络，由输入图像还原出二维关键点坐标；第二个子模块依据二维关键点还原出三维姿态。</p>\n<p>二维关键点估计神经网络使用的是 Stacked Hourglass Network[1]，网络采用全卷积结构。我们预先定义好机械臂上的 17 个关键点，网络的输出是与其对应的 17 个通道的热点图。在预测时，我们取热点图上响应最明显的位置作为预测结果。</p>\n<p>获取了二维姿态后，第二个子模块进行三维还原。我们将机械臂建模为一个 4 个自由度的多刚体模型，因此 17 个关键点的位置满足一定的约束关系。我们通过在线的解一个优化方程，即最小化二维关键点的预测位置和三维模型重投影位置之间的误差，来获得机械臂各转轴角度的最优解。</p>\n<p>此外，我们提出了新的半监督域迁移算法。只使用虚拟数据进行训练的网络，在真实图片上的表现不够好，而采用了我们的算法之后，泛化性能有大幅度提升。下图展示了我们的域迁移算法框图。我们首先使用虚拟图片对神经网络进行预训练。之后，我们将没有标注过的真实图片送入网络，生成初始预测结果。由于域间的差异，初始预测结果可能会产生错误。我们基于初始预测结果进行三维重建，并将此结果投影回二维，就获得了优化后的关键点预测结果。由于在此过程中引入了机械臂刚性结构的强先验信息，所以优化后的预测结果会好于初始预测结果。最后，我们用真实图片及用这种方法生成的虚假标签来对神经网络进行微调。</p>\n<p>我们首先使用虚拟图片对神经网络进行预训练（图中绿色虚线）。然后，我们将没有标注过的真实图片送入网络，生成初始预测结果。接下来，基于初始预测结果进行三维重建，并将此结果投影回二维，获得优化后的关键点预测结果。最后对网络进行微调（图中蓝色部分）。</p>\n<p>实验结果</p>\n<p>二维关键点预测结果</p>\n<p>如下表所示，我们证明了在实验室环境下，我们提出的半监督域迁移算法（最后一行）相比于只使用虚拟数据训练的网络（第一行）性能有很大提升。且此方法优于其他的无监督域迁移算法，包括 CycleGAN[3] 等。参与对比的几种域迁移方法都以 Lab 数据集作为目标域。其在从未见过的 YouTube 数据上的准确率相对其他方法有更大提高，说明网络整体泛化能力获得提升。</p>\n<p>上表为不同迁移方法下得到的模型的二维关键点检测准确率。测试数据分别在虚拟数据集、实验室数据集、YouTube 数据集，其中 YouTube-vis 为只计算可见的关键点的结果。</p>\n<p>三维重建结果</p>\n<p>下图展示了三维重建的定性结果。上图是原始图片，下图是经过三维重建并渲染可视化的图片。可见，系统可以在复杂背景下对机械臂进行三维重建。实验室数据集上的定量结果表明，机械臂转角的重建误差约为 4.8 度。</p>\n<p>机械臂控制结果</p>\n<p>我们使用 DDPG 算法训练强化学习智能体，在虚拟环境中进行交互。智能体的输入是当前状态、目标状态和上一时刻的决策。输出是对 4 个电机马达的控制信号。我们在两个任务上进行了测试。</p>\n<p>第一个任务是 Reach，即让机械臂的前端达到特定目标点的正上方。这是机械臂的「基本功」。通过测量终止位置和目标位置之间的水平距离来评价结果的好坏。上图是我们的实验装置示意图，下方参考板上的 9 个黑色圆点即为目标位置。在这个任务上，我们达到了与人类控制相近的精度。</p>\n<p>在不同的视角、背景下也能很好地工作。</p>\n<p>第二个任务是夹取骰子，现阶段骰子的三维空间位置由人工测量给定。</p>\n<p>参考文献：</p>\n<p>[1] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hourglass networks for human pose estimation. In European Conference on Computer Vision, 2016.</p>\n<p>[2] Weichao Qiu, Fangwei Zhong, Yi Zhang, Siyuan Qiao, Zihao Xiao, Tae Soo Kim, Yizhou Wang, and Alan Yuille. Unrealcv: Virtual worlds for computer vision. In Proceedings of the 25th ACM International Conference on Multimedia, 2017.</p>\n<p>[3] Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A.Efros. Unpaired image-to-image translation using cycleconsistent adversarial networks. In International Conference on Computer Vision, 2017.</p>\n</the>"},{"title":"空间博弈与matplotlib绘制gif动图","date":"2019-11-11T12:57:06.000Z","toc":true,"_content":"\n```python\n# 独立窗口显示\n%matplotlib qt5 \n# %matplotlib inline # 取消matplotlib的独立窗口显示\n```\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Python实现元胞自动机\n* 详解Python 实现元胞自动机中的生命游戏(Game of life)_python_脚本之家  \nhttps://www.jb51.net/article/133807.htm\n\n问题重述\n* 个体位于L*L网络上，网络无周期边界。  \n* 每个格子一个个体，有0或1两种状态，0为死亡，1为存活。  \n* 依据Moore邻居的状态决定个体下一时刻的状态：如果相邻方格活着的细胞数量过多，这个细胞会因为资源匮乏而在下一个时刻死去；相反，如果周围活细胞过少，这个细胞会因太孤单而死去。  \n* 每个个体的状态更新是同步进行的。\n\n\n```python\n\"\"\"\n元胞自动机 Python 实现\n\"\"\"\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n\nclass GameOfLife(object):\n \n    def __init__(self, cells_shape):\n        \"\"\"\n        Parameters\n        ----------\n        cells_shape : 一个元组，表示画布的大小。\n\n        Examples\n        --------\n        建立一个高20，宽30的画布\n        game = GameOfLife((20, 30))\n\n        \"\"\"\n\n        # 矩阵的四周不参与运算\n        self.cells = np.zeros(cells_shape)\n\n        real_width = cells_shape[0] - 2\n        real_height = cells_shape[1] - 2\n\n        self.cells[1:-1, 1:-1] = np.random.randint(2, size=(real_width, real_height))\n        self.timer = 0\n        self.mask = np.ones(9)\n        self.mask[4] = 0\n\n    def update_state(self):\n        \"\"\"更新一次状态\"\"\"\n        buf = np.zeros(self.cells.shape)\n        cells = self.cells\n        for i in range(1, cells.shape[0] - 1):\n            for j in range(1, cells.shape[0] - 1):\n                # 计算该细胞周围的存活细胞数\n                neighbor = cells[i-1:i+2, j-1:j+2].reshape((-1, ))\n                neighbor_num = np.convolve(self.mask, neighbor, 'valid')[0]\n                if neighbor_num == 3:\n                    buf[i, j] = 1\n                elif neighbor_num == 2:\n                    buf[i, j] = cells[i, j]\n                else:\n                    buf[i, j] = 0\n        self.cells = buf\n        self.timer += 1\n   \n    def plot_state(self):\n        \"\"\"画出当前的状态\"\"\"\n        plt.title('Iter :{}'.format(self.timer))\n        plt.imshow(self.cells)\n        plt.show()\n \n    def update_and_plot(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        plt.ion()\n        for _ in range(n_iter):\n            plt.title('Iter :{}'.format(self.timer))\n            plt.imshow(self.cells)\n            self.update_state()\n            plt.pause(0.2)\n        plt.ioff()\n           \n\nif __name__ == '__main__':\n    game = GameOfLife(cells_shape=(60, 60))\n    game.update_and_plot(5)\n\n```\n<img src=\"空间博弈与matplotlib绘制gif动图\\01.png\">\n\n生命游戏中的图形\n* Category:Animated images - LifeWiki  \nhttps://www.conwaylife.com/wiki/Category:Animated_images\n\n\n## 基于元胞自动机的空间博弈\n\n问题重述\n* 个体位于L*L网络上，网络无周期边界。  \n* 每个格子一个个体，有0或1两种状态，0为背叛，1为合作。  \n* 每一时刻，个体和其Moore邻居进行博弈，依据Nowak的单参数收益矩阵，得到每个个体的收益，下一时刻个体的策略以此为基础，即选择自身及邻居中收益值最高的那个个体的策略，作为该个体下一时刻的策略。\n* 个体策略更新是同步进行的。\n\n单参数收益矩阵( 1 < b < 2 )\n|  | C | D |\n| ------ | ------ | ------ |\n| C | 1 | 0 |\n| D | b | 0 |\n\n\n```python\n\"\"\"\n基于元胞自动机的空间博弈演化\n\"\"\"\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n\nclass GameOfLife(object):\n \n    def __init__(self, cells_shape):\n        \"\"\"\n        Parameters\n        ----------\n        cells_shape : 一个元组，表示画布的大小。\n\n        Examples\n        --------\n        建立一个高20，宽30的画布\n        game = GameOfLife((20, 30))\n\n        \"\"\"\n\n        # 矩阵的四周不参与运算\n        self.cells_strategic = np.ones(cells_shape)\n        self.cells_benefits = np.zeros(cells_shape)\n        self.cells_statechange = np.zeros(cells_shape)\n        \n        self.state_change = {(1,1):0, (1,0):1, (0,0):2, (0,1):3} \n\n        real_width = cells_shape[0] - 2\n        real_height = cells_shape[1] - 2\n\n        # self.cells_strategic[1:-1, 1:-1] = np.random.randint(2, size=(real_width, real_height)) # 随机策略\n        self.cells_strategic[int(real_width/2)+1, int(real_height/2)+1] = 0  # 1：合作  0：背叛\n        \n        self.B = 1.97 # 背叛诱惑\n        self.timer = 0\n   \n    def update_state(self):\n        \"\"\"更新一次状态\"\"\"\n        \n        buf_b = np.zeros(self.cells_strategic.shape)\n        buf_s = np.zeros(self.cells_strategic.shape)\n        buf_c = np.zeros(self.cells_strategic.shape)\n\n        cells = self.cells_strategic\n        # 更新收益矩阵\n        for i in range(1, cells.shape[0] - 1):\n            for j in range(1, cells.shape[0] - 1):\n                # 计算该细胞周围的合作者数量\n                neighbor = cells[i-1:i+2, j-1:j+2]\n                neighbor_num = np.sum(neighbor) # 邻居中合作者的数量\n                # 计算该细胞收益\n                if cells[i, j] == 1: # 计算合作者的收益\n                    buf_b[i, j] = neighbor_num * 1.0\n                else:\n                    buf_b[i, j] = neighbor_num * self.B\n        # print(buf_b)\n        self.cells_benefits = buf_b\n        \n        # 更新状态矩阵和状态转移矩阵\n        for i in range(1, cells.shape[0] - 1):\n            for j in range(1, cells.shape[0] - 1):\n                # 找到该细胞及其邻居收益最大值者的策略\n                neighbor = self.cells_benefits[i-1:i+2, j-1:j+2]\n                index = int(neighbor.argmax())\n                # x, y= int(index / 3), index % 3\n                (x, y) = np.unravel_index(neighbor.argmax(), neighbor.shape)\n                buf_s[i, j] = cells[i-1+x, j-1+y]\n                # 更新状态转移矩阵\n                last_stratage, new_stratage = cells[i, j], buf_s[i, j] \n                buf_c[i, j] = self.state_change[(last_stratage, new_stratage)]\n        # print(buf_s)\n        self.cells_strategic = buf_s\n        self.cells_statechange = buf_c\n        self.timer += 1\n\n    def plot_state(self):\n        \"\"\"画出当前的状态\"\"\"\n        plt.title('Iter :{}'.format(self.timer))\n        plt.imshow(self.cells_strategic)\n        plt.show()\n\n    def update_and_plot(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        plt.ion()\n        for _ in range(n_iter):\n            plt.title('Iter :{}'.format(self.timer))\n            # plt.imshow(self.cells_strategic)    # 策略\n            plt.imshow(self.cells_statechange)  # 策略变化\n            self.update_state()\n            plt.pause(0.00001)\n        plt.ioff()\n           \n\nif __name__ == '__main__':\n    game = GameOfLife(cells_shape=(101, 101))\n    game.update_and_plot(n_iter=50)\n```\n\n## matplotlab绘制动图及保存gif图片\n* 如何通过 Matplotlib 绘制动画及保存 GIF 图片？ - frank 的专栏 - CSDN博客  \nhttps://blog.csdn.net/briblue/article/details/84940997\n\nFuncAnimation 的构造方法\n``` python\ndef __init__(self, fig, func, frames=None, init_func=None, fargs=None,\n                 save_count=None, **kwargs):\n```\n* **fig** 自然是 matplotlib 中的 figure 对象。  \n* **func** 是每一次更新时所调用的方法,它是回调函数。因此，我们可以在这个方法中更新 figure 当中的 axes 中的 line2d 对象，它是动态更新 figure 的根本。  \n* **frames** 代表了整个动画过程中帧的取值范围，而本质上是一个数据发生器。\n* **init_func** 是初始函数，用来初始 figure 的画面。  \n* **fargs** 是每次附加给 func 回调函数的参数，可以为 None  \n* **save_count** 是缓存的数量  \n除此之外，还有一些可选的参数，它们分别是  \n* **interval** 是每 2 个 frame 发生的时间间隔,单位是 ms，默认值是 200.  \n* **repeat_delay**  取值是数值，如果 animation 是重复播放的话，这个值就是每次播放之间的延迟时间，单位是 ms。  \n* **repeat**  bool 型可选参数，默认为 True，代表动画是否会重复执行  \n* **blit** bool 型可选参数，控制绘制的优化。默认是 False。  \n\n保存\n``` python\nanim.save('cells_animation.gif',writer='imagemagick')\n```\n\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nfig, ax = plt.subplots()\nxdata, ydata = [], []\nln, = plt.plot([], [], 'ro',animated=True)\n\ndef init():\n    ax.set_xlim(-np.pi,np.pi)\n    ax.set_ylim(-1, 1)\n    return ln,\n\ndef update(frame):\n    xdata.append(frame)\n    ydata.append(np.sin(frame))\n    ln.set_data(xdata, ydata)\n    return ln,\n\ndef data_gen():\n    frame = -np.pi\n    step = 2 * np.pi / 90\n    while frame < np.pi:\n        frame += step\n        yield frame\n\n# anim = animation.FuncAnimation(fig, update, frames=np.linspace(-np.pi,np.pi, 360),interval=10,\n#                     init_func=init,blit=True)\nanim = animation.FuncAnimation(fig, update, frames=data_gen,interval=10,\n                    init_func=init,blit=True)\n\nplt.show()\n```\n<img src=\"空间博弈与matplotlib绘制gif动图\\02.gif\">\n\n\n```python\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\n\"\"\"\n基于元胞自动机的空间博弈演化\n\"\"\"\n\ngame = GameOfLife(cells_shape=(101, 101))\ndata = game.cells_statechange        \nfig, ax = plt.subplots()\nax = plt.imshow(data)\n\ndef init():\n    return ax,\n\ndef update(data):\n    game.update_state()\n    data = game.cells_statechange\n    ax = plt.imshow(data)\n    return ax,\n\nanim = animation.FuncAnimation(fig=fig, func=update, frames=10, init_func=init, interval=1, blit=True)\n\nplt.show()\n\n# 保存\nanim.save('cells_animation.gif',writer='imagemagick')\n```\n\n\n<img src=\"空间博弈与matplotlib绘制gif动图\\03.gif\">\n\n\n\n\n","source":"_posts/空间博弈与matplotlib绘制gif动图.md","raw":"---\ntitle: 空间博弈与matplotlib绘制gif动图\ndate: 2019-11-11 20:57:06\ntoc: true\ntags:\n  - 数模\n---\n\n```python\n# 独立窗口显示\n%matplotlib qt5 \n# %matplotlib inline # 取消matplotlib的独立窗口显示\n```\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Python实现元胞自动机\n* 详解Python 实现元胞自动机中的生命游戏(Game of life)_python_脚本之家  \nhttps://www.jb51.net/article/133807.htm\n\n问题重述\n* 个体位于L*L网络上，网络无周期边界。  \n* 每个格子一个个体，有0或1两种状态，0为死亡，1为存活。  \n* 依据Moore邻居的状态决定个体下一时刻的状态：如果相邻方格活着的细胞数量过多，这个细胞会因为资源匮乏而在下一个时刻死去；相反，如果周围活细胞过少，这个细胞会因太孤单而死去。  \n* 每个个体的状态更新是同步进行的。\n\n\n```python\n\"\"\"\n元胞自动机 Python 实现\n\"\"\"\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n\nclass GameOfLife(object):\n \n    def __init__(self, cells_shape):\n        \"\"\"\n        Parameters\n        ----------\n        cells_shape : 一个元组，表示画布的大小。\n\n        Examples\n        --------\n        建立一个高20，宽30的画布\n        game = GameOfLife((20, 30))\n\n        \"\"\"\n\n        # 矩阵的四周不参与运算\n        self.cells = np.zeros(cells_shape)\n\n        real_width = cells_shape[0] - 2\n        real_height = cells_shape[1] - 2\n\n        self.cells[1:-1, 1:-1] = np.random.randint(2, size=(real_width, real_height))\n        self.timer = 0\n        self.mask = np.ones(9)\n        self.mask[4] = 0\n\n    def update_state(self):\n        \"\"\"更新一次状态\"\"\"\n        buf = np.zeros(self.cells.shape)\n        cells = self.cells\n        for i in range(1, cells.shape[0] - 1):\n            for j in range(1, cells.shape[0] - 1):\n                # 计算该细胞周围的存活细胞数\n                neighbor = cells[i-1:i+2, j-1:j+2].reshape((-1, ))\n                neighbor_num = np.convolve(self.mask, neighbor, 'valid')[0]\n                if neighbor_num == 3:\n                    buf[i, j] = 1\n                elif neighbor_num == 2:\n                    buf[i, j] = cells[i, j]\n                else:\n                    buf[i, j] = 0\n        self.cells = buf\n        self.timer += 1\n   \n    def plot_state(self):\n        \"\"\"画出当前的状态\"\"\"\n        plt.title('Iter :{}'.format(self.timer))\n        plt.imshow(self.cells)\n        plt.show()\n \n    def update_and_plot(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        plt.ion()\n        for _ in range(n_iter):\n            plt.title('Iter :{}'.format(self.timer))\n            plt.imshow(self.cells)\n            self.update_state()\n            plt.pause(0.2)\n        plt.ioff()\n           \n\nif __name__ == '__main__':\n    game = GameOfLife(cells_shape=(60, 60))\n    game.update_and_plot(5)\n\n```\n<img src=\"空间博弈与matplotlib绘制gif动图\\01.png\">\n\n生命游戏中的图形\n* Category:Animated images - LifeWiki  \nhttps://www.conwaylife.com/wiki/Category:Animated_images\n\n\n## 基于元胞自动机的空间博弈\n\n问题重述\n* 个体位于L*L网络上，网络无周期边界。  \n* 每个格子一个个体，有0或1两种状态，0为背叛，1为合作。  \n* 每一时刻，个体和其Moore邻居进行博弈，依据Nowak的单参数收益矩阵，得到每个个体的收益，下一时刻个体的策略以此为基础，即选择自身及邻居中收益值最高的那个个体的策略，作为该个体下一时刻的策略。\n* 个体策略更新是同步进行的。\n\n单参数收益矩阵( 1 < b < 2 )\n|  | C | D |\n| ------ | ------ | ------ |\n| C | 1 | 0 |\n| D | b | 0 |\n\n\n```python\n\"\"\"\n基于元胞自动机的空间博弈演化\n\"\"\"\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n\nclass GameOfLife(object):\n \n    def __init__(self, cells_shape):\n        \"\"\"\n        Parameters\n        ----------\n        cells_shape : 一个元组，表示画布的大小。\n\n        Examples\n        --------\n        建立一个高20，宽30的画布\n        game = GameOfLife((20, 30))\n\n        \"\"\"\n\n        # 矩阵的四周不参与运算\n        self.cells_strategic = np.ones(cells_shape)\n        self.cells_benefits = np.zeros(cells_shape)\n        self.cells_statechange = np.zeros(cells_shape)\n        \n        self.state_change = {(1,1):0, (1,0):1, (0,0):2, (0,1):3} \n\n        real_width = cells_shape[0] - 2\n        real_height = cells_shape[1] - 2\n\n        # self.cells_strategic[1:-1, 1:-1] = np.random.randint(2, size=(real_width, real_height)) # 随机策略\n        self.cells_strategic[int(real_width/2)+1, int(real_height/2)+1] = 0  # 1：合作  0：背叛\n        \n        self.B = 1.97 # 背叛诱惑\n        self.timer = 0\n   \n    def update_state(self):\n        \"\"\"更新一次状态\"\"\"\n        \n        buf_b = np.zeros(self.cells_strategic.shape)\n        buf_s = np.zeros(self.cells_strategic.shape)\n        buf_c = np.zeros(self.cells_strategic.shape)\n\n        cells = self.cells_strategic\n        # 更新收益矩阵\n        for i in range(1, cells.shape[0] - 1):\n            for j in range(1, cells.shape[0] - 1):\n                # 计算该细胞周围的合作者数量\n                neighbor = cells[i-1:i+2, j-1:j+2]\n                neighbor_num = np.sum(neighbor) # 邻居中合作者的数量\n                # 计算该细胞收益\n                if cells[i, j] == 1: # 计算合作者的收益\n                    buf_b[i, j] = neighbor_num * 1.0\n                else:\n                    buf_b[i, j] = neighbor_num * self.B\n        # print(buf_b)\n        self.cells_benefits = buf_b\n        \n        # 更新状态矩阵和状态转移矩阵\n        for i in range(1, cells.shape[0] - 1):\n            for j in range(1, cells.shape[0] - 1):\n                # 找到该细胞及其邻居收益最大值者的策略\n                neighbor = self.cells_benefits[i-1:i+2, j-1:j+2]\n                index = int(neighbor.argmax())\n                # x, y= int(index / 3), index % 3\n                (x, y) = np.unravel_index(neighbor.argmax(), neighbor.shape)\n                buf_s[i, j] = cells[i-1+x, j-1+y]\n                # 更新状态转移矩阵\n                last_stratage, new_stratage = cells[i, j], buf_s[i, j] \n                buf_c[i, j] = self.state_change[(last_stratage, new_stratage)]\n        # print(buf_s)\n        self.cells_strategic = buf_s\n        self.cells_statechange = buf_c\n        self.timer += 1\n\n    def plot_state(self):\n        \"\"\"画出当前的状态\"\"\"\n        plt.title('Iter :{}'.format(self.timer))\n        plt.imshow(self.cells_strategic)\n        plt.show()\n\n    def update_and_plot(self, n_iter):\n        \"\"\"更新状态并画图\n        Parameters\n        ----------\n        n_iter : 更新的轮数\n        \"\"\"\n        plt.ion()\n        for _ in range(n_iter):\n            plt.title('Iter :{}'.format(self.timer))\n            # plt.imshow(self.cells_strategic)    # 策略\n            plt.imshow(self.cells_statechange)  # 策略变化\n            self.update_state()\n            plt.pause(0.00001)\n        plt.ioff()\n           \n\nif __name__ == '__main__':\n    game = GameOfLife(cells_shape=(101, 101))\n    game.update_and_plot(n_iter=50)\n```\n\n## matplotlab绘制动图及保存gif图片\n* 如何通过 Matplotlib 绘制动画及保存 GIF 图片？ - frank 的专栏 - CSDN博客  \nhttps://blog.csdn.net/briblue/article/details/84940997\n\nFuncAnimation 的构造方法\n``` python\ndef __init__(self, fig, func, frames=None, init_func=None, fargs=None,\n                 save_count=None, **kwargs):\n```\n* **fig** 自然是 matplotlib 中的 figure 对象。  \n* **func** 是每一次更新时所调用的方法,它是回调函数。因此，我们可以在这个方法中更新 figure 当中的 axes 中的 line2d 对象，它是动态更新 figure 的根本。  \n* **frames** 代表了整个动画过程中帧的取值范围，而本质上是一个数据发生器。\n* **init_func** 是初始函数，用来初始 figure 的画面。  \n* **fargs** 是每次附加给 func 回调函数的参数，可以为 None  \n* **save_count** 是缓存的数量  \n除此之外，还有一些可选的参数，它们分别是  \n* **interval** 是每 2 个 frame 发生的时间间隔,单位是 ms，默认值是 200.  \n* **repeat_delay**  取值是数值，如果 animation 是重复播放的话，这个值就是每次播放之间的延迟时间，单位是 ms。  \n* **repeat**  bool 型可选参数，默认为 True，代表动画是否会重复执行  \n* **blit** bool 型可选参数，控制绘制的优化。默认是 False。  \n\n保存\n``` python\nanim.save('cells_animation.gif',writer='imagemagick')\n```\n\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nfig, ax = plt.subplots()\nxdata, ydata = [], []\nln, = plt.plot([], [], 'ro',animated=True)\n\ndef init():\n    ax.set_xlim(-np.pi,np.pi)\n    ax.set_ylim(-1, 1)\n    return ln,\n\ndef update(frame):\n    xdata.append(frame)\n    ydata.append(np.sin(frame))\n    ln.set_data(xdata, ydata)\n    return ln,\n\ndef data_gen():\n    frame = -np.pi\n    step = 2 * np.pi / 90\n    while frame < np.pi:\n        frame += step\n        yield frame\n\n# anim = animation.FuncAnimation(fig, update, frames=np.linspace(-np.pi,np.pi, 360),interval=10,\n#                     init_func=init,blit=True)\nanim = animation.FuncAnimation(fig, update, frames=data_gen,interval=10,\n                    init_func=init,blit=True)\n\nplt.show()\n```\n<img src=\"空间博弈与matplotlib绘制gif动图\\02.gif\">\n\n\n```python\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\n\"\"\"\n基于元胞自动机的空间博弈演化\n\"\"\"\n\ngame = GameOfLife(cells_shape=(101, 101))\ndata = game.cells_statechange        \nfig, ax = plt.subplots()\nax = plt.imshow(data)\n\ndef init():\n    return ax,\n\ndef update(data):\n    game.update_state()\n    data = game.cells_statechange\n    ax = plt.imshow(data)\n    return ax,\n\nanim = animation.FuncAnimation(fig=fig, func=update, frames=10, init_func=init, interval=1, blit=True)\n\nplt.show()\n\n# 保存\nanim.save('cells_animation.gif',writer='imagemagick')\n```\n\n\n<img src=\"空间博弈与matplotlib绘制gif动图\\03.gif\">\n\n\n\n\n","slug":"空间博弈与matplotlib绘制gif动图","published":1,"updated":"2020-01-05T19:13:24.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50bi006g4cvjczjzv5wg","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 独立窗口显示</span></span><br><span class=\"line\">%matplotlib qt5 </span><br><span class=\"line\"><span class=\"comment\"># %matplotlib inline # 取消matplotlib的独立窗口显示</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"Python实现元胞自动机\"><a href=\"#Python实现元胞自动机\" class=\"headerlink\" title=\"Python实现元胞自动机\"></a>Python实现元胞自动机</h2><ul>\n<li>详解Python 实现元胞自动机中的生命游戏(Game of life)_python_脚本之家<br><a href=\"https://www.jb51.net/article/133807.htm\" target=\"_blank\" rel=\"noopener\">https://www.jb51.net/article/133807.htm</a></li>\n</ul>\n<p>问题重述</p>\n<ul>\n<li>个体位于L*L网络上，网络无周期边界。  </li>\n<li>每个格子一个个体，有0或1两种状态，0为死亡，1为存活。  </li>\n<li>依据Moore邻居的状态决定个体下一时刻的状态：如果相邻方格活着的细胞数量过多，这个细胞会因为资源匮乏而在下一个时刻死去；相反，如果周围活细胞过少，这个细胞会因太孤单而死去。  </li>\n<li>每个个体的状态更新是同步进行的。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">元胞自动机 Python 实现</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameOfLife</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cells_shape)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        cells_shape : 一个元组，表示画布的大小。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Examples</span></span><br><span class=\"line\"><span class=\"string\">        --------</span></span><br><span class=\"line\"><span class=\"string\">        建立一个高20，宽30的画布</span></span><br><span class=\"line\"><span class=\"string\">        game = GameOfLife((20, 30))</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的四周不参与运算</span></span><br><span class=\"line\">        self.cells = np.zeros(cells_shape)</span><br><span class=\"line\"></span><br><span class=\"line\">        real_width = cells_shape[<span class=\"number\">0</span>] - <span class=\"number\">2</span></span><br><span class=\"line\">        real_height = cells_shape[<span class=\"number\">1</span>] - <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.cells[<span class=\"number\">1</span>:<span class=\"number\">-1</span>, <span class=\"number\">1</span>:<span class=\"number\">-1</span>] = np.random.randint(<span class=\"number\">2</span>, size=(real_width, real_height))</span><br><span class=\"line\">        self.timer = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mask = np.ones(<span class=\"number\">9</span>)</span><br><span class=\"line\">        self.mask[<span class=\"number\">4</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新一次状态\"\"\"</span></span><br><span class=\"line\">        buf = np.zeros(self.cells.shape)</span><br><span class=\"line\">        cells = self.cells</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"comment\"># 计算该细胞周围的存活细胞数</span></span><br><span class=\"line\">                neighbor = cells[i<span class=\"number\">-1</span>:i+<span class=\"number\">2</span>, j<span class=\"number\">-1</span>:j+<span class=\"number\">2</span>].reshape((<span class=\"number\">-1</span>, ))</span><br><span class=\"line\">                neighbor_num = np.convolve(self.mask, neighbor, <span class=\"string\">'valid'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> neighbor_num == <span class=\"number\">3</span>:</span><br><span class=\"line\">                    buf[i, j] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> neighbor_num == <span class=\"number\">2</span>:</span><br><span class=\"line\">                    buf[i, j] = cells[i, j]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    buf[i, j] = <span class=\"number\">0</span></span><br><span class=\"line\">        self.cells = buf</span><br><span class=\"line\">        self.timer += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"画出当前的状态\"\"\"</span></span><br><span class=\"line\">        plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">        plt.imshow(self.cells)</span><br><span class=\"line\">        plt.show()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_and_plot</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        plt.ion()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">            plt.imshow(self.cells)</span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\">            plt.pause(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">        plt.ioff()</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    game = GameOfLife(cells_shape=(<span class=\"number\">60</span>, <span class=\"number\">60</span>))</span><br><span class=\"line\">    game.update_and_plot(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/11/空间博弈与matplotlib绘制gif动图/01.png\"></p>\n<p>生命游戏中的图形</p>\n<ul>\n<li>Category:Animated images - LifeWiki<br><a href=\"https://www.conwaylife.com/wiki/Category:Animated_images\" target=\"_blank\" rel=\"noopener\">https://www.conwaylife.com/wiki/Category:Animated_images</a></li>\n</ul>\n<h2 id=\"基于元胞自动机的空间博弈\"><a href=\"#基于元胞自动机的空间博弈\" class=\"headerlink\" title=\"基于元胞自动机的空间博弈\"></a>基于元胞自动机的空间博弈</h2><p>问题重述</p>\n<ul>\n<li>个体位于L*L网络上，网络无周期边界。  </li>\n<li>每个格子一个个体，有0或1两种状态，0为背叛，1为合作。  </li>\n<li>每一时刻，个体和其Moore邻居进行博弈，依据Nowak的单参数收益矩阵，得到每个个体的收益，下一时刻个体的策略以此为基础，即选择自身及邻居中收益值最高的那个个体的策略，作为该个体下一时刻的策略。</li>\n<li>个体策略更新是同步进行的。</li>\n</ul>\n<p>单参数收益矩阵( 1 &lt; b &lt; 2 )<br>|  | C | D |<br>| ——— | ——— | ——— |<br>| C | 1 | 0 |<br>| D | b | 0 |</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于元胞自动机的空间博弈演化</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameOfLife</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cells_shape)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        cells_shape : 一个元组，表示画布的大小。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Examples</span></span><br><span class=\"line\"><span class=\"string\">        --------</span></span><br><span class=\"line\"><span class=\"string\">        建立一个高20，宽30的画布</span></span><br><span class=\"line\"><span class=\"string\">        game = GameOfLife((20, 30))</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的四周不参与运算</span></span><br><span class=\"line\">        self.cells_strategic = np.ones(cells_shape)</span><br><span class=\"line\">        self.cells_benefits = np.zeros(cells_shape)</span><br><span class=\"line\">        self.cells_statechange = np.zeros(cells_shape)</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.state_change = &#123;(<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">2</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">3</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        real_width = cells_shape[<span class=\"number\">0</span>] - <span class=\"number\">2</span></span><br><span class=\"line\">        real_height = cells_shape[<span class=\"number\">1</span>] - <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># self.cells_strategic[1:-1, 1:-1] = np.random.randint(2, size=(real_width, real_height)) # 随机策略</span></span><br><span class=\"line\">        self.cells_strategic[int(real_width/<span class=\"number\">2</span>)+<span class=\"number\">1</span>, int(real_height/<span class=\"number\">2</span>)+<span class=\"number\">1</span>] = <span class=\"number\">0</span>  <span class=\"comment\"># 1：合作  0：背叛</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        self.B = <span class=\"number\">1.97</span> <span class=\"comment\"># 背叛诱惑</span></span><br><span class=\"line\">        self.timer = <span class=\"number\">0</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新一次状态\"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        buf_b = np.zeros(self.cells_strategic.shape)</span><br><span class=\"line\">        buf_s = np.zeros(self.cells_strategic.shape)</span><br><span class=\"line\">        buf_c = np.zeros(self.cells_strategic.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">        cells = self.cells_strategic</span><br><span class=\"line\">        <span class=\"comment\"># 更新收益矩阵</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"comment\"># 计算该细胞周围的合作者数量</span></span><br><span class=\"line\">                neighbor = cells[i<span class=\"number\">-1</span>:i+<span class=\"number\">2</span>, j<span class=\"number\">-1</span>:j+<span class=\"number\">2</span>]</span><br><span class=\"line\">                neighbor_num = np.sum(neighbor) <span class=\"comment\"># 邻居中合作者的数量</span></span><br><span class=\"line\">                <span class=\"comment\"># 计算该细胞收益</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> cells[i, j] == <span class=\"number\">1</span>: <span class=\"comment\"># 计算合作者的收益</span></span><br><span class=\"line\">                    buf_b[i, j] = neighbor_num * <span class=\"number\">1.0</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    buf_b[i, j] = neighbor_num * self.B</span><br><span class=\"line\">        <span class=\"comment\"># print(buf_b)</span></span><br><span class=\"line\">        self.cells_benefits = buf_b</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 更新状态矩阵和状态转移矩阵</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"comment\"># 找到该细胞及其邻居收益最大值者的策略</span></span><br><span class=\"line\">                neighbor = self.cells_benefits[i<span class=\"number\">-1</span>:i+<span class=\"number\">2</span>, j<span class=\"number\">-1</span>:j+<span class=\"number\">2</span>]</span><br><span class=\"line\">                index = int(neighbor.argmax())</span><br><span class=\"line\">                <span class=\"comment\"># x, y= int(index / 3), index % 3</span></span><br><span class=\"line\">                (x, y) = np.unravel_index(neighbor.argmax(), neighbor.shape)</span><br><span class=\"line\">                buf_s[i, j] = cells[i<span class=\"number\">-1</span>+x, j<span class=\"number\">-1</span>+y]</span><br><span class=\"line\">                <span class=\"comment\"># 更新状态转移矩阵</span></span><br><span class=\"line\">                last_stratage, new_stratage = cells[i, j], buf_s[i, j] </span><br><span class=\"line\">                buf_c[i, j] = self.state_change[(last_stratage, new_stratage)]</span><br><span class=\"line\">        <span class=\"comment\"># print(buf_s)</span></span><br><span class=\"line\">        self.cells_strategic = buf_s</span><br><span class=\"line\">        self.cells_statechange = buf_c</span><br><span class=\"line\">        self.timer += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"画出当前的状态\"\"\"</span></span><br><span class=\"line\">        plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">        plt.imshow(self.cells_strategic)</span><br><span class=\"line\">        plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_and_plot</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        plt.ion()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">            <span class=\"comment\"># plt.imshow(self.cells_strategic)    # 策略</span></span><br><span class=\"line\">            plt.imshow(self.cells_statechange)  <span class=\"comment\"># 策略变化</span></span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\">            plt.pause(<span class=\"number\">0.00001</span>)</span><br><span class=\"line\">        plt.ioff()</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    game = GameOfLife(cells_shape=(<span class=\"number\">101</span>, <span class=\"number\">101</span>))</span><br><span class=\"line\">    game.update_and_plot(n_iter=<span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"matplotlab绘制动图及保存gif图片\"><a href=\"#matplotlab绘制动图及保存gif图片\" class=\"headerlink\" title=\"matplotlab绘制动图及保存gif图片\"></a>matplotlab绘制动图及保存gif图片</h2><ul>\n<li>如何通过 Matplotlib 绘制动画及保存 GIF 图片？ - frank 的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/briblue/article/details/84940997\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/briblue/article/details/84940997</a></li>\n</ul>\n<p>FuncAnimation 的构造方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, fig, func, frames=None, init_func=None, fargs=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 save_count=None, **kwargs)</span>:</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>fig</strong> 自然是 matplotlib 中的 figure 对象。  </li>\n<li><strong>func</strong> 是每一次更新时所调用的方法,它是回调函数。因此，我们可以在这个方法中更新 figure 当中的 axes 中的 line2d 对象，它是动态更新 figure 的根本。  </li>\n<li><strong>frames</strong> 代表了整个动画过程中帧的取值范围，而本质上是一个数据发生器。</li>\n<li><strong>init_func</strong> 是初始函数，用来初始 figure 的画面。  </li>\n<li><strong>fargs</strong> 是每次附加给 func 回调函数的参数，可以为 None  </li>\n<li><strong>save_count</strong> 是缓存的数量<br>除此之外，还有一些可选的参数，它们分别是  </li>\n<li><strong>interval</strong> 是每 2 个 frame 发生的时间间隔,单位是 ms，默认值是 200.  </li>\n<li><strong>repeat_delay</strong>  取值是数值，如果 animation 是重复播放的话，这个值就是每次播放之间的延迟时间，单位是 ms。  </li>\n<li><strong>repeat</strong>  bool 型可选参数，默认为 True，代表动画是否会重复执行  </li>\n<li><strong>blit</strong> bool 型可选参数，控制绘制的优化。默认是 False。  </li>\n</ul>\n<p>保存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anim.save(<span class=\"string\">'cells_animation.gif'</span>,writer=<span class=\"string\">'imagemagick'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.animation <span class=\"keyword\">as</span> animation</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">xdata, ydata = [], []</span><br><span class=\"line\">ln, = plt.plot([], [], <span class=\"string\">'ro'</span>,animated=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    ax.set_xlim(-np.pi,np.pi)</span><br><span class=\"line\">    ax.set_ylim(<span class=\"number\">-1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ln,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(frame)</span>:</span></span><br><span class=\"line\">    xdata.append(frame)</span><br><span class=\"line\">    ydata.append(np.sin(frame))</span><br><span class=\"line\">    ln.set_data(xdata, ydata)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ln,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_gen</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    frame = -np.pi</span><br><span class=\"line\">    step = <span class=\"number\">2</span> * np.pi / <span class=\"number\">90</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> frame &lt; np.pi:</span><br><span class=\"line\">        frame += step</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> frame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># anim = animation.FuncAnimation(fig, update, frames=np.linspace(-np.pi,np.pi, 360),interval=10,</span></span><br><span class=\"line\"><span class=\"comment\">#                     init_func=init,blit=True)</span></span><br><span class=\"line\">anim = animation.FuncAnimation(fig, update, frames=data_gen,interval=<span class=\"number\">10</span>,</span><br><span class=\"line\">                    init_func=init,blit=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/11/空间博弈与matplotlib绘制gif动图/02.gif\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.animation <span class=\"keyword\">as</span> animation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于元胞自动机的空间博弈演化</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">game = GameOfLife(cells_shape=(<span class=\"number\">101</span>, <span class=\"number\">101</span>))</span><br><span class=\"line\">data = game.cells_statechange        </span><br><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">ax = plt.imshow(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    game.update_state()</span><br><span class=\"line\">    data = game.cells_statechange</span><br><span class=\"line\">    ax = plt.imshow(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax,</span><br><span class=\"line\"></span><br><span class=\"line\">anim = animation.FuncAnimation(fig=fig, func=update, frames=<span class=\"number\">10</span>, init_func=init, interval=<span class=\"number\">1</span>, blit=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存</span></span><br><span class=\"line\">anim.save(<span class=\"string\">'cells_animation.gif'</span>,writer=<span class=\"string\">'imagemagick'</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/11/空间博弈与matplotlib绘制gif动图/03.gif\"></p>\n</the>","site":{"data":{}},"excerpt":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 独立窗口显示</span></span><br><span class=\"line\">%matplotlib qt5 </span><br><span class=\"line\"><span class=\"comment\"># %matplotlib inline # 取消matplotlib的独立窗口显示</span></span><br></pre></td></tr></table></figure>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"Python实现元胞自动机\"><a href=\"#Python实现元胞自动机\" class=\"headerlink\" title=\"Python实现元胞自动机\"></a>Python实现元胞自动机</h2><ul>\n<li>详解Python 实现元胞自动机中的生命游戏(Game of life)_python_脚本之家<br><a href=\"https://www.jb51.net/article/133807.htm\" target=\"_blank\" rel=\"noopener\">https://www.jb51.net/article/133807.htm</a></li>\n</ul>\n<p>问题重述</p>\n<ul>\n<li>个体位于L*L网络上，网络无周期边界。  </li>\n<li>每个格子一个个体，有0或1两种状态，0为死亡，1为存活。  </li>\n<li>依据Moore邻居的状态决定个体下一时刻的状态：如果相邻方格活着的细胞数量过多，这个细胞会因为资源匮乏而在下一个时刻死去；相反，如果周围活细胞过少，这个细胞会因太孤单而死去。  </li>\n<li>每个个体的状态更新是同步进行的。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">元胞自动机 Python 实现</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameOfLife</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cells_shape)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        cells_shape : 一个元组，表示画布的大小。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Examples</span></span><br><span class=\"line\"><span class=\"string\">        --------</span></span><br><span class=\"line\"><span class=\"string\">        建立一个高20，宽30的画布</span></span><br><span class=\"line\"><span class=\"string\">        game = GameOfLife((20, 30))</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的四周不参与运算</span></span><br><span class=\"line\">        self.cells = np.zeros(cells_shape)</span><br><span class=\"line\"></span><br><span class=\"line\">        real_width = cells_shape[<span class=\"number\">0</span>] - <span class=\"number\">2</span></span><br><span class=\"line\">        real_height = cells_shape[<span class=\"number\">1</span>] - <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.cells[<span class=\"number\">1</span>:<span class=\"number\">-1</span>, <span class=\"number\">1</span>:<span class=\"number\">-1</span>] = np.random.randint(<span class=\"number\">2</span>, size=(real_width, real_height))</span><br><span class=\"line\">        self.timer = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mask = np.ones(<span class=\"number\">9</span>)</span><br><span class=\"line\">        self.mask[<span class=\"number\">4</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新一次状态\"\"\"</span></span><br><span class=\"line\">        buf = np.zeros(self.cells.shape)</span><br><span class=\"line\">        cells = self.cells</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"comment\"># 计算该细胞周围的存活细胞数</span></span><br><span class=\"line\">                neighbor = cells[i<span class=\"number\">-1</span>:i+<span class=\"number\">2</span>, j<span class=\"number\">-1</span>:j+<span class=\"number\">2</span>].reshape((<span class=\"number\">-1</span>, ))</span><br><span class=\"line\">                neighbor_num = np.convolve(self.mask, neighbor, <span class=\"string\">'valid'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> neighbor_num == <span class=\"number\">3</span>:</span><br><span class=\"line\">                    buf[i, j] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> neighbor_num == <span class=\"number\">2</span>:</span><br><span class=\"line\">                    buf[i, j] = cells[i, j]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    buf[i, j] = <span class=\"number\">0</span></span><br><span class=\"line\">        self.cells = buf</span><br><span class=\"line\">        self.timer += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"画出当前的状态\"\"\"</span></span><br><span class=\"line\">        plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">        plt.imshow(self.cells)</span><br><span class=\"line\">        plt.show()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_and_plot</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        plt.ion()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">            plt.imshow(self.cells)</span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\">            plt.pause(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">        plt.ioff()</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    game = GameOfLife(cells_shape=(<span class=\"number\">60</span>, <span class=\"number\">60</span>))</span><br><span class=\"line\">    game.update_and_plot(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/11/空间博弈与matplotlib绘制gif动图/01.png\"></p>\n<p>生命游戏中的图形</p>\n<ul>\n<li>Category:Animated images - LifeWiki<br><a href=\"https://www.conwaylife.com/wiki/Category:Animated_images\" target=\"_blank\" rel=\"noopener\">https://www.conwaylife.com/wiki/Category:Animated_images</a></li>\n</ul>\n<h2 id=\"基于元胞自动机的空间博弈\"><a href=\"#基于元胞自动机的空间博弈\" class=\"headerlink\" title=\"基于元胞自动机的空间博弈\"></a>基于元胞自动机的空间博弈</h2><p>问题重述</p>\n<ul>\n<li>个体位于L*L网络上，网络无周期边界。  </li>\n<li>每个格子一个个体，有0或1两种状态，0为背叛，1为合作。  </li>\n<li>每一时刻，个体和其Moore邻居进行博弈，依据Nowak的单参数收益矩阵，得到每个个体的收益，下一时刻个体的策略以此为基础，即选择自身及邻居中收益值最高的那个个体的策略，作为该个体下一时刻的策略。</li>\n<li>个体策略更新是同步进行的。</li>\n</ul>\n<p>单参数收益矩阵( 1 &lt; b &lt; 2 )<br>|  | C | D |<br>| ——— | ——— | ——— |<br>| C | 1 | 0 |<br>| D | b | 0 |</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于元胞自动机的空间博弈演化</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameOfLife</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, cells_shape)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        cells_shape : 一个元组，表示画布的大小。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Examples</span></span><br><span class=\"line\"><span class=\"string\">        --------</span></span><br><span class=\"line\"><span class=\"string\">        建立一个高20，宽30的画布</span></span><br><span class=\"line\"><span class=\"string\">        game = GameOfLife((20, 30))</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的四周不参与运算</span></span><br><span class=\"line\">        self.cells_strategic = np.ones(cells_shape)</span><br><span class=\"line\">        self.cells_benefits = np.zeros(cells_shape)</span><br><span class=\"line\">        self.cells_statechange = np.zeros(cells_shape)</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.state_change = &#123;(<span class=\"number\">1</span>,<span class=\"number\">1</span>):<span class=\"number\">0</span>, (<span class=\"number\">1</span>,<span class=\"number\">0</span>):<span class=\"number\">1</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>):<span class=\"number\">2</span>, (<span class=\"number\">0</span>,<span class=\"number\">1</span>):<span class=\"number\">3</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        real_width = cells_shape[<span class=\"number\">0</span>] - <span class=\"number\">2</span></span><br><span class=\"line\">        real_height = cells_shape[<span class=\"number\">1</span>] - <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># self.cells_strategic[1:-1, 1:-1] = np.random.randint(2, size=(real_width, real_height)) # 随机策略</span></span><br><span class=\"line\">        self.cells_strategic[int(real_width/<span class=\"number\">2</span>)+<span class=\"number\">1</span>, int(real_height/<span class=\"number\">2</span>)+<span class=\"number\">1</span>] = <span class=\"number\">0</span>  <span class=\"comment\"># 1：合作  0：背叛</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        self.B = <span class=\"number\">1.97</span> <span class=\"comment\"># 背叛诱惑</span></span><br><span class=\"line\">        self.timer = <span class=\"number\">0</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新一次状态\"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        buf_b = np.zeros(self.cells_strategic.shape)</span><br><span class=\"line\">        buf_s = np.zeros(self.cells_strategic.shape)</span><br><span class=\"line\">        buf_c = np.zeros(self.cells_strategic.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">        cells = self.cells_strategic</span><br><span class=\"line\">        <span class=\"comment\"># 更新收益矩阵</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"comment\"># 计算该细胞周围的合作者数量</span></span><br><span class=\"line\">                neighbor = cells[i<span class=\"number\">-1</span>:i+<span class=\"number\">2</span>, j<span class=\"number\">-1</span>:j+<span class=\"number\">2</span>]</span><br><span class=\"line\">                neighbor_num = np.sum(neighbor) <span class=\"comment\"># 邻居中合作者的数量</span></span><br><span class=\"line\">                <span class=\"comment\"># 计算该细胞收益</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> cells[i, j] == <span class=\"number\">1</span>: <span class=\"comment\"># 计算合作者的收益</span></span><br><span class=\"line\">                    buf_b[i, j] = neighbor_num * <span class=\"number\">1.0</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    buf_b[i, j] = neighbor_num * self.B</span><br><span class=\"line\">        <span class=\"comment\"># print(buf_b)</span></span><br><span class=\"line\">        self.cells_benefits = buf_b</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 更新状态矩阵和状态转移矩阵</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, cells.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"comment\"># 找到该细胞及其邻居收益最大值者的策略</span></span><br><span class=\"line\">                neighbor = self.cells_benefits[i<span class=\"number\">-1</span>:i+<span class=\"number\">2</span>, j<span class=\"number\">-1</span>:j+<span class=\"number\">2</span>]</span><br><span class=\"line\">                index = int(neighbor.argmax())</span><br><span class=\"line\">                <span class=\"comment\"># x, y= int(index / 3), index % 3</span></span><br><span class=\"line\">                (x, y) = np.unravel_index(neighbor.argmax(), neighbor.shape)</span><br><span class=\"line\">                buf_s[i, j] = cells[i<span class=\"number\">-1</span>+x, j<span class=\"number\">-1</span>+y]</span><br><span class=\"line\">                <span class=\"comment\"># 更新状态转移矩阵</span></span><br><span class=\"line\">                last_stratage, new_stratage = cells[i, j], buf_s[i, j] </span><br><span class=\"line\">                buf_c[i, j] = self.state_change[(last_stratage, new_stratage)]</span><br><span class=\"line\">        <span class=\"comment\"># print(buf_s)</span></span><br><span class=\"line\">        self.cells_strategic = buf_s</span><br><span class=\"line\">        self.cells_statechange = buf_c</span><br><span class=\"line\">        self.timer += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot_state</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"画出当前的状态\"\"\"</span></span><br><span class=\"line\">        plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">        plt.imshow(self.cells_strategic)</span><br><span class=\"line\">        plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_and_plot</span><span class=\"params\">(self, n_iter)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更新状态并画图</span></span><br><span class=\"line\"><span class=\"string\">        Parameters</span></span><br><span class=\"line\"><span class=\"string\">        ----------</span></span><br><span class=\"line\"><span class=\"string\">        n_iter : 更新的轮数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        plt.ion()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n_iter):</span><br><span class=\"line\">            plt.title(<span class=\"string\">'Iter :&#123;&#125;'</span>.format(self.timer))</span><br><span class=\"line\">            <span class=\"comment\"># plt.imshow(self.cells_strategic)    # 策略</span></span><br><span class=\"line\">            plt.imshow(self.cells_statechange)  <span class=\"comment\"># 策略变化</span></span><br><span class=\"line\">            self.update_state()</span><br><span class=\"line\">            plt.pause(<span class=\"number\">0.00001</span>)</span><br><span class=\"line\">        plt.ioff()</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    game = GameOfLife(cells_shape=(<span class=\"number\">101</span>, <span class=\"number\">101</span>))</span><br><span class=\"line\">    game.update_and_plot(n_iter=<span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"matplotlab绘制动图及保存gif图片\"><a href=\"#matplotlab绘制动图及保存gif图片\" class=\"headerlink\" title=\"matplotlab绘制动图及保存gif图片\"></a>matplotlab绘制动图及保存gif图片</h2><ul>\n<li>如何通过 Matplotlib 绘制动画及保存 GIF 图片？ - frank 的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/briblue/article/details/84940997\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/briblue/article/details/84940997</a></li>\n</ul>\n<p>FuncAnimation 的构造方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, fig, func, frames=None, init_func=None, fargs=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 save_count=None, **kwargs)</span>:</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>fig</strong> 自然是 matplotlib 中的 figure 对象。  </li>\n<li><strong>func</strong> 是每一次更新时所调用的方法,它是回调函数。因此，我们可以在这个方法中更新 figure 当中的 axes 中的 line2d 对象，它是动态更新 figure 的根本。  </li>\n<li><strong>frames</strong> 代表了整个动画过程中帧的取值范围，而本质上是一个数据发生器。</li>\n<li><strong>init_func</strong> 是初始函数，用来初始 figure 的画面。  </li>\n<li><strong>fargs</strong> 是每次附加给 func 回调函数的参数，可以为 None  </li>\n<li><strong>save_count</strong> 是缓存的数量<br>除此之外，还有一些可选的参数，它们分别是  </li>\n<li><strong>interval</strong> 是每 2 个 frame 发生的时间间隔,单位是 ms，默认值是 200.  </li>\n<li><strong>repeat_delay</strong>  取值是数值，如果 animation 是重复播放的话，这个值就是每次播放之间的延迟时间，单位是 ms。  </li>\n<li><strong>repeat</strong>  bool 型可选参数，默认为 True，代表动画是否会重复执行  </li>\n<li><strong>blit</strong> bool 型可选参数，控制绘制的优化。默认是 False。  </li>\n</ul>\n<p>保存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anim.save(<span class=\"string\">'cells_animation.gif'</span>,writer=<span class=\"string\">'imagemagick'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.animation <span class=\"keyword\">as</span> animation</span><br><span class=\"line\"></span><br><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">xdata, ydata = [], []</span><br><span class=\"line\">ln, = plt.plot([], [], <span class=\"string\">'ro'</span>,animated=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    ax.set_xlim(-np.pi,np.pi)</span><br><span class=\"line\">    ax.set_ylim(<span class=\"number\">-1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ln,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(frame)</span>:</span></span><br><span class=\"line\">    xdata.append(frame)</span><br><span class=\"line\">    ydata.append(np.sin(frame))</span><br><span class=\"line\">    ln.set_data(xdata, ydata)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ln,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_gen</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    frame = -np.pi</span><br><span class=\"line\">    step = <span class=\"number\">2</span> * np.pi / <span class=\"number\">90</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> frame &lt; np.pi:</span><br><span class=\"line\">        frame += step</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> frame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># anim = animation.FuncAnimation(fig, update, frames=np.linspace(-np.pi,np.pi, 360),interval=10,</span></span><br><span class=\"line\"><span class=\"comment\">#                     init_func=init,blit=True)</span></span><br><span class=\"line\">anim = animation.FuncAnimation(fig, update, frames=data_gen,interval=<span class=\"number\">10</span>,</span><br><span class=\"line\">                    init_func=init,blit=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/11/空间博弈与matplotlib绘制gif动图/02.gif\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.animation <span class=\"keyword\">as</span> animation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于元胞自动机的空间博弈演化</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">game = GameOfLife(cells_shape=(<span class=\"number\">101</span>, <span class=\"number\">101</span>))</span><br><span class=\"line\">data = game.cells_statechange        </span><br><span class=\"line\">fig, ax = plt.subplots()</span><br><span class=\"line\">ax = plt.imshow(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    game.update_state()</span><br><span class=\"line\">    data = game.cells_statechange</span><br><span class=\"line\">    ax = plt.imshow(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax,</span><br><span class=\"line\"></span><br><span class=\"line\">anim = animation.FuncAnimation(fig=fig, func=update, frames=<span class=\"number\">10</span>, init_func=init, interval=<span class=\"number\">1</span>, blit=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存</span></span><br><span class=\"line\">anim.save(<span class=\"string\">'cells_animation.gif'</span>,writer=<span class=\"string\">'imagemagick'</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/11/空间博弈与matplotlib绘制gif动图/03.gif\"></p>\n</the>"},{"title":"空间博弈演化","date":"2019-11-11T16:41:12.000Z","toc":true,"_content":"\n\n# Evolutionary games and spatial chaos\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Prisoner’s dilemma —— 囚徒困境\n\n### 出处\n1950年，由就职于兰德公司的梅里尔·弗勒德（Merrill Flood）和梅尔文·德雷希尔（Melvin Dresher）拟定出相关困境的理论。  \n后来由顾问艾伯特·塔克（Albert Tucker）以囚徒方式阐述，并命名为“囚徒困境”。\n\n### 描述\n两个嫌疑犯作案后被警察抓住，分别关在不同的屋子里接受审讯。  \n警察知道两人有罪，但缺乏足够的证据。  \n警察告诉每个人：  \n如果两人都抵赖，各判刑一年；  \n如果两人都坦白，各判八年；  \n如果两人中一个坦白而另一个抵赖，坦白的放出去，抵赖的判十年。  \n怎么决策？  \n\n### 困境所在\n每个囚徒面临两种选择：坦白或抵赖。  \n不管同伙如何选择，自己的最优选择是坦白：  \n如果同伙抵赖：自己坦白的话放出去，不坦白的话判一年，坦白比不坦白好；  \n如果同伙坦白：自己坦白的话判八年，不坦白的话判十年，坦白还是比不坦白好。  \n两个嫌疑犯都选择坦白，各判刑八年。  \n如果两人都抵赖，各判一年，显然这个结果好。  \n囚徒困境反映出的深刻问题：人类的个人理性有时能导致集体的非理性。  \n\n### 行为和策略\n个体的行为：\n* 坦白\n* 抵赖\n\n行为由策略决定：\n* 合作：cooperate (C)——抵赖\n* 背叛：defect (D)——坦白  \n\n个体间进行博弈，其策略组合对应着收益\n\n### 收益矩阵（Payoff Matrix）\n|  | C | D |\n| ------ | ------ | ------ |\n| C | (-1,-1) | (-10,0) |\n| D | (0,-10) | (-8,-8) |\n\n\n|  | C | D |\n| ------ | ------ | ------ |\n| C | R | S |\n| D | T | P |\n* T>R>P>S\n* 2R>T+S\n\nNowak的单参数收益矩阵\n\n|  | C | D |\n| ------ | ------ | ------ |\n| C | 1 | 0 |\n| D | b | 0 |\n\n其中1<b<2，b为背叛诱惑\n\n## Evolution of cooperation behavior\n\n### 策略的变化规则\n将个体置于L×L网格上，周期边界  \n每个格子一个个体  \n初始时每个个体按比例（C、D的比例）赋予具体策略  \n每一时刻，每个个体和邻居（4或8）及自身进行博弈，得到每个个体的总收益  \n下一时刻个体的策略将以此为基础进行改变  \n\n策略改变的规则： 每个个体选择自身及其邻居中收益值最高的那个个体的策略，作为下一时刻该个体的策略\n\n每个个体策略的更新过程是同步进行的\n\n\n## Using an efficient computer program\n\n对给定的收益矩阵，及初始时个体的策略，可以通过计算机编程实现上述策略更新过程。  \n从而可以知道每一时刻合作者的数量。\n\n\n## 实验：基于二维元胞自动机的\"囚徒困境\"模型\n\n### 参数设定及程序思路\n\n* 预处理中，定义格子行数和列数为L，背叛诱惑为B，时间步为Step。  \n* 格子策略由二维整型数组a[L][L]记录保存，通过先计算b[L][L]再赋值给a[L][L]保证格子状态同步更新.利用整型变量i j表示格子a[i][j]的位置，i为行数，j为列数。  \n* 规则判断中由整型变量count计算邻居中合作者个数，并通过条件判断a[i][j]的策略，计算这一时刻它的收益值保存到二维浮点变量p[i][j]中。通过变量n比较收益大小，通过变量m保存收益大者的策略，并将其赋给t+1时刻个体的策略a[i][j]。\n* 整型二维数组c[L][L]用于记录个体每一时刻决策的变化情况，它有四个值：1表示由背叛变为背叛，2表示由背叛变为合作，3表示由合作变为背叛，4表示由合作变为合作。\n* 程序将输出策略时空图state.txt文件中，输出收益时空图到payoff.txt文件中，输出策略变化时空图到change.txt文件中。\n* 在Matlab中导入change.txt文件转化为矩阵A。通过for循环，使用矩阵B获取矩阵A中表示每一步策略状态时空图的小矩阵。依次绘制B的图像并保存画面到矩阵m中，并利用系统提供的函数movie2avi导出.avi格式文件。\n\n### 程序\n数据生成\n``` c\n#include<stdlib.h>\n#include<stdio.h>\n#define L 100               //游戏规模\n#define step 300            //演化步\n#define B 1.93              //背叛诱惑\n\nvoid main()\n{\n    int a[L][L],b[L][L];      //策略时空图\n    float p[L][L];          //收益时空图\n    int c[L][L];            //变化时空图\n    float fc=0;            //合作频率\n    int tmp_m;           //临时变量用于存放取得最大收益的策略\n    float tmp_n;          //临时变量用于存放最大收益值\n    int i,j,t,count=0;\n\n    FILE *fp1,*fp2,*fp3,*fp4;\n    fp1=fopen(\"strange.txt\",\"w\");\n    fp2=fopen(\"payoff.txt\",\"w\");\n    fp3=fopen(\"change.txt\",\"w\");\n    fp4=fopen(\"fc.txt\",\"w\");\n\n    for(i=0;i<L;i++)         //初始条件：60%合作者随机分布\n        for(j=0;j<L;j++)\n        {\n            switch(rand()%10)\n            {\n                case 0:case 1:case 2:case 3:\n                    a[i][j]=b[i][j]=0;\n                    break;\n                default:\n                    a[i][j]=b[i][j]=1;\n            }\n        }\n    for(t=0;t<step;t++)\n    {\n        for(i=0;i<L;i++)\n        {\n            for(j=0;j<L;j++)\n            {\n                count=0;\n                if(a[(i-1+L)%L][(j-1+L)%L]==1) count++;\n                if(a[(i-1+L)%L][j]==1) count++;\n                if(a[(i-1+L)%L][(j+1+L)%L]==1) count++;\n                if(a[i][(j-1+L)%L]==1) count++;\n                if(a[i][j]==1) count++;\n                if(a[i][(j+1+L)%L]==1) count++;\n                if(a[(i+1+L)%L][(j-1+L)%L]==1) count++;\n                if(a[(i+1+L)%L][j]==1) count++;\n                if(a[(i+1+L)%L][(j+1+L)%L]==1) count++;\n\n                if(a[i][j]==1)\n                    p[i][j]=1*count;\n                else\n                    p[i][j]=B*count;                //计算收益\n                fprintf(fp2,\"%3.2f \",p[i][j]);\n            }\n            fprintf(fp2,\"\\n\");\n        }\n        for(i=0;i<L;i++)\n        {\n            for(j=0;j<L;j++)\n            {\n                tmp_m=tmp_n=0;\n\n                if(p[(i-1+L)%L][(j-1+L)%L]>tmp_n)\n                    tmp_n=p[(i-1+L)%L][(j-1+L)%L],\n                    tmp_m=a[(i-1+L)%L][(j-1+L)%L];\n                if(p[(i-1+L)%L][j]>tmp_n)\n                    tmp_n=p[(i-1+L)%L][j],tmp_m=a[(i-1+L)%L][j];\n                if(p[(i-1+L)%L][(j+1+L)%L]>tmp_n) \n                    tmp_n=p[(i-1+L)%L][(j+1+L)%L], \n                    tmp_m=a[(i-1+L)%L][(j+1+L)%L];\n                if(p[i][(j-1+L)%L]>tmp_n) \n                    tmp_n=p[i][(j-1+L)%L],tmp_m=a[i][(j-1+L)%L];\n                if(p[i][j]>tmp_n)\n                    tmp_n=p[i][j],tmp_m=a[i][j];\n                if(p[i][(j+1+L)%L]>tmp_n) \n                    tmp_n=p[i][(j+1+L)%L],tmp_m=a[i][(j+1+L)%L];\n                if(p[(i+1+L)%L][(j-1+L)%L]>tmp_n)\n                    tmp_n=p[(i+1+L)%L][(j-1+L)%L],\n                    tmp_m=a[(i+1+L)%L][(j-1+L)%L];\n                if(p[(i+1+L)%L][j]>tmp_n)\n                    tmp_n=p[(i+1+L)%L][j],tmp_m=a[(i+1+L)%L][j];\n                if(p[(i+1+L)%L][(j+1+L)%L]>tmp_n)\n                    tmp_n=p[(i+1+L)%L][(j+1+L)%L],\n                    tmp_m=a[(i+1+L)%L][(j+1+L)%L];\n\n                b[i][j]=tmp_m;\n            }\n        }\n\n        for(i=0;i<L;i++)                       //统计策略变化情况\n        {\n            for(j=0;j<L;j++)\n            {\n                if (a[i][j]==0&&b[i][j]==0)\n                    c[i][j]=1;\n                else if (a[i][j]==0&&b[i][j]==1)\n                    c[i][j]=2;\n                else if (a[i][j]==1&&b[i][j]==0)\n                    c[i][j]=3;\n                else if(a[i][j]==1&&b[i][j]==1)\n                    c[i][j]=4;\n                a[i][j]=b[i][j];\n\n            fprintf(fp1,\"%d \",a[i][j]);\n            fprintf(fp3,\"%d \",c[i][j]);\n            }\n            fprintf(fp1,\"\\n\");fprintf(fp3,\"\\n\");\n        }\n        count=0;                    //计算合作频率\n        for(i=0;i<L;i++)\n            for(j=0;j<L;j++)\n                count+=a[i][j];\n        fc=(float)count/10000;\n        printf(\"%lf\",fc);\n        fprintf(fp4,\"%lf\\n\",fc);\n\n        fprintf(fp1,\"\\n\");fprintf(fp2,\"\\n\");fprintf(fp3,\"\\n\");\n    }\n}\n\n```\n\n使用matlab绘图\n``` matlab\n>>load change.txt                   %载入文件\n>>A = importdata ('change.txt');     %转化为矩阵A\n>>m = moviein (100);                 %建立一个100个列向量组成的矩阵\n>>for   i = 1:100                    %绘制每一幅策略改变图并保存到矩阵m中\nk = 100*i-99;\nn = 100*i;\nb = A(k:n,1:100);\nimagesc(b);\nm(:,i)=getframe;\nend\n>>movie2avi(m,'C:\\二维演化.avi','compression','none');    %导出.avi格式文件\n```\n\n### 结果\n\n<img src=\"空间博弈演化\\02.png\">  \n\n当 1.8 < b < 2 时，初始分布仅为99×99的网格中央有一个背叛者，上图依次为第30、90、150、200时间步个体策略变化情况。其中棕色代表合作者坚持合作，蓝色代表背叛者坚持背叛，黄色代表合作者选择背叛，青色代表背叛者选择合作。\n\n\n<img src=\"空间博弈演化\\03.png\">  \n\n当 1.8 < b < 2 时，在60%的合作者的随机初始分布的条件下，合作频率在300个时间步内的变化。\n\n<img src=\"空间博弈演化\\04.png\">   \n\n当 1.8 < b < 2 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。  \n\n<img src=\"空间博弈演化\\05.png\">   \n\n当 1.75 < b < 1.8 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。\n\n\n\n","source":"_posts/空间博弈演化.md","raw":"---\ntitle: 空间博弈演化\ndate: 2019-11-12 00:41:12\ntoc: true\ntags:\n  - 数模\n---\n\n\n# Evolutionary games and spatial chaos\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Prisoner’s dilemma —— 囚徒困境\n\n### 出处\n1950年，由就职于兰德公司的梅里尔·弗勒德（Merrill Flood）和梅尔文·德雷希尔（Melvin Dresher）拟定出相关困境的理论。  \n后来由顾问艾伯特·塔克（Albert Tucker）以囚徒方式阐述，并命名为“囚徒困境”。\n\n### 描述\n两个嫌疑犯作案后被警察抓住，分别关在不同的屋子里接受审讯。  \n警察知道两人有罪，但缺乏足够的证据。  \n警察告诉每个人：  \n如果两人都抵赖，各判刑一年；  \n如果两人都坦白，各判八年；  \n如果两人中一个坦白而另一个抵赖，坦白的放出去，抵赖的判十年。  \n怎么决策？  \n\n### 困境所在\n每个囚徒面临两种选择：坦白或抵赖。  \n不管同伙如何选择，自己的最优选择是坦白：  \n如果同伙抵赖：自己坦白的话放出去，不坦白的话判一年，坦白比不坦白好；  \n如果同伙坦白：自己坦白的话判八年，不坦白的话判十年，坦白还是比不坦白好。  \n两个嫌疑犯都选择坦白，各判刑八年。  \n如果两人都抵赖，各判一年，显然这个结果好。  \n囚徒困境反映出的深刻问题：人类的个人理性有时能导致集体的非理性。  \n\n### 行为和策略\n个体的行为：\n* 坦白\n* 抵赖\n\n行为由策略决定：\n* 合作：cooperate (C)——抵赖\n* 背叛：defect (D)——坦白  \n\n个体间进行博弈，其策略组合对应着收益\n\n### 收益矩阵（Payoff Matrix）\n|  | C | D |\n| ------ | ------ | ------ |\n| C | (-1,-1) | (-10,0) |\n| D | (0,-10) | (-8,-8) |\n\n\n|  | C | D |\n| ------ | ------ | ------ |\n| C | R | S |\n| D | T | P |\n* T>R>P>S\n* 2R>T+S\n\nNowak的单参数收益矩阵\n\n|  | C | D |\n| ------ | ------ | ------ |\n| C | 1 | 0 |\n| D | b | 0 |\n\n其中1<b<2，b为背叛诱惑\n\n## Evolution of cooperation behavior\n\n### 策略的变化规则\n将个体置于L×L网格上，周期边界  \n每个格子一个个体  \n初始时每个个体按比例（C、D的比例）赋予具体策略  \n每一时刻，每个个体和邻居（4或8）及自身进行博弈，得到每个个体的总收益  \n下一时刻个体的策略将以此为基础进行改变  \n\n策略改变的规则： 每个个体选择自身及其邻居中收益值最高的那个个体的策略，作为下一时刻该个体的策略\n\n每个个体策略的更新过程是同步进行的\n\n\n## Using an efficient computer program\n\n对给定的收益矩阵，及初始时个体的策略，可以通过计算机编程实现上述策略更新过程。  \n从而可以知道每一时刻合作者的数量。\n\n\n## 实验：基于二维元胞自动机的\"囚徒困境\"模型\n\n### 参数设定及程序思路\n\n* 预处理中，定义格子行数和列数为L，背叛诱惑为B，时间步为Step。  \n* 格子策略由二维整型数组a[L][L]记录保存，通过先计算b[L][L]再赋值给a[L][L]保证格子状态同步更新.利用整型变量i j表示格子a[i][j]的位置，i为行数，j为列数。  \n* 规则判断中由整型变量count计算邻居中合作者个数，并通过条件判断a[i][j]的策略，计算这一时刻它的收益值保存到二维浮点变量p[i][j]中。通过变量n比较收益大小，通过变量m保存收益大者的策略，并将其赋给t+1时刻个体的策略a[i][j]。\n* 整型二维数组c[L][L]用于记录个体每一时刻决策的变化情况，它有四个值：1表示由背叛变为背叛，2表示由背叛变为合作，3表示由合作变为背叛，4表示由合作变为合作。\n* 程序将输出策略时空图state.txt文件中，输出收益时空图到payoff.txt文件中，输出策略变化时空图到change.txt文件中。\n* 在Matlab中导入change.txt文件转化为矩阵A。通过for循环，使用矩阵B获取矩阵A中表示每一步策略状态时空图的小矩阵。依次绘制B的图像并保存画面到矩阵m中，并利用系统提供的函数movie2avi导出.avi格式文件。\n\n### 程序\n数据生成\n``` c\n#include<stdlib.h>\n#include<stdio.h>\n#define L 100               //游戏规模\n#define step 300            //演化步\n#define B 1.93              //背叛诱惑\n\nvoid main()\n{\n    int a[L][L],b[L][L];      //策略时空图\n    float p[L][L];          //收益时空图\n    int c[L][L];            //变化时空图\n    float fc=0;            //合作频率\n    int tmp_m;           //临时变量用于存放取得最大收益的策略\n    float tmp_n;          //临时变量用于存放最大收益值\n    int i,j,t,count=0;\n\n    FILE *fp1,*fp2,*fp3,*fp4;\n    fp1=fopen(\"strange.txt\",\"w\");\n    fp2=fopen(\"payoff.txt\",\"w\");\n    fp3=fopen(\"change.txt\",\"w\");\n    fp4=fopen(\"fc.txt\",\"w\");\n\n    for(i=0;i<L;i++)         //初始条件：60%合作者随机分布\n        for(j=0;j<L;j++)\n        {\n            switch(rand()%10)\n            {\n                case 0:case 1:case 2:case 3:\n                    a[i][j]=b[i][j]=0;\n                    break;\n                default:\n                    a[i][j]=b[i][j]=1;\n            }\n        }\n    for(t=0;t<step;t++)\n    {\n        for(i=0;i<L;i++)\n        {\n            for(j=0;j<L;j++)\n            {\n                count=0;\n                if(a[(i-1+L)%L][(j-1+L)%L]==1) count++;\n                if(a[(i-1+L)%L][j]==1) count++;\n                if(a[(i-1+L)%L][(j+1+L)%L]==1) count++;\n                if(a[i][(j-1+L)%L]==1) count++;\n                if(a[i][j]==1) count++;\n                if(a[i][(j+1+L)%L]==1) count++;\n                if(a[(i+1+L)%L][(j-1+L)%L]==1) count++;\n                if(a[(i+1+L)%L][j]==1) count++;\n                if(a[(i+1+L)%L][(j+1+L)%L]==1) count++;\n\n                if(a[i][j]==1)\n                    p[i][j]=1*count;\n                else\n                    p[i][j]=B*count;                //计算收益\n                fprintf(fp2,\"%3.2f \",p[i][j]);\n            }\n            fprintf(fp2,\"\\n\");\n        }\n        for(i=0;i<L;i++)\n        {\n            for(j=0;j<L;j++)\n            {\n                tmp_m=tmp_n=0;\n\n                if(p[(i-1+L)%L][(j-1+L)%L]>tmp_n)\n                    tmp_n=p[(i-1+L)%L][(j-1+L)%L],\n                    tmp_m=a[(i-1+L)%L][(j-1+L)%L];\n                if(p[(i-1+L)%L][j]>tmp_n)\n                    tmp_n=p[(i-1+L)%L][j],tmp_m=a[(i-1+L)%L][j];\n                if(p[(i-1+L)%L][(j+1+L)%L]>tmp_n) \n                    tmp_n=p[(i-1+L)%L][(j+1+L)%L], \n                    tmp_m=a[(i-1+L)%L][(j+1+L)%L];\n                if(p[i][(j-1+L)%L]>tmp_n) \n                    tmp_n=p[i][(j-1+L)%L],tmp_m=a[i][(j-1+L)%L];\n                if(p[i][j]>tmp_n)\n                    tmp_n=p[i][j],tmp_m=a[i][j];\n                if(p[i][(j+1+L)%L]>tmp_n) \n                    tmp_n=p[i][(j+1+L)%L],tmp_m=a[i][(j+1+L)%L];\n                if(p[(i+1+L)%L][(j-1+L)%L]>tmp_n)\n                    tmp_n=p[(i+1+L)%L][(j-1+L)%L],\n                    tmp_m=a[(i+1+L)%L][(j-1+L)%L];\n                if(p[(i+1+L)%L][j]>tmp_n)\n                    tmp_n=p[(i+1+L)%L][j],tmp_m=a[(i+1+L)%L][j];\n                if(p[(i+1+L)%L][(j+1+L)%L]>tmp_n)\n                    tmp_n=p[(i+1+L)%L][(j+1+L)%L],\n                    tmp_m=a[(i+1+L)%L][(j+1+L)%L];\n\n                b[i][j]=tmp_m;\n            }\n        }\n\n        for(i=0;i<L;i++)                       //统计策略变化情况\n        {\n            for(j=0;j<L;j++)\n            {\n                if (a[i][j]==0&&b[i][j]==0)\n                    c[i][j]=1;\n                else if (a[i][j]==0&&b[i][j]==1)\n                    c[i][j]=2;\n                else if (a[i][j]==1&&b[i][j]==0)\n                    c[i][j]=3;\n                else if(a[i][j]==1&&b[i][j]==1)\n                    c[i][j]=4;\n                a[i][j]=b[i][j];\n\n            fprintf(fp1,\"%d \",a[i][j]);\n            fprintf(fp3,\"%d \",c[i][j]);\n            }\n            fprintf(fp1,\"\\n\");fprintf(fp3,\"\\n\");\n        }\n        count=0;                    //计算合作频率\n        for(i=0;i<L;i++)\n            for(j=0;j<L;j++)\n                count+=a[i][j];\n        fc=(float)count/10000;\n        printf(\"%lf\",fc);\n        fprintf(fp4,\"%lf\\n\",fc);\n\n        fprintf(fp1,\"\\n\");fprintf(fp2,\"\\n\");fprintf(fp3,\"\\n\");\n    }\n}\n\n```\n\n使用matlab绘图\n``` matlab\n>>load change.txt                   %载入文件\n>>A = importdata ('change.txt');     %转化为矩阵A\n>>m = moviein (100);                 %建立一个100个列向量组成的矩阵\n>>for   i = 1:100                    %绘制每一幅策略改变图并保存到矩阵m中\nk = 100*i-99;\nn = 100*i;\nb = A(k:n,1:100);\nimagesc(b);\nm(:,i)=getframe;\nend\n>>movie2avi(m,'C:\\二维演化.avi','compression','none');    %导出.avi格式文件\n```\n\n### 结果\n\n<img src=\"空间博弈演化\\02.png\">  \n\n当 1.8 < b < 2 时，初始分布仅为99×99的网格中央有一个背叛者，上图依次为第30、90、150、200时间步个体策略变化情况。其中棕色代表合作者坚持合作，蓝色代表背叛者坚持背叛，黄色代表合作者选择背叛，青色代表背叛者选择合作。\n\n\n<img src=\"空间博弈演化\\03.png\">  \n\n当 1.8 < b < 2 时，在60%的合作者的随机初始分布的条件下，合作频率在300个时间步内的变化。\n\n<img src=\"空间博弈演化\\04.png\">   \n\n当 1.8 < b < 2 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。  \n\n<img src=\"空间博弈演化\\05.png\">   \n\n当 1.75 < b < 1.8 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。\n\n\n\n","slug":"空间博弈演化","published":1,"updated":"2020-01-05T19:13:24.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50bk006i4cvj196wt8nb","content":"<h1 id=\"Evolutionary-games-and-spatial-chaos\"><a href=\"#Evolutionary-games-and-spatial-chaos\" class=\"headerlink\" title=\"Evolutionary games and spatial chaos\"></a>Evolutionary games and spatial chaos</h1><a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h2 id=\"Prisoner’s-dilemma-——-囚徒困境\"><a href=\"#Prisoner’s-dilemma-——-囚徒困境\" class=\"headerlink\" title=\"Prisoner’s dilemma —— 囚徒困境\"></a>Prisoner’s dilemma —— 囚徒困境</h2><h3 id=\"出处\"><a href=\"#出处\" class=\"headerlink\" title=\"出处\"></a>出处</h3><p>1950年，由就职于兰德公司的梅里尔·弗勒德（Merrill Flood）和梅尔文·德雷希尔（Melvin Dresher）拟定出相关困境的理论。<br>后来由顾问艾伯特·塔克（Albert Tucker）以囚徒方式阐述，并命名为“囚徒困境”。</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>两个嫌疑犯作案后被警察抓住，分别关在不同的屋子里接受审讯。<br>警察知道两人有罪，但缺乏足够的证据。<br>警察告诉每个人：<br>如果两人都抵赖，各判刑一年；<br>如果两人都坦白，各判八年；<br>如果两人中一个坦白而另一个抵赖，坦白的放出去，抵赖的判十年。<br>怎么决策？  </p>\n<h3 id=\"困境所在\"><a href=\"#困境所在\" class=\"headerlink\" title=\"困境所在\"></a>困境所在</h3><p>每个囚徒面临两种选择：坦白或抵赖。<br>不管同伙如何选择，自己的最优选择是坦白：<br>如果同伙抵赖：自己坦白的话放出去，不坦白的话判一年，坦白比不坦白好；<br>如果同伙坦白：自己坦白的话判八年，不坦白的话判十年，坦白还是比不坦白好。<br>两个嫌疑犯都选择坦白，各判刑八年。<br>如果两人都抵赖，各判一年，显然这个结果好。<br>囚徒困境反映出的深刻问题：人类的个人理性有时能导致集体的非理性。  </p>\n<h3 id=\"行为和策略\"><a href=\"#行为和策略\" class=\"headerlink\" title=\"行为和策略\"></a>行为和策略</h3><p>个体的行为：</p>\n<ul>\n<li>坦白</li>\n<li>抵赖</li>\n</ul>\n<p>行为由策略决定：</p>\n<ul>\n<li>合作：cooperate (C)——抵赖</li>\n<li>背叛：defect (D)——坦白  </li>\n</ul>\n<p>个体间进行博弈，其策略组合对应着收益</p>\n<h3 id=\"收益矩阵（Payoff-Matrix）\"><a href=\"#收益矩阵（Payoff-Matrix）\" class=\"headerlink\" title=\"收益矩阵（Payoff Matrix）\"></a>收益矩阵（Payoff Matrix）</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>C</th>\n<th>D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>(-1,-1)</td>\n<td>(-10,0)</td>\n</tr>\n<tr>\n<td>D</td>\n<td>(0,-10)</td>\n<td>(-8,-8)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>C</th>\n<th>D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>R</td>\n<td>S</td>\n</tr>\n<tr>\n<td>D</td>\n<td>T</td>\n<td>P</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>T&gt;R&gt;P&gt;S</li>\n<li>2R&gt;T+S</li>\n</ul>\n<p>Nowak的单参数收益矩阵</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>C</th>\n<th>D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>D</td>\n<td>b</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其中1&lt;b&lt;2，b为背叛诱惑</p>\n<h2 id=\"Evolution-of-cooperation-behavior\"><a href=\"#Evolution-of-cooperation-behavior\" class=\"headerlink\" title=\"Evolution of cooperation behavior\"></a>Evolution of cooperation behavior</h2><h3 id=\"策略的变化规则\"><a href=\"#策略的变化规则\" class=\"headerlink\" title=\"策略的变化规则\"></a>策略的变化规则</h3><p>将个体置于L×L网格上，周期边界<br>每个格子一个个体<br>初始时每个个体按比例（C、D的比例）赋予具体策略<br>每一时刻，每个个体和邻居（4或8）及自身进行博弈，得到每个个体的总收益<br>下一时刻个体的策略将以此为基础进行改变  </p>\n<p>策略改变的规则： 每个个体选择自身及其邻居中收益值最高的那个个体的策略，作为下一时刻该个体的策略</p>\n<p>每个个体策略的更新过程是同步进行的</p>\n<h2 id=\"Using-an-efficient-computer-program\"><a href=\"#Using-an-efficient-computer-program\" class=\"headerlink\" title=\"Using an efficient computer program\"></a>Using an efficient computer program</h2><p>对给定的收益矩阵，及初始时个体的策略，可以通过计算机编程实现上述策略更新过程。<br>从而可以知道每一时刻合作者的数量。</p>\n<h2 id=\"实验：基于二维元胞自动机的”囚徒困境”模型\"><a href=\"#实验：基于二维元胞自动机的”囚徒困境”模型\" class=\"headerlink\" title=\"实验：基于二维元胞自动机的”囚徒困境”模型\"></a>实验：基于二维元胞自动机的”囚徒困境”模型</h2><h3 id=\"参数设定及程序思路\"><a href=\"#参数设定及程序思路\" class=\"headerlink\" title=\"参数设定及程序思路\"></a>参数设定及程序思路</h3><ul>\n<li>预处理中，定义格子行数和列数为L，背叛诱惑为B，时间步为Step。  </li>\n<li>格子策略由二维整型数组a[L][L]记录保存，通过先计算b[L][L]再赋值给a[L][L]保证格子状态同步更新.利用整型变量i j表示格子a[i][j]的位置，i为行数，j为列数。  </li>\n<li>规则判断中由整型变量count计算邻居中合作者个数，并通过条件判断a[i][j]的策略，计算这一时刻它的收益值保存到二维浮点变量p[i][j]中。通过变量n比较收益大小，通过变量m保存收益大者的策略，并将其赋给t+1时刻个体的策略a[i][j]。</li>\n<li>整型二维数组c[L][L]用于记录个体每一时刻决策的变化情况，它有四个值：1表示由背叛变为背叛，2表示由背叛变为合作，3表示由合作变为背叛，4表示由合作变为合作。</li>\n<li>程序将输出策略时空图state.txt文件中，输出收益时空图到payoff.txt文件中，输出策略变化时空图到change.txt文件中。</li>\n<li>在Matlab中导入change.txt文件转化为矩阵A。通过for循环，使用矩阵B获取矩阵A中表示每一步策略状态时空图的小矩阵。依次绘制B的图像并保存画面到矩阵m中，并利用系统提供的函数movie2avi导出.avi格式文件。</li>\n</ul>\n<h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><p>数据生成<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> L 100               <span class=\"comment\">//游戏规模</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> step 300            <span class=\"comment\">//演化步</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> B 1.93              <span class=\"comment\">//背叛诱惑</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[L][L],b[L][L];      <span class=\"comment\">//策略时空图</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> p[L][L];          <span class=\"comment\">//收益时空图</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c[L][L];            <span class=\"comment\">//变化时空图</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> fc=<span class=\"number\">0</span>;            <span class=\"comment\">//合作频率</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp_m;           <span class=\"comment\">//临时变量用于存放取得最大收益的策略</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> tmp_n;          <span class=\"comment\">//临时变量用于存放最大收益值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j,t,count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fp1,*fp2,*fp3,*fp4;</span><br><span class=\"line\">    fp1=fopen(<span class=\"string\">\"strange.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    fp2=fopen(<span class=\"string\">\"payoff.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    fp3=fopen(<span class=\"string\">\"change.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    fp4=fopen(<span class=\"string\">\"fc.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)         <span class=\"comment\">//初始条件：60%合作者随机分布</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(rand()%<span class=\"number\">10</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:<span class=\"keyword\">case</span> <span class=\"number\">1</span>:<span class=\"keyword\">case</span> <span class=\"number\">2</span>:<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    a[i][j]=b[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    a[i][j]=b[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(t=<span class=\"number\">0</span>;t&lt;step;t++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i<span class=\"number\">-1</span>+L)%L][j]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][(j<span class=\"number\">-1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][j]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][(j+<span class=\"number\">1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i+<span class=\"number\">1</span>+L)%L][j]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][j]==<span class=\"number\">1</span>)</span><br><span class=\"line\">                    p[i][j]=<span class=\"number\">1</span>*count;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    p[i][j]=B*count;                <span class=\"comment\">//计算收益</span></span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(fp2,<span class=\"string\">\"%3.2f \"</span>,p[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp2,<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tmp_m=tmp_n=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L],</span><br><span class=\"line\">                    tmp_m=a[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i<span class=\"number\">-1</span>+L)%L][j]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i<span class=\"number\">-1</span>+L)%L][j],tmp_m=a[(i<span class=\"number\">-1</span>+L)%L][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]&gt;tmp_n) </span><br><span class=\"line\">                    tmp_n=p[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L], </span><br><span class=\"line\">                    tmp_m=a[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i][(j<span class=\"number\">-1</span>+L)%L]&gt;tmp_n) </span><br><span class=\"line\">                    tmp_n=p[i][(j<span class=\"number\">-1</span>+L)%L],tmp_m=a[i][(j<span class=\"number\">-1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i][j]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[i][j],tmp_m=a[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i][(j+<span class=\"number\">1</span>+L)%L]&gt;tmp_n) </span><br><span class=\"line\">                    tmp_n=p[i][(j+<span class=\"number\">1</span>+L)%L],tmp_m=a[i][(j+<span class=\"number\">1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L],</span><br><span class=\"line\">                    tmp_m=a[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i+<span class=\"number\">1</span>+L)%L][j]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i+<span class=\"number\">1</span>+L)%L][j],tmp_m=a[(i+<span class=\"number\">1</span>+L)%L][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L],</span><br><span class=\"line\">                    tmp_m=a[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L];</span><br><span class=\"line\"></span><br><span class=\"line\">                b[i][j]=tmp_m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)                       <span class=\"comment\">//统计策略变化情况</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i][j]==<span class=\"number\">0</span>&amp;&amp;b[i][j]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i][j]==<span class=\"number\">0</span>&amp;&amp;b[i][j]==<span class=\"number\">1</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i][j]==<span class=\"number\">1</span>&amp;&amp;b[i][j]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i][j]==<span class=\"number\">1</span>&amp;&amp;b[i][j]==<span class=\"number\">1</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">4</span>;</span><br><span class=\"line\">                a[i][j]=b[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp1,<span class=\"string\">\"%d \"</span>,a[i][j]);</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp3,<span class=\"string\">\"%d \"</span>,c[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp1,<span class=\"string\">\"\\n\"</span>);<span class=\"built_in\">fprintf</span>(fp3,<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count=<span class=\"number\">0</span>;                    <span class=\"comment\">//计算合作频率</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">                count+=a[i][j];</span><br><span class=\"line\">        fc=(<span class=\"keyword\">float</span>)count/<span class=\"number\">10000</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lf\"</span>,fc);</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp4,<span class=\"string\">\"%lf\\n\"</span>,fc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp1,<span class=\"string\">\"\\n\"</span>);<span class=\"built_in\">fprintf</span>(fp2,<span class=\"string\">\"\\n\"</span>);<span class=\"built_in\">fprintf</span>(fp3,<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用matlab绘图<br><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;load change.txt                   <span class=\"comment\">%载入文件</span></span><br><span class=\"line\">&gt;&gt;A = importdata (<span class=\"string\">'change.txt'</span>);     <span class=\"comment\">%转化为矩阵A</span></span><br><span class=\"line\">&gt;&gt;m = moviein (<span class=\"number\">100</span>);                 <span class=\"comment\">%建立一个100个列向量组成的矩阵</span></span><br><span class=\"line\">&gt;&gt;<span class=\"keyword\">for</span>   <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:<span class=\"number\">100</span>                    <span class=\"comment\">%绘制每一幅策略改变图并保存到矩阵m中</span></span><br><span class=\"line\">k = <span class=\"number\">100</span>*<span class=\"built_in\">i</span><span class=\"number\">-99</span>;</span><br><span class=\"line\">n = <span class=\"number\">100</span>*<span class=\"built_in\">i</span>;</span><br><span class=\"line\">b = A(k:n,<span class=\"number\">1</span>:<span class=\"number\">100</span>);</span><br><span class=\"line\">imagesc(b);</span><br><span class=\"line\">m(:,<span class=\"built_in\">i</span>)=getframe;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">&gt;&gt;movie2avi(m,<span class=\"string\">'C:\\二维演化.avi'</span>,<span class=\"string\">'compression'</span>,<span class=\"string\">'none'</span>);    <span class=\"comment\">%导出.avi格式文件</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"/2019/11/12/空间博弈演化/02.png\">  </p>\n<p>当 1.8 &lt; b &lt; 2 时，初始分布仅为99×99的网格中央有一个背叛者，上图依次为第30、90、150、200时间步个体策略变化情况。其中棕色代表合作者坚持合作，蓝色代表背叛者坚持背叛，黄色代表合作者选择背叛，青色代表背叛者选择合作。</p>\n<p><img src=\"/2019/11/12/空间博弈演化/03.png\">  </p>\n<p>当 1.8 &lt; b &lt; 2 时，在60%的合作者的随机初始分布的条件下，合作频率在300个时间步内的变化。</p>\n<p><img src=\"/2019/11/12/空间博弈演化/04.png\">   </p>\n<p>当 1.8 &lt; b &lt; 2 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。  </p>\n<p><img src=\"/2019/11/12/空间博弈演化/05.png\">   </p>\n<p>当 1.75 &lt; b &lt; 1.8 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。</p>\n</the>","site":{"data":{}},"excerpt":"<h1 id=\"Evolutionary-games-and-spatial-chaos\"><a href=\"#Evolutionary-games-and-spatial-chaos\" class=\"headerlink\" title=\"Evolutionary games and spatial chaos\"></a>Evolutionary games and spatial chaos</h1>","more":"<the rest of contents | 余下全文>\n\n<h2 id=\"Prisoner’s-dilemma-——-囚徒困境\"><a href=\"#Prisoner’s-dilemma-——-囚徒困境\" class=\"headerlink\" title=\"Prisoner’s dilemma —— 囚徒困境\"></a>Prisoner’s dilemma —— 囚徒困境</h2><h3 id=\"出处\"><a href=\"#出处\" class=\"headerlink\" title=\"出处\"></a>出处</h3><p>1950年，由就职于兰德公司的梅里尔·弗勒德（Merrill Flood）和梅尔文·德雷希尔（Melvin Dresher）拟定出相关困境的理论。<br>后来由顾问艾伯特·塔克（Albert Tucker）以囚徒方式阐述，并命名为“囚徒困境”。</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>两个嫌疑犯作案后被警察抓住，分别关在不同的屋子里接受审讯。<br>警察知道两人有罪，但缺乏足够的证据。<br>警察告诉每个人：<br>如果两人都抵赖，各判刑一年；<br>如果两人都坦白，各判八年；<br>如果两人中一个坦白而另一个抵赖，坦白的放出去，抵赖的判十年。<br>怎么决策？  </p>\n<h3 id=\"困境所在\"><a href=\"#困境所在\" class=\"headerlink\" title=\"困境所在\"></a>困境所在</h3><p>每个囚徒面临两种选择：坦白或抵赖。<br>不管同伙如何选择，自己的最优选择是坦白：<br>如果同伙抵赖：自己坦白的话放出去，不坦白的话判一年，坦白比不坦白好；<br>如果同伙坦白：自己坦白的话判八年，不坦白的话判十年，坦白还是比不坦白好。<br>两个嫌疑犯都选择坦白，各判刑八年。<br>如果两人都抵赖，各判一年，显然这个结果好。<br>囚徒困境反映出的深刻问题：人类的个人理性有时能导致集体的非理性。  </p>\n<h3 id=\"行为和策略\"><a href=\"#行为和策略\" class=\"headerlink\" title=\"行为和策略\"></a>行为和策略</h3><p>个体的行为：</p>\n<ul>\n<li>坦白</li>\n<li>抵赖</li>\n</ul>\n<p>行为由策略决定：</p>\n<ul>\n<li>合作：cooperate (C)——抵赖</li>\n<li>背叛：defect (D)——坦白  </li>\n</ul>\n<p>个体间进行博弈，其策略组合对应着收益</p>\n<h3 id=\"收益矩阵（Payoff-Matrix）\"><a href=\"#收益矩阵（Payoff-Matrix）\" class=\"headerlink\" title=\"收益矩阵（Payoff Matrix）\"></a>收益矩阵（Payoff Matrix）</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>C</th>\n<th>D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>(-1,-1)</td>\n<td>(-10,0)</td>\n</tr>\n<tr>\n<td>D</td>\n<td>(0,-10)</td>\n<td>(-8,-8)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>C</th>\n<th>D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>R</td>\n<td>S</td>\n</tr>\n<tr>\n<td>D</td>\n<td>T</td>\n<td>P</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>T&gt;R&gt;P&gt;S</li>\n<li>2R&gt;T+S</li>\n</ul>\n<p>Nowak的单参数收益矩阵</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>C</th>\n<th>D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>D</td>\n<td>b</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其中1&lt;b&lt;2，b为背叛诱惑</p>\n<h2 id=\"Evolution-of-cooperation-behavior\"><a href=\"#Evolution-of-cooperation-behavior\" class=\"headerlink\" title=\"Evolution of cooperation behavior\"></a>Evolution of cooperation behavior</h2><h3 id=\"策略的变化规则\"><a href=\"#策略的变化规则\" class=\"headerlink\" title=\"策略的变化规则\"></a>策略的变化规则</h3><p>将个体置于L×L网格上，周期边界<br>每个格子一个个体<br>初始时每个个体按比例（C、D的比例）赋予具体策略<br>每一时刻，每个个体和邻居（4或8）及自身进行博弈，得到每个个体的总收益<br>下一时刻个体的策略将以此为基础进行改变  </p>\n<p>策略改变的规则： 每个个体选择自身及其邻居中收益值最高的那个个体的策略，作为下一时刻该个体的策略</p>\n<p>每个个体策略的更新过程是同步进行的</p>\n<h2 id=\"Using-an-efficient-computer-program\"><a href=\"#Using-an-efficient-computer-program\" class=\"headerlink\" title=\"Using an efficient computer program\"></a>Using an efficient computer program</h2><p>对给定的收益矩阵，及初始时个体的策略，可以通过计算机编程实现上述策略更新过程。<br>从而可以知道每一时刻合作者的数量。</p>\n<h2 id=\"实验：基于二维元胞自动机的”囚徒困境”模型\"><a href=\"#实验：基于二维元胞自动机的”囚徒困境”模型\" class=\"headerlink\" title=\"实验：基于二维元胞自动机的”囚徒困境”模型\"></a>实验：基于二维元胞自动机的”囚徒困境”模型</h2><h3 id=\"参数设定及程序思路\"><a href=\"#参数设定及程序思路\" class=\"headerlink\" title=\"参数设定及程序思路\"></a>参数设定及程序思路</h3><ul>\n<li>预处理中，定义格子行数和列数为L，背叛诱惑为B，时间步为Step。  </li>\n<li>格子策略由二维整型数组a[L][L]记录保存，通过先计算b[L][L]再赋值给a[L][L]保证格子状态同步更新.利用整型变量i j表示格子a[i][j]的位置，i为行数，j为列数。  </li>\n<li>规则判断中由整型变量count计算邻居中合作者个数，并通过条件判断a[i][j]的策略，计算这一时刻它的收益值保存到二维浮点变量p[i][j]中。通过变量n比较收益大小，通过变量m保存收益大者的策略，并将其赋给t+1时刻个体的策略a[i][j]。</li>\n<li>整型二维数组c[L][L]用于记录个体每一时刻决策的变化情况，它有四个值：1表示由背叛变为背叛，2表示由背叛变为合作，3表示由合作变为背叛，4表示由合作变为合作。</li>\n<li>程序将输出策略时空图state.txt文件中，输出收益时空图到payoff.txt文件中，输出策略变化时空图到change.txt文件中。</li>\n<li>在Matlab中导入change.txt文件转化为矩阵A。通过for循环，使用矩阵B获取矩阵A中表示每一步策略状态时空图的小矩阵。依次绘制B的图像并保存画面到矩阵m中，并利用系统提供的函数movie2avi导出.avi格式文件。</li>\n</ul>\n<h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><p>数据生成<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> L 100               <span class=\"comment\">//游戏规模</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> step 300            <span class=\"comment\">//演化步</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> B 1.93              <span class=\"comment\">//背叛诱惑</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[L][L],b[L][L];      <span class=\"comment\">//策略时空图</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> p[L][L];          <span class=\"comment\">//收益时空图</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c[L][L];            <span class=\"comment\">//变化时空图</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> fc=<span class=\"number\">0</span>;            <span class=\"comment\">//合作频率</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp_m;           <span class=\"comment\">//临时变量用于存放取得最大收益的策略</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> tmp_n;          <span class=\"comment\">//临时变量用于存放最大收益值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j,t,count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fp1,*fp2,*fp3,*fp4;</span><br><span class=\"line\">    fp1=fopen(<span class=\"string\">\"strange.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    fp2=fopen(<span class=\"string\">\"payoff.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    fp3=fopen(<span class=\"string\">\"change.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    fp4=fopen(<span class=\"string\">\"fc.txt\"</span>,<span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)         <span class=\"comment\">//初始条件：60%合作者随机分布</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(rand()%<span class=\"number\">10</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:<span class=\"keyword\">case</span> <span class=\"number\">1</span>:<span class=\"keyword\">case</span> <span class=\"number\">2</span>:<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    a[i][j]=b[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    a[i][j]=b[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(t=<span class=\"number\">0</span>;t&lt;step;t++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i<span class=\"number\">-1</span>+L)%L][j]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][(j<span class=\"number\">-1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][j]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][(j+<span class=\"number\">1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i+<span class=\"number\">1</span>+L)%L][j]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]==<span class=\"number\">1</span>) count++;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i][j]==<span class=\"number\">1</span>)</span><br><span class=\"line\">                    p[i][j]=<span class=\"number\">1</span>*count;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    p[i][j]=B*count;                <span class=\"comment\">//计算收益</span></span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(fp2,<span class=\"string\">\"%3.2f \"</span>,p[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp2,<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tmp_m=tmp_n=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L],</span><br><span class=\"line\">                    tmp_m=a[(i<span class=\"number\">-1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i<span class=\"number\">-1</span>+L)%L][j]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i<span class=\"number\">-1</span>+L)%L][j],tmp_m=a[(i<span class=\"number\">-1</span>+L)%L][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]&gt;tmp_n) </span><br><span class=\"line\">                    tmp_n=p[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L], </span><br><span class=\"line\">                    tmp_m=a[(i<span class=\"number\">-1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i][(j<span class=\"number\">-1</span>+L)%L]&gt;tmp_n) </span><br><span class=\"line\">                    tmp_n=p[i][(j<span class=\"number\">-1</span>+L)%L],tmp_m=a[i][(j<span class=\"number\">-1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i][j]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[i][j],tmp_m=a[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[i][(j+<span class=\"number\">1</span>+L)%L]&gt;tmp_n) </span><br><span class=\"line\">                    tmp_n=p[i][(j+<span class=\"number\">1</span>+L)%L],tmp_m=a[i][(j+<span class=\"number\">1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L],</span><br><span class=\"line\">                    tmp_m=a[(i+<span class=\"number\">1</span>+L)%L][(j<span class=\"number\">-1</span>+L)%L];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i+<span class=\"number\">1</span>+L)%L][j]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i+<span class=\"number\">1</span>+L)%L][j],tmp_m=a[(i+<span class=\"number\">1</span>+L)%L][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L]&gt;tmp_n)</span><br><span class=\"line\">                    tmp_n=p[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L],</span><br><span class=\"line\">                    tmp_m=a[(i+<span class=\"number\">1</span>+L)%L][(j+<span class=\"number\">1</span>+L)%L];</span><br><span class=\"line\"></span><br><span class=\"line\">                b[i][j]=tmp_m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)                       <span class=\"comment\">//统计策略变化情况</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i][j]==<span class=\"number\">0</span>&amp;&amp;b[i][j]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i][j]==<span class=\"number\">0</span>&amp;&amp;b[i][j]==<span class=\"number\">1</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i][j]==<span class=\"number\">1</span>&amp;&amp;b[i][j]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i][j]==<span class=\"number\">1</span>&amp;&amp;b[i][j]==<span class=\"number\">1</span>)</span><br><span class=\"line\">                    c[i][j]=<span class=\"number\">4</span>;</span><br><span class=\"line\">                a[i][j]=b[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp1,<span class=\"string\">\"%d \"</span>,a[i][j]);</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp3,<span class=\"string\">\"%d \"</span>,c[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(fp1,<span class=\"string\">\"\\n\"</span>);<span class=\"built_in\">fprintf</span>(fp3,<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count=<span class=\"number\">0</span>;                    <span class=\"comment\">//计算合作频率</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;L;j++)</span><br><span class=\"line\">                count+=a[i][j];</span><br><span class=\"line\">        fc=(<span class=\"keyword\">float</span>)count/<span class=\"number\">10000</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lf\"</span>,fc);</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp4,<span class=\"string\">\"%lf\\n\"</span>,fc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp1,<span class=\"string\">\"\\n\"</span>);<span class=\"built_in\">fprintf</span>(fp2,<span class=\"string\">\"\\n\"</span>);<span class=\"built_in\">fprintf</span>(fp3,<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用matlab绘图<br><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;load change.txt                   <span class=\"comment\">%载入文件</span></span><br><span class=\"line\">&gt;&gt;A = importdata (<span class=\"string\">'change.txt'</span>);     <span class=\"comment\">%转化为矩阵A</span></span><br><span class=\"line\">&gt;&gt;m = moviein (<span class=\"number\">100</span>);                 <span class=\"comment\">%建立一个100个列向量组成的矩阵</span></span><br><span class=\"line\">&gt;&gt;<span class=\"keyword\">for</span>   <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:<span class=\"number\">100</span>                    <span class=\"comment\">%绘制每一幅策略改变图并保存到矩阵m中</span></span><br><span class=\"line\">k = <span class=\"number\">100</span>*<span class=\"built_in\">i</span><span class=\"number\">-99</span>;</span><br><span class=\"line\">n = <span class=\"number\">100</span>*<span class=\"built_in\">i</span>;</span><br><span class=\"line\">b = A(k:n,<span class=\"number\">1</span>:<span class=\"number\">100</span>);</span><br><span class=\"line\">imagesc(b);</span><br><span class=\"line\">m(:,<span class=\"built_in\">i</span>)=getframe;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">&gt;&gt;movie2avi(m,<span class=\"string\">'C:\\二维演化.avi'</span>,<span class=\"string\">'compression'</span>,<span class=\"string\">'none'</span>);    <span class=\"comment\">%导出.avi格式文件</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"/2019/11/12/空间博弈演化/02.png\">  </p>\n<p>当 1.8 &lt; b &lt; 2 时，初始分布仅为99×99的网格中央有一个背叛者，上图依次为第30、90、150、200时间步个体策略变化情况。其中棕色代表合作者坚持合作，蓝色代表背叛者坚持背叛，黄色代表合作者选择背叛，青色代表背叛者选择合作。</p>\n<p><img src=\"/2019/11/12/空间博弈演化/03.png\">  </p>\n<p>当 1.8 &lt; b &lt; 2 时，在60%的合作者的随机初始分布的条件下，合作频率在300个时间步内的变化。</p>\n<p><img src=\"/2019/11/12/空间博弈演化/04.png\">   </p>\n<p>当 1.8 &lt; b &lt; 2 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。  </p>\n<p><img src=\"/2019/11/12/空间博弈演化/05.png\">   </p>\n<p>当 1.75 &lt; b &lt; 1.8 时，初始条件为90%的合作者随机分布，在200×200的方格中模拟，最终稳定时策略变化图。</p>\n</the>"},{"title":"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图","date":"2019-06-28T16:11:20.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n\n##  Voronoi diagram 维诺图 和 Delaunay Triangulation 德罗奈三角剖分\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n### 维诺图\n\n#### 定义\n给定平面中的一组点，所有点不共线，维诺图为每个点（生成元）创建多边形区域，使得每个区域中的点到生成元的距离最近。  \n\n#### 特点 \n* 每个V多边形内有一个生成元； \n* 每个V多边形内点到该生成元距离短于到其它生成元距离； \n* 多边形边界上的点到生成此边界的生成元距离相等（生成元连线的垂直平分线）； \n* 邻接图形的Voronoi多边形界线以原邻接界线作为子集。\n\n### 德罗奈三角剖分\n\n对点集进行结构化的一个重要的方法就是对这些点进行三角剖分。\n#### 定义\nDelaunay三角剖分定义为平面上的点集P是一种三角剖分，使得P中没有点严格处于剖分后中任意一个三角形外接圆的内部。\n\n#### 特点\n* Delaunay三角剖分与Voronoi图是对偶关系。  \n  对于一个维诺图，若任何两个生成元site之间有一条非空边界，那么这两个site之间连接一条边，由此得到的对偶图，就是一个三角剖分。\n* 空圆性  \n  对于Delaunay剖分中的任何一张face的外接圆必然是空的。 \n* 最近邻性  \n  任何一条连接于最近邻之间的边都会被Delaunay剖分所采用，因为这里头会存在一个以这条边为直径（弦）的空圆。\n* 复杂度  \n  在二维平面中，每增加一个点三角形的数目都会大概增加2，边数增加3。可以说在二维上的Delaunay剖分中是一个线性规模的数据结构。但在三维的情况下这两个指标最多会达到平房的量级，更高维的空间的一般结论也会达到2^d量级。\n \n \n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\opencv-delaunay-vornoi-subdiv-example.png\">\n\n\n\n### 维诺图生成方法\n\n首先生成其对偶元Delaunay三角网，再找出三角网每一三角形的外接圆圆心，最后连接相邻三角形的外接圆圆心，形成以每一个三角形顶点为生成元的多边形网。\n\n步骤：  \n（1）离散点自动构建三角网，即构建Delaunay三角网。对离散点和形成的三角形编号，记录每个三角形是由哪三个离散点构成的。   \n（2）计算每个三角形的外接圆圆心，并记录之。   \n（3）遍历三角形链表，寻找与当前三角形pTri三边共边的相邻三角形TriA，TriB和TriC。   \n（4）如果找到，则把寻找到的三角形的外心与pTri的外心连接，存入维诺边链表中。如果找不到，则求出最外边的中垂线射线存入维诺边链表中。   \n（5）遍历结束，所有维诺边被找到，根据边画出维诺图。\n\nDelaunay剖分是一种三角剖分的标准，实现它有多种算法，这里采用Bowyer-Watson算法，算法的基本步骤是：   \n（1）构造一个超级三角形，包含所有散点，放入三角形链表。   \n（2）将点集中的散点依次插入，在三角形链表中找出其外接圆包含插入点的三角形（称为该点的影响三角形），删除影响三角形的公共边，将插入点同影响三角形的全部顶点连接起来，从而完成一个点在Delaunay三角形链表中的插入。   \n（3）根据优化准则对局部新形成的三角形进行优化。将形成的三角形放入Delaunay三角形链表。   \n（4）循环执行上述第2步，直到所有散点插入完毕。\n\n\n\n\n```python\nfrom random import randint, seed\nfrom math import ceil, sqrt, log, floor\n\nimport delaunay as D\n```\n\n\n```python\n# 随机生成20个点\nseed(4)\nn = 10\nxs = [randint(1, 98) for x in range(n)]\nys = [randint(1, 98) for x in range(n)]\nzs = [0 for x in range(n)]\n\nDT = D.Delaunay_Triangulation()\nfor x, y in zip(xs, ys):\n    DT.AddPoint(D.Point(x, y))\n\nXS, YS, TS = DT.export()\n\n# print(XS)\n# print(YS)\n# print(TS)\n\n\"\"\"\nCreating and plotting unstructured triangular grids.\n\"\"\"\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nimport math\n\n%matplotlib inline\n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,3,1)\nplt.plot(xs, ys, 'go')\n\n# Creating a Triangulation without specifying the triangles results in the\n# Delaunay triangulation of the points.\n\n# Create the Triangulation; no triangles so Delaunay triangulation created.\ntriang = tri.Triangulation(xs, ys)\n\n# Plot the triangulation.\nplt.subplot(1,3,2)\nplt.triplot(triang, 'bo-')\n\nplt.subplot(1,3,3)\nplt.triplot(tri.Triangulation(XS, YS, TS), 'ro--')\n\nplt.show()\n\n```\n\n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\output_4_0.png\">\n\n\n\n\n### 参考资料\n* 计算几何笔记 - 知乎  \nhttps://zhuanlan.zhihu.com/c_162517931 \n* Delaunay Triangulation - menjiawan的专栏 - CSDN博客  \nhttps://blog.csdn.net/menjiawan/article/details/45073121\n\n### Bowyer-Watson算法\n\n__Bowyer算法__由英国Bath大学的Bowyer在1981年提出。算法首先构造离散点集的的若干离散点的Voronoi图，根据Voronoi领域准则连接临近点，得到初始Delaunay三角剖分，然后逐步加入剖分点，每加入一个点就对已有的Voronoi图进行修改，构造新点集的Voronoi图，直到所有点都插入完毕。\n* Computing Dirichlet tessellations1 | The Computer Journal | Oxford Academic  \nhttps://academic.oup.com/comjnl/article/24/2/162/338193\n\n__Watson算法__由澳大利亚悉尼大学Watson在1981年提出。算法采用空外接圆准则，直接从三角剖分入手。算法从初始三角划分开始，每加入一个离散点，找出所有外接圆包含此点的三角形，删除这些三角形面向该插入点的边，得到包含此点的多边形，将此点与多边形的定点连接就构成新的Delaunay三角剖分，重复此过程直至所有点插入完毕为止。注意，此算法当四点或以上共圆时将产生错误。\n* Computing the n-dimensional Delaunay tessellation with application to Voronoi polytopes1 | The Computer Journal | Oxford Academic  \nhttps://academic.oup.com/comjnl/article/24/2/167/338200\n\n__Bowyer-Watson算法__是根据上述两者算法相互补充改进得到的(貌似跟Watson算法差不多，具体可以参考上述两篇论文)，仍然是一种插点增量算法的一种。算法逻辑如下：\n\n- 1.求解离散点集的凸包，建立点集凸包边界节点的初始三角形划分；\n- 2.选择另外的离散点，插入指定位置，在已有的三角形中找出外接圆包含此点的三角形，并删除公共边，得到一个包含新插入点的多边形；\n- 3.将此点与多边形的其他顶点连接起来，构成新的三角形划分；\n- 4.重复插点知道所有点插入完毕。\n- 5.最后删除超级三角形相关联的三角形即可。\n\n\n### 判断点在三角形内\n\n\n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\Trangle.png\">\n\n#### 1. 点P和三顶点夹角和360\n连接点P和三角形的三个顶点得到三条线段PA，PB和PC，求出这三条线段与三角形各边的夹角，如果所有夹角之和为360度，那么点P在三角形内，否则不在，此法直观，但效率低下。\n\n#### 2. 依次选定三边，点P和另一顶点在同一侧:两个外积同号，那么点在一侧\n当选定线段AB时，点C位于AB的右侧，同理选定BC时，点A位于BC的右侧，最后选定CA时，点B位于CA的右侧，所以当选择某一条边时，我们只需验证点P与该边所对的点在同一侧即可。  \n如何判断两个点在某条线段的同一侧呢？可以通过叉积来实现，连接BP，将BP和BC做叉积，再将BA和BC做叉积，如果两个叉积的结果方向一致，那么两个点在同一侧。  \nBTW，判断两个向量的是否同向可以用点积实现，如果点积大于0，则两向量夹角是锐角，否则是钝角。\n\n#### 3. 利用外积同号和面积关系\n首先利用外积方向判断p在角ABC内：将BA和BC做叉积，连接BP，分别将BA和BP、BP和BC做叉积并判断与BA和BC的叉积同向。\n最后利用外积大小判断p在三角形ABC内：BA和BP、BP和BC的叉积之和，小于BA和BC的叉积。\n\n### 判断点在三角形的外接圆内\n\n#### 1.先求圆心、半径，比较半径和圆心到点P距离\n\n\n由三角形的外心坐标公式计算圆心坐标\n$$\nx=\\frac{\\left|\\begin{array}{lll}{x_{0}^{2}+y_{0}^{2}} & {y_{0}} & {1} \\\\ {x_{1}^{2}+y_{1}^{2}} & {y_{1}} & {1} \\\\ {x_{2}^{2}+y_{2}^{2}} & {y_{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|} , y=\\frac{\\left|\\begin{array}{lll}{x_{0}} & {x_{0}^{2}+y_{0}^{2}} & {1} \\\\ {x_{1}} & {x_{1}^{2}+y_{1}^{2}} & {1} \\\\ {x_{2}} & {x_{2}^{2}+y_{2}^{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|}\n$$\n根据这个外心的坐标公式计算出外接圆的圆心坐标，就能得到圆的半径，从而判断出点P与外接圆的位置关系。\n\n#### 2.利用角度关系\n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\P_Trangle.png\">\n\n- step1 计算$∠P_0P_1P_2$和$∠P_0PP_2$的大小，两个角的大小在$[0,π]$范围内。  \n    - step1.1 如果$∠P_0PP_2=0$，则点$P$不在圆内，结束；如果$∠P_0PP_2 = π$,则点$P$在圆内，结束。   \n   \n   \n- setp2 判断点$P$和$P_1$是否在$P_0P_2$同侧。  \n    - step2.1 这里通过判断向量外积 $\\overrightarrow{P_{1} P_{0}} \\times \\overrightarrow{P_{1} P_{2}}$与$\\overrightarrow{P P_{0}} \\times \\overrightarrow{P P_{2}}$ 是否同号，如果同号则在同一侧，否则在两侧。   \n\n\n- step3 如果点$P$和$P_1$是在$P_0P_2$同一侧，若$\\angle P_{0} P_{1} P_{2} \\leq \\angle P_{0} P P_{2}$,则点$P$在圆内，否则在圆外，结束；如果点$P$和$P_1$是在$P_0P_2$不在侧，若$\\angle P_{0} P_{1} P_{2}+\\angle P_{0} P P_{2} \\geq \\pi$，则点$P$在圆内，否则在圆外，结束。\n\n\n### Delaunay Triangulation & Voronoi Diagram in OpenCV\n\n给定一组点，可以使用openCV中的Subdiv2D类计算Delaunay三角剖分或Voronoi图。\n\n步骤：\n- 1.获取关键点列表\n``` python\npoints = []  \npoints.append((x, y))\n```\n- 2.定义要分区的矩形区间\n``` python\nimg = cv2.imread(\"image.jpg\");\nsize = img.shape\nrect = (0, 0, size[1], size[0])\n```\n- 3.创建Subdiv2D类的实例\n``` python\nsubdiv  = cv2.Subdiv2D(rect)\n```\n- 4.使用subdiv.insert(point)插入点\n``` python\nfor p in points :\n    subdiv.insert(p)\n```\n- 5.使用subdiv.getTriangleList方法得到Delaunay三角剖分的三角形列表\n``` python\ntriangleList = subdiv.getTriangleList();\nfor t in triangleList :\n    pt1 = (t[0], t[1])\n    pt2 = (t[2], t[3])\n    pt3 = (t[4], t[5])\n```\n- 6.使用subdiv.getVoronoiFacetList方法得到Voronoi图形状和中心的列表\n``` python\n(facets, centers) = subdiv.getVoronoiFacetList([])\n```\n\nopencv示例代码\n\n``` python\nimport cv2\nimport numpy as np\nimport random\n\n# Check if a point is inside a rectangle\ndef rect_contains(rect, point) :\n    if point[0] < rect[0] :\n        return False\n    elif point[1] < rect[1] :\n        return False\n    elif point[0] > rect[2] :\n        return False\n    elif point[1] > rect[3] :\n        return False\n    return True\n\n# Draw a point\ndef draw_point(img, p, color ) :\n    cv2.circle( img, p, 2, color, cv2.FILLED, cv2.LINE_AA, 0 )\n\n# Draw delaunay triangles\ndef draw_delaunay(img, subdiv, delaunay_color ) :\n    triangleList = subdiv.getTriangleList();\n    size = img.shape\n    r = (0, 0, size[1], size[0])\n\n    for t in triangleList :\n        pt1 = (t[0], t[1])\n        pt2 = (t[2], t[3])\n        pt3 = (t[4], t[5])\n        \n        if rect_contains(r, pt1) and rect_contains(r, pt2) and rect_contains(r, pt3) :\n            cv2.line(img, pt1, pt2, delaunay_color, 1, cv2.LINE_AA, 0)\n            cv2.line(img, pt2, pt3, delaunay_color, 1, cv2.LINE_AA, 0)\n            cv2.line(img, pt3, pt1, delaunay_color, 1, cv2.LINE_AA, 0)\n\n# Draw voronoi diagram\ndef draw_voronoi(img, subdiv) :\n\n    ( facets, centers) = subdiv.getVoronoiFacetList([])\n\n    for i in range(0,len(facets)) :\n        ifacet_arr = []\n        for f in facets[i] :\n            ifacet_arr.append(f)\n        \n        ifacet = np.array(ifacet_arr, np.int)\n        color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n\n        cv2.fillConvexPoly(img, ifacet, color, cv2.LINE_AA, 0);\n        ifacets = np.array([ifacet])\n        cv2.polylines(img, ifacets, True, (0, 0, 0), 1, cv2.LINE_AA, 0)\n        cv2.circle(img, (centers[i][0], centers[i][1]), 3, (0, 0, 0), cv2.FILLED, cv2.LINE_AA, 0)\n\n\nif __name__ == '__main__':\n\n    # Define window names\n    win_delaunay = \"Delaunay Triangulation\"\n    win_voronoi = \"Voronoi Diagram\"\n\n    # Turn on animation while drawing triangles\n    animate = True\n    \n    # Define colors for drawing.\n    delaunay_color = (255,255,255)\n    points_color = (0, 0, 255)\n\n    # Read in the image.\n    img = cv2.imread(\"./images/obama.jpg\");\n    \n    # Keep a copy around\n    img_orig = img.copy();\n    \n    # Rectangle to be used with Subdiv2D\n    size = img.shape\n    rect = (0, 0, size[1], size[0])\n    \n    # Create an instance of Subdiv2D\n    subdiv = cv2.Subdiv2D(rect);\n\n    # Create an array of points.\n    points = [];\n    \n    # Read in the points from a text file\n    with open(\"./images/obama.txt\") as file :\n        for line in file :\n            x, y = line.split()\n            points.append((int(x), int(y)))\n\n    # Insert points into subdiv\n    for p in points :\n        subdiv.insert(p)\n        \n        # Show animation\n        if animate :\n            img_copy = img_orig.copy()\n            # Draw delaunay triangles\n            draw_delaunay( img_copy, subdiv, (255, 255, 255) );\n            cv2.imshow(win_delaunay, img_copy)\n            cv2.waitKey(100)\n\n    # Draw delaunay triangles\n    draw_delaunay( img, subdiv, (255, 255, 255) );\n\n    # Draw points\n    for p in points :\n        draw_point(img, p, (0,0,255))\n\n    # Allocate space for voronoi Diagram\n    img_voronoi = np.zeros(img.shape, dtype = img.dtype)\n\n    # Draw voronoi diagram\n    draw_voronoi(img_voronoi,subdiv)\n\n    # Show results\n    cv2.imshow(win_delaunay,img)\n    cv2.imshow(win_voronoi,img_voronoi)\n    cv2.waitKey(0)\n\n\n```\n\n### 参考博客\n* Facial Landmark Detection | Learn OpenCV  \nhttps://www.learnopencv.com/facial-landmark-detection/\n* Delaunay Triangulation and Voronoi Diagram using OpenCV ( C++ / Python ) | Learn OpenCV  \nhttps://www.learnopencv.com/delaunay-triangulation-and-voronoi-diagram-using-opencv-c-python/\n\n\n","source":"_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图.md","raw":"---\ntitle: 门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\ndate: 2019-06-29 00:11:20\ntags:\n  - opencv\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n\n##  Voronoi diagram 维诺图 和 Delaunay Triangulation 德罗奈三角剖分\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n### 维诺图\n\n#### 定义\n给定平面中的一组点，所有点不共线，维诺图为每个点（生成元）创建多边形区域，使得每个区域中的点到生成元的距离最近。  \n\n#### 特点 \n* 每个V多边形内有一个生成元； \n* 每个V多边形内点到该生成元距离短于到其它生成元距离； \n* 多边形边界上的点到生成此边界的生成元距离相等（生成元连线的垂直平分线）； \n* 邻接图形的Voronoi多边形界线以原邻接界线作为子集。\n\n### 德罗奈三角剖分\n\n对点集进行结构化的一个重要的方法就是对这些点进行三角剖分。\n#### 定义\nDelaunay三角剖分定义为平面上的点集P是一种三角剖分，使得P中没有点严格处于剖分后中任意一个三角形外接圆的内部。\n\n#### 特点\n* Delaunay三角剖分与Voronoi图是对偶关系。  \n  对于一个维诺图，若任何两个生成元site之间有一条非空边界，那么这两个site之间连接一条边，由此得到的对偶图，就是一个三角剖分。\n* 空圆性  \n  对于Delaunay剖分中的任何一张face的外接圆必然是空的。 \n* 最近邻性  \n  任何一条连接于最近邻之间的边都会被Delaunay剖分所采用，因为这里头会存在一个以这条边为直径（弦）的空圆。\n* 复杂度  \n  在二维平面中，每增加一个点三角形的数目都会大概增加2，边数增加3。可以说在二维上的Delaunay剖分中是一个线性规模的数据结构。但在三维的情况下这两个指标最多会达到平房的量级，更高维的空间的一般结论也会达到2^d量级。\n \n \n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\opencv-delaunay-vornoi-subdiv-example.png\">\n\n\n\n### 维诺图生成方法\n\n首先生成其对偶元Delaunay三角网，再找出三角网每一三角形的外接圆圆心，最后连接相邻三角形的外接圆圆心，形成以每一个三角形顶点为生成元的多边形网。\n\n步骤：  \n（1）离散点自动构建三角网，即构建Delaunay三角网。对离散点和形成的三角形编号，记录每个三角形是由哪三个离散点构成的。   \n（2）计算每个三角形的外接圆圆心，并记录之。   \n（3）遍历三角形链表，寻找与当前三角形pTri三边共边的相邻三角形TriA，TriB和TriC。   \n（4）如果找到，则把寻找到的三角形的外心与pTri的外心连接，存入维诺边链表中。如果找不到，则求出最外边的中垂线射线存入维诺边链表中。   \n（5）遍历结束，所有维诺边被找到，根据边画出维诺图。\n\nDelaunay剖分是一种三角剖分的标准，实现它有多种算法，这里采用Bowyer-Watson算法，算法的基本步骤是：   \n（1）构造一个超级三角形，包含所有散点，放入三角形链表。   \n（2）将点集中的散点依次插入，在三角形链表中找出其外接圆包含插入点的三角形（称为该点的影响三角形），删除影响三角形的公共边，将插入点同影响三角形的全部顶点连接起来，从而完成一个点在Delaunay三角形链表中的插入。   \n（3）根据优化准则对局部新形成的三角形进行优化。将形成的三角形放入Delaunay三角形链表。   \n（4）循环执行上述第2步，直到所有散点插入完毕。\n\n\n\n\n```python\nfrom random import randint, seed\nfrom math import ceil, sqrt, log, floor\n\nimport delaunay as D\n```\n\n\n```python\n# 随机生成20个点\nseed(4)\nn = 10\nxs = [randint(1, 98) for x in range(n)]\nys = [randint(1, 98) for x in range(n)]\nzs = [0 for x in range(n)]\n\nDT = D.Delaunay_Triangulation()\nfor x, y in zip(xs, ys):\n    DT.AddPoint(D.Point(x, y))\n\nXS, YS, TS = DT.export()\n\n# print(XS)\n# print(YS)\n# print(TS)\n\n\"\"\"\nCreating and plotting unstructured triangular grids.\n\"\"\"\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nimport math\n\n%matplotlib inline\n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,3,1)\nplt.plot(xs, ys, 'go')\n\n# Creating a Triangulation without specifying the triangles results in the\n# Delaunay triangulation of the points.\n\n# Create the Triangulation; no triangles so Delaunay triangulation created.\ntriang = tri.Triangulation(xs, ys)\n\n# Plot the triangulation.\nplt.subplot(1,3,2)\nplt.triplot(triang, 'bo-')\n\nplt.subplot(1,3,3)\nplt.triplot(tri.Triangulation(XS, YS, TS), 'ro--')\n\nplt.show()\n\n```\n\n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\output_4_0.png\">\n\n\n\n\n### 参考资料\n* 计算几何笔记 - 知乎  \nhttps://zhuanlan.zhihu.com/c_162517931 \n* Delaunay Triangulation - menjiawan的专栏 - CSDN博客  \nhttps://blog.csdn.net/menjiawan/article/details/45073121\n\n### Bowyer-Watson算法\n\n__Bowyer算法__由英国Bath大学的Bowyer在1981年提出。算法首先构造离散点集的的若干离散点的Voronoi图，根据Voronoi领域准则连接临近点，得到初始Delaunay三角剖分，然后逐步加入剖分点，每加入一个点就对已有的Voronoi图进行修改，构造新点集的Voronoi图，直到所有点都插入完毕。\n* Computing Dirichlet tessellations1 | The Computer Journal | Oxford Academic  \nhttps://academic.oup.com/comjnl/article/24/2/162/338193\n\n__Watson算法__由澳大利亚悉尼大学Watson在1981年提出。算法采用空外接圆准则，直接从三角剖分入手。算法从初始三角划分开始，每加入一个离散点，找出所有外接圆包含此点的三角形，删除这些三角形面向该插入点的边，得到包含此点的多边形，将此点与多边形的定点连接就构成新的Delaunay三角剖分，重复此过程直至所有点插入完毕为止。注意，此算法当四点或以上共圆时将产生错误。\n* Computing the n-dimensional Delaunay tessellation with application to Voronoi polytopes1 | The Computer Journal | Oxford Academic  \nhttps://academic.oup.com/comjnl/article/24/2/167/338200\n\n__Bowyer-Watson算法__是根据上述两者算法相互补充改进得到的(貌似跟Watson算法差不多，具体可以参考上述两篇论文)，仍然是一种插点增量算法的一种。算法逻辑如下：\n\n- 1.求解离散点集的凸包，建立点集凸包边界节点的初始三角形划分；\n- 2.选择另外的离散点，插入指定位置，在已有的三角形中找出外接圆包含此点的三角形，并删除公共边，得到一个包含新插入点的多边形；\n- 3.将此点与多边形的其他顶点连接起来，构成新的三角形划分；\n- 4.重复插点知道所有点插入完毕。\n- 5.最后删除超级三角形相关联的三角形即可。\n\n\n### 判断点在三角形内\n\n\n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\Trangle.png\">\n\n#### 1. 点P和三顶点夹角和360\n连接点P和三角形的三个顶点得到三条线段PA，PB和PC，求出这三条线段与三角形各边的夹角，如果所有夹角之和为360度，那么点P在三角形内，否则不在，此法直观，但效率低下。\n\n#### 2. 依次选定三边，点P和另一顶点在同一侧:两个外积同号，那么点在一侧\n当选定线段AB时，点C位于AB的右侧，同理选定BC时，点A位于BC的右侧，最后选定CA时，点B位于CA的右侧，所以当选择某一条边时，我们只需验证点P与该边所对的点在同一侧即可。  \n如何判断两个点在某条线段的同一侧呢？可以通过叉积来实现，连接BP，将BP和BC做叉积，再将BA和BC做叉积，如果两个叉积的结果方向一致，那么两个点在同一侧。  \nBTW，判断两个向量的是否同向可以用点积实现，如果点积大于0，则两向量夹角是锐角，否则是钝角。\n\n#### 3. 利用外积同号和面积关系\n首先利用外积方向判断p在角ABC内：将BA和BC做叉积，连接BP，分别将BA和BP、BP和BC做叉积并判断与BA和BC的叉积同向。\n最后利用外积大小判断p在三角形ABC内：BA和BP、BP和BC的叉积之和，小于BA和BC的叉积。\n\n### 判断点在三角形的外接圆内\n\n#### 1.先求圆心、半径，比较半径和圆心到点P距离\n\n\n由三角形的外心坐标公式计算圆心坐标\n$$\nx=\\frac{\\left|\\begin{array}{lll}{x_{0}^{2}+y_{0}^{2}} & {y_{0}} & {1} \\\\ {x_{1}^{2}+y_{1}^{2}} & {y_{1}} & {1} \\\\ {x_{2}^{2}+y_{2}^{2}} & {y_{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|} , y=\\frac{\\left|\\begin{array}{lll}{x_{0}} & {x_{0}^{2}+y_{0}^{2}} & {1} \\\\ {x_{1}} & {x_{1}^{2}+y_{1}^{2}} & {1} \\\\ {x_{2}} & {x_{2}^{2}+y_{2}^{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|}\n$$\n根据这个外心的坐标公式计算出外接圆的圆心坐标，就能得到圆的半径，从而判断出点P与外接圆的位置关系。\n\n#### 2.利用角度关系\n<img src=\"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图\\P_Trangle.png\">\n\n- step1 计算$∠P_0P_1P_2$和$∠P_0PP_2$的大小，两个角的大小在$[0,π]$范围内。  \n    - step1.1 如果$∠P_0PP_2=0$，则点$P$不在圆内，结束；如果$∠P_0PP_2 = π$,则点$P$在圆内，结束。   \n   \n   \n- setp2 判断点$P$和$P_1$是否在$P_0P_2$同侧。  \n    - step2.1 这里通过判断向量外积 $\\overrightarrow{P_{1} P_{0}} \\times \\overrightarrow{P_{1} P_{2}}$与$\\overrightarrow{P P_{0}} \\times \\overrightarrow{P P_{2}}$ 是否同号，如果同号则在同一侧，否则在两侧。   \n\n\n- step3 如果点$P$和$P_1$是在$P_0P_2$同一侧，若$\\angle P_{0} P_{1} P_{2} \\leq \\angle P_{0} P P_{2}$,则点$P$在圆内，否则在圆外，结束；如果点$P$和$P_1$是在$P_0P_2$不在侧，若$\\angle P_{0} P_{1} P_{2}+\\angle P_{0} P P_{2} \\geq \\pi$，则点$P$在圆内，否则在圆外，结束。\n\n\n### Delaunay Triangulation & Voronoi Diagram in OpenCV\n\n给定一组点，可以使用openCV中的Subdiv2D类计算Delaunay三角剖分或Voronoi图。\n\n步骤：\n- 1.获取关键点列表\n``` python\npoints = []  \npoints.append((x, y))\n```\n- 2.定义要分区的矩形区间\n``` python\nimg = cv2.imread(\"image.jpg\");\nsize = img.shape\nrect = (0, 0, size[1], size[0])\n```\n- 3.创建Subdiv2D类的实例\n``` python\nsubdiv  = cv2.Subdiv2D(rect)\n```\n- 4.使用subdiv.insert(point)插入点\n``` python\nfor p in points :\n    subdiv.insert(p)\n```\n- 5.使用subdiv.getTriangleList方法得到Delaunay三角剖分的三角形列表\n``` python\ntriangleList = subdiv.getTriangleList();\nfor t in triangleList :\n    pt1 = (t[0], t[1])\n    pt2 = (t[2], t[3])\n    pt3 = (t[4], t[5])\n```\n- 6.使用subdiv.getVoronoiFacetList方法得到Voronoi图形状和中心的列表\n``` python\n(facets, centers) = subdiv.getVoronoiFacetList([])\n```\n\nopencv示例代码\n\n``` python\nimport cv2\nimport numpy as np\nimport random\n\n# Check if a point is inside a rectangle\ndef rect_contains(rect, point) :\n    if point[0] < rect[0] :\n        return False\n    elif point[1] < rect[1] :\n        return False\n    elif point[0] > rect[2] :\n        return False\n    elif point[1] > rect[3] :\n        return False\n    return True\n\n# Draw a point\ndef draw_point(img, p, color ) :\n    cv2.circle( img, p, 2, color, cv2.FILLED, cv2.LINE_AA, 0 )\n\n# Draw delaunay triangles\ndef draw_delaunay(img, subdiv, delaunay_color ) :\n    triangleList = subdiv.getTriangleList();\n    size = img.shape\n    r = (0, 0, size[1], size[0])\n\n    for t in triangleList :\n        pt1 = (t[0], t[1])\n        pt2 = (t[2], t[3])\n        pt3 = (t[4], t[5])\n        \n        if rect_contains(r, pt1) and rect_contains(r, pt2) and rect_contains(r, pt3) :\n            cv2.line(img, pt1, pt2, delaunay_color, 1, cv2.LINE_AA, 0)\n            cv2.line(img, pt2, pt3, delaunay_color, 1, cv2.LINE_AA, 0)\n            cv2.line(img, pt3, pt1, delaunay_color, 1, cv2.LINE_AA, 0)\n\n# Draw voronoi diagram\ndef draw_voronoi(img, subdiv) :\n\n    ( facets, centers) = subdiv.getVoronoiFacetList([])\n\n    for i in range(0,len(facets)) :\n        ifacet_arr = []\n        for f in facets[i] :\n            ifacet_arr.append(f)\n        \n        ifacet = np.array(ifacet_arr, np.int)\n        color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n\n        cv2.fillConvexPoly(img, ifacet, color, cv2.LINE_AA, 0);\n        ifacets = np.array([ifacet])\n        cv2.polylines(img, ifacets, True, (0, 0, 0), 1, cv2.LINE_AA, 0)\n        cv2.circle(img, (centers[i][0], centers[i][1]), 3, (0, 0, 0), cv2.FILLED, cv2.LINE_AA, 0)\n\n\nif __name__ == '__main__':\n\n    # Define window names\n    win_delaunay = \"Delaunay Triangulation\"\n    win_voronoi = \"Voronoi Diagram\"\n\n    # Turn on animation while drawing triangles\n    animate = True\n    \n    # Define colors for drawing.\n    delaunay_color = (255,255,255)\n    points_color = (0, 0, 255)\n\n    # Read in the image.\n    img = cv2.imread(\"./images/obama.jpg\");\n    \n    # Keep a copy around\n    img_orig = img.copy();\n    \n    # Rectangle to be used with Subdiv2D\n    size = img.shape\n    rect = (0, 0, size[1], size[0])\n    \n    # Create an instance of Subdiv2D\n    subdiv = cv2.Subdiv2D(rect);\n\n    # Create an array of points.\n    points = [];\n    \n    # Read in the points from a text file\n    with open(\"./images/obama.txt\") as file :\n        for line in file :\n            x, y = line.split()\n            points.append((int(x), int(y)))\n\n    # Insert points into subdiv\n    for p in points :\n        subdiv.insert(p)\n        \n        # Show animation\n        if animate :\n            img_copy = img_orig.copy()\n            # Draw delaunay triangles\n            draw_delaunay( img_copy, subdiv, (255, 255, 255) );\n            cv2.imshow(win_delaunay, img_copy)\n            cv2.waitKey(100)\n\n    # Draw delaunay triangles\n    draw_delaunay( img, subdiv, (255, 255, 255) );\n\n    # Draw points\n    for p in points :\n        draw_point(img, p, (0,0,255))\n\n    # Allocate space for voronoi Diagram\n    img_voronoi = np.zeros(img.shape, dtype = img.dtype)\n\n    # Draw voronoi diagram\n    draw_voronoi(img_voronoi,subdiv)\n\n    # Show results\n    cv2.imshow(win_delaunay,img)\n    cv2.imshow(win_voronoi,img_voronoi)\n    cv2.waitKey(0)\n\n\n```\n\n### 参考博客\n* Facial Landmark Detection | Learn OpenCV  \nhttps://www.learnopencv.com/facial-landmark-detection/\n* Delaunay Triangulation and Voronoi Diagram using OpenCV ( C++ / Python ) | Learn OpenCV  \nhttps://www.learnopencv.com/delaunay-triangulation-and-voronoi-diagram-using-opencv-c-python/\n\n\n","slug":"门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图","published":1,"updated":"2020-01-05T19:13:25.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50bk006k4cvjbppcb9hp","content":"<p><strong> 门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"Voronoi-diagram-维诺图-和-Delaunay-Triangulation-德罗奈三角剖分\"><a href=\"#Voronoi-diagram-维诺图-和-Delaunay-Triangulation-德罗奈三角剖分\" class=\"headerlink\" title=\"Voronoi diagram 维诺图 和 Delaunay Triangulation 德罗奈三角剖分\"></a>Voronoi diagram 维诺图 和 Delaunay Triangulation 德罗奈三角剖分</h2><a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n\n<h3 id=\"维诺图\"><a href=\"#维诺图\" class=\"headerlink\" title=\"维诺图\"></a>维诺图</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>给定平面中的一组点，所有点不共线，维诺图为每个点（生成元）创建多边形区域，使得每个区域中的点到生成元的距离最近。  </p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>每个V多边形内有一个生成元； </li>\n<li>每个V多边形内点到该生成元距离短于到其它生成元距离； </li>\n<li>多边形边界上的点到生成此边界的生成元距离相等（生成元连线的垂直平分线）； </li>\n<li>邻接图形的Voronoi多边形界线以原邻接界线作为子集。</li>\n</ul>\n<h3 id=\"德罗奈三角剖分\"><a href=\"#德罗奈三角剖分\" class=\"headerlink\" title=\"德罗奈三角剖分\"></a>德罗奈三角剖分</h3><p>对点集进行结构化的一个重要的方法就是对这些点进行三角剖分。</p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Delaunay三角剖分定义为平面上的点集P是一种三角剖分，使得P中没有点严格处于剖分后中任意一个三角形外接圆的内部。</p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>Delaunay三角剖分与Voronoi图是对偶关系。<br>对于一个维诺图，若任何两个生成元site之间有一条非空边界，那么这两个site之间连接一条边，由此得到的对偶图，就是一个三角剖分。</li>\n<li>空圆性<br>对于Delaunay剖分中的任何一张face的外接圆必然是空的。 </li>\n<li>最近邻性<br>任何一条连接于最近邻之间的边都会被Delaunay剖分所采用，因为这里头会存在一个以这条边为直径（弦）的空圆。</li>\n<li>复杂度<br>在二维平面中，每增加一个点三角形的数目都会大概增加2，边数增加3。可以说在二维上的Delaunay剖分中是一个线性规模的数据结构。但在三维的情况下这两个指标最多会达到平房的量级，更高维的空间的一般结论也会达到2^d量级。</li>\n</ul>\n<p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/opencv-delaunay-vornoi-subdiv-example.png\"></p>\n<h3 id=\"维诺图生成方法\"><a href=\"#维诺图生成方法\" class=\"headerlink\" title=\"维诺图生成方法\"></a>维诺图生成方法</h3><p>首先生成其对偶元Delaunay三角网，再找出三角网每一三角形的外接圆圆心，最后连接相邻三角形的外接圆圆心，形成以每一个三角形顶点为生成元的多边形网。</p>\n<p>步骤：<br>（1）离散点自动构建三角网，即构建Delaunay三角网。对离散点和形成的三角形编号，记录每个三角形是由哪三个离散点构成的。<br>（2）计算每个三角形的外接圆圆心，并记录之。<br>（3）遍历三角形链表，寻找与当前三角形pTri三边共边的相邻三角形TriA，TriB和TriC。<br>（4）如果找到，则把寻找到的三角形的外心与pTri的外心连接，存入维诺边链表中。如果找不到，则求出最外边的中垂线射线存入维诺边链表中。<br>（5）遍历结束，所有维诺边被找到，根据边画出维诺图。</p>\n<p>Delaunay剖分是一种三角剖分的标准，实现它有多种算法，这里采用Bowyer-Watson算法，算法的基本步骤是：<br>（1）构造一个超级三角形，包含所有散点，放入三角形链表。<br>（2）将点集中的散点依次插入，在三角形链表中找出其外接圆包含插入点的三角形（称为该点的影响三角形），删除影响三角形的公共边，将插入点同影响三角形的全部顶点连接起来，从而完成一个点在Delaunay三角形链表中的插入。<br>（3）根据优化准则对局部新形成的三角形进行优化。将形成的三角形放入Delaunay三角形链表。<br>（4）循环执行上述第2步，直到所有散点插入完毕。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint, seed</span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> ceil, sqrt, log, floor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> delaunay <span class=\"keyword\">as</span> D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机生成20个点</span></span><br><span class=\"line\">seed(<span class=\"number\">4</span>)</span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\">xs = [randint(<span class=\"number\">1</span>, <span class=\"number\">98</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">ys = [randint(<span class=\"number\">1</span>, <span class=\"number\">98</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">zs = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">DT = D.Delaunay_Triangulation()</span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(xs, ys):</span><br><span class=\"line\">    DT.AddPoint(D.Point(x, y))</span><br><span class=\"line\"></span><br><span class=\"line\">XS, YS, TS = DT.export()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(XS)</span></span><br><span class=\"line\"><span class=\"comment\"># print(YS)</span></span><br><span class=\"line\"><span class=\"comment\"># print(TS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Creating and plotting unstructured triangular grids.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.tri <span class=\"keyword\">as</span> tri</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">15</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">plt.plot(xs, ys, <span class=\"string\">'go'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creating a Triangulation without specifying the triangles results in the</span></span><br><span class=\"line\"><span class=\"comment\"># Delaunay triangulation of the points.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create the Triangulation; no triangles so Delaunay triangulation created.</span></span><br><span class=\"line\">triang = tri.Triangulation(xs, ys)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot the triangulation.</span></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">plt.triplot(triang, <span class=\"string\">'bo-'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">plt.triplot(tri.Triangulation(XS, YS, TS), <span class=\"string\">'ro--'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/output_4_0.png\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>计算几何笔记 - 知乎<br><a href=\"https://zhuanlan.zhihu.com/c_162517931\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/c_162517931</a> </li>\n<li>Delaunay Triangulation - menjiawan的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/menjiawan/article/details/45073121\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/menjiawan/article/details/45073121</a></li>\n</ul>\n<h3 id=\"Bowyer-Watson算法\"><a href=\"#Bowyer-Watson算法\" class=\"headerlink\" title=\"Bowyer-Watson算法\"></a>Bowyer-Watson算法</h3><p><strong>Bowyer算法</strong>由英国Bath大学的Bowyer在1981年提出。算法首先构造离散点集的的若干离散点的Voronoi图，根据Voronoi领域准则连接临近点，得到初始Delaunay三角剖分，然后逐步加入剖分点，每加入一个点就对已有的Voronoi图进行修改，构造新点集的Voronoi图，直到所有点都插入完毕。</p>\n<ul>\n<li>Computing Dirichlet tessellations1 | The Computer Journal | Oxford Academic<br><a href=\"https://academic.oup.com/comjnl/article/24/2/162/338193\" target=\"_blank\" rel=\"noopener\">https://academic.oup.com/comjnl/article/24/2/162/338193</a></li>\n</ul>\n<p><strong>Watson算法</strong>由澳大利亚悉尼大学Watson在1981年提出。算法采用空外接圆准则，直接从三角剖分入手。算法从初始三角划分开始，每加入一个离散点，找出所有外接圆包含此点的三角形，删除这些三角形面向该插入点的边，得到包含此点的多边形，将此点与多边形的定点连接就构成新的Delaunay三角剖分，重复此过程直至所有点插入完毕为止。注意，此算法当四点或以上共圆时将产生错误。</p>\n<ul>\n<li>Computing the n-dimensional Delaunay tessellation with application to Voronoi polytopes1 | The Computer Journal | Oxford Academic<br><a href=\"https://academic.oup.com/comjnl/article/24/2/167/338200\" target=\"_blank\" rel=\"noopener\">https://academic.oup.com/comjnl/article/24/2/167/338200</a></li>\n</ul>\n<p><strong>Bowyer-Watson算法</strong>是根据上述两者算法相互补充改进得到的(貌似跟Watson算法差不多，具体可以参考上述两篇论文)，仍然是一种插点增量算法的一种。算法逻辑如下：</p>\n<ul>\n<li>1.求解离散点集的凸包，建立点集凸包边界节点的初始三角形划分；</li>\n<li>2.选择另外的离散点，插入指定位置，在已有的三角形中找出外接圆包含此点的三角形，并删除公共边，得到一个包含新插入点的多边形；</li>\n<li>3.将此点与多边形的其他顶点连接起来，构成新的三角形划分；</li>\n<li>4.重复插点知道所有点插入完毕。</li>\n<li>5.最后删除超级三角形相关联的三角形即可。</li>\n</ul>\n<h3 id=\"判断点在三角形内\"><a href=\"#判断点在三角形内\" class=\"headerlink\" title=\"判断点在三角形内\"></a>判断点在三角形内</h3><p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/Trangle.png\"></p>\n<h4 id=\"1-点P和三顶点夹角和360\"><a href=\"#1-点P和三顶点夹角和360\" class=\"headerlink\" title=\"1. 点P和三顶点夹角和360\"></a>1. 点P和三顶点夹角和360</h4><p>连接点P和三角形的三个顶点得到三条线段PA，PB和PC，求出这三条线段与三角形各边的夹角，如果所有夹角之和为360度，那么点P在三角形内，否则不在，此法直观，但效率低下。</p>\n<h4 id=\"2-依次选定三边，点P和另一顶点在同一侧-两个外积同号，那么点在一侧\"><a href=\"#2-依次选定三边，点P和另一顶点在同一侧-两个外积同号，那么点在一侧\" class=\"headerlink\" title=\"2. 依次选定三边，点P和另一顶点在同一侧:两个外积同号，那么点在一侧\"></a>2. 依次选定三边，点P和另一顶点在同一侧:两个外积同号，那么点在一侧</h4><p>当选定线段AB时，点C位于AB的右侧，同理选定BC时，点A位于BC的右侧，最后选定CA时，点B位于CA的右侧，所以当选择某一条边时，我们只需验证点P与该边所对的点在同一侧即可。<br>如何判断两个点在某条线段的同一侧呢？可以通过叉积来实现，连接BP，将BP和BC做叉积，再将BA和BC做叉积，如果两个叉积的结果方向一致，那么两个点在同一侧。<br>BTW，判断两个向量的是否同向可以用点积实现，如果点积大于0，则两向量夹角是锐角，否则是钝角。</p>\n<h4 id=\"3-利用外积同号和面积关系\"><a href=\"#3-利用外积同号和面积关系\" class=\"headerlink\" title=\"3. 利用外积同号和面积关系\"></a>3. 利用外积同号和面积关系</h4><p>首先利用外积方向判断p在角ABC内：将BA和BC做叉积，连接BP，分别将BA和BP、BP和BC做叉积并判断与BA和BC的叉积同向。<br>最后利用外积大小判断p在三角形ABC内：BA和BP、BP和BC的叉积之和，小于BA和BC的叉积。</p>\n<h3 id=\"判断点在三角形的外接圆内\"><a href=\"#判断点在三角形的外接圆内\" class=\"headerlink\" title=\"判断点在三角形的外接圆内\"></a>判断点在三角形的外接圆内</h3><h4 id=\"1-先求圆心、半径，比较半径和圆心到点P距离\"><a href=\"#1-先求圆心、半径，比较半径和圆心到点P距离\" class=\"headerlink\" title=\"1.先求圆心、半径，比较半径和圆心到点P距离\"></a>1.先求圆心、半径，比较半径和圆心到点P距离</h4><p>由三角形的外心坐标公式计算圆心坐标</p>\n<script type=\"math/tex; mode=display\">\nx=\\frac{\\left|\\begin{array}{lll}{x_{0}^{2}+y_{0}^{2}} & {y_{0}} & {1} \\\\ {x_{1}^{2}+y_{1}^{2}} & {y_{1}} & {1} \\\\ {x_{2}^{2}+y_{2}^{2}} & {y_{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|} , y=\\frac{\\left|\\begin{array}{lll}{x_{0}} & {x_{0}^{2}+y_{0}^{2}} & {1} \\\\ {x_{1}} & {x_{1}^{2}+y_{1}^{2}} & {1} \\\\ {x_{2}} & {x_{2}^{2}+y_{2}^{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|}</script><p>根据这个外心的坐标公式计算出外接圆的圆心坐标，就能得到圆的半径，从而判断出点P与外接圆的位置关系。</p>\n<h4 id=\"2-利用角度关系\"><a href=\"#2-利用角度关系\" class=\"headerlink\" title=\"2.利用角度关系\"></a>2.利用角度关系</h4><p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/P_Trangle.png\"></p>\n<ul>\n<li>step1 计算$∠P_0P_1P_2$和$∠P_0PP_2$的大小，两个角的大小在$[0,π]$范围内。  <ul>\n<li>step1.1 如果$∠P_0PP_2=0$，则点$P$不在圆内，结束；如果$∠P_0PP_2 = π$,则点$P$在圆内，结束。   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>setp2 判断点$P$和$P_1$是否在$P_0P_2$同侧。  <ul>\n<li>step2.1 这里通过判断向量外积 $\\overrightarrow{P_{1} P_{0}} \\times \\overrightarrow{P_{1} P_{2}}$与$\\overrightarrow{P P_{0}} \\times \\overrightarrow{P P_{2}}$ 是否同号，如果同号则在同一侧，否则在两侧。   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>step3 如果点$P$和$P_1$是在$P_0P_2$同一侧，若$\\angle P_{0} P_{1} P_{2} \\leq \\angle P_{0} P P_{2}$,则点$P$在圆内，否则在圆外，结束；如果点$P$和$P_1$是在$P_0P_2$不在侧，若$\\angle P_{0} P_{1} P_{2}+\\angle P_{0} P P_{2} \\geq \\pi$，则点$P$在圆内，否则在圆外，结束。</li>\n</ul>\n<h3 id=\"Delaunay-Triangulation-amp-Voronoi-Diagram-in-OpenCV\"><a href=\"#Delaunay-Triangulation-amp-Voronoi-Diagram-in-OpenCV\" class=\"headerlink\" title=\"Delaunay Triangulation &amp; Voronoi Diagram in OpenCV\"></a>Delaunay Triangulation &amp; Voronoi Diagram in OpenCV</h3><p>给定一组点，可以使用openCV中的Subdiv2D类计算Delaunay三角剖分或Voronoi图。</p>\n<p>步骤：</p>\n<ul>\n<li><p>1.获取关键点列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">points = []  </span><br><span class=\"line\">points.append((x, y))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.定义要分区的矩形区间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv2.imread(<span class=\"string\">\"image.jpg\"</span>);</span><br><span class=\"line\">size = img.shape</span><br><span class=\"line\">rect = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.创建Subdiv2D类的实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subdiv  = cv2.Subdiv2D(rect)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.使用subdiv.insert(point)插入点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> points :</span><br><span class=\"line\">    subdiv.insert(p)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.使用subdiv.getTriangleList方法得到Delaunay三角剖分的三角形列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">triangleList = subdiv.getTriangleList();</span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> triangleList :</span><br><span class=\"line\">    pt1 = (t[<span class=\"number\">0</span>], t[<span class=\"number\">1</span>])</span><br><span class=\"line\">    pt2 = (t[<span class=\"number\">2</span>], t[<span class=\"number\">3</span>])</span><br><span class=\"line\">    pt3 = (t[<span class=\"number\">4</span>], t[<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.使用subdiv.getVoronoiFacetList方法得到Voronoi图形状和中心的列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(facets, centers) = subdiv.getVoronoiFacetList([])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>opencv示例代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check if a point is inside a rectangle</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rect_contains</span><span class=\"params\">(rect, point)</span> :</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> point[<span class=\"number\">0</span>] &lt; rect[<span class=\"number\">0</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> point[<span class=\"number\">1</span>] &lt; rect[<span class=\"number\">1</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> point[<span class=\"number\">0</span>] &gt; rect[<span class=\"number\">2</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> point[<span class=\"number\">1</span>] &gt; rect[<span class=\"number\">3</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw a point</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_point</span><span class=\"params\">(img, p, color )</span> :</span></span><br><span class=\"line\">    cv2.circle( img, p, <span class=\"number\">2</span>, color, cv2.FILLED, cv2.LINE_AA, <span class=\"number\">0</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw delaunay triangles</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_delaunay</span><span class=\"params\">(img, subdiv, delaunay_color )</span> :</span></span><br><span class=\"line\">    triangleList = subdiv.getTriangleList();</span><br><span class=\"line\">    size = img.shape</span><br><span class=\"line\">    r = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> triangleList :</span><br><span class=\"line\">        pt1 = (t[<span class=\"number\">0</span>], t[<span class=\"number\">1</span>])</span><br><span class=\"line\">        pt2 = (t[<span class=\"number\">2</span>], t[<span class=\"number\">3</span>])</span><br><span class=\"line\">        pt3 = (t[<span class=\"number\">4</span>], t[<span class=\"number\">5</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> rect_contains(r, pt1) <span class=\"keyword\">and</span> rect_contains(r, pt2) <span class=\"keyword\">and</span> rect_contains(r, pt3) :</span><br><span class=\"line\">            cv2.line(img, pt1, pt2, delaunay_color, <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\">            cv2.line(img, pt2, pt3, delaunay_color, <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\">            cv2.line(img, pt3, pt1, delaunay_color, <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw voronoi diagram</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_voronoi</span><span class=\"params\">(img, subdiv)</span> :</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ( facets, centers) = subdiv.getVoronoiFacetList([])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(facets)) :</span><br><span class=\"line\">        ifacet_arr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> facets[i] :</span><br><span class=\"line\">            ifacet_arr.append(f)</span><br><span class=\"line\">        </span><br><span class=\"line\">        ifacet = np.array(ifacet_arr, np.int)</span><br><span class=\"line\">        color = (random.randint(<span class=\"number\">0</span>, <span class=\"number\">255</span>), random.randint(<span class=\"number\">0</span>, <span class=\"number\">255</span>), random.randint(<span class=\"number\">0</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.fillConvexPoly(img, ifacet, color, cv2.LINE_AA, <span class=\"number\">0</span>);</span><br><span class=\"line\">        ifacets = np.array([ifacet])</span><br><span class=\"line\">        cv2.polylines(img, ifacets, <span class=\"literal\">True</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\">        cv2.circle(img, (centers[i][<span class=\"number\">0</span>], centers[i][<span class=\"number\">1</span>]), <span class=\"number\">3</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), cv2.FILLED, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Define window names</span></span><br><span class=\"line\">    win_delaunay = <span class=\"string\">\"Delaunay Triangulation\"</span></span><br><span class=\"line\">    win_voronoi = <span class=\"string\">\"Voronoi Diagram\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Turn on animation while drawing triangles</span></span><br><span class=\"line\">    animate = <span class=\"literal\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Define colors for drawing.</span></span><br><span class=\"line\">    delaunay_color = (<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>)</span><br><span class=\"line\">    points_color = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Read in the image.</span></span><br><span class=\"line\">    img = cv2.imread(<span class=\"string\">\"./images/obama.jpg\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Keep a copy around</span></span><br><span class=\"line\">    img_orig = img.copy();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Rectangle to be used with Subdiv2D</span></span><br><span class=\"line\">    size = img.shape</span><br><span class=\"line\">    rect = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Create an instance of Subdiv2D</span></span><br><span class=\"line\">    subdiv = cv2.Subdiv2D(rect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create an array of points.</span></span><br><span class=\"line\">    points = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Read in the points from a text file</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"./images/obama.txt\"</span>) <span class=\"keyword\">as</span> file :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file :</span><br><span class=\"line\">            x, y = line.split()</span><br><span class=\"line\">            points.append((int(x), int(y)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Insert points into subdiv</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> points :</span><br><span class=\"line\">        subdiv.insert(p)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Show animation</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> animate :</span><br><span class=\"line\">            img_copy = img_orig.copy()</span><br><span class=\"line\">            <span class=\"comment\"># Draw delaunay triangles</span></span><br><span class=\"line\">            draw_delaunay( img_copy, subdiv, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>) );</span><br><span class=\"line\">            cv2.imshow(win_delaunay, img_copy)</span><br><span class=\"line\">            cv2.waitKey(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Draw delaunay triangles</span></span><br><span class=\"line\">    draw_delaunay( img, subdiv, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>) );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Draw points</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> points :</span><br><span class=\"line\">        draw_point(img, p, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Allocate space for voronoi Diagram</span></span><br><span class=\"line\">    img_voronoi = np.zeros(img.shape, dtype = img.dtype)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Draw voronoi diagram</span></span><br><span class=\"line\">    draw_voronoi(img_voronoi,subdiv)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Show results</span></span><br><span class=\"line\">    cv2.imshow(win_delaunay,img)</span><br><span class=\"line\">    cv2.imshow(win_voronoi,img_voronoi)</span><br><span class=\"line\">    cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h3><ul>\n<li>Facial Landmark Detection | Learn OpenCV<br><a href=\"https://www.learnopencv.com/facial-landmark-detection/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/facial-landmark-detection/</a></li>\n<li>Delaunay Triangulation and Voronoi Diagram using OpenCV ( C++ / Python ) | Learn OpenCV<br><a href=\"https://www.learnopencv.com/delaunay-triangulation-and-voronoi-diagram-using-opencv-c-python/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/delaunay-triangulation-and-voronoi-diagram-using-opencv-c-python/</a></li>\n</ul>\n</the>","site":{"data":{}},"excerpt":"<p><strong> 门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"Voronoi-diagram-维诺图-和-Delaunay-Triangulation-德罗奈三角剖分\"><a href=\"#Voronoi-diagram-维诺图-和-Delaunay-Triangulation-德罗奈三角剖分\" class=\"headerlink\" title=\"Voronoi diagram 维诺图 和 Delaunay Triangulation 德罗奈三角剖分\"></a>Voronoi diagram 维诺图 和 Delaunay Triangulation 德罗奈三角剖分</h2>","more":"<the rest of contents | 余下全文>\n\n\n<h3 id=\"维诺图\"><a href=\"#维诺图\" class=\"headerlink\" title=\"维诺图\"></a>维诺图</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>给定平面中的一组点，所有点不共线，维诺图为每个点（生成元）创建多边形区域，使得每个区域中的点到生成元的距离最近。  </p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>每个V多边形内有一个生成元； </li>\n<li>每个V多边形内点到该生成元距离短于到其它生成元距离； </li>\n<li>多边形边界上的点到生成此边界的生成元距离相等（生成元连线的垂直平分线）； </li>\n<li>邻接图形的Voronoi多边形界线以原邻接界线作为子集。</li>\n</ul>\n<h3 id=\"德罗奈三角剖分\"><a href=\"#德罗奈三角剖分\" class=\"headerlink\" title=\"德罗奈三角剖分\"></a>德罗奈三角剖分</h3><p>对点集进行结构化的一个重要的方法就是对这些点进行三角剖分。</p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Delaunay三角剖分定义为平面上的点集P是一种三角剖分，使得P中没有点严格处于剖分后中任意一个三角形外接圆的内部。</p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>Delaunay三角剖分与Voronoi图是对偶关系。<br>对于一个维诺图，若任何两个生成元site之间有一条非空边界，那么这两个site之间连接一条边，由此得到的对偶图，就是一个三角剖分。</li>\n<li>空圆性<br>对于Delaunay剖分中的任何一张face的外接圆必然是空的。 </li>\n<li>最近邻性<br>任何一条连接于最近邻之间的边都会被Delaunay剖分所采用，因为这里头会存在一个以这条边为直径（弦）的空圆。</li>\n<li>复杂度<br>在二维平面中，每增加一个点三角形的数目都会大概增加2，边数增加3。可以说在二维上的Delaunay剖分中是一个线性规模的数据结构。但在三维的情况下这两个指标最多会达到平房的量级，更高维的空间的一般结论也会达到2^d量级。</li>\n</ul>\n<p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/opencv-delaunay-vornoi-subdiv-example.png\"></p>\n<h3 id=\"维诺图生成方法\"><a href=\"#维诺图生成方法\" class=\"headerlink\" title=\"维诺图生成方法\"></a>维诺图生成方法</h3><p>首先生成其对偶元Delaunay三角网，再找出三角网每一三角形的外接圆圆心，最后连接相邻三角形的外接圆圆心，形成以每一个三角形顶点为生成元的多边形网。</p>\n<p>步骤：<br>（1）离散点自动构建三角网，即构建Delaunay三角网。对离散点和形成的三角形编号，记录每个三角形是由哪三个离散点构成的。<br>（2）计算每个三角形的外接圆圆心，并记录之。<br>（3）遍历三角形链表，寻找与当前三角形pTri三边共边的相邻三角形TriA，TriB和TriC。<br>（4）如果找到，则把寻找到的三角形的外心与pTri的外心连接，存入维诺边链表中。如果找不到，则求出最外边的中垂线射线存入维诺边链表中。<br>（5）遍历结束，所有维诺边被找到，根据边画出维诺图。</p>\n<p>Delaunay剖分是一种三角剖分的标准，实现它有多种算法，这里采用Bowyer-Watson算法，算法的基本步骤是：<br>（1）构造一个超级三角形，包含所有散点，放入三角形链表。<br>（2）将点集中的散点依次插入，在三角形链表中找出其外接圆包含插入点的三角形（称为该点的影响三角形），删除影响三角形的公共边，将插入点同影响三角形的全部顶点连接起来，从而完成一个点在Delaunay三角形链表中的插入。<br>（3）根据优化准则对局部新形成的三角形进行优化。将形成的三角形放入Delaunay三角形链表。<br>（4）循环执行上述第2步，直到所有散点插入完毕。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint, seed</span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> ceil, sqrt, log, floor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> delaunay <span class=\"keyword\">as</span> D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机生成20个点</span></span><br><span class=\"line\">seed(<span class=\"number\">4</span>)</span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\">xs = [randint(<span class=\"number\">1</span>, <span class=\"number\">98</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">ys = [randint(<span class=\"number\">1</span>, <span class=\"number\">98</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">zs = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">DT = D.Delaunay_Triangulation()</span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(xs, ys):</span><br><span class=\"line\">    DT.AddPoint(D.Point(x, y))</span><br><span class=\"line\"></span><br><span class=\"line\">XS, YS, TS = DT.export()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(XS)</span></span><br><span class=\"line\"><span class=\"comment\"># print(YS)</span></span><br><span class=\"line\"><span class=\"comment\"># print(TS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Creating and plotting unstructured triangular grids.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.tri <span class=\"keyword\">as</span> tri</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">15</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">plt.plot(xs, ys, <span class=\"string\">'go'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creating a Triangulation without specifying the triangles results in the</span></span><br><span class=\"line\"><span class=\"comment\"># Delaunay triangulation of the points.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create the Triangulation; no triangles so Delaunay triangulation created.</span></span><br><span class=\"line\">triang = tri.Triangulation(xs, ys)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot the triangulation.</span></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">plt.triplot(triang, <span class=\"string\">'bo-'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">plt.triplot(tri.Triangulation(XS, YS, TS), <span class=\"string\">'ro--'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/output_4_0.png\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>计算几何笔记 - 知乎<br><a href=\"https://zhuanlan.zhihu.com/c_162517931\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/c_162517931</a> </li>\n<li>Delaunay Triangulation - menjiawan的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/menjiawan/article/details/45073121\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/menjiawan/article/details/45073121</a></li>\n</ul>\n<h3 id=\"Bowyer-Watson算法\"><a href=\"#Bowyer-Watson算法\" class=\"headerlink\" title=\"Bowyer-Watson算法\"></a>Bowyer-Watson算法</h3><p><strong>Bowyer算法</strong>由英国Bath大学的Bowyer在1981年提出。算法首先构造离散点集的的若干离散点的Voronoi图，根据Voronoi领域准则连接临近点，得到初始Delaunay三角剖分，然后逐步加入剖分点，每加入一个点就对已有的Voronoi图进行修改，构造新点集的Voronoi图，直到所有点都插入完毕。</p>\n<ul>\n<li>Computing Dirichlet tessellations1 | The Computer Journal | Oxford Academic<br><a href=\"https://academic.oup.com/comjnl/article/24/2/162/338193\" target=\"_blank\" rel=\"noopener\">https://academic.oup.com/comjnl/article/24/2/162/338193</a></li>\n</ul>\n<p><strong>Watson算法</strong>由澳大利亚悉尼大学Watson在1981年提出。算法采用空外接圆准则，直接从三角剖分入手。算法从初始三角划分开始，每加入一个离散点，找出所有外接圆包含此点的三角形，删除这些三角形面向该插入点的边，得到包含此点的多边形，将此点与多边形的定点连接就构成新的Delaunay三角剖分，重复此过程直至所有点插入完毕为止。注意，此算法当四点或以上共圆时将产生错误。</p>\n<ul>\n<li>Computing the n-dimensional Delaunay tessellation with application to Voronoi polytopes1 | The Computer Journal | Oxford Academic<br><a href=\"https://academic.oup.com/comjnl/article/24/2/167/338200\" target=\"_blank\" rel=\"noopener\">https://academic.oup.com/comjnl/article/24/2/167/338200</a></li>\n</ul>\n<p><strong>Bowyer-Watson算法</strong>是根据上述两者算法相互补充改进得到的(貌似跟Watson算法差不多，具体可以参考上述两篇论文)，仍然是一种插点增量算法的一种。算法逻辑如下：</p>\n<ul>\n<li>1.求解离散点集的凸包，建立点集凸包边界节点的初始三角形划分；</li>\n<li>2.选择另外的离散点，插入指定位置，在已有的三角形中找出外接圆包含此点的三角形，并删除公共边，得到一个包含新插入点的多边形；</li>\n<li>3.将此点与多边形的其他顶点连接起来，构成新的三角形划分；</li>\n<li>4.重复插点知道所有点插入完毕。</li>\n<li>5.最后删除超级三角形相关联的三角形即可。</li>\n</ul>\n<h3 id=\"判断点在三角形内\"><a href=\"#判断点在三角形内\" class=\"headerlink\" title=\"判断点在三角形内\"></a>判断点在三角形内</h3><p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/Trangle.png\"></p>\n<h4 id=\"1-点P和三顶点夹角和360\"><a href=\"#1-点P和三顶点夹角和360\" class=\"headerlink\" title=\"1. 点P和三顶点夹角和360\"></a>1. 点P和三顶点夹角和360</h4><p>连接点P和三角形的三个顶点得到三条线段PA，PB和PC，求出这三条线段与三角形各边的夹角，如果所有夹角之和为360度，那么点P在三角形内，否则不在，此法直观，但效率低下。</p>\n<h4 id=\"2-依次选定三边，点P和另一顶点在同一侧-两个外积同号，那么点在一侧\"><a href=\"#2-依次选定三边，点P和另一顶点在同一侧-两个外积同号，那么点在一侧\" class=\"headerlink\" title=\"2. 依次选定三边，点P和另一顶点在同一侧:两个外积同号，那么点在一侧\"></a>2. 依次选定三边，点P和另一顶点在同一侧:两个外积同号，那么点在一侧</h4><p>当选定线段AB时，点C位于AB的右侧，同理选定BC时，点A位于BC的右侧，最后选定CA时，点B位于CA的右侧，所以当选择某一条边时，我们只需验证点P与该边所对的点在同一侧即可。<br>如何判断两个点在某条线段的同一侧呢？可以通过叉积来实现，连接BP，将BP和BC做叉积，再将BA和BC做叉积，如果两个叉积的结果方向一致，那么两个点在同一侧。<br>BTW，判断两个向量的是否同向可以用点积实现，如果点积大于0，则两向量夹角是锐角，否则是钝角。</p>\n<h4 id=\"3-利用外积同号和面积关系\"><a href=\"#3-利用外积同号和面积关系\" class=\"headerlink\" title=\"3. 利用外积同号和面积关系\"></a>3. 利用外积同号和面积关系</h4><p>首先利用外积方向判断p在角ABC内：将BA和BC做叉积，连接BP，分别将BA和BP、BP和BC做叉积并判断与BA和BC的叉积同向。<br>最后利用外积大小判断p在三角形ABC内：BA和BP、BP和BC的叉积之和，小于BA和BC的叉积。</p>\n<h3 id=\"判断点在三角形的外接圆内\"><a href=\"#判断点在三角形的外接圆内\" class=\"headerlink\" title=\"判断点在三角形的外接圆内\"></a>判断点在三角形的外接圆内</h3><h4 id=\"1-先求圆心、半径，比较半径和圆心到点P距离\"><a href=\"#1-先求圆心、半径，比较半径和圆心到点P距离\" class=\"headerlink\" title=\"1.先求圆心、半径，比较半径和圆心到点P距离\"></a>1.先求圆心、半径，比较半径和圆心到点P距离</h4><p>由三角形的外心坐标公式计算圆心坐标</p>\n<script type=\"math/tex; mode=display\">\nx=\\frac{\\left|\\begin{array}{lll}{x_{0}^{2}+y_{0}^{2}} & {y_{0}} & {1} \\\\ {x_{1}^{2}+y_{1}^{2}} & {y_{1}} & {1} \\\\ {x_{2}^{2}+y_{2}^{2}} & {y_{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|} , y=\\frac{\\left|\\begin{array}{lll}{x_{0}} & {x_{0}^{2}+y_{0}^{2}} & {1} \\\\ {x_{1}} & {x_{1}^{2}+y_{1}^{2}} & {1} \\\\ {x_{2}} & {x_{2}^{2}+y_{2}^{2}} & {1}\\end{array}\\right|}{2\\left|\\begin{array}{ccc}{x_{0}} & {y_{0}} & {1} \\\\ {x_{1}} & {y_{1}} & {1} \\\\ {x_{2}} & {y_{2}} & {1}\\end{array}\\right|}</script><p>根据这个外心的坐标公式计算出外接圆的圆心坐标，就能得到圆的半径，从而判断出点P与外接圆的位置关系。</p>\n<h4 id=\"2-利用角度关系\"><a href=\"#2-利用角度关系\" class=\"headerlink\" title=\"2.利用角度关系\"></a>2.利用角度关系</h4><p><img src=\"/2019/06/29/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/P_Trangle.png\"></p>\n<ul>\n<li>step1 计算$∠P_0P_1P_2$和$∠P_0PP_2$的大小，两个角的大小在$[0,π]$范围内。  <ul>\n<li>step1.1 如果$∠P_0PP_2=0$，则点$P$不在圆内，结束；如果$∠P_0PP_2 = π$,则点$P$在圆内，结束。   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>setp2 判断点$P$和$P_1$是否在$P_0P_2$同侧。  <ul>\n<li>step2.1 这里通过判断向量外积 $\\overrightarrow{P_{1} P_{0}} \\times \\overrightarrow{P_{1} P_{2}}$与$\\overrightarrow{P P_{0}} \\times \\overrightarrow{P P_{2}}$ 是否同号，如果同号则在同一侧，否则在两侧。   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>step3 如果点$P$和$P_1$是在$P_0P_2$同一侧，若$\\angle P_{0} P_{1} P_{2} \\leq \\angle P_{0} P P_{2}$,则点$P$在圆内，否则在圆外，结束；如果点$P$和$P_1$是在$P_0P_2$不在侧，若$\\angle P_{0} P_{1} P_{2}+\\angle P_{0} P P_{2} \\geq \\pi$，则点$P$在圆内，否则在圆外，结束。</li>\n</ul>\n<h3 id=\"Delaunay-Triangulation-amp-Voronoi-Diagram-in-OpenCV\"><a href=\"#Delaunay-Triangulation-amp-Voronoi-Diagram-in-OpenCV\" class=\"headerlink\" title=\"Delaunay Triangulation &amp; Voronoi Diagram in OpenCV\"></a>Delaunay Triangulation &amp; Voronoi Diagram in OpenCV</h3><p>给定一组点，可以使用openCV中的Subdiv2D类计算Delaunay三角剖分或Voronoi图。</p>\n<p>步骤：</p>\n<ul>\n<li><p>1.获取关键点列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">points = []  </span><br><span class=\"line\">points.append((x, y))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.定义要分区的矩形区间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv2.imread(<span class=\"string\">\"image.jpg\"</span>);</span><br><span class=\"line\">size = img.shape</span><br><span class=\"line\">rect = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.创建Subdiv2D类的实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subdiv  = cv2.Subdiv2D(rect)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.使用subdiv.insert(point)插入点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> points :</span><br><span class=\"line\">    subdiv.insert(p)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.使用subdiv.getTriangleList方法得到Delaunay三角剖分的三角形列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">triangleList = subdiv.getTriangleList();</span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> triangleList :</span><br><span class=\"line\">    pt1 = (t[<span class=\"number\">0</span>], t[<span class=\"number\">1</span>])</span><br><span class=\"line\">    pt2 = (t[<span class=\"number\">2</span>], t[<span class=\"number\">3</span>])</span><br><span class=\"line\">    pt3 = (t[<span class=\"number\">4</span>], t[<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.使用subdiv.getVoronoiFacetList方法得到Voronoi图形状和中心的列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(facets, centers) = subdiv.getVoronoiFacetList([])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>opencv示例代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check if a point is inside a rectangle</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rect_contains</span><span class=\"params\">(rect, point)</span> :</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> point[<span class=\"number\">0</span>] &lt; rect[<span class=\"number\">0</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> point[<span class=\"number\">1</span>] &lt; rect[<span class=\"number\">1</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> point[<span class=\"number\">0</span>] &gt; rect[<span class=\"number\">2</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> point[<span class=\"number\">1</span>] &gt; rect[<span class=\"number\">3</span>] :</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw a point</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_point</span><span class=\"params\">(img, p, color )</span> :</span></span><br><span class=\"line\">    cv2.circle( img, p, <span class=\"number\">2</span>, color, cv2.FILLED, cv2.LINE_AA, <span class=\"number\">0</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw delaunay triangles</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_delaunay</span><span class=\"params\">(img, subdiv, delaunay_color )</span> :</span></span><br><span class=\"line\">    triangleList = subdiv.getTriangleList();</span><br><span class=\"line\">    size = img.shape</span><br><span class=\"line\">    r = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> triangleList :</span><br><span class=\"line\">        pt1 = (t[<span class=\"number\">0</span>], t[<span class=\"number\">1</span>])</span><br><span class=\"line\">        pt2 = (t[<span class=\"number\">2</span>], t[<span class=\"number\">3</span>])</span><br><span class=\"line\">        pt3 = (t[<span class=\"number\">4</span>], t[<span class=\"number\">5</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> rect_contains(r, pt1) <span class=\"keyword\">and</span> rect_contains(r, pt2) <span class=\"keyword\">and</span> rect_contains(r, pt3) :</span><br><span class=\"line\">            cv2.line(img, pt1, pt2, delaunay_color, <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\">            cv2.line(img, pt2, pt3, delaunay_color, <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\">            cv2.line(img, pt3, pt1, delaunay_color, <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw voronoi diagram</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_voronoi</span><span class=\"params\">(img, subdiv)</span> :</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ( facets, centers) = subdiv.getVoronoiFacetList([])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(facets)) :</span><br><span class=\"line\">        ifacet_arr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> facets[i] :</span><br><span class=\"line\">            ifacet_arr.append(f)</span><br><span class=\"line\">        </span><br><span class=\"line\">        ifacet = np.array(ifacet_arr, np.int)</span><br><span class=\"line\">        color = (random.randint(<span class=\"number\">0</span>, <span class=\"number\">255</span>), random.randint(<span class=\"number\">0</span>, <span class=\"number\">255</span>), random.randint(<span class=\"number\">0</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.fillConvexPoly(img, ifacet, color, cv2.LINE_AA, <span class=\"number\">0</span>);</span><br><span class=\"line\">        ifacets = np.array([ifacet])</span><br><span class=\"line\">        cv2.polylines(img, ifacets, <span class=\"literal\">True</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"number\">1</span>, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\">        cv2.circle(img, (centers[i][<span class=\"number\">0</span>], centers[i][<span class=\"number\">1</span>]), <span class=\"number\">3</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), cv2.FILLED, cv2.LINE_AA, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Define window names</span></span><br><span class=\"line\">    win_delaunay = <span class=\"string\">\"Delaunay Triangulation\"</span></span><br><span class=\"line\">    win_voronoi = <span class=\"string\">\"Voronoi Diagram\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Turn on animation while drawing triangles</span></span><br><span class=\"line\">    animate = <span class=\"literal\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Define colors for drawing.</span></span><br><span class=\"line\">    delaunay_color = (<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>)</span><br><span class=\"line\">    points_color = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Read in the image.</span></span><br><span class=\"line\">    img = cv2.imread(<span class=\"string\">\"./images/obama.jpg\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Keep a copy around</span></span><br><span class=\"line\">    img_orig = img.copy();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Rectangle to be used with Subdiv2D</span></span><br><span class=\"line\">    size = img.shape</span><br><span class=\"line\">    rect = (<span class=\"number\">0</span>, <span class=\"number\">0</span>, size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Create an instance of Subdiv2D</span></span><br><span class=\"line\">    subdiv = cv2.Subdiv2D(rect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create an array of points.</span></span><br><span class=\"line\">    points = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Read in the points from a text file</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"./images/obama.txt\"</span>) <span class=\"keyword\">as</span> file :</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file :</span><br><span class=\"line\">            x, y = line.split()</span><br><span class=\"line\">            points.append((int(x), int(y)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Insert points into subdiv</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> points :</span><br><span class=\"line\">        subdiv.insert(p)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Show animation</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> animate :</span><br><span class=\"line\">            img_copy = img_orig.copy()</span><br><span class=\"line\">            <span class=\"comment\"># Draw delaunay triangles</span></span><br><span class=\"line\">            draw_delaunay( img_copy, subdiv, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>) );</span><br><span class=\"line\">            cv2.imshow(win_delaunay, img_copy)</span><br><span class=\"line\">            cv2.waitKey(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Draw delaunay triangles</span></span><br><span class=\"line\">    draw_delaunay( img, subdiv, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>) );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Draw points</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> points :</span><br><span class=\"line\">        draw_point(img, p, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Allocate space for voronoi Diagram</span></span><br><span class=\"line\">    img_voronoi = np.zeros(img.shape, dtype = img.dtype)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Draw voronoi diagram</span></span><br><span class=\"line\">    draw_voronoi(img_voronoi,subdiv)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Show results</span></span><br><span class=\"line\">    cv2.imshow(win_delaunay,img)</span><br><span class=\"line\">    cv2.imshow(win_voronoi,img_voronoi)</span><br><span class=\"line\">    cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h3><ul>\n<li>Facial Landmark Detection | Learn OpenCV<br><a href=\"https://www.learnopencv.com/facial-landmark-detection/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/facial-landmark-detection/</a></li>\n<li>Delaunay Triangulation and Voronoi Diagram using OpenCV ( C++ / Python ) | Learn OpenCV<br><a href=\"https://www.learnopencv.com/delaunay-triangulation-and-voronoi-diagram-using-opencv-c-python/\" target=\"_blank\" rel=\"noopener\">https://www.learnopencv.com/delaunay-triangulation-and-voronoi-diagram-using-opencv-c-python/</a></li>\n</ul>\n</the>"},{"title":"日常练琴","date":"2018-12-31T18:25:33.000Z","_content":"\n## 节拍器\n\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <!-- <title>节拍器</title> -->\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            let speed = 60, //节拍速度\n                arrClick = [],  //测速时每次点击的速度组成的数组，节拍速度取其平均值\n                clickTime = 0,  //测速点击计时器，超过 5 秒清空数组\n                s = Date.now(), //记录每一次点击的时间，下一次点击时与此时间的间隔，来计算速度\n                time = 0,   //play 过程 timeout 变量\n                times = 0,  //44拍节的计数器\n                isPlay = false, //是否正在播放\n                speedMsg = document.getElementById(\"speed\"),    //页面正中间显示速度值的元素\n                rangeValue = document.getElementById(\"rangeValue\"), //滑块元素\n                elSpeed1 = document.getElementById(\"speed1\"),\n                elSpeed2 = document.getElementById(\"speed2\"),\n                showSpeed = () => {//显示速度值的方法（或者叫 update 方法）\n                    rangeValue.value = speedMsg.innerText = speed;\n                    elSpeed1.innerText = Math.round(speed / 2);\n                    elSpeed2.innerText = speed * 2;\n                }; \n            /** 测速按钮点击 */\n            document.getElementById(\"btnTest\").addEventListener(\"click\", function () {\n                let lastSpeed = Math.floor(60000 / (Date.now() - s));\n                if (Math.abs(lastSpeed - arrClick[arrClick.length - 1]) > 30) { arrClick = []; }  //如果点击时间和上次差别较大，则清零重测\n                arrClick.push(lastSpeed);\n                if (arrClick.length > 31) arrClick.shift(); //最大容量保持在30个（除去第 1 个不用）\n                //如果数量多于1个则计算速度（第 1 个时间间隔太久，不准确，弃之）\n                if (arrClick.length > 1) {\n                    //取第2个到最后的平均值\n                    speed = Math.ceil((arrClick.reduce((sum, n) => sum + n) - arrClick[0]) / (arrClick.length - 1));\n                    console.log(arrClick.slice(1, arrClick.length).join(\"+\") + \" = \" + (arrClick.reduce((s, n) => s + n) - arrClick[0]) + \" / \" + (arrClick.length - 1));\n                    if (arrClick.length > 5) document.getElementById(\"msg\").innerText = \"多点几次更准确...\";\n                }\n                showSpeed();\n                s = Date.now();\n                document.getElementById(\"btnStop\").click(); //测速时停止播放\n                //两次点击间隔大于 3 秒就重置\n                window.clearTimeout(clickTime);\n                clickTime = window.setTimeout(function () {\n                    arrClick = [];\n                    document.getElementById(\"msg\").innerText = \"\";\n                }, 3000);\n            });\n            /** 播放按钮点击 */\n            document.getElementById(\"btnPlay\").addEventListener(\"click\", function () {\n                isPlay = true;\n                play();\n                this.style.display = \"none\";\n                document.getElementById(\"btnStop\").style.display = \"inline-block\";\n            });\n            /** 停止按钮点击 */\n            document.getElementById(\"btnStop\").addEventListener(\"click\", function () {\n                window.clearTimeout(time);\n                isPlay = false;\n                this.style.display = \"none\";\n                document.getElementById(\"btnPlay\").style.display = \"inline-block\";\n            });\n            /** 减号按钮点击 */\n            document.getElementById(\"btnSub\").addEventListener(\"click\", function () {\n                speed--;\n                showSpeed();\n            });\n            /** 加号按钮点击 */\n            document.getElementById(\"btnAdd\").addEventListener(\"click\", function () {\n                speed++;\n                showSpeed();\n            });\n            document.getElementById(\"speed1\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            document.getElementById(\"speed2\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            /** 滑动条更改 */\n            rangeValue.addEventListener(\"change\", function () {\n                speed = this.value * 1;\n                showSpeed();\n            });\n            /** 播放 */\n            let play = () => {\n                window.clearTimeout(time);\n                playsound();\n                if (isPlay) {\n                    time = window.setTimeout(play, Math.floor(60000 / speed));\n                };\n            }\n            let audioCtx = new AudioContext();\n            /** 发声 */\n            let playsound = () => {\n                times++;\n                let oscillator = audioCtx.createOscillator();\n                let gainNode = audioCtx.createGain();\n                oscillator.connect(gainNode);\n                gainNode.connect(audioCtx.destination);\n                oscillator.type = 'sine';\n                if (times%4){\n                    oscillator.frequency.setValueAtTime(200, audioCtx.currentTime);\n                }\n                else\n                {\n                    oscillator.frequency.setValueAtTime(700, audioCtx.currentTime);\n                    times=0;\n                }\n                oscillator.frequency.linearRampToValueAtTime(50, audioCtx.currentTime + 0.1);\n                gainNode.gain.setValueAtTime(0, audioCtx.currentTime);\n                gainNode.gain.linearRampToValueAtTime(1, audioCtx.currentTime + 0.01);\n                gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5);\n                oscillator.start(audioCtx.currentTime);\n                oscillator.stop(audioCtx.currentTime + 0.5);\n            }\n        });\n    </script>\n</head>\n\n<body>\n    <style>\n        *{padding: 0;margin: 0;font-family: Cambria, \"微软雅黑\";}\n        /* header{background-image: linear-gradient(to bottom,#4387fd,#4683ea);padding: 20px;font-size: 30px;color: #fff;} */\n        footer{padding: 20px;text-align: center;color: #ccc;}\n        footer>a{color: #999;}\n        .section{text-align: center;padding: 20px;width: 300px;margin: auto;}\n        .sectionsection{margin: 30px auto;}\n        .speed{display: flex;justify-content:space-between;align-items: center;}\n        .sectionbutton {padding: 5px 10px;}\n        #btnTest {padding: 15px 30px;font-size: 20px;}\n        #btnPlay,#btnStop{font-size: 50px;border: 0;background: transparent;}\n        #btnStop {display: none;}\n        #speed{font-size: 45px;}\n        #speed1,#speed2{color: #999;cursor: pointer;}\n        #speed1:hover,#speed2:hover{color: #333;}\n        #msg{height: 20px;padding-top: 5px; font-size: 9px;color: gray;}\n    </style>\n    <header>节拍器</header>\n    <section class=\"section\">\n        <button class=\"sectionbutton\" id=\"btnTest\">连续点击测速</button>\n        <div id=\"msg\"></div>\n        <section class='sectionsection'>\n            <div class=\"speed\">\n                <button id=\"btnSub\">➖</button>\n                <div id=\"speed1\">30</div>\n                <div id=\"speed\">60</div>\n                <div id=\"speed2\">120</div>\n                <button id=\"btnAdd\">➕</button>\n            </div>\n            <div><input type=\"range\" style=\"width:100%;\" min=\"20\" max=\"300\" id=\"rangeValue\" value=\"60\"></div>\n        </section>\n        <button id=\"btnPlay\">▶️</button>\n        <button id=\"btnStop\">⏹️</button>\n    </section>\n    <footer>2018-02-05 by <a href=\"mailto://zk1218@gmail.com\">📧 zhangkai</a></footer>\n</body>\n\n</html>\n\n\n## 音阶练习\n\n**教学频道**\n* Wen吉他誌  \nhttps://www.youtube.com/user/k7256580\n\n<img src=\"随笔_日常练琴\\0.png\" >\n\n**注意**\n* 主音开始，主音结束，主音是基准点\n* 模进练习(三个音一组、四个音一组、三度音模进)\n* 唱出来\n* 节拍器\n\n**建议**\n* 以一分钟为最小练习单位\n* 熟悉一个pattern后再学下一个\n* 用脑袋练习\n\n\n## 我的吉他谱\n\n* leebinjun/my-guitar-tab: let‘s play the guitar together : )  \nhttps://github.com/leebinjun/my-guitar-tab\n\n\n## 常见的和弦套路\n\n* 万能和弦15634325  \n拿起吉他用这个套路走一遍，发现它的和声变化是如此的顺畅，如果你自己创作的话可以尝试一下这个套路，但是它也有缺点，就是大家都用就显得没有特0色。\n* 万能变体13634325  \n这个套路是将第二个和弦变成了III级和弦，我们都知道I、IV、V是大三和弦，和弦色彩很阳光、很明亮，II、III、VI级和弦是小三和弦，色彩很阴柔、很暗淡，大家尝试一下这个套路，看看感觉有什么不同。\n* 1645+万能  \n主歌部分使用1645，副歌部分使用万能和弦，这样可以添加一些变化。\n* 1451  \n这个套路只使用了大三和弦，正能量满满啊！\n* 1625  \n这个套路将IV级换成了II级，如果是C调的话就省去了大横按F，初学者练练这个套路，《二月十四》就是这个套路。\n* 1645变体  \nV级和弦使用V7代替，V7和弦听起来极不稳定，让人非常想把它拖回来，后面接着就是I级和弦，瞬间满足了。\n* 15634145  \n使用这个套路歌曲也很多，《开不了口》《简单爱》《爱一个好难》《约定》《深呼吸》《光辉岁月》，其实是来自己欧洲的经典和声。\n* 17654325  \n很多流行喜欢用的和弦走向，现代很多歌都是这样的走向，例如《好心分手》、《菊花台》、《挥着翅膀的女孩》、《饮歌》，其实这个走向就叫做卡农。\n\n\n\n","source":"_posts/随笔_日常练琴.md","raw":"---\ntitle: 日常练琴\ndate: 2019-1-1 02:25:33\ntags:\n  - 随笔\n---\n\n## 节拍器\n\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <!-- <title>节拍器</title> -->\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            let speed = 60, //节拍速度\n                arrClick = [],  //测速时每次点击的速度组成的数组，节拍速度取其平均值\n                clickTime = 0,  //测速点击计时器，超过 5 秒清空数组\n                s = Date.now(), //记录每一次点击的时间，下一次点击时与此时间的间隔，来计算速度\n                time = 0,   //play 过程 timeout 变量\n                times = 0,  //44拍节的计数器\n                isPlay = false, //是否正在播放\n                speedMsg = document.getElementById(\"speed\"),    //页面正中间显示速度值的元素\n                rangeValue = document.getElementById(\"rangeValue\"), //滑块元素\n                elSpeed1 = document.getElementById(\"speed1\"),\n                elSpeed2 = document.getElementById(\"speed2\"),\n                showSpeed = () => {//显示速度值的方法（或者叫 update 方法）\n                    rangeValue.value = speedMsg.innerText = speed;\n                    elSpeed1.innerText = Math.round(speed / 2);\n                    elSpeed2.innerText = speed * 2;\n                }; \n            /** 测速按钮点击 */\n            document.getElementById(\"btnTest\").addEventListener(\"click\", function () {\n                let lastSpeed = Math.floor(60000 / (Date.now() - s));\n                if (Math.abs(lastSpeed - arrClick[arrClick.length - 1]) > 30) { arrClick = []; }  //如果点击时间和上次差别较大，则清零重测\n                arrClick.push(lastSpeed);\n                if (arrClick.length > 31) arrClick.shift(); //最大容量保持在30个（除去第 1 个不用）\n                //如果数量多于1个则计算速度（第 1 个时间间隔太久，不准确，弃之）\n                if (arrClick.length > 1) {\n                    //取第2个到最后的平均值\n                    speed = Math.ceil((arrClick.reduce((sum, n) => sum + n) - arrClick[0]) / (arrClick.length - 1));\n                    console.log(arrClick.slice(1, arrClick.length).join(\"+\") + \" = \" + (arrClick.reduce((s, n) => s + n) - arrClick[0]) + \" / \" + (arrClick.length - 1));\n                    if (arrClick.length > 5) document.getElementById(\"msg\").innerText = \"多点几次更准确...\";\n                }\n                showSpeed();\n                s = Date.now();\n                document.getElementById(\"btnStop\").click(); //测速时停止播放\n                //两次点击间隔大于 3 秒就重置\n                window.clearTimeout(clickTime);\n                clickTime = window.setTimeout(function () {\n                    arrClick = [];\n                    document.getElementById(\"msg\").innerText = \"\";\n                }, 3000);\n            });\n            /** 播放按钮点击 */\n            document.getElementById(\"btnPlay\").addEventListener(\"click\", function () {\n                isPlay = true;\n                play();\n                this.style.display = \"none\";\n                document.getElementById(\"btnStop\").style.display = \"inline-block\";\n            });\n            /** 停止按钮点击 */\n            document.getElementById(\"btnStop\").addEventListener(\"click\", function () {\n                window.clearTimeout(time);\n                isPlay = false;\n                this.style.display = \"none\";\n                document.getElementById(\"btnPlay\").style.display = \"inline-block\";\n            });\n            /** 减号按钮点击 */\n            document.getElementById(\"btnSub\").addEventListener(\"click\", function () {\n                speed--;\n                showSpeed();\n            });\n            /** 加号按钮点击 */\n            document.getElementById(\"btnAdd\").addEventListener(\"click\", function () {\n                speed++;\n                showSpeed();\n            });\n            document.getElementById(\"speed1\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            document.getElementById(\"speed2\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            /** 滑动条更改 */\n            rangeValue.addEventListener(\"change\", function () {\n                speed = this.value * 1;\n                showSpeed();\n            });\n            /** 播放 */\n            let play = () => {\n                window.clearTimeout(time);\n                playsound();\n                if (isPlay) {\n                    time = window.setTimeout(play, Math.floor(60000 / speed));\n                };\n            }\n            let audioCtx = new AudioContext();\n            /** 发声 */\n            let playsound = () => {\n                times++;\n                let oscillator = audioCtx.createOscillator();\n                let gainNode = audioCtx.createGain();\n                oscillator.connect(gainNode);\n                gainNode.connect(audioCtx.destination);\n                oscillator.type = 'sine';\n                if (times%4){\n                    oscillator.frequency.setValueAtTime(200, audioCtx.currentTime);\n                }\n                else\n                {\n                    oscillator.frequency.setValueAtTime(700, audioCtx.currentTime);\n                    times=0;\n                }\n                oscillator.frequency.linearRampToValueAtTime(50, audioCtx.currentTime + 0.1);\n                gainNode.gain.setValueAtTime(0, audioCtx.currentTime);\n                gainNode.gain.linearRampToValueAtTime(1, audioCtx.currentTime + 0.01);\n                gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5);\n                oscillator.start(audioCtx.currentTime);\n                oscillator.stop(audioCtx.currentTime + 0.5);\n            }\n        });\n    </script>\n</head>\n\n<body>\n    <style>\n        *{padding: 0;margin: 0;font-family: Cambria, \"微软雅黑\";}\n        /* header{background-image: linear-gradient(to bottom,#4387fd,#4683ea);padding: 20px;font-size: 30px;color: #fff;} */\n        footer{padding: 20px;text-align: center;color: #ccc;}\n        footer>a{color: #999;}\n        .section{text-align: center;padding: 20px;width: 300px;margin: auto;}\n        .sectionsection{margin: 30px auto;}\n        .speed{display: flex;justify-content:space-between;align-items: center;}\n        .sectionbutton {padding: 5px 10px;}\n        #btnTest {padding: 15px 30px;font-size: 20px;}\n        #btnPlay,#btnStop{font-size: 50px;border: 0;background: transparent;}\n        #btnStop {display: none;}\n        #speed{font-size: 45px;}\n        #speed1,#speed2{color: #999;cursor: pointer;}\n        #speed1:hover,#speed2:hover{color: #333;}\n        #msg{height: 20px;padding-top: 5px; font-size: 9px;color: gray;}\n    </style>\n    <header>节拍器</header>\n    <section class=\"section\">\n        <button class=\"sectionbutton\" id=\"btnTest\">连续点击测速</button>\n        <div id=\"msg\"></div>\n        <section class='sectionsection'>\n            <div class=\"speed\">\n                <button id=\"btnSub\">➖</button>\n                <div id=\"speed1\">30</div>\n                <div id=\"speed\">60</div>\n                <div id=\"speed2\">120</div>\n                <button id=\"btnAdd\">➕</button>\n            </div>\n            <div><input type=\"range\" style=\"width:100%;\" min=\"20\" max=\"300\" id=\"rangeValue\" value=\"60\"></div>\n        </section>\n        <button id=\"btnPlay\">▶️</button>\n        <button id=\"btnStop\">⏹️</button>\n    </section>\n    <footer>2018-02-05 by <a href=\"mailto://zk1218@gmail.com\">📧 zhangkai</a></footer>\n</body>\n\n</html>\n\n\n## 音阶练习\n\n**教学频道**\n* Wen吉他誌  \nhttps://www.youtube.com/user/k7256580\n\n<img src=\"随笔_日常练琴\\0.png\" >\n\n**注意**\n* 主音开始，主音结束，主音是基准点\n* 模进练习(三个音一组、四个音一组、三度音模进)\n* 唱出来\n* 节拍器\n\n**建议**\n* 以一分钟为最小练习单位\n* 熟悉一个pattern后再学下一个\n* 用脑袋练习\n\n\n## 我的吉他谱\n\n* leebinjun/my-guitar-tab: let‘s play the guitar together : )  \nhttps://github.com/leebinjun/my-guitar-tab\n\n\n## 常见的和弦套路\n\n* 万能和弦15634325  \n拿起吉他用这个套路走一遍，发现它的和声变化是如此的顺畅，如果你自己创作的话可以尝试一下这个套路，但是它也有缺点，就是大家都用就显得没有特0色。\n* 万能变体13634325  \n这个套路是将第二个和弦变成了III级和弦，我们都知道I、IV、V是大三和弦，和弦色彩很阳光、很明亮，II、III、VI级和弦是小三和弦，色彩很阴柔、很暗淡，大家尝试一下这个套路，看看感觉有什么不同。\n* 1645+万能  \n主歌部分使用1645，副歌部分使用万能和弦，这样可以添加一些变化。\n* 1451  \n这个套路只使用了大三和弦，正能量满满啊！\n* 1625  \n这个套路将IV级换成了II级，如果是C调的话就省去了大横按F，初学者练练这个套路，《二月十四》就是这个套路。\n* 1645变体  \nV级和弦使用V7代替，V7和弦听起来极不稳定，让人非常想把它拖回来，后面接着就是I级和弦，瞬间满足了。\n* 15634145  \n使用这个套路歌曲也很多，《开不了口》《简单爱》《爱一个好难》《约定》《深呼吸》《光辉岁月》，其实是来自己欧洲的经典和声。\n* 17654325  \n很多流行喜欢用的和弦走向，现代很多歌都是这样的走向，例如《好心分手》、《菊花台》、《挥着翅膀的女孩》、《饮歌》，其实这个走向就叫做卡农。\n\n\n\n","slug":"随笔_日常练琴","published":1,"updated":"2020-02-01T05:12:23.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50bl006m4cvjynti6xos","content":"<h2 id=\"节拍器\"><a href=\"#节拍器\" class=\"headerlink\" title=\"节拍器\"></a>节拍器</h2><html>\n\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <!-- <title>节拍器</title> -->\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            let speed = 60, //节拍速度\n                arrClick = [],  //测速时每次点击的速度组成的数组，节拍速度取其平均值\n                clickTime = 0,  //测速点击计时器，超过 5 秒清空数组\n                s = Date.now(), //记录每一次点击的时间，下一次点击时与此时间的间隔，来计算速度\n                time = 0,   //play 过程 timeout 变量\n                times = 0,  //44拍节的计数器\n                isPlay = false, //是否正在播放\n                speedMsg = document.getElementById(\"speed\"),    //页面正中间显示速度值的元素\n                rangeValue = document.getElementById(\"rangeValue\"), //滑块元素\n                elSpeed1 = document.getElementById(\"speed1\"),\n                elSpeed2 = document.getElementById(\"speed2\"),\n                showSpeed = () => {//显示速度值的方法（或者叫 update 方法）\n                    rangeValue.value = speedMsg.innerText = speed;\n                    elSpeed1.innerText = Math.round(speed / 2);\n                    elSpeed2.innerText = speed * 2;\n                }; \n            /** 测速按钮点击 */\n            document.getElementById(\"btnTest\").addEventListener(\"click\", function () {\n                let lastSpeed = Math.floor(60000 / (Date.now() - s));\n                if (Math.abs(lastSpeed - arrClick[arrClick.length - 1]) > 30) { arrClick = []; }  //如果点击时间和上次差别较大，则清零重测\n                arrClick.push(lastSpeed);\n                if (arrClick.length > 31) arrClick.shift(); //最大容量保持在30个（除去第 1 个不用）\n                //如果数量多于1个则计算速度（第 1 个时间间隔太久，不准确，弃之）\n                if (arrClick.length > 1) {\n                    //取第2个到最后的平均值\n                    speed = Math.ceil((arrClick.reduce((sum, n) => sum + n) - arrClick[0]) / (arrClick.length - 1));\n                    console.log(arrClick.slice(1, arrClick.length).join(\"+\") + \" = \" + (arrClick.reduce((s, n) => s + n) - arrClick[0]) + \" / \" + (arrClick.length - 1));\n                    if (arrClick.length > 5) document.getElementById(\"msg\").innerText = \"多点几次更准确...\";\n                }\n                showSpeed();\n                s = Date.now();\n                document.getElementById(\"btnStop\").click(); //测速时停止播放\n                //两次点击间隔大于 3 秒就重置\n                window.clearTimeout(clickTime);\n                clickTime = window.setTimeout(function () {\n                    arrClick = [];\n                    document.getElementById(\"msg\").innerText = \"\";\n                }, 3000);\n            });\n            /** 播放按钮点击 */\n            document.getElementById(\"btnPlay\").addEventListener(\"click\", function () {\n                isPlay = true;\n                play();\n                this.style.display = \"none\";\n                document.getElementById(\"btnStop\").style.display = \"inline-block\";\n            });\n            /** 停止按钮点击 */\n            document.getElementById(\"btnStop\").addEventListener(\"click\", function () {\n                window.clearTimeout(time);\n                isPlay = false;\n                this.style.display = \"none\";\n                document.getElementById(\"btnPlay\").style.display = \"inline-block\";\n            });\n            /** 减号按钮点击 */\n            document.getElementById(\"btnSub\").addEventListener(\"click\", function () {\n                speed--;\n                showSpeed();\n            });\n            /** 加号按钮点击 */\n            document.getElementById(\"btnAdd\").addEventListener(\"click\", function () {\n                speed++;\n                showSpeed();\n            });\n            document.getElementById(\"speed1\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            document.getElementById(\"speed2\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            /** 滑动条更改 */\n            rangeValue.addEventListener(\"change\", function () {\n                speed = this.value * 1;\n                showSpeed();\n            });\n            /** 播放 */\n            let play = () => {\n                window.clearTimeout(time);\n                playsound();\n                if (isPlay) {\n                    time = window.setTimeout(play, Math.floor(60000 / speed));\n                };\n            }\n            let audioCtx = new AudioContext();\n            /** 发声 */\n            let playsound = () => {\n                times++;\n                let oscillator = audioCtx.createOscillator();\n                let gainNode = audioCtx.createGain();\n                oscillator.connect(gainNode);\n                gainNode.connect(audioCtx.destination);\n                oscillator.type = 'sine';\n                if (times%4){\n                    oscillator.frequency.setValueAtTime(200, audioCtx.currentTime);\n                }\n                else\n                {\n                    oscillator.frequency.setValueAtTime(700, audioCtx.currentTime);\n                    times=0;\n                }\n                oscillator.frequency.linearRampToValueAtTime(50, audioCtx.currentTime + 0.1);\n                gainNode.gain.setValueAtTime(0, audioCtx.currentTime);\n                gainNode.gain.linearRampToValueAtTime(1, audioCtx.currentTime + 0.01);\n                gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5);\n                oscillator.start(audioCtx.currentTime);\n                oscillator.stop(audioCtx.currentTime + 0.5);\n            }\n        });\n    </script>\n</head>\n\n<body>\n    <style>\n        *{padding: 0;margin: 0;font-family: Cambria, \"微软雅黑\";}\n        /* header{background-image: linear-gradient(to bottom,#4387fd,#4683ea);padding: 20px;font-size: 30px;color: #fff;} */\n        footer{padding: 20px;text-align: center;color: #ccc;}\n        footer>a{color: #999;}\n        .section{text-align: center;padding: 20px;width: 300px;margin: auto;}\n        .sectionsection{margin: 30px auto;}\n        .speed{display: flex;justify-content:space-between;align-items: center;}\n        .sectionbutton {padding: 5px 10px;}\n        #btnTest {padding: 15px 30px;font-size: 20px;}\n        #btnPlay,#btnStop{font-size: 50px;border: 0;background: transparent;}\n        #btnStop {display: none;}\n        #speed{font-size: 45px;}\n        #speed1,#speed2{color: #999;cursor: pointer;}\n        #speed1:hover,#speed2:hover{color: #333;}\n        #msg{height: 20px;padding-top: 5px; font-size: 9px;color: gray;}\n    </style>\n    <header>节拍器</header>\n    <section class=\"section\">\n        <button class=\"sectionbutton\" id=\"btnTest\">连续点击测速</button>\n        <div id=\"msg\"></div>\n        <section class=\"sectionsection\">\n            <div class=\"speed\">\n                <button id=\"btnSub\">➖</button>\n                <div id=\"speed1\">30</div>\n                <div id=\"speed\">60</div>\n                <div id=\"speed2\">120</div>\n                <button id=\"btnAdd\">➕</button>\n            </div>\n            <div><input type=\"range\" style=\"width:100%;\" min=\"20\" max=\"300\" id=\"rangeValue\" value=\"60\"></div>\n        </section>\n        <button id=\"btnPlay\">▶️</button>\n        <button id=\"btnStop\">⏹️</button>\n    </section>\n    <footer>2018-02-05 by <a href=\"mailto://zk1218@gmail.com\" target=\"_blank\" rel=\"noopener\">📧 zhangkai</a></footer>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n\n</html>\n\n\n<h2 id=\"音阶练习\"><a href=\"#音阶练习\" class=\"headerlink\" title=\"音阶练习\"></a>音阶练习</h2><p><strong>教学频道</strong></p>\n<ul>\n<li>Wen吉他誌<br><a href=\"https://www.youtube.com/user/k7256580\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/user/k7256580</a></li>\n</ul>\n<p><img src=\"/2019/01/01/随笔_日常练琴/0.png\"></p>\n<p><strong>注意</strong></p>\n<ul>\n<li>主音开始，主音结束，主音是基准点</li>\n<li>模进练习(三个音一组、四个音一组、三度音模进)</li>\n<li>唱出来</li>\n<li>节拍器</li>\n</ul>\n<p><strong>建议</strong></p>\n<ul>\n<li>以一分钟为最小练习单位</li>\n<li>熟悉一个pattern后再学下一个</li>\n<li>用脑袋练习</li>\n</ul>\n<h2 id=\"我的吉他谱\"><a href=\"#我的吉他谱\" class=\"headerlink\" title=\"我的吉他谱\"></a>我的吉他谱</h2><ul>\n<li>leebinjun/my-guitar-tab: let‘s play the guitar together : )<br><a href=\"https://github.com/leebinjun/my-guitar-tab\" target=\"_blank\" rel=\"noopener\">https://github.com/leebinjun/my-guitar-tab</a></li>\n</ul>\n<h2 id=\"常见的和弦套路\"><a href=\"#常见的和弦套路\" class=\"headerlink\" title=\"常见的和弦套路\"></a>常见的和弦套路</h2><ul>\n<li>万能和弦15634325<br>拿起吉他用这个套路走一遍，发现它的和声变化是如此的顺畅，如果你自己创作的话可以尝试一下这个套路，但是它也有缺点，就是大家都用就显得没有特0色。</li>\n<li>万能变体13634325<br>这个套路是将第二个和弦变成了III级和弦，我们都知道I、IV、V是大三和弦，和弦色彩很阳光、很明亮，II、III、VI级和弦是小三和弦，色彩很阴柔、很暗淡，大家尝试一下这个套路，看看感觉有什么不同。</li>\n<li>1645+万能<br>主歌部分使用1645，副歌部分使用万能和弦，这样可以添加一些变化。</li>\n<li>1451<br>这个套路只使用了大三和弦，正能量满满啊！</li>\n<li>1625<br>这个套路将IV级换成了II级，如果是C调的话就省去了大横按F，初学者练练这个套路，《二月十四》就是这个套路。</li>\n<li>1645变体<br>V级和弦使用V7代替，V7和弦听起来极不稳定，让人非常想把它拖回来，后面接着就是I级和弦，瞬间满足了。</li>\n<li>15634145<br>使用这个套路歌曲也很多，《开不了口》《简单爱》《爱一个好难》《约定》《深呼吸》《光辉岁月》，其实是来自己欧洲的经典和声。</li>\n<li>17654325<br>很多流行喜欢用的和弦走向，现代很多歌都是这样的走向，例如《好心分手》、《菊花台》、《挥着翅膀的女孩》、《饮歌》，其实这个走向就叫做卡农。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"节拍器\"><a href=\"#节拍器\" class=\"headerlink\" title=\"节拍器\"></a>节拍器</h2><html>\n\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <!-- <title>节拍器</title> -->\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            let speed = 60, //节拍速度\n                arrClick = [],  //测速时每次点击的速度组成的数组，节拍速度取其平均值\n                clickTime = 0,  //测速点击计时器，超过 5 秒清空数组\n                s = Date.now(), //记录每一次点击的时间，下一次点击时与此时间的间隔，来计算速度\n                time = 0,   //play 过程 timeout 变量\n                times = 0,  //44拍节的计数器\n                isPlay = false, //是否正在播放\n                speedMsg = document.getElementById(\"speed\"),    //页面正中间显示速度值的元素\n                rangeValue = document.getElementById(\"rangeValue\"), //滑块元素\n                elSpeed1 = document.getElementById(\"speed1\"),\n                elSpeed2 = document.getElementById(\"speed2\"),\n                showSpeed = () => {//显示速度值的方法（或者叫 update 方法）\n                    rangeValue.value = speedMsg.innerText = speed;\n                    elSpeed1.innerText = Math.round(speed / 2);\n                    elSpeed2.innerText = speed * 2;\n                }; \n            /** 测速按钮点击 */\n            document.getElementById(\"btnTest\").addEventListener(\"click\", function () {\n                let lastSpeed = Math.floor(60000 / (Date.now() - s));\n                if (Math.abs(lastSpeed - arrClick[arrClick.length - 1]) > 30) { arrClick = []; }  //如果点击时间和上次差别较大，则清零重测\n                arrClick.push(lastSpeed);\n                if (arrClick.length > 31) arrClick.shift(); //最大容量保持在30个（除去第 1 个不用）\n                //如果数量多于1个则计算速度（第 1 个时间间隔太久，不准确，弃之）\n                if (arrClick.length > 1) {\n                    //取第2个到最后的平均值\n                    speed = Math.ceil((arrClick.reduce((sum, n) => sum + n) - arrClick[0]) / (arrClick.length - 1));\n                    console.log(arrClick.slice(1, arrClick.length).join(\"+\") + \" = \" + (arrClick.reduce((s, n) => s + n) - arrClick[0]) + \" / \" + (arrClick.length - 1));\n                    if (arrClick.length > 5) document.getElementById(\"msg\").innerText = \"多点几次更准确...\";\n                }\n                showSpeed();\n                s = Date.now();\n                document.getElementById(\"btnStop\").click(); //测速时停止播放\n                //两次点击间隔大于 3 秒就重置\n                window.clearTimeout(clickTime);\n                clickTime = window.setTimeout(function () {\n                    arrClick = [];\n                    document.getElementById(\"msg\").innerText = \"\";\n                }, 3000);\n            });\n            /** 播放按钮点击 */\n            document.getElementById(\"btnPlay\").addEventListener(\"click\", function () {\n                isPlay = true;\n                play();\n                this.style.display = \"none\";\n                document.getElementById(\"btnStop\").style.display = \"inline-block\";\n            });\n            /** 停止按钮点击 */\n            document.getElementById(\"btnStop\").addEventListener(\"click\", function () {\n                window.clearTimeout(time);\n                isPlay = false;\n                this.style.display = \"none\";\n                document.getElementById(\"btnPlay\").style.display = \"inline-block\";\n            });\n            /** 减号按钮点击 */\n            document.getElementById(\"btnSub\").addEventListener(\"click\", function () {\n                speed--;\n                showSpeed();\n            });\n            /** 加号按钮点击 */\n            document.getElementById(\"btnAdd\").addEventListener(\"click\", function () {\n                speed++;\n                showSpeed();\n            });\n            document.getElementById(\"speed1\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            document.getElementById(\"speed2\").addEventListener(\"click\",function(){\n                speed = this.innerText * 1;\n                showSpeed();\n            })\n            /** 滑动条更改 */\n            rangeValue.addEventListener(\"change\", function () {\n                speed = this.value * 1;\n                showSpeed();\n            });\n            /** 播放 */\n            let play = () => {\n                window.clearTimeout(time);\n                playsound();\n                if (isPlay) {\n                    time = window.setTimeout(play, Math.floor(60000 / speed));\n                };\n            }\n            let audioCtx = new AudioContext();\n            /** 发声 */\n            let playsound = () => {\n                times++;\n                let oscillator = audioCtx.createOscillator();\n                let gainNode = audioCtx.createGain();\n                oscillator.connect(gainNode);\n                gainNode.connect(audioCtx.destination);\n                oscillator.type = 'sine';\n                if (times%4){\n                    oscillator.frequency.setValueAtTime(200, audioCtx.currentTime);\n                }\n                else\n                {\n                    oscillator.frequency.setValueAtTime(700, audioCtx.currentTime);\n                    times=0;\n                }\n                oscillator.frequency.linearRampToValueAtTime(50, audioCtx.currentTime + 0.1);\n                gainNode.gain.setValueAtTime(0, audioCtx.currentTime);\n                gainNode.gain.linearRampToValueAtTime(1, audioCtx.currentTime + 0.01);\n                gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5);\n                oscillator.start(audioCtx.currentTime);\n                oscillator.stop(audioCtx.currentTime + 0.5);\n            }\n        });\n    </script>\n</head>\n\n<body>\n    <style>\n        *{padding: 0;margin: 0;font-family: Cambria, \"微软雅黑\";}\n        /* header{background-image: linear-gradient(to bottom,#4387fd,#4683ea);padding: 20px;font-size: 30px;color: #fff;} */\n        footer{padding: 20px;text-align: center;color: #ccc;}\n        footer>a{color: #999;}\n        .section{text-align: center;padding: 20px;width: 300px;margin: auto;}\n        .sectionsection{margin: 30px auto;}\n        .speed{display: flex;justify-content:space-between;align-items: center;}\n        .sectionbutton {padding: 5px 10px;}\n        #btnTest {padding: 15px 30px;font-size: 20px;}\n        #btnPlay,#btnStop{font-size: 50px;border: 0;background: transparent;}\n        #btnStop {display: none;}\n        #speed{font-size: 45px;}\n        #speed1,#speed2{color: #999;cursor: pointer;}\n        #speed1:hover,#speed2:hover{color: #333;}\n        #msg{height: 20px;padding-top: 5px; font-size: 9px;color: gray;}\n    </style>\n    <header>节拍器</header>\n    <section class=\"section\">\n        <button class=\"sectionbutton\" id=\"btnTest\">连续点击测速</button>\n        <div id=\"msg\"></div>\n        <section class=\"sectionsection\">\n            <div class=\"speed\">\n                <button id=\"btnSub\">➖</button>\n                <div id=\"speed1\">30</div>\n                <div id=\"speed\">60</div>\n                <div id=\"speed2\">120</div>\n                <button id=\"btnAdd\">➕</button>\n            </div>\n            <div><input type=\"range\" style=\"width:100%;\" min=\"20\" max=\"300\" id=\"rangeValue\" value=\"60\"></div>\n        </section>\n        <button id=\"btnPlay\">▶️</button>\n        <button id=\"btnStop\">⏹️</button>\n    </section>\n    <footer>2018-02-05 by <a href=\"mailto://zk1218@gmail.com\" target=\"_blank\" rel=\"noopener\">📧 zhangkai</a></footer>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n\n</html>\n\n\n<h2 id=\"音阶练习\"><a href=\"#音阶练习\" class=\"headerlink\" title=\"音阶练习\"></a>音阶练习</h2><p><strong>教学频道</strong></p>\n<ul>\n<li>Wen吉他誌<br><a href=\"https://www.youtube.com/user/k7256580\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/user/k7256580</a></li>\n</ul>\n<p><img src=\"/2019/01/01/随笔_日常练琴/0.png\"></p>\n<p><strong>注意</strong></p>\n<ul>\n<li>主音开始，主音结束，主音是基准点</li>\n<li>模进练习(三个音一组、四个音一组、三度音模进)</li>\n<li>唱出来</li>\n<li>节拍器</li>\n</ul>\n<p><strong>建议</strong></p>\n<ul>\n<li>以一分钟为最小练习单位</li>\n<li>熟悉一个pattern后再学下一个</li>\n<li>用脑袋练习</li>\n</ul>\n<h2 id=\"我的吉他谱\"><a href=\"#我的吉他谱\" class=\"headerlink\" title=\"我的吉他谱\"></a>我的吉他谱</h2><ul>\n<li>leebinjun/my-guitar-tab: let‘s play the guitar together : )<br><a href=\"https://github.com/leebinjun/my-guitar-tab\" target=\"_blank\" rel=\"noopener\">https://github.com/leebinjun/my-guitar-tab</a></li>\n</ul>\n<h2 id=\"常见的和弦套路\"><a href=\"#常见的和弦套路\" class=\"headerlink\" title=\"常见的和弦套路\"></a>常见的和弦套路</h2><ul>\n<li>万能和弦15634325<br>拿起吉他用这个套路走一遍，发现它的和声变化是如此的顺畅，如果你自己创作的话可以尝试一下这个套路，但是它也有缺点，就是大家都用就显得没有特0色。</li>\n<li>万能变体13634325<br>这个套路是将第二个和弦变成了III级和弦，我们都知道I、IV、V是大三和弦，和弦色彩很阳光、很明亮，II、III、VI级和弦是小三和弦，色彩很阴柔、很暗淡，大家尝试一下这个套路，看看感觉有什么不同。</li>\n<li>1645+万能<br>主歌部分使用1645，副歌部分使用万能和弦，这样可以添加一些变化。</li>\n<li>1451<br>这个套路只使用了大三和弦，正能量满满啊！</li>\n<li>1625<br>这个套路将IV级换成了II级，如果是C调的话就省去了大横按F，初学者练练这个套路，《二月十四》就是这个套路。</li>\n<li>1645变体<br>V级和弦使用V7代替，V7和弦听起来极不稳定，让人非常想把它拖回来，后面接着就是I级和弦，瞬间满足了。</li>\n<li>15634145<br>使用这个套路歌曲也很多，《开不了口》《简单爱》《爱一个好难》《约定》《深呼吸》《光辉岁月》，其实是来自己欧洲的经典和声。</li>\n<li>17654325<br>很多流行喜欢用的和弦走向，现代很多歌都是这样的走向，例如《好心分手》、《菊花台》、《挥着翅膀的女孩》、《饮歌》，其实这个走向就叫做卡农。</li>\n</ul>\n"},{"title":"那些年，我们一起去比赛","date":"2018-12-31T16:00:01.000Z","_content":"\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"ee3a7df7aab3469085fb3172995abf11\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574081665671\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_ee3a7df7aab3469085fb3172995abf11 = echarts.init(\n                    document.getElementById('ee3a7df7aab3469085fb3172995abf11'), 'white', {renderer: 'canvas'});\n                var option_ee3a7df7aab3469085fb3172995abf11 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#708DF2\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 10,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u7535\\u5b50\\u8bbe\\u8ba1\\u7ade\\u8d5b\\n \\u4e2d\\u56fd\\u5927\\u5b66\\u751f\\u667a\\u80fd\\u8bbe\\u8ba1\\u7ade\\u8d5b\\u603b\\u51b3\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5408\\u80a5\",\n                                    \"value\": [\n                                        117.27,\n                                        31.86,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u5927\\u8d5b\\u66a8RoboCup\\u516c\\u5f00\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4e0a\\u6d77\",\n                                    \"value\": [\n                                        121.473701,\n                                        31.230416,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751f3D\\u6253\\u5370\\u673a\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5927\\u8fde\",\n                                    \"value\": [\n                                        121.62,\n                                        38.92,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u5d4c\\u5165\\u5f0f\\u8bbe\\u8ba1\\u5927\\u8d5b\\n \\u6c34\\u4e0b\\u673a\\u5668\\u4eba\\u76ee\\u6807\\u6293\\u53d6\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        \"\\u4e0b\\u4e00\\u4ee3\\u4e92\\u8054\\u7f51\\u6280\\u672f\\u521b\\u65b0\\u5927\\u8d5b\\n \\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u6210\\u90fd\",\n                                    \"value\": [\n                                        104.06,\n                                        30.67,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u9ed1\\u9f99\\u6c5f\",\n                                    \"value\": [\n                                        126.661669,\n                                        45.742347,\n                                        \"\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u65b9\\u6cd5\\u5927\\u8d5b\\n\\n \\u5168\\u56fd\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u521b\\u4e1a\\u5e74\\u4f1a\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u53ca\\u4eba\\u5de5\\u667a\\u80fd\\u5927\\u8d5b\\n \\u4e2d\\u56fd\\u5de5\\u7a0b\\u673a\\u5668\\u4eba\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4f59\\u59da\",\n                                    \"value\": [\n                                        121.1,\n                                        30.02,\n                                        \"\\u4e2d\\u56fd\\u9ad8\\u6821\\u673a\\u5668\\u4eba\\u521b\\u610f\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5357\\u4eac\",\n                                    \"value\": [\n                                        118.78,\n                                        32.04,\n                                        \"\\u4eba\\u5de5\\u667a\\u80fd\\u6821\\u56ed\\u521b\\u65b0\\u5927\\u8d5b\"\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-competiton\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"itemStyle\": {\n                            \"color\": \"#D8D7D7\",\n                            \"borderColor\": \"#111\"\n                        },\n                        \"emphasis\": {}\n                    }\n                };\n                chart_ee3a7df7aab3469085fb3172995abf11.setOption(option_ee3a7df7aab3469085fb3172995abf11);\n            });\n        </script>\n    </body>\n</html>\n\n\n","source":"_posts/随笔_那些年，我们一起去比赛.md","raw":"---\ntitle: 那些年，我们一起去比赛\ndate: 2019-01-01 00:00:01\ntags:\n - 随笔\n---\n\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"ee3a7df7aab3469085fb3172995abf11\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574081665671\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_ee3a7df7aab3469085fb3172995abf11 = echarts.init(\n                    document.getElementById('ee3a7df7aab3469085fb3172995abf11'), 'white', {renderer: 'canvas'});\n                var option_ee3a7df7aab3469085fb3172995abf11 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#708DF2\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 10,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u7535\\u5b50\\u8bbe\\u8ba1\\u7ade\\u8d5b\\n \\u4e2d\\u56fd\\u5927\\u5b66\\u751f\\u667a\\u80fd\\u8bbe\\u8ba1\\u7ade\\u8d5b\\u603b\\u51b3\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5408\\u80a5\",\n                                    \"value\": [\n                                        117.27,\n                                        31.86,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u5927\\u8d5b\\u66a8RoboCup\\u516c\\u5f00\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4e0a\\u6d77\",\n                                    \"value\": [\n                                        121.473701,\n                                        31.230416,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751f3D\\u6253\\u5370\\u673a\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5927\\u8fde\",\n                                    \"value\": [\n                                        121.62,\n                                        38.92,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u5d4c\\u5165\\u5f0f\\u8bbe\\u8ba1\\u5927\\u8d5b\\n \\u6c34\\u4e0b\\u673a\\u5668\\u4eba\\u76ee\\u6807\\u6293\\u53d6\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        \"\\u4e0b\\u4e00\\u4ee3\\u4e92\\u8054\\u7f51\\u6280\\u672f\\u521b\\u65b0\\u5927\\u8d5b\\n \\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u6210\\u90fd\",\n                                    \"value\": [\n                                        104.06,\n                                        30.67,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u9ed1\\u9f99\\u6c5f\",\n                                    \"value\": [\n                                        126.661669,\n                                        45.742347,\n                                        \"\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u65b9\\u6cd5\\u5927\\u8d5b\\n\\n \\u5168\\u56fd\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u521b\\u4e1a\\u5e74\\u4f1a\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u53ca\\u4eba\\u5de5\\u667a\\u80fd\\u5927\\u8d5b\\n \\u4e2d\\u56fd\\u5de5\\u7a0b\\u673a\\u5668\\u4eba\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4f59\\u59da\",\n                                    \"value\": [\n                                        121.1,\n                                        30.02,\n                                        \"\\u4e2d\\u56fd\\u9ad8\\u6821\\u673a\\u5668\\u4eba\\u521b\\u610f\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5357\\u4eac\",\n                                    \"value\": [\n                                        118.78,\n                                        32.04,\n                                        \"\\u4eba\\u5de5\\u667a\\u80fd\\u6821\\u56ed\\u521b\\u65b0\\u5927\\u8d5b\"\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-competiton\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"itemStyle\": {\n                            \"color\": \"#D8D7D7\",\n                            \"borderColor\": \"#111\"\n                        },\n                        \"emphasis\": {}\n                    }\n                };\n                chart_ee3a7df7aab3469085fb3172995abf11.setOption(option_ee3a7df7aab3469085fb3172995abf11);\n            });\n        </script>\n    </body>\n</html>\n\n\n","slug":"随笔_那些年，我们一起去比赛","published":1,"updated":"2020-02-08T16:42:42.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50bm006o4cvjbz8i500p","content":"<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"ee3a7df7aab3469085fb3172995abf11\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574081665671\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_ee3a7df7aab3469085fb3172995abf11 = echarts.init(\n                    document.getElementById('ee3a7df7aab3469085fb3172995abf11'), 'white', {renderer: 'canvas'});\n                var option_ee3a7df7aab3469085fb3172995abf11 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#708DF2\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 10,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u7535\\u5b50\\u8bbe\\u8ba1\\u7ade\\u8d5b\\n \\u4e2d\\u56fd\\u5927\\u5b66\\u751f\\u667a\\u80fd\\u8bbe\\u8ba1\\u7ade\\u8d5b\\u603b\\u51b3\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5408\\u80a5\",\n                                    \"value\": [\n                                        117.27,\n                                        31.86,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u5927\\u8d5b\\u66a8RoboCup\\u516c\\u5f00\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4e0a\\u6d77\",\n                                    \"value\": [\n                                        121.473701,\n                                        31.230416,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751f3D\\u6253\\u5370\\u673a\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5927\\u8fde\",\n                                    \"value\": [\n                                        121.62,\n                                        38.92,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u5d4c\\u5165\\u5f0f\\u8bbe\\u8ba1\\u5927\\u8d5b\\n \\u6c34\\u4e0b\\u673a\\u5668\\u4eba\\u76ee\\u6807\\u6293\\u53d6\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        \"\\u4e0b\\u4e00\\u4ee3\\u4e92\\u8054\\u7f51\\u6280\\u672f\\u521b\\u65b0\\u5927\\u8d5b\\n \\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u6210\\u90fd\",\n                                    \"value\": [\n                                        104.06,\n                                        30.67,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u9ed1\\u9f99\\u6c5f\",\n                                    \"value\": [\n                                        126.661669,\n                                        45.742347,\n                                        \"\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u65b9\\u6cd5\\u5927\\u8d5b\\n\\n \\u5168\\u56fd\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u521b\\u4e1a\\u5e74\\u4f1a\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u53ca\\u4eba\\u5de5\\u667a\\u80fd\\u5927\\u8d5b\\n \\u4e2d\\u56fd\\u5de5\\u7a0b\\u673a\\u5668\\u4eba\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4f59\\u59da\",\n                                    \"value\": [\n                                        121.1,\n                                        30.02,\n                                        \"\\u4e2d\\u56fd\\u9ad8\\u6821\\u673a\\u5668\\u4eba\\u521b\\u610f\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5357\\u4eac\",\n                                    \"value\": [\n                                        118.78,\n                                        32.04,\n                                        \"\\u4eba\\u5de5\\u667a\\u80fd\\u6821\\u56ed\\u521b\\u65b0\\u5927\\u8d5b\"\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-competiton\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"itemStyle\": {\n                            \"color\": \"#D8D7D7\",\n                            \"borderColor\": \"#111\"\n                        },\n                        \"emphasis\": {}\n                    }\n                };\n                chart_ee3a7df7aab3469085fb3172995abf11.setOption(option_ee3a7df7aab3469085fb3172995abf11);\n            });\n        </script>\n    <script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>\n\n\n","site":{"data":{}},"excerpt":"","more":"<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"ee3a7df7aab3469085fb3172995abf11\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574081665671\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_ee3a7df7aab3469085fb3172995abf11 = echarts.init(\n                    document.getElementById('ee3a7df7aab3469085fb3172995abf11'), 'white', {renderer: 'canvas'});\n                var option_ee3a7df7aab3469085fb3172995abf11 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#708DF2\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 10,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u7535\\u5b50\\u8bbe\\u8ba1\\u7ade\\u8d5b\\n \\u4e2d\\u56fd\\u5927\\u5b66\\u751f\\u667a\\u80fd\\u8bbe\\u8ba1\\u7ade\\u8d5b\\u603b\\u51b3\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5408\\u80a5\",\n                                    \"value\": [\n                                        117.27,\n                                        31.86,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u5927\\u8d5b\\u66a8RoboCup\\u516c\\u5f00\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4e0a\\u6d77\",\n                                    \"value\": [\n                                        121.473701,\n                                        31.230416,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751f3D\\u6253\\u5370\\u673a\\u8bbe\\u8ba1\\u9080\\u8bf7\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5927\\u8fde\",\n                                    \"value\": [\n                                        121.62,\n                                        38.92,\n                                        \"\\u5168\\u56fd\\u5927\\u5b66\\u751f\\u5d4c\\u5165\\u5f0f\\u8bbe\\u8ba1\\u5927\\u8d5b\\n \\u6c34\\u4e0b\\u673a\\u5668\\u4eba\\u76ee\\u6807\\u6293\\u53d6\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        \"\\u4e0b\\u4e00\\u4ee3\\u4e92\\u8054\\u7f51\\u6280\\u672f\\u521b\\u65b0\\u5927\\u8d5b\\n \\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u6210\\u90fd\",\n                                    \"value\": [\n                                        104.06,\n                                        30.67,\n                                        \"\\u56fd\\u9645\\u5927\\u5b66\\u751fiCAN\\u521b\\u65b0\\u521b\\u4e1a\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u9ed1\\u9f99\\u6c5f\",\n                                    \"value\": [\n                                        126.661669,\n                                        45.742347,\n                                        \"\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u65b9\\u6cd5\\u5927\\u8d5b\\n\\n \\u5168\\u56fd\\u5927\\u5b66\\u751f\\u521b\\u65b0\\u521b\\u4e1a\\u5e74\\u4f1a\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        \"\\u4e2d\\u56fd\\u673a\\u5668\\u4eba\\u53ca\\u4eba\\u5de5\\u667a\\u80fd\\u5927\\u8d5b\\n \\u4e2d\\u56fd\\u5de5\\u7a0b\\u673a\\u5668\\u4eba\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u4f59\\u59da\",\n                                    \"value\": [\n                                        121.1,\n                                        30.02,\n                                        \"\\u4e2d\\u56fd\\u9ad8\\u6821\\u673a\\u5668\\u4eba\\u521b\\u610f\\u5927\\u8d5b\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5357\\u4eac\",\n                                    \"value\": [\n                                        118.78,\n                                        32.04,\n                                        \"\\u4eba\\u5de5\\u667a\\u80fd\\u6821\\u56ed\\u521b\\u65b0\\u5927\\u8d5b\"\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-competiton\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"itemStyle\": {\n                            \"color\": \"#D8D7D7\",\n                            \"borderColor\": \"#111\"\n                        },\n                        \"emphasis\": {}\n                    }\n                };\n                chart_ee3a7df7aab3469085fb3172995abf11.setOption(option_ee3a7df7aab3469085fb3172995abf11);\n            });\n        </script>\n    <script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>\n\n\n"},{"title":"OpenCV学习笔记三：特征检测和图像检索","date":"2019-06-22T16:08:00.000Z","_content":"** {{ title }} ** <Excerpt in index | 首页摘要>\n## 特征检测算法\n\n* Harris     角点检测\n* Shi-Tomasi 角点检测\n* FAST       角点检测\n* SIFT       斑点（blob）检测\n* SURF       斑点检测\n* BRIEF      斑点检测\n* ORB (Oriented FAST and Rotated BRIEF)\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### Harris\n\n角点定义：如果某一点在任意方向的一个微小变动都会引起灰度很大的变化，那么这个点就称之为角点。  \nHarris角点检测的核心思想就是用一个局部窗口在图像上进行移动来判断灰度的变化，如果变化大于一个值那么就认为这个点是角点。  \n将窗口向各个方向移动$(u, v)$然后计算所有差异的总和。表达式如下 \n\n$$\nE(u, v)= \\underbrace{w(x, y)}_{\\text { window function }}[\\underbrace{I(x+u, y+v)}_{\\text { shifted intensity }}-\\underbrace{I(x, y)}_{\\text { intensity }}]^{2}\n$$\n\n窗口函数$w(x,y)$可以是正常的矩形窗口也可以是对每一个像素给予不同权重的高斯窗口。  角点检测中要使 $E(u,v)$ 的值最大。  \n使用泰勒展开和二次型，$E(u,v)$可以近似于  \n$$E(u,v) \\approx \\left[ \\begin{matrix}u\\,v\n\\end{matrix}\\right]  M \\left[ \\begin{matrix}\n    u \\\\\n    v \\\\ \n\\end{matrix}\\right]$$\n其中 \n$$M = \\sum_{x, y} w(x, y)\\left[ \\begin{matrix}\n    I_xI_x\\quad I_xI_y \\\\\n    I_xI_y\\quad I_yI_y \\\\ \n\\end{matrix}\\right] $$\n\n这里 $I_x$ 和 $I_y$ 是图像在 $x$ 和 $y$ 方向的导数,可以使用函数 cv2.Sobel()\n计算得到。  \n根据下式中的$R$值判定窗口内是否包含角点\n$$R=det(M)- \\alpha (trace(M))^2 $$\n其中$\\lambda_1$ 和 $\\lambda_2$ 是矩阵 $M$ 的特征值，$\\alpha$是一个经验常数，取值为$[0.04, 0.06]$。  \n根据R值可以判断一个区域是否是角点，边界或者是平面。  \n* 当 $\\lambda_1$ 和 $\\lambda_2$ 都小时，$|R|$ 也小，对应图像中的平滑区域；\n* 当 $\\lambda_1 \\gg \\lambda_2$ 或者 $\\lambda_1 \\ll \\lambda_2$ 时， $R$ 小于0，对应图像中的边缘；\n* 当 $\\lambda_1$ 和 $\\lambda_2$ 都很大时，$R$ 也很大，对应图像中的角点。\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\n\n%matplotlib inline\n\nimg = cv2.imread('./images/chess_board.png')\nimg_copy = np.copy(img)\nimg_copy = cv2.cvtColor(img_copy, cv2.COLOR_BGR2RGB)\nplt.figure(figsize=(10,10))\n\nplt.subplot(221)\nplt.imshow(img)\nplt.subplot(222)\nplt.imshow(img_copy)\n\nimg_gray = cv2.cvtColor(img_copy, cv2.COLOR_BGR2GRAY)\nimg_gray = np.float32(img_gray)\n# 检测角点，定义串口大小为2，梯度计算的索贝尔核函数大小为3，alpha设置为0.04\nimg_dst = cv2.cornerHarris(img_gray, 2, 3, 0.04)\n# 对图像做膨胀处理，加强角点\nimg_dst = cv2.dilate(img_dst, None)\nplt.subplot(223)\nplt.imshow(img_dst)\n\n# 定义阈值，用于与R相比较\nthresh = 0.7 * img_dst.max()\nimg_corner = np.copy(img)\n# 遍历每一个像素，如果大于阈值，则认为为角点并画在图上\nfor j in range(img_dst.shape[0]):\n    for i in range(img_dst.shape[1]):\n        if img_dst[j, i] > thresh:\n            cv2.circle(img_corner, (i, j), 25, (255,0,0), 1)\nplt.subplot(224)\nplt.imshow(img_corner)\nplt.subplots_adjust(bottom=.01, top=.99, left=.01, right=.99)\n```\n\n<img src='OpenCV学习笔记三：特征检测和图像检索/output_2_0.png' >\n\n\n```python\n%time\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\n# filename = './images/blox.jpg'\nfilename = './images/chessboard.png'\nimg = cv2.imread(filename)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\ngray = np.float32(gray)\nimg_dst = cv2.cornerHarris(gray, 2, 3, 0.05)\n\n# result is dilated for marking the corners, not important\nimg_dst = cv2.dilate(img_dst, None)\n\n# Threshold for an optimal value, it may vary depending on the image.\n# img[dst>0.07*dst.max()]=[0,0,255]\nthresh = 0.2 * img_dst.max()\n\n# 遍历每一个像素，如果大于阈值，则认为为角点并画在图上\nfor j in range(img_dst.shape[0]):\n    for i in range(img_dst.shape[1]):\n        if img_dst[j, i] > thresh:\n            cv2.circle(img, (i, j), 25, (255,0,0), 1)\n\nimg_show = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img_show)\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_3_2.png\">\n\n\n### Shi-Tomasi \nHarris角点的打分公式为\n$$R=det(M)- \\alpha (trace(M))^2 $$\nShi-Tomasi 使用的打分公式为\n$$R=min(\\lambda_1, \\lambda_2)$$\n如果打分超过阈值，我们就认为它是一个角点。\n\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/blox.jpg')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\ncorners = cv2.goodFeaturesToTrack(gray, 50, 0.01, 10)\n# N个最佳角点 = cv2.goodFeaturesToTrack(灰度图, 数量N, 角点质量, 两个角点见最小欧式距离)\ncorners = np.int0(corners)\n\nfor i in corners:\n    x,y = i.ravel()\n    cv2.circle(img, (x,y), 3, 255, -1)\n\nplt.imshow(img)\nplt.show()\n```\n\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_5_0.png\">\n\n\n### FAST\nFAST 算法比其它角点检测算法都快。但是在噪声很高时不够稳定，这是由阈值决定的。  \n原理：FAST特征检测算法来源于corner的定义，这个定义基于特征点周围的图像灰度值，检测候选特征点周围一圈的像素值，如果候选点周围领域内有足够多的像素点与该候选点的灰度值差别够大，则认为该候选点为一个特征点。\n$$N = \\sum_{x\\, \\forall \\, circles(p)}|I(x)-I(p)|>\\epsilon_d $$\n步骤：  \n1）在图像中任选一点$p$,假定其像素（亮度）值为$I_p$;  \n2）以$r$为半径画圆，覆盖$p$点周围的$M$个像素,如下图所示: $r=3， M=16$;  \n<img alt=\"FAST\" src=\"OpenCV学习笔记三：特征检测和图像检索/FAST_samples.png\">\n3）设定阈值$t$，如果这周围的16个像素中有连续的$N$个像素的像素值减去$I_p$大于$t$,或者有连续的$N$个像素都大于$I_p+t$,则认为$p$为角点。\n如果$t=0$，那么就可以理解为：有连续N个像素大于或小于$I_p$的灰度值。那么这个点就被判断为角点。  \n\n为了获得更快的结果，还采用了额外的加速办法。  \n如果测试了候选点周围每隔90度角的4个点，应该至少有3个和候选点的灰度值差足够大，否则则不用再计算其他点，直接认为该候选点不是特征点。  \n候选点周围的圆的选取半径是一个很重要的参数，这里为了简单高效，采用半径为3，共有16个周边像素需要比较。为了提高比较的效率，通常只使用N个周边像素来比较，也就是大家经常说的FAST-N，使用比较多的是FAST-9和FAST-12。  \n这个检测器的效率很高，但是它有如下几条缺点：\n* 当 n<12 时它不会丢弃很多候选点 (获得的候选点比较多)。  \n* 像素的选取不是最优的，因为它的效果取决与要解决的问题和角点的分布情况。  \n* 高速测试的结果被抛弃。  \n* 检测到的很多特征点都是连在一起的。  \n前3个问题可以通过机器学习的方法解决，第4问题可以使用非最大值抑制的方法解决。\n\n#### 机器学习的角点检测器\n1. 选择一组训练图片（最好是跟最后应用相关的图片）使用FAST算法找出每幅图像的特征点；\n2. 对每一个特征点，将其周围的 16 个像素存储构成一个向量，对所有图像都这样做构建一个特征向量$P$;\n3. 每一个特征点的16像素点都属于下列三类中的一种\n$$S_{p\\to x}= \\begin{cases}\nd,& \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;I_{p\\to x}\\le I_p - t &(darker)\\\\ \ns,& I_p-t < I_{p\\to x} <  I_p + t  &(similar)\\\\\nb,&I_p+t \\le I_{p\\to x}  &(brighter)\n\\end{cases}\n$$\n根据这些像素点的分类，特征向量$P$也被分为3个子集：$P_d$，$P_s$，$P_b$\n4. 定义一个新的布尔变量$K_p$ ，如果$p$是角点就设置为 Ture，如果不是就设置为 False。\n5. 使用ID3算法（决策树分类器）来查询每一个子集，递归计算所有子集直到熵为0；\n6. 将构建好的决策树运用于其他图像的快速的检测。\n\n\n#### 非极大值抑制\n很可能大部分检测出来的点彼此之间相邻，我们要去除一部分这样的点。为了解决这一问题，可以采用非最大值抑制的算法：  \n假设P，Q两个点相邻，分别计算两个点与其周围的16个像素点之间的差分和为V，去除V值较小的点，即把非最大的角点抑制掉。\n\n\n\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/blox.jpg',0)\n\nfast = cv2.FastFeatureDetector_create(threshold=20, nonmaxSuppression=True, type=cv2.FAST_FEATURE_DETECTOR_TYPE_9_16)#获取FAST角点探测器\nkp = fast.detect(img,None)#描述符\nimg = cv2.drawKeypoints(img, kp, img, color=(255,0,0))#画到img上面\n\nprint (\"Threshold: \", fast.getThreshold())#输出阈值\nprint (\"nonmaxSuppression: \", fast.getNonmaxSuppression())#是否使用非极大值抑制\nprint (\"Total Keypoints with nonmaxSuppression: \", len(kp))#特征点个数\n\n# cv2.imshow('sp',img)\n# cv2.waitKey(0)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n\n```\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_7_1.png\">\n\n\n### SIFT\n角点检测具有旋转不变特性，即即使图片发生了旋转，算法也能找到同样的角点。  \n但是如果对图像进行缩放，角点可能就不再是角点了。  \n尺度不变特征变换（SIFT），利用原始图像与高斯核的卷积来建立尺度空间，并在高斯差分空间金字塔上提取出尺度不变性的特征点。  \n该算法具有一定的仿射不变性，视角不变性，旋转不变性和光照不变性，所以在图像特征提高方面得到了最广泛的应用。  \n\n\n步骤：  \n1）构建高斯差分金字塔  \n通过减少采样来构成一组图像尺寸不同的图像金字塔，然后对这一组图像中的每一张图像使用具有不同方差$σ$的高斯卷积核构建出具有不同分辨率的图像金字塔（不同的尺度空间）,DoG就是这组具有不同分辨率的图像金字塔中相邻的两层之间的差值;  \n<img alt=\"DOG Pyramid\" src = \"OpenCV学习笔记三：特征检测和图像检索/DOG Pyramid.jpg\">\n\n2）定位关键点  \n首先在尺度空间和二维平面中检测局部最大值$(x，y，σ)$,这表示在$σ$尺度中点$(x，y)$可能是一个关键点。为了寻找DoG函数的极值点，每一个像素点要和它所有的相邻点比较，看其是否比它的图像域和尺度域的相邻点大或者小。如下图所示，中间的检测点和它同尺度的8个相邻点和上下相邻尺度对应的9×2个点共26个点比较，以确保在尺度空间和二维图像空间都检测到极值点。   \n<img alt=\"sift_local_extrema\" src=\"OpenCV学习笔记三：特征检测和图像检索/sift_local_extrema.jpg\">  \n以上方法检测到的极值点是离散空间的极值点，通过拟合三维二次函数来精确确定关键点的位置和尺度，同时去除低对比度的关键点和不稳定的边缘响应点(因为DoG算子会产生较强的边缘响应)，以增强匹配稳定性、提高抗噪声能力。\n\n3）关键点描述符  \n为了使描述符具有旋转不变性，需要利用图像的局部特征为给每一个关键点分配一个基准方向，使用图像梯度的方法求取局部结构的稳定方向。  \n选取关键点周围一个 16x16 的邻域，把它分成 16 个 4x4 的小方块，为每个小方块创建一个具有 8 个 bin 的方向直方图。总共加起来有 128 个 bin。由此组成长为 128 的向量就构成了关键点描述符。  \n\n缺点  \nSIFT在图像的不变特征提取方面拥有无与伦比的优势，但并不完美，对模糊的图像和边缘平滑的图像，检测出的特征点过少，对圆更是无能为力。\n1. 实时性不高；  \n2. 有时特征点较少；  \n3. 对边缘光滑的目标无法准确提取特征点。  \n\n参考资料  \n* SIFT算法详解 - zddhub的专栏 - CSDN博客  \nhttps://blog.csdn.net/zddblog/article/details/7521424\n\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/home.jpg', 1)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsift = cv2.xfeatures2d.SIFT_create()\nkp = sift.detect(gray,None)\n\n# img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))\nimg = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n\n```\n\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_9_0.png\">\n\n\n\n``` python\nkp, des = sift.detectAndCompute(gray,None)\n# print(\"kp:\", kp)\nprint(\"des' lenth:\", len(des[0]))\nprint(\"des:\", des)\n```\n\n    des' lenth: 64\n    des: [[ 1.1795463e-02 -1.3453829e-03  1.2853614e-02 ... -6.1970763e-03\n       1.0367702e-02  8.2569038e-03]\n     [-3.7488429e-04 -1.7145486e-03  1.5926192e-03 ...  9.5438212e-03\n       5.8124182e-03  1.0535392e-02]\n     [ 1.8987345e-04 -3.9035594e-04  3.5250295e-04 ... -6.1610942e-03\n       7.9580760e-03  6.6615609e-03]\n     ...\n     [-1.1354305e-02 -2.0890196e-03  1.3535642e-02 ...  5.5240576e-05\n       3.2335313e-03  5.6648249e-04]\n     [ 4.4308142e-03  6.1169025e-03  6.2500047e-03 ...  3.9724767e-04\n       6.5160347e-03  9.4564463e-04]\n     [-7.7680773e-03  2.0684338e-04  7.8980839e-03 ... -2.7418079e-02\n       8.1536770e-03  3.2845538e-02]]\n    \n\n\n``` python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/opencv-logo.png', 1)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsift = cv2.xfeatures2d.SIFT_create()\nkp = sift.detect(gray,None)\n\nimg = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_11_0.png\">\n\n### SURF(Speeded-Up Robust Features)\n\n2006年，Bay和Ess等人基于SIFT算法的思路，提出了加速鲁棒特征（SURF）,该算法主要针对于SIFT算法速度太慢，计算量大的缺点，使用了近似Harr小波方法来提取特征点，这种方法就是基于Hessian行列式（DoH）的斑点特征检测方法。通过在不同的尺度上利用积分图像可以有效地计算出近似Harr小波值，简化了二阶微分模板的构建，搞高了尺度空间的特征检测的效率。  \n\n\n``` python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/butterfly.jpg', 1)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsurf = cv2.xfeatures2d.SURF_create(40000)\nkp = surf.detect(gray, None)\n\n# img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))\nimg = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_13_0.png\">\n\n### BRIEF\n\nBinary Robust Independent Elementary Features，在特征点附近随机选取若干点对，将这些点对的灰度值的大小， \n组合成一个二进制串，并将这个二进制串作为该特征点的特征描述子（即BRIEF描述子中的每一位是由随机选取的两个像素点做二进制比较得来，BRIEF描述子的所有编码都是二进制数的）   \nBRIEF的优点在于速度，缺点也相当明显：   \n1：不具备旋转不变性    \n2：对噪声敏感   \n3：不具备尺度不变性   \n\nBRIEF 是一种特征描述符，它不提供查找特征的方法。所以我们不得不使用其他特征检测器，比如 SIFT 和 SURF 等。\n\n### ORB (Oriented FAST and Rotated BRIEF)\nORB特征是将FAST特征点的检测方法与BRIEF特征描述子结合起来，并在它们原来的基础上做了改进与优化。\n\nORB特征具有旋转不变性，同时对噪声及透视仿射也具有不变性\n\n``` python\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg=cv2.imread('./images/car.jpg',0)\n\norb=cv2.ORB_create()\n# kp=orb.detect(img,None)\n# kp,des=orb.compute(img,kp)\n\nkp,des=orb.detectAndCompute(img,None)\nimg2=cv2.drawKeypoints(img,kp,None,(0,255,0),flags=0)\nplt.imshow(img2)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_16_0.png\">\n\n``` python\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(12, 12))\n\nimg1 = cv2.imread('./images/manowar_logo.png', 0)\nimg2 = cv2.imread('./images/manowar_single.jpg', 0)\n\norb = cv2.ORB_create()\nkp1, des1 = orb.detectAndCompute(img1,None)\nkp2, des2 = orb.detectAndCompute(img2,None)\n\n# 暴力匹配BFMatcher\nbf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)\nmatches = bf.match(des1, des2)\nmatches = sorted(matches, key=lambda x: x.distance)\n\nimg3 = cv2.drawMatches(img1, kp1, img2, kp2, matches[:40], img2, flags=2)\nplt.imshow(img3)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_17_0.png\">\n\n``` python\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(12, 12))\n\ntrain=cv2.imread('./images/baboon200_rotated.jpg',0)\nquery=cv2.imread('./images/baboon.jpg',0)\n\nsift=cv2.xfeatures2d.SIFT_create()\nkp1,des1=sift.detectAndCompute(train,None)\nkp2,des2=sift.detectAndCompute(query,None)\n\n# find the keypoints and descriptors with SIFT\nkp1, des1 = sift.detectAndCompute(train,None)\nkp2, des2 = sift.detectAndCompute(query,None)\n\n# FLANN parameters\nFLANN_INDEX_KDTREE = 1\nindex_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)\nsearch_params = dict(checks=50) # or pass empty dictionary\n\nflann = cv2.FlannBasedMatcher(index_params,search_params)\n\nmatches = flann.knnMatch(des1,des2,k=2)\n\n# Need to draw only good matches, so create a mask\nmatchesMask = [[0,0] for i in range(len(matches))]\n\n# ratio test as per Lowe's paper\nfor i,(m,n) in enumerate(matches):\n\n    #如果第一个邻近距离比第二个邻近距离的0.7倍小，则保留\n    if m.distance < 0.7*n.distance:\n        matchesMask[i]=[1,0]\n\ndraw_params = dict(matchColor = (0,255,0),\n                   singlePointColor = (255,0,0),\n                   matchesMask = matchesMask,\n                   flags = 0)\n\nimg3 = cv2.drawMatchesKnn(train,kp1,query,kp2,matches,None,**draw_params)\nplt.imshow(img3)\nplt.show()\n\n```\n\n<img src = \"OpenCV学习笔记三：特征检测和图像检索/output_18_0.png\">\n","source":"_posts/OpenCV学习笔记三：特征检测和图像检索.md","raw":"---\ntitle: OpenCV学习笔记三：特征检测和图像检索\ndate: 2019-06-23 00:08:00\ntags:\n  - opencv\n---\n** {{ title }} ** <Excerpt in index | 首页摘要>\n## 特征检测算法\n\n* Harris     角点检测\n* Shi-Tomasi 角点检测\n* FAST       角点检测\n* SIFT       斑点（blob）检测\n* SURF       斑点检测\n* BRIEF      斑点检测\n* ORB (Oriented FAST and Rotated BRIEF)\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### Harris\n\n角点定义：如果某一点在任意方向的一个微小变动都会引起灰度很大的变化，那么这个点就称之为角点。  \nHarris角点检测的核心思想就是用一个局部窗口在图像上进行移动来判断灰度的变化，如果变化大于一个值那么就认为这个点是角点。  \n将窗口向各个方向移动$(u, v)$然后计算所有差异的总和。表达式如下 \n\n$$\nE(u, v)= \\underbrace{w(x, y)}_{\\text { window function }}[\\underbrace{I(x+u, y+v)}_{\\text { shifted intensity }}-\\underbrace{I(x, y)}_{\\text { intensity }}]^{2}\n$$\n\n窗口函数$w(x,y)$可以是正常的矩形窗口也可以是对每一个像素给予不同权重的高斯窗口。  角点检测中要使 $E(u,v)$ 的值最大。  \n使用泰勒展开和二次型，$E(u,v)$可以近似于  \n$$E(u,v) \\approx \\left[ \\begin{matrix}u\\,v\n\\end{matrix}\\right]  M \\left[ \\begin{matrix}\n    u \\\\\n    v \\\\ \n\\end{matrix}\\right]$$\n其中 \n$$M = \\sum_{x, y} w(x, y)\\left[ \\begin{matrix}\n    I_xI_x\\quad I_xI_y \\\\\n    I_xI_y\\quad I_yI_y \\\\ \n\\end{matrix}\\right] $$\n\n这里 $I_x$ 和 $I_y$ 是图像在 $x$ 和 $y$ 方向的导数,可以使用函数 cv2.Sobel()\n计算得到。  \n根据下式中的$R$值判定窗口内是否包含角点\n$$R=det(M)- \\alpha (trace(M))^2 $$\n其中$\\lambda_1$ 和 $\\lambda_2$ 是矩阵 $M$ 的特征值，$\\alpha$是一个经验常数，取值为$[0.04, 0.06]$。  \n根据R值可以判断一个区域是否是角点，边界或者是平面。  \n* 当 $\\lambda_1$ 和 $\\lambda_2$ 都小时，$|R|$ 也小，对应图像中的平滑区域；\n* 当 $\\lambda_1 \\gg \\lambda_2$ 或者 $\\lambda_1 \\ll \\lambda_2$ 时， $R$ 小于0，对应图像中的边缘；\n* 当 $\\lambda_1$ 和 $\\lambda_2$ 都很大时，$R$ 也很大，对应图像中的角点。\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\n\n%matplotlib inline\n\nimg = cv2.imread('./images/chess_board.png')\nimg_copy = np.copy(img)\nimg_copy = cv2.cvtColor(img_copy, cv2.COLOR_BGR2RGB)\nplt.figure(figsize=(10,10))\n\nplt.subplot(221)\nplt.imshow(img)\nplt.subplot(222)\nplt.imshow(img_copy)\n\nimg_gray = cv2.cvtColor(img_copy, cv2.COLOR_BGR2GRAY)\nimg_gray = np.float32(img_gray)\n# 检测角点，定义串口大小为2，梯度计算的索贝尔核函数大小为3，alpha设置为0.04\nimg_dst = cv2.cornerHarris(img_gray, 2, 3, 0.04)\n# 对图像做膨胀处理，加强角点\nimg_dst = cv2.dilate(img_dst, None)\nplt.subplot(223)\nplt.imshow(img_dst)\n\n# 定义阈值，用于与R相比较\nthresh = 0.7 * img_dst.max()\nimg_corner = np.copy(img)\n# 遍历每一个像素，如果大于阈值，则认为为角点并画在图上\nfor j in range(img_dst.shape[0]):\n    for i in range(img_dst.shape[1]):\n        if img_dst[j, i] > thresh:\n            cv2.circle(img_corner, (i, j), 25, (255,0,0), 1)\nplt.subplot(224)\nplt.imshow(img_corner)\nplt.subplots_adjust(bottom=.01, top=.99, left=.01, right=.99)\n```\n\n<img src='OpenCV学习笔记三：特征检测和图像检索/output_2_0.png' >\n\n\n```python\n%time\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\n# filename = './images/blox.jpg'\nfilename = './images/chessboard.png'\nimg = cv2.imread(filename)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\ngray = np.float32(gray)\nimg_dst = cv2.cornerHarris(gray, 2, 3, 0.05)\n\n# result is dilated for marking the corners, not important\nimg_dst = cv2.dilate(img_dst, None)\n\n# Threshold for an optimal value, it may vary depending on the image.\n# img[dst>0.07*dst.max()]=[0,0,255]\nthresh = 0.2 * img_dst.max()\n\n# 遍历每一个像素，如果大于阈值，则认为为角点并画在图上\nfor j in range(img_dst.shape[0]):\n    for i in range(img_dst.shape[1]):\n        if img_dst[j, i] > thresh:\n            cv2.circle(img, (i, j), 25, (255,0,0), 1)\n\nimg_show = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img_show)\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_3_2.png\">\n\n\n### Shi-Tomasi \nHarris角点的打分公式为\n$$R=det(M)- \\alpha (trace(M))^2 $$\nShi-Tomasi 使用的打分公式为\n$$R=min(\\lambda_1, \\lambda_2)$$\n如果打分超过阈值，我们就认为它是一个角点。\n\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/blox.jpg')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\ncorners = cv2.goodFeaturesToTrack(gray, 50, 0.01, 10)\n# N个最佳角点 = cv2.goodFeaturesToTrack(灰度图, 数量N, 角点质量, 两个角点见最小欧式距离)\ncorners = np.int0(corners)\n\nfor i in corners:\n    x,y = i.ravel()\n    cv2.circle(img, (x,y), 3, 255, -1)\n\nplt.imshow(img)\nplt.show()\n```\n\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_5_0.png\">\n\n\n### FAST\nFAST 算法比其它角点检测算法都快。但是在噪声很高时不够稳定，这是由阈值决定的。  \n原理：FAST特征检测算法来源于corner的定义，这个定义基于特征点周围的图像灰度值，检测候选特征点周围一圈的像素值，如果候选点周围领域内有足够多的像素点与该候选点的灰度值差别够大，则认为该候选点为一个特征点。\n$$N = \\sum_{x\\, \\forall \\, circles(p)}|I(x)-I(p)|>\\epsilon_d $$\n步骤：  \n1）在图像中任选一点$p$,假定其像素（亮度）值为$I_p$;  \n2）以$r$为半径画圆，覆盖$p$点周围的$M$个像素,如下图所示: $r=3， M=16$;  \n<img alt=\"FAST\" src=\"OpenCV学习笔记三：特征检测和图像检索/FAST_samples.png\">\n3）设定阈值$t$，如果这周围的16个像素中有连续的$N$个像素的像素值减去$I_p$大于$t$,或者有连续的$N$个像素都大于$I_p+t$,则认为$p$为角点。\n如果$t=0$，那么就可以理解为：有连续N个像素大于或小于$I_p$的灰度值。那么这个点就被判断为角点。  \n\n为了获得更快的结果，还采用了额外的加速办法。  \n如果测试了候选点周围每隔90度角的4个点，应该至少有3个和候选点的灰度值差足够大，否则则不用再计算其他点，直接认为该候选点不是特征点。  \n候选点周围的圆的选取半径是一个很重要的参数，这里为了简单高效，采用半径为3，共有16个周边像素需要比较。为了提高比较的效率，通常只使用N个周边像素来比较，也就是大家经常说的FAST-N，使用比较多的是FAST-9和FAST-12。  \n这个检测器的效率很高，但是它有如下几条缺点：\n* 当 n<12 时它不会丢弃很多候选点 (获得的候选点比较多)。  \n* 像素的选取不是最优的，因为它的效果取决与要解决的问题和角点的分布情况。  \n* 高速测试的结果被抛弃。  \n* 检测到的很多特征点都是连在一起的。  \n前3个问题可以通过机器学习的方法解决，第4问题可以使用非最大值抑制的方法解决。\n\n#### 机器学习的角点检测器\n1. 选择一组训练图片（最好是跟最后应用相关的图片）使用FAST算法找出每幅图像的特征点；\n2. 对每一个特征点，将其周围的 16 个像素存储构成一个向量，对所有图像都这样做构建一个特征向量$P$;\n3. 每一个特征点的16像素点都属于下列三类中的一种\n$$S_{p\\to x}= \\begin{cases}\nd,& \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;I_{p\\to x}\\le I_p - t &(darker)\\\\ \ns,& I_p-t < I_{p\\to x} <  I_p + t  &(similar)\\\\\nb,&I_p+t \\le I_{p\\to x}  &(brighter)\n\\end{cases}\n$$\n根据这些像素点的分类，特征向量$P$也被分为3个子集：$P_d$，$P_s$，$P_b$\n4. 定义一个新的布尔变量$K_p$ ，如果$p$是角点就设置为 Ture，如果不是就设置为 False。\n5. 使用ID3算法（决策树分类器）来查询每一个子集，递归计算所有子集直到熵为0；\n6. 将构建好的决策树运用于其他图像的快速的检测。\n\n\n#### 非极大值抑制\n很可能大部分检测出来的点彼此之间相邻，我们要去除一部分这样的点。为了解决这一问题，可以采用非最大值抑制的算法：  \n假设P，Q两个点相邻，分别计算两个点与其周围的16个像素点之间的差分和为V，去除V值较小的点，即把非最大的角点抑制掉。\n\n\n\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/blox.jpg',0)\n\nfast = cv2.FastFeatureDetector_create(threshold=20, nonmaxSuppression=True, type=cv2.FAST_FEATURE_DETECTOR_TYPE_9_16)#获取FAST角点探测器\nkp = fast.detect(img,None)#描述符\nimg = cv2.drawKeypoints(img, kp, img, color=(255,0,0))#画到img上面\n\nprint (\"Threshold: \", fast.getThreshold())#输出阈值\nprint (\"nonmaxSuppression: \", fast.getNonmaxSuppression())#是否使用非极大值抑制\nprint (\"Total Keypoints with nonmaxSuppression: \", len(kp))#特征点个数\n\n# cv2.imshow('sp',img)\n# cv2.waitKey(0)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n\n```\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_7_1.png\">\n\n\n### SIFT\n角点检测具有旋转不变特性，即即使图片发生了旋转，算法也能找到同样的角点。  \n但是如果对图像进行缩放，角点可能就不再是角点了。  \n尺度不变特征变换（SIFT），利用原始图像与高斯核的卷积来建立尺度空间，并在高斯差分空间金字塔上提取出尺度不变性的特征点。  \n该算法具有一定的仿射不变性，视角不变性，旋转不变性和光照不变性，所以在图像特征提高方面得到了最广泛的应用。  \n\n\n步骤：  \n1）构建高斯差分金字塔  \n通过减少采样来构成一组图像尺寸不同的图像金字塔，然后对这一组图像中的每一张图像使用具有不同方差$σ$的高斯卷积核构建出具有不同分辨率的图像金字塔（不同的尺度空间）,DoG就是这组具有不同分辨率的图像金字塔中相邻的两层之间的差值;  \n<img alt=\"DOG Pyramid\" src = \"OpenCV学习笔记三：特征检测和图像检索/DOG Pyramid.jpg\">\n\n2）定位关键点  \n首先在尺度空间和二维平面中检测局部最大值$(x，y，σ)$,这表示在$σ$尺度中点$(x，y)$可能是一个关键点。为了寻找DoG函数的极值点，每一个像素点要和它所有的相邻点比较，看其是否比它的图像域和尺度域的相邻点大或者小。如下图所示，中间的检测点和它同尺度的8个相邻点和上下相邻尺度对应的9×2个点共26个点比较，以确保在尺度空间和二维图像空间都检测到极值点。   \n<img alt=\"sift_local_extrema\" src=\"OpenCV学习笔记三：特征检测和图像检索/sift_local_extrema.jpg\">  \n以上方法检测到的极值点是离散空间的极值点，通过拟合三维二次函数来精确确定关键点的位置和尺度，同时去除低对比度的关键点和不稳定的边缘响应点(因为DoG算子会产生较强的边缘响应)，以增强匹配稳定性、提高抗噪声能力。\n\n3）关键点描述符  \n为了使描述符具有旋转不变性，需要利用图像的局部特征为给每一个关键点分配一个基准方向，使用图像梯度的方法求取局部结构的稳定方向。  \n选取关键点周围一个 16x16 的邻域，把它分成 16 个 4x4 的小方块，为每个小方块创建一个具有 8 个 bin 的方向直方图。总共加起来有 128 个 bin。由此组成长为 128 的向量就构成了关键点描述符。  \n\n缺点  \nSIFT在图像的不变特征提取方面拥有无与伦比的优势，但并不完美，对模糊的图像和边缘平滑的图像，检测出的特征点过少，对圆更是无能为力。\n1. 实时性不高；  \n2. 有时特征点较少；  \n3. 对边缘光滑的目标无法准确提取特征点。  \n\n参考资料  \n* SIFT算法详解 - zddhub的专栏 - CSDN博客  \nhttps://blog.csdn.net/zddblog/article/details/7521424\n\n\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/home.jpg', 1)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsift = cv2.xfeatures2d.SIFT_create()\nkp = sift.detect(gray,None)\n\n# img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))\nimg = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n\n```\n\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_9_0.png\">\n\n\n\n``` python\nkp, des = sift.detectAndCompute(gray,None)\n# print(\"kp:\", kp)\nprint(\"des' lenth:\", len(des[0]))\nprint(\"des:\", des)\n```\n\n    des' lenth: 64\n    des: [[ 1.1795463e-02 -1.3453829e-03  1.2853614e-02 ... -6.1970763e-03\n       1.0367702e-02  8.2569038e-03]\n     [-3.7488429e-04 -1.7145486e-03  1.5926192e-03 ...  9.5438212e-03\n       5.8124182e-03  1.0535392e-02]\n     [ 1.8987345e-04 -3.9035594e-04  3.5250295e-04 ... -6.1610942e-03\n       7.9580760e-03  6.6615609e-03]\n     ...\n     [-1.1354305e-02 -2.0890196e-03  1.3535642e-02 ...  5.5240576e-05\n       3.2335313e-03  5.6648249e-04]\n     [ 4.4308142e-03  6.1169025e-03  6.2500047e-03 ...  3.9724767e-04\n       6.5160347e-03  9.4564463e-04]\n     [-7.7680773e-03  2.0684338e-04  7.8980839e-03 ... -2.7418079e-02\n       8.1536770e-03  3.2845538e-02]]\n    \n\n\n``` python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/opencv-logo.png', 1)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsift = cv2.xfeatures2d.SIFT_create()\nkp = sift.detect(gray,None)\n\nimg = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_11_0.png\">\n\n### SURF(Speeded-Up Robust Features)\n\n2006年，Bay和Ess等人基于SIFT算法的思路，提出了加速鲁棒特征（SURF）,该算法主要针对于SIFT算法速度太慢，计算量大的缺点，使用了近似Harr小波方法来提取特征点，这种方法就是基于Hessian行列式（DoH）的斑点特征检测方法。通过在不同的尺度上利用积分图像可以有效地计算出近似Harr小波值，简化了二阶微分模板的构建，搞高了尺度空间的特征检测的效率。  \n\n\n``` python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg = cv2.imread('./images/butterfly.jpg', 1)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsurf = cv2.xfeatures2d.SURF_create(40000)\nkp = surf.detect(gray, None)\n\n# img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))\nimg = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_13_0.png\">\n\n### BRIEF\n\nBinary Robust Independent Elementary Features，在特征点附近随机选取若干点对，将这些点对的灰度值的大小， \n组合成一个二进制串，并将这个二进制串作为该特征点的特征描述子（即BRIEF描述子中的每一位是由随机选取的两个像素点做二进制比较得来，BRIEF描述子的所有编码都是二进制数的）   \nBRIEF的优点在于速度，缺点也相当明显：   \n1：不具备旋转不变性    \n2：对噪声敏感   \n3：不具备尺度不变性   \n\nBRIEF 是一种特征描述符，它不提供查找特征的方法。所以我们不得不使用其他特征检测器，比如 SIFT 和 SURF 等。\n\n### ORB (Oriented FAST and Rotated BRIEF)\nORB特征是将FAST特征点的检测方法与BRIEF特征描述子结合起来，并在它们原来的基础上做了改进与优化。\n\nORB特征具有旋转不变性，同时对噪声及透视仿射也具有不变性\n\n``` python\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(8, 8))\n\nimg=cv2.imread('./images/car.jpg',0)\n\norb=cv2.ORB_create()\n# kp=orb.detect(img,None)\n# kp,des=orb.compute(img,kp)\n\nkp,des=orb.detectAndCompute(img,None)\nimg2=cv2.drawKeypoints(img,kp,None,(0,255,0),flags=0)\nplt.imshow(img2)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_16_0.png\">\n\n``` python\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(12, 12))\n\nimg1 = cv2.imread('./images/manowar_logo.png', 0)\nimg2 = cv2.imread('./images/manowar_single.jpg', 0)\n\norb = cv2.ORB_create()\nkp1, des1 = orb.detectAndCompute(img1,None)\nkp2, des2 = orb.detectAndCompute(img2,None)\n\n# 暴力匹配BFMatcher\nbf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)\nmatches = bf.match(des1, des2)\nmatches = sorted(matches, key=lambda x: x.distance)\n\nimg3 = cv2.drawMatches(img1, kp1, img2, kp2, matches[:40], img2, flags=2)\nplt.imshow(img3)\nplt.show()\n```\n\n<img src=\"OpenCV学习笔记三：特征检测和图像检索/output_17_0.png\">\n\n``` python\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nplt.figure(figsize=(12, 12))\n\ntrain=cv2.imread('./images/baboon200_rotated.jpg',0)\nquery=cv2.imread('./images/baboon.jpg',0)\n\nsift=cv2.xfeatures2d.SIFT_create()\nkp1,des1=sift.detectAndCompute(train,None)\nkp2,des2=sift.detectAndCompute(query,None)\n\n# find the keypoints and descriptors with SIFT\nkp1, des1 = sift.detectAndCompute(train,None)\nkp2, des2 = sift.detectAndCompute(query,None)\n\n# FLANN parameters\nFLANN_INDEX_KDTREE = 1\nindex_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)\nsearch_params = dict(checks=50) # or pass empty dictionary\n\nflann = cv2.FlannBasedMatcher(index_params,search_params)\n\nmatches = flann.knnMatch(des1,des2,k=2)\n\n# Need to draw only good matches, so create a mask\nmatchesMask = [[0,0] for i in range(len(matches))]\n\n# ratio test as per Lowe's paper\nfor i,(m,n) in enumerate(matches):\n\n    #如果第一个邻近距离比第二个邻近距离的0.7倍小，则保留\n    if m.distance < 0.7*n.distance:\n        matchesMask[i]=[1,0]\n\ndraw_params = dict(matchColor = (0,255,0),\n                   singlePointColor = (255,0,0),\n                   matchesMask = matchesMask,\n                   flags = 0)\n\nimg3 = cv2.drawMatchesKnn(train,kp1,query,kp2,matches,None,**draw_params)\nplt.imshow(img3)\nplt.show()\n\n```\n\n<img src = \"OpenCV学习笔记三：特征检测和图像检索/output_18_0.png\">\n","slug":"OpenCV学习笔记三：特征检测和图像检索","published":1,"updated":"2020-01-05T19:13:24.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50bw006q4cvjbfuitlv4","content":"<p><strong> OpenCV学习笔记三：特征检测和图像检索 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"特征检测算法\"><a href=\"#特征检测算法\" class=\"headerlink\" title=\"特征检测算法\"></a>特征检测算法</h2><ul>\n<li>Harris     角点检测</li>\n<li>Shi-Tomasi 角点检测</li>\n<li>FAST       角点检测</li>\n<li>SIFT       斑点（blob）检测</li>\n<li>SURF       斑点检测</li>\n<li>BRIEF      斑点检测</li>\n<li>ORB (Oriented FAST and Rotated BRIEF)</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h3 id=\"Harris\"><a href=\"#Harris\" class=\"headerlink\" title=\"Harris\"></a>Harris</h3><p>角点定义：如果某一点在任意方向的一个微小变动都会引起灰度很大的变化，那么这个点就称之为角点。<br>Harris角点检测的核心思想就是用一个局部窗口在图像上进行移动来判断灰度的变化，如果变化大于一个值那么就认为这个点是角点。<br>将窗口向各个方向移动$(u, v)$然后计算所有差异的总和。表达式如下 </p>\n<script type=\"math/tex; mode=display\">\nE(u, v)= \\underbrace{w(x, y)}_{\\text { window function }}[\\underbrace{I(x+u, y+v)}_{\\text { shifted intensity }}-\\underbrace{I(x, y)}_{\\text { intensity }}]^{2}</script><p>窗口函数$w(x,y)$可以是正常的矩形窗口也可以是对每一个像素给予不同权重的高斯窗口。  角点检测中要使 $E(u,v)$ 的值最大。<br>使用泰勒展开和二次型，$E(u,v)$可以近似于  </p>\n<script type=\"math/tex; mode=display\">E(u,v) \\approx \\left[ \\begin{matrix}u\\,v\n\\end{matrix}\\right]  M \\left[ \\begin{matrix}\n    u \\\\\n    v \\\\ \n\\end{matrix}\\right]</script><p>其中 </p>\n<script type=\"math/tex; mode=display\">M = \\sum_{x, y} w(x, y)\\left[ \\begin{matrix}\n    I_xI_x\\quad I_xI_y \\\\\n    I_xI_y\\quad I_yI_y \\\\ \n\\end{matrix}\\right]</script><p>这里 $I_x$ 和 $I_y$ 是图像在 $x$ 和 $y$ 方向的导数,可以使用函数 cv2.Sobel()<br>计算得到。<br>根据下式中的$R$值判定窗口内是否包含角点</p>\n<script type=\"math/tex; mode=display\">R=det(M)- \\alpha (trace(M))^2</script><p>其中$\\lambda_1$ 和 $\\lambda_2$ 是矩阵 $M$ 的特征值，$\\alpha$是一个经验常数，取值为$[0.04, 0.06]$。<br>根据R值可以判断一个区域是否是角点，边界或者是平面。  </p>\n<ul>\n<li>当 $\\lambda_1$ 和 $\\lambda_2$ 都小时，$|R|$ 也小，对应图像中的平滑区域；</li>\n<li>当 $\\lambda_1 \\gg \\lambda_2$ 或者 $\\lambda_1 \\ll \\lambda_2$ 时， $R$ 小于0，对应图像中的边缘；</li>\n<li>当 $\\lambda_1$ 和 $\\lambda_2$ 都很大时，$R$ 也很大，对应图像中的角点。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/chess_board.png'</span>)</span><br><span class=\"line\">img_copy = np.copy(img)</span><br><span class=\"line\">img_copy = cv2.cvtColor(img_copy, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">221</span>)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">222</span>)</span><br><span class=\"line\">plt.imshow(img_copy)</span><br><span class=\"line\"></span><br><span class=\"line\">img_gray = cv2.cvtColor(img_copy, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">img_gray = np.float32(img_gray)</span><br><span class=\"line\"><span class=\"comment\"># 检测角点，定义串口大小为2，梯度计算的索贝尔核函数大小为3，alpha设置为0.04</span></span><br><span class=\"line\">img_dst = cv2.cornerHarris(img_gray, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0.04</span>)</span><br><span class=\"line\"><span class=\"comment\"># 对图像做膨胀处理，加强角点</span></span><br><span class=\"line\">img_dst = cv2.dilate(img_dst, <span class=\"literal\">None</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">223</span>)</span><br><span class=\"line\">plt.imshow(img_dst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义阈值，用于与R相比较</span></span><br><span class=\"line\">thresh = <span class=\"number\">0.7</span> * img_dst.max()</span><br><span class=\"line\">img_corner = np.copy(img)</span><br><span class=\"line\"><span class=\"comment\"># 遍历每一个像素，如果大于阈值，则认为为角点并画在图上</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_dst[j, i] &gt; thresh:</span><br><span class=\"line\">            cv2.circle(img_corner, (i, j), <span class=\"number\">25</span>, (<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">224</span>)</span><br><span class=\"line\">plt.imshow(img_corner)</span><br><span class=\"line\">plt.subplots_adjust(bottom=<span class=\"number\">.01</span>, top=<span class=\"number\">.99</span>, left=<span class=\"number\">.01</span>, right=<span class=\"number\">.99</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_2_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%time</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># filename = './images/blox.jpg'</span></span><br><span class=\"line\">filename = <span class=\"string\">'./images/chessboard.png'</span></span><br><span class=\"line\">img = cv2.imread(filename)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">gray = np.float32(gray)</span><br><span class=\"line\">img_dst = cv2.cornerHarris(gray, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result is dilated for marking the corners, not important</span></span><br><span class=\"line\">img_dst = cv2.dilate(img_dst, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Threshold for an optimal value, it may vary depending on the image.</span></span><br><span class=\"line\"><span class=\"comment\"># img[dst&gt;0.07*dst.max()]=[0,0,255]</span></span><br><span class=\"line\">thresh = <span class=\"number\">0.2</span> * img_dst.max()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历每一个像素，如果大于阈值，则认为为角点并画在图上</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_dst[j, i] &gt; thresh:</span><br><span class=\"line\">            cv2.circle(img, (i, j), <span class=\"number\">25</span>, (<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">img_show = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img_show)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_3_2.png\"></p>\n<h3 id=\"Shi-Tomasi\"><a href=\"#Shi-Tomasi\" class=\"headerlink\" title=\"Shi-Tomasi\"></a>Shi-Tomasi</h3><p>Harris角点的打分公式为</p>\n<script type=\"math/tex; mode=display\">R=det(M)- \\alpha (trace(M))^2</script><p>Shi-Tomasi 使用的打分公式为</p>\n<script type=\"math/tex; mode=display\">R=min(\\lambda_1, \\lambda_2)</script><p>如果打分超过阈值，我们就认为它是一个角点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/blox.jpg'</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">corners = cv2.goodFeaturesToTrack(gray, <span class=\"number\">50</span>, <span class=\"number\">0.01</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># N个最佳角点 = cv2.goodFeaturesToTrack(灰度图, 数量N, 角点质量, 两个角点见最小欧式距离)</span></span><br><span class=\"line\">corners = np.int0(corners)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> corners:</span><br><span class=\"line\">    x,y = i.ravel()</span><br><span class=\"line\">    cv2.circle(img, (x,y), <span class=\"number\">3</span>, <span class=\"number\">255</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_5_0.png\"></p>\n<h3 id=\"FAST\"><a href=\"#FAST\" class=\"headerlink\" title=\"FAST\"></a>FAST</h3><p>FAST 算法比其它角点检测算法都快。但是在噪声很高时不够稳定，这是由阈值决定的。<br>原理：FAST特征检测算法来源于corner的定义，这个定义基于特征点周围的图像灰度值，检测候选特征点周围一圈的像素值，如果候选点周围领域内有足够多的像素点与该候选点的灰度值差别够大，则认为该候选点为一个特征点。</p>\n<script type=\"math/tex; mode=display\">N = \\sum_{x\\, \\forall \\, circles(p)}|I(x)-I(p)|>\\epsilon_d</script><p>步骤：<br>1）在图像中任选一点$p$,假定其像素（亮度）值为$I_p$;<br>2）以$r$为半径画圆，覆盖$p$点周围的$M$个像素,如下图所示: $r=3， M=16$;<br><img alt=\"FAST\" src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/FAST_samples.png\"><br>3）设定阈值$t$，如果这周围的16个像素中有连续的$N$个像素的像素值减去$I_p$大于$t$,或者有连续的$N$个像素都大于$I_p+t$,则认为$p$为角点。<br>如果$t=0$，那么就可以理解为：有连续N个像素大于或小于$I_p$的灰度值。那么这个点就被判断为角点。  </p>\n<p>为了获得更快的结果，还采用了额外的加速办法。<br>如果测试了候选点周围每隔90度角的4个点，应该至少有3个和候选点的灰度值差足够大，否则则不用再计算其他点，直接认为该候选点不是特征点。<br>候选点周围的圆的选取半径是一个很重要的参数，这里为了简单高效，采用半径为3，共有16个周边像素需要比较。为了提高比较的效率，通常只使用N个周边像素来比较，也就是大家经常说的FAST-N，使用比较多的是FAST-9和FAST-12。<br>这个检测器的效率很高，但是它有如下几条缺点：</p>\n<ul>\n<li>当 n&lt;12 时它不会丢弃很多候选点 (获得的候选点比较多)。  </li>\n<li>像素的选取不是最优的，因为它的效果取决与要解决的问题和角点的分布情况。  </li>\n<li>高速测试的结果被抛弃。  </li>\n<li>检测到的很多特征点都是连在一起的。<br>前3个问题可以通过机器学习的方法解决，第4问题可以使用非最大值抑制的方法解决。</li>\n</ul>\n<h4 id=\"机器学习的角点检测器\"><a href=\"#机器学习的角点检测器\" class=\"headerlink\" title=\"机器学习的角点检测器\"></a>机器学习的角点检测器</h4><ol>\n<li>选择一组训练图片（最好是跟最后应用相关的图片）使用FAST算法找出每幅图像的特征点；</li>\n<li>对每一个特征点，将其周围的 16 个像素存储构成一个向量，对所有图像都这样做构建一个特征向量$P$;</li>\n<li>每一个特征点的16像素点都属于下列三类中的一种<script type=\"math/tex; mode=display\">S_{p\\to x}= \\begin{cases}\nd,& \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;I_{p\\to x}\\le I_p - t &(darker)\\\\ \ns,& I_p-t < I_{p\\to x} <  I_p + t  &(similar)\\\\\nb,&I_p+t \\le I_{p\\to x}  &(brighter)\n\\end{cases}</script>根据这些像素点的分类，特征向量$P$也被分为3个子集：$P_d$，$P_s$，$P_b$</li>\n<li>定义一个新的布尔变量$K_p$ ，如果$p$是角点就设置为 Ture，如果不是就设置为 False。</li>\n<li>使用ID3算法（决策树分类器）来查询每一个子集，递归计算所有子集直到熵为0；</li>\n<li>将构建好的决策树运用于其他图像的快速的检测。</li>\n</ol>\n<h4 id=\"非极大值抑制\"><a href=\"#非极大值抑制\" class=\"headerlink\" title=\"非极大值抑制\"></a>非极大值抑制</h4><p>很可能大部分检测出来的点彼此之间相邻，我们要去除一部分这样的点。为了解决这一问题，可以采用非最大值抑制的算法：<br>假设P，Q两个点相邻，分别计算两个点与其周围的16个像素点之间的差分和为V，去除V值较小的点，即把非最大的角点抑制掉。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/blox.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fast = cv2.FastFeatureDetector_create(threshold=<span class=\"number\">20</span>, nonmaxSuppression=<span class=\"literal\">True</span>, type=cv2.FAST_FEATURE_DETECTOR_TYPE_9_16)<span class=\"comment\">#获取FAST角点探测器</span></span><br><span class=\"line\">kp = fast.detect(img,<span class=\"literal\">None</span>)<span class=\"comment\">#描述符</span></span><br><span class=\"line\">img = cv2.drawKeypoints(img, kp, img, color=(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>))<span class=\"comment\">#画到img上面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Threshold: \"</span>, fast.getThreshold())<span class=\"comment\">#输出阈值</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"nonmaxSuppression: \"</span>, fast.getNonmaxSuppression())<span class=\"comment\">#是否使用非极大值抑制</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Total Keypoints with nonmaxSuppression: \"</span>, len(kp))<span class=\"comment\">#特征点个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cv2.imshow('sp',img)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.waitKey(0)</span></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_7_1.png\"></p>\n<h3 id=\"SIFT\"><a href=\"#SIFT\" class=\"headerlink\" title=\"SIFT\"></a>SIFT</h3><p>角点检测具有旋转不变特性，即即使图片发生了旋转，算法也能找到同样的角点。<br>但是如果对图像进行缩放，角点可能就不再是角点了。<br>尺度不变特征变换（SIFT），利用原始图像与高斯核的卷积来建立尺度空间，并在高斯差分空间金字塔上提取出尺度不变性的特征点。<br>该算法具有一定的仿射不变性，视角不变性，旋转不变性和光照不变性，所以在图像特征提高方面得到了最广泛的应用。  </p>\n<p>步骤：<br>1）构建高斯差分金字塔<br>通过减少采样来构成一组图像尺寸不同的图像金字塔，然后对这一组图像中的每一张图像使用具有不同方差$σ$的高斯卷积核构建出具有不同分辨率的图像金字塔（不同的尺度空间）,DoG就是这组具有不同分辨率的图像金字塔中相邻的两层之间的差值;<br><img alt=\"DOG Pyramid\" src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/DOG Pyramid.jpg\"></p>\n<p>2）定位关键点<br>首先在尺度空间和二维平面中检测局部最大值$(x，y，σ)$,这表示在$σ$尺度中点$(x，y)$可能是一个关键点。为了寻找DoG函数的极值点，每一个像素点要和它所有的相邻点比较，看其是否比它的图像域和尺度域的相邻点大或者小。如下图所示，中间的检测点和它同尺度的8个相邻点和上下相邻尺度对应的9×2个点共26个点比较，以确保在尺度空间和二维图像空间都检测到极值点。<br><img alt=\"sift_local_extrema\" src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/sift_local_extrema.jpg\"><br>以上方法检测到的极值点是离散空间的极值点，通过拟合三维二次函数来精确确定关键点的位置和尺度，同时去除低对比度的关键点和不稳定的边缘响应点(因为DoG算子会产生较强的边缘响应)，以增强匹配稳定性、提高抗噪声能力。</p>\n<p>3）关键点描述符<br>为了使描述符具有旋转不变性，需要利用图像的局部特征为给每一个关键点分配一个基准方向，使用图像梯度的方法求取局部结构的稳定方向。<br>选取关键点周围一个 16x16 的邻域，把它分成 16 个 4x4 的小方块，为每个小方块创建一个具有 8 个 bin 的方向直方图。总共加起来有 128 个 bin。由此组成长为 128 的向量就构成了关键点描述符。  </p>\n<p>缺点<br>SIFT在图像的不变特征提取方面拥有无与伦比的优势，但并不完美，对模糊的图像和边缘平滑的图像，检测出的特征点过少，对圆更是无能为力。</p>\n<ol>\n<li>实时性不高；  </li>\n<li>有时特征点较少；  </li>\n<li>对边缘光滑的目标无法准确提取特征点。  </li>\n</ol>\n<p>参考资料  </p>\n<ul>\n<li>SIFT算法详解 - zddhub的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/zddblog/article/details/7521424\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zddblog/article/details/7521424</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/home.jpg'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">sift = cv2.xfeatures2d.SIFT_create()</span><br><span class=\"line\">kp = sift.detect(gray,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))</span></span><br><span class=\"line\">img = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_9_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kp, des = sift.detectAndCompute(gray,<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># print(\"kp:\", kp)</span></span><br><span class=\"line\">print(<span class=\"string\">\"des' lenth:\"</span>, len(des[<span class=\"number\">0</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"des:\"</span>, des)</span><br></pre></td></tr></table></figure>\n<pre><code>des&#39; lenth: 64\ndes: [[ 1.1795463e-02 -1.3453829e-03  1.2853614e-02 ... -6.1970763e-03\n   1.0367702e-02  8.2569038e-03]\n [-3.7488429e-04 -1.7145486e-03  1.5926192e-03 ...  9.5438212e-03\n   5.8124182e-03  1.0535392e-02]\n [ 1.8987345e-04 -3.9035594e-04  3.5250295e-04 ... -6.1610942e-03\n   7.9580760e-03  6.6615609e-03]\n ...\n [-1.1354305e-02 -2.0890196e-03  1.3535642e-02 ...  5.5240576e-05\n   3.2335313e-03  5.6648249e-04]\n [ 4.4308142e-03  6.1169025e-03  6.2500047e-03 ...  3.9724767e-04\n   6.5160347e-03  9.4564463e-04]\n [-7.7680773e-03  2.0684338e-04  7.8980839e-03 ... -2.7418079e-02\n   8.1536770e-03  3.2845538e-02]]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">sift = cv2.xfeatures2d.SIFT_create()</span><br><span class=\"line\">kp = sift.detect(gray,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_11_0.png\"></p>\n<h3 id=\"SURF-Speeded-Up-Robust-Features\"><a href=\"#SURF-Speeded-Up-Robust-Features\" class=\"headerlink\" title=\"SURF(Speeded-Up Robust Features)\"></a>SURF(Speeded-Up Robust Features)</h3><p>2006年，Bay和Ess等人基于SIFT算法的思路，提出了加速鲁棒特征（SURF）,该算法主要针对于SIFT算法速度太慢，计算量大的缺点，使用了近似Harr小波方法来提取特征点，这种方法就是基于Hessian行列式（DoH）的斑点特征检测方法。通过在不同的尺度上利用积分图像可以有效地计算出近似Harr小波值，简化了二阶微分模板的构建，搞高了尺度空间的特征检测的效率。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/butterfly.jpg'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">surf = cv2.xfeatures2d.SURF_create(<span class=\"number\">40000</span>)</span><br><span class=\"line\">kp = surf.detect(gray, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))</span></span><br><span class=\"line\">img = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_13_0.png\"></p>\n<h3 id=\"BRIEF\"><a href=\"#BRIEF\" class=\"headerlink\" title=\"BRIEF\"></a>BRIEF</h3><p>Binary Robust Independent Elementary Features，在特征点附近随机选取若干点对，将这些点对的灰度值的大小，<br>组合成一个二进制串，并将这个二进制串作为该特征点的特征描述子（即BRIEF描述子中的每一位是由随机选取的两个像素点做二进制比较得来，BRIEF描述子的所有编码都是二进制数的）<br>BRIEF的优点在于速度，缺点也相当明显：<br>1：不具备旋转不变性<br>2：对噪声敏感<br>3：不具备尺度不变性   </p>\n<p>BRIEF 是一种特征描述符，它不提供查找特征的方法。所以我们不得不使用其他特征检测器，比如 SIFT 和 SURF 等。</p>\n<h3 id=\"ORB-Oriented-FAST-and-Rotated-BRIEF\"><a href=\"#ORB-Oriented-FAST-and-Rotated-BRIEF\" class=\"headerlink\" title=\"ORB (Oriented FAST and Rotated BRIEF)\"></a>ORB (Oriented FAST and Rotated BRIEF)</h3><p>ORB特征是将FAST特征点的检测方法与BRIEF特征描述子结合起来，并在它们原来的基础上做了改进与优化。</p>\n<p>ORB特征具有旋转不变性，同时对噪声及透视仿射也具有不变性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img=cv2.imread(<span class=\"string\">'./images/car.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">orb=cv2.ORB_create()</span><br><span class=\"line\"><span class=\"comment\"># kp=orb.detect(img,None)</span></span><br><span class=\"line\"><span class=\"comment\"># kp,des=orb.compute(img,kp)</span></span><br><span class=\"line\"></span><br><span class=\"line\">kp,des=orb.detectAndCompute(img,<span class=\"literal\">None</span>)</span><br><span class=\"line\">img2=cv2.drawKeypoints(img,kp,<span class=\"literal\">None</span>,(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>),flags=<span class=\"number\">0</span>)</span><br><span class=\"line\">plt.imshow(img2)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_16_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img1 = cv2.imread(<span class=\"string\">'./images/manowar_logo.png'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">img2 = cv2.imread(<span class=\"string\">'./images/manowar_single.jpg'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">orb = cv2.ORB_create()</span><br><span class=\"line\">kp1, des1 = orb.detectAndCompute(img1,<span class=\"literal\">None</span>)</span><br><span class=\"line\">kp2, des2 = orb.detectAndCompute(img2,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴力匹配BFMatcher</span></span><br><span class=\"line\">bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=<span class=\"literal\">True</span>)</span><br><span class=\"line\">matches = bf.match(des1, des2)</span><br><span class=\"line\">matches = sorted(matches, key=<span class=\"keyword\">lambda</span> x: x.distance)</span><br><span class=\"line\"></span><br><span class=\"line\">img3 = cv2.drawMatches(img1, kp1, img2, kp2, matches[:<span class=\"number\">40</span>], img2, flags=<span class=\"number\">2</span>)</span><br><span class=\"line\">plt.imshow(img3)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_17_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">train=cv2.imread(<span class=\"string\">'./images/baboon200_rotated.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">query=cv2.imread(<span class=\"string\">'./images/baboon.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sift=cv2.xfeatures2d.SIFT_create()</span><br><span class=\"line\">kp1,des1=sift.detectAndCompute(train,<span class=\"literal\">None</span>)</span><br><span class=\"line\">kp2,des2=sift.detectAndCompute(query,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># find the keypoints and descriptors with SIFT</span></span><br><span class=\"line\">kp1, des1 = sift.detectAndCompute(train,<span class=\"literal\">None</span>)</span><br><span class=\"line\">kp2, des2 = sift.detectAndCompute(query,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># FLANN parameters</span></span><br><span class=\"line\">FLANN_INDEX_KDTREE = <span class=\"number\">1</span></span><br><span class=\"line\">index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = <span class=\"number\">5</span>)</span><br><span class=\"line\">search_params = dict(checks=<span class=\"number\">50</span>) <span class=\"comment\"># or pass empty dictionary</span></span><br><span class=\"line\"></span><br><span class=\"line\">flann = cv2.FlannBasedMatcher(index_params,search_params)</span><br><span class=\"line\"></span><br><span class=\"line\">matches = flann.knnMatch(des1,des2,k=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Need to draw only good matches, so create a mask</span></span><br><span class=\"line\">matchesMask = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(matches))]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ratio test as per Lowe's paper</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,(m,n) <span class=\"keyword\">in</span> enumerate(matches):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#如果第一个邻近距离比第二个邻近距离的0.7倍小，则保留</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> m.distance &lt; <span class=\"number\">0.7</span>*n.distance:</span><br><span class=\"line\">        matchesMask[i]=[<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">draw_params = dict(matchColor = (<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">                   singlePointColor = (<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">                   matchesMask = matchesMask,</span><br><span class=\"line\">                   flags = <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">img3 = cv2.drawMatchesKnn(train,kp1,query,kp2,matches,<span class=\"literal\">None</span>,**draw_params)</span><br><span class=\"line\">plt.imshow(img3)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_18_0.png\"></p>\n</the>","site":{"data":{}},"excerpt":"<p><strong> OpenCV学习笔记三：特征检测和图像检索 </strong> <excerpt in index | 首页摘要></excerpt></p>\n<h2 id=\"特征检测算法\"><a href=\"#特征检测算法\" class=\"headerlink\" title=\"特征检测算法\"></a>特征检测算法</h2><ul>\n<li>Harris     角点检测</li>\n<li>Shi-Tomasi 角点检测</li>\n<li>FAST       角点检测</li>\n<li>SIFT       斑点（blob）检测</li>\n<li>SURF       斑点检测</li>\n<li>BRIEF      斑点检测</li>\n<li>ORB (Oriented FAST and Rotated BRIEF)</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<h3 id=\"Harris\"><a href=\"#Harris\" class=\"headerlink\" title=\"Harris\"></a>Harris</h3><p>角点定义：如果某一点在任意方向的一个微小变动都会引起灰度很大的变化，那么这个点就称之为角点。<br>Harris角点检测的核心思想就是用一个局部窗口在图像上进行移动来判断灰度的变化，如果变化大于一个值那么就认为这个点是角点。<br>将窗口向各个方向移动$(u, v)$然后计算所有差异的总和。表达式如下 </p>\n<script type=\"math/tex; mode=display\">\nE(u, v)= \\underbrace{w(x, y)}_{\\text { window function }}[\\underbrace{I(x+u, y+v)}_{\\text { shifted intensity }}-\\underbrace{I(x, y)}_{\\text { intensity }}]^{2}</script><p>窗口函数$w(x,y)$可以是正常的矩形窗口也可以是对每一个像素给予不同权重的高斯窗口。  角点检测中要使 $E(u,v)$ 的值最大。<br>使用泰勒展开和二次型，$E(u,v)$可以近似于  </p>\n<script type=\"math/tex; mode=display\">E(u,v) \\approx \\left[ \\begin{matrix}u\\,v\n\\end{matrix}\\right]  M \\left[ \\begin{matrix}\n    u \\\\\n    v \\\\ \n\\end{matrix}\\right]</script><p>其中 </p>\n<script type=\"math/tex; mode=display\">M = \\sum_{x, y} w(x, y)\\left[ \\begin{matrix}\n    I_xI_x\\quad I_xI_y \\\\\n    I_xI_y\\quad I_yI_y \\\\ \n\\end{matrix}\\right]</script><p>这里 $I_x$ 和 $I_y$ 是图像在 $x$ 和 $y$ 方向的导数,可以使用函数 cv2.Sobel()<br>计算得到。<br>根据下式中的$R$值判定窗口内是否包含角点</p>\n<script type=\"math/tex; mode=display\">R=det(M)- \\alpha (trace(M))^2</script><p>其中$\\lambda_1$ 和 $\\lambda_2$ 是矩阵 $M$ 的特征值，$\\alpha$是一个经验常数，取值为$[0.04, 0.06]$。<br>根据R值可以判断一个区域是否是角点，边界或者是平面。  </p>\n<ul>\n<li>当 $\\lambda_1$ 和 $\\lambda_2$ 都小时，$|R|$ 也小，对应图像中的平滑区域；</li>\n<li>当 $\\lambda_1 \\gg \\lambda_2$ 或者 $\\lambda_1 \\ll \\lambda_2$ 时， $R$ 小于0，对应图像中的边缘；</li>\n<li>当 $\\lambda_1$ 和 $\\lambda_2$ 都很大时，$R$ 也很大，对应图像中的角点。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/chess_board.png'</span>)</span><br><span class=\"line\">img_copy = np.copy(img)</span><br><span class=\"line\">img_copy = cv2.cvtColor(img_copy, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">221</span>)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">222</span>)</span><br><span class=\"line\">plt.imshow(img_copy)</span><br><span class=\"line\"></span><br><span class=\"line\">img_gray = cv2.cvtColor(img_copy, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">img_gray = np.float32(img_gray)</span><br><span class=\"line\"><span class=\"comment\"># 检测角点，定义串口大小为2，梯度计算的索贝尔核函数大小为3，alpha设置为0.04</span></span><br><span class=\"line\">img_dst = cv2.cornerHarris(img_gray, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0.04</span>)</span><br><span class=\"line\"><span class=\"comment\"># 对图像做膨胀处理，加强角点</span></span><br><span class=\"line\">img_dst = cv2.dilate(img_dst, <span class=\"literal\">None</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">223</span>)</span><br><span class=\"line\">plt.imshow(img_dst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义阈值，用于与R相比较</span></span><br><span class=\"line\">thresh = <span class=\"number\">0.7</span> * img_dst.max()</span><br><span class=\"line\">img_corner = np.copy(img)</span><br><span class=\"line\"><span class=\"comment\"># 遍历每一个像素，如果大于阈值，则认为为角点并画在图上</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_dst[j, i] &gt; thresh:</span><br><span class=\"line\">            cv2.circle(img_corner, (i, j), <span class=\"number\">25</span>, (<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">224</span>)</span><br><span class=\"line\">plt.imshow(img_corner)</span><br><span class=\"line\">plt.subplots_adjust(bottom=<span class=\"number\">.01</span>, top=<span class=\"number\">.99</span>, left=<span class=\"number\">.01</span>, right=<span class=\"number\">.99</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_2_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%time</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># filename = './images/blox.jpg'</span></span><br><span class=\"line\">filename = <span class=\"string\">'./images/chessboard.png'</span></span><br><span class=\"line\">img = cv2.imread(filename)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">gray = np.float32(gray)</span><br><span class=\"line\">img_dst = cv2.cornerHarris(gray, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result is dilated for marking the corners, not important</span></span><br><span class=\"line\">img_dst = cv2.dilate(img_dst, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Threshold for an optimal value, it may vary depending on the image.</span></span><br><span class=\"line\"><span class=\"comment\"># img[dst&gt;0.07*dst.max()]=[0,0,255]</span></span><br><span class=\"line\">thresh = <span class=\"number\">0.2</span> * img_dst.max()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历每一个像素，如果大于阈值，则认为为角点并画在图上</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(img_dst.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_dst[j, i] &gt; thresh:</span><br><span class=\"line\">            cv2.circle(img, (i, j), <span class=\"number\">25</span>, (<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">img_show = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img_show)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_3_2.png\"></p>\n<h3 id=\"Shi-Tomasi\"><a href=\"#Shi-Tomasi\" class=\"headerlink\" title=\"Shi-Tomasi\"></a>Shi-Tomasi</h3><p>Harris角点的打分公式为</p>\n<script type=\"math/tex; mode=display\">R=det(M)- \\alpha (trace(M))^2</script><p>Shi-Tomasi 使用的打分公式为</p>\n<script type=\"math/tex; mode=display\">R=min(\\lambda_1, \\lambda_2)</script><p>如果打分超过阈值，我们就认为它是一个角点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/blox.jpg'</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">corners = cv2.goodFeaturesToTrack(gray, <span class=\"number\">50</span>, <span class=\"number\">0.01</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># N个最佳角点 = cv2.goodFeaturesToTrack(灰度图, 数量N, 角点质量, 两个角点见最小欧式距离)</span></span><br><span class=\"line\">corners = np.int0(corners)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> corners:</span><br><span class=\"line\">    x,y = i.ravel()</span><br><span class=\"line\">    cv2.circle(img, (x,y), <span class=\"number\">3</span>, <span class=\"number\">255</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_5_0.png\"></p>\n<h3 id=\"FAST\"><a href=\"#FAST\" class=\"headerlink\" title=\"FAST\"></a>FAST</h3><p>FAST 算法比其它角点检测算法都快。但是在噪声很高时不够稳定，这是由阈值决定的。<br>原理：FAST特征检测算法来源于corner的定义，这个定义基于特征点周围的图像灰度值，检测候选特征点周围一圈的像素值，如果候选点周围领域内有足够多的像素点与该候选点的灰度值差别够大，则认为该候选点为一个特征点。</p>\n<script type=\"math/tex; mode=display\">N = \\sum_{x\\, \\forall \\, circles(p)}|I(x)-I(p)|>\\epsilon_d</script><p>步骤：<br>1）在图像中任选一点$p$,假定其像素（亮度）值为$I_p$;<br>2）以$r$为半径画圆，覆盖$p$点周围的$M$个像素,如下图所示: $r=3， M=16$;<br><img alt=\"FAST\" src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/FAST_samples.png\"><br>3）设定阈值$t$，如果这周围的16个像素中有连续的$N$个像素的像素值减去$I_p$大于$t$,或者有连续的$N$个像素都大于$I_p+t$,则认为$p$为角点。<br>如果$t=0$，那么就可以理解为：有连续N个像素大于或小于$I_p$的灰度值。那么这个点就被判断为角点。  </p>\n<p>为了获得更快的结果，还采用了额外的加速办法。<br>如果测试了候选点周围每隔90度角的4个点，应该至少有3个和候选点的灰度值差足够大，否则则不用再计算其他点，直接认为该候选点不是特征点。<br>候选点周围的圆的选取半径是一个很重要的参数，这里为了简单高效，采用半径为3，共有16个周边像素需要比较。为了提高比较的效率，通常只使用N个周边像素来比较，也就是大家经常说的FAST-N，使用比较多的是FAST-9和FAST-12。<br>这个检测器的效率很高，但是它有如下几条缺点：</p>\n<ul>\n<li>当 n&lt;12 时它不会丢弃很多候选点 (获得的候选点比较多)。  </li>\n<li>像素的选取不是最优的，因为它的效果取决与要解决的问题和角点的分布情况。  </li>\n<li>高速测试的结果被抛弃。  </li>\n<li>检测到的很多特征点都是连在一起的。<br>前3个问题可以通过机器学习的方法解决，第4问题可以使用非最大值抑制的方法解决。</li>\n</ul>\n<h4 id=\"机器学习的角点检测器\"><a href=\"#机器学习的角点检测器\" class=\"headerlink\" title=\"机器学习的角点检测器\"></a>机器学习的角点检测器</h4><ol>\n<li>选择一组训练图片（最好是跟最后应用相关的图片）使用FAST算法找出每幅图像的特征点；</li>\n<li>对每一个特征点，将其周围的 16 个像素存储构成一个向量，对所有图像都这样做构建一个特征向量$P$;</li>\n<li>每一个特征点的16像素点都属于下列三类中的一种<script type=\"math/tex; mode=display\">S_{p\\to x}= \\begin{cases}\nd,& \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;I_{p\\to x}\\le I_p - t &(darker)\\\\ \ns,& I_p-t < I_{p\\to x} <  I_p + t  &(similar)\\\\\nb,&I_p+t \\le I_{p\\to x}  &(brighter)\n\\end{cases}</script>根据这些像素点的分类，特征向量$P$也被分为3个子集：$P_d$，$P_s$，$P_b$</li>\n<li>定义一个新的布尔变量$K_p$ ，如果$p$是角点就设置为 Ture，如果不是就设置为 False。</li>\n<li>使用ID3算法（决策树分类器）来查询每一个子集，递归计算所有子集直到熵为0；</li>\n<li>将构建好的决策树运用于其他图像的快速的检测。</li>\n</ol>\n<h4 id=\"非极大值抑制\"><a href=\"#非极大值抑制\" class=\"headerlink\" title=\"非极大值抑制\"></a>非极大值抑制</h4><p>很可能大部分检测出来的点彼此之间相邻，我们要去除一部分这样的点。为了解决这一问题，可以采用非最大值抑制的算法：<br>假设P，Q两个点相邻，分别计算两个点与其周围的16个像素点之间的差分和为V，去除V值较小的点，即把非最大的角点抑制掉。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/blox.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fast = cv2.FastFeatureDetector_create(threshold=<span class=\"number\">20</span>, nonmaxSuppression=<span class=\"literal\">True</span>, type=cv2.FAST_FEATURE_DETECTOR_TYPE_9_16)<span class=\"comment\">#获取FAST角点探测器</span></span><br><span class=\"line\">kp = fast.detect(img,<span class=\"literal\">None</span>)<span class=\"comment\">#描述符</span></span><br><span class=\"line\">img = cv2.drawKeypoints(img, kp, img, color=(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>))<span class=\"comment\">#画到img上面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Threshold: \"</span>, fast.getThreshold())<span class=\"comment\">#输出阈值</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"nonmaxSuppression: \"</span>, fast.getNonmaxSuppression())<span class=\"comment\">#是否使用非极大值抑制</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Total Keypoints with nonmaxSuppression: \"</span>, len(kp))<span class=\"comment\">#特征点个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cv2.imshow('sp',img)</span></span><br><span class=\"line\"><span class=\"comment\"># cv2.waitKey(0)</span></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_7_1.png\"></p>\n<h3 id=\"SIFT\"><a href=\"#SIFT\" class=\"headerlink\" title=\"SIFT\"></a>SIFT</h3><p>角点检测具有旋转不变特性，即即使图片发生了旋转，算法也能找到同样的角点。<br>但是如果对图像进行缩放，角点可能就不再是角点了。<br>尺度不变特征变换（SIFT），利用原始图像与高斯核的卷积来建立尺度空间，并在高斯差分空间金字塔上提取出尺度不变性的特征点。<br>该算法具有一定的仿射不变性，视角不变性，旋转不变性和光照不变性，所以在图像特征提高方面得到了最广泛的应用。  </p>\n<p>步骤：<br>1）构建高斯差分金字塔<br>通过减少采样来构成一组图像尺寸不同的图像金字塔，然后对这一组图像中的每一张图像使用具有不同方差$σ$的高斯卷积核构建出具有不同分辨率的图像金字塔（不同的尺度空间）,DoG就是这组具有不同分辨率的图像金字塔中相邻的两层之间的差值;<br><img alt=\"DOG Pyramid\" src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/DOG Pyramid.jpg\"></p>\n<p>2）定位关键点<br>首先在尺度空间和二维平面中检测局部最大值$(x，y，σ)$,这表示在$σ$尺度中点$(x，y)$可能是一个关键点。为了寻找DoG函数的极值点，每一个像素点要和它所有的相邻点比较，看其是否比它的图像域和尺度域的相邻点大或者小。如下图所示，中间的检测点和它同尺度的8个相邻点和上下相邻尺度对应的9×2个点共26个点比较，以确保在尺度空间和二维图像空间都检测到极值点。<br><img alt=\"sift_local_extrema\" src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/sift_local_extrema.jpg\"><br>以上方法检测到的极值点是离散空间的极值点，通过拟合三维二次函数来精确确定关键点的位置和尺度，同时去除低对比度的关键点和不稳定的边缘响应点(因为DoG算子会产生较强的边缘响应)，以增强匹配稳定性、提高抗噪声能力。</p>\n<p>3）关键点描述符<br>为了使描述符具有旋转不变性，需要利用图像的局部特征为给每一个关键点分配一个基准方向，使用图像梯度的方法求取局部结构的稳定方向。<br>选取关键点周围一个 16x16 的邻域，把它分成 16 个 4x4 的小方块，为每个小方块创建一个具有 8 个 bin 的方向直方图。总共加起来有 128 个 bin。由此组成长为 128 的向量就构成了关键点描述符。  </p>\n<p>缺点<br>SIFT在图像的不变特征提取方面拥有无与伦比的优势，但并不完美，对模糊的图像和边缘平滑的图像，检测出的特征点过少，对圆更是无能为力。</p>\n<ol>\n<li>实时性不高；  </li>\n<li>有时特征点较少；  </li>\n<li>对边缘光滑的目标无法准确提取特征点。  </li>\n</ol>\n<p>参考资料  </p>\n<ul>\n<li>SIFT算法详解 - zddhub的专栏 - CSDN博客<br><a href=\"https://blog.csdn.net/zddblog/article/details/7521424\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zddblog/article/details/7521424</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/home.jpg'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">sift = cv2.xfeatures2d.SIFT_create()</span><br><span class=\"line\">kp = sift.detect(gray,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))</span></span><br><span class=\"line\">img = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_9_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kp, des = sift.detectAndCompute(gray,<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># print(\"kp:\", kp)</span></span><br><span class=\"line\">print(<span class=\"string\">\"des' lenth:\"</span>, len(des[<span class=\"number\">0</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"des:\"</span>, des)</span><br></pre></td></tr></table></figure>\n<pre><code>des&#39; lenth: 64\ndes: [[ 1.1795463e-02 -1.3453829e-03  1.2853614e-02 ... -6.1970763e-03\n   1.0367702e-02  8.2569038e-03]\n [-3.7488429e-04 -1.7145486e-03  1.5926192e-03 ...  9.5438212e-03\n   5.8124182e-03  1.0535392e-02]\n [ 1.8987345e-04 -3.9035594e-04  3.5250295e-04 ... -6.1610942e-03\n   7.9580760e-03  6.6615609e-03]\n ...\n [-1.1354305e-02 -2.0890196e-03  1.3535642e-02 ...  5.5240576e-05\n   3.2335313e-03  5.6648249e-04]\n [ 4.4308142e-03  6.1169025e-03  6.2500047e-03 ...  3.9724767e-04\n   6.5160347e-03  9.4564463e-04]\n [-7.7680773e-03  2.0684338e-04  7.8980839e-03 ... -2.7418079e-02\n   8.1536770e-03  3.2845538e-02]]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/opencv-logo.png'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">sift = cv2.xfeatures2d.SIFT_create()</span><br><span class=\"line\">kp = sift.detect(gray,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_11_0.png\"></p>\n<h3 id=\"SURF-Speeded-Up-Robust-Features\"><a href=\"#SURF-Speeded-Up-Robust-Features\" class=\"headerlink\" title=\"SURF(Speeded-Up Robust Features)\"></a>SURF(Speeded-Up Robust Features)</h3><p>2006年，Bay和Ess等人基于SIFT算法的思路，提出了加速鲁棒特征（SURF）,该算法主要针对于SIFT算法速度太慢，计算量大的缺点，使用了近似Harr小波方法来提取特征点，这种方法就是基于Hessian行列式（DoH）的斑点特征检测方法。通过在不同的尺度上利用积分图像可以有效地计算出近似Harr小波值，简化了二阶微分模板的构建，搞高了尺度空间的特征检测的效率。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'./images/butterfly.jpg'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">surf = cv2.xfeatures2d.SURF_create(<span class=\"number\">40000</span>)</span><br><span class=\"line\">kp = surf.detect(gray, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># img = cv2.drawKeypoints(img, kp, img, color=(255,0,0))</span></span><br><span class=\"line\">img = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\">plt.imshow(img)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_13_0.png\"></p>\n<h3 id=\"BRIEF\"><a href=\"#BRIEF\" class=\"headerlink\" title=\"BRIEF\"></a>BRIEF</h3><p>Binary Robust Independent Elementary Features，在特征点附近随机选取若干点对，将这些点对的灰度值的大小，<br>组合成一个二进制串，并将这个二进制串作为该特征点的特征描述子（即BRIEF描述子中的每一位是由随机选取的两个像素点做二进制比较得来，BRIEF描述子的所有编码都是二进制数的）<br>BRIEF的优点在于速度，缺点也相当明显：<br>1：不具备旋转不变性<br>2：对噪声敏感<br>3：不具备尺度不变性   </p>\n<p>BRIEF 是一种特征描述符，它不提供查找特征的方法。所以我们不得不使用其他特征检测器，比如 SIFT 和 SURF 等。</p>\n<h3 id=\"ORB-Oriented-FAST-and-Rotated-BRIEF\"><a href=\"#ORB-Oriented-FAST-and-Rotated-BRIEF\" class=\"headerlink\" title=\"ORB (Oriented FAST and Rotated BRIEF)\"></a>ORB (Oriented FAST and Rotated BRIEF)</h3><p>ORB特征是将FAST特征点的检测方法与BRIEF特征描述子结合起来，并在它们原来的基础上做了改进与优化。</p>\n<p>ORB特征具有旋转不变性，同时对噪声及透视仿射也具有不变性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">8</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img=cv2.imread(<span class=\"string\">'./images/car.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">orb=cv2.ORB_create()</span><br><span class=\"line\"><span class=\"comment\"># kp=orb.detect(img,None)</span></span><br><span class=\"line\"><span class=\"comment\"># kp,des=orb.compute(img,kp)</span></span><br><span class=\"line\"></span><br><span class=\"line\">kp,des=orb.detectAndCompute(img,<span class=\"literal\">None</span>)</span><br><span class=\"line\">img2=cv2.drawKeypoints(img,kp,<span class=\"literal\">None</span>,(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>),flags=<span class=\"number\">0</span>)</span><br><span class=\"line\">plt.imshow(img2)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_16_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">img1 = cv2.imread(<span class=\"string\">'./images/manowar_logo.png'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">img2 = cv2.imread(<span class=\"string\">'./images/manowar_single.jpg'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">orb = cv2.ORB_create()</span><br><span class=\"line\">kp1, des1 = orb.detectAndCompute(img1,<span class=\"literal\">None</span>)</span><br><span class=\"line\">kp2, des2 = orb.detectAndCompute(img2,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴力匹配BFMatcher</span></span><br><span class=\"line\">bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=<span class=\"literal\">True</span>)</span><br><span class=\"line\">matches = bf.match(des1, des2)</span><br><span class=\"line\">matches = sorted(matches, key=<span class=\"keyword\">lambda</span> x: x.distance)</span><br><span class=\"line\"></span><br><span class=\"line\">img3 = cv2.drawMatches(img1, kp1, img2, kp2, matches[:<span class=\"number\">40</span>], img2, flags=<span class=\"number\">2</span>)</span><br><span class=\"line\">plt.imshow(img3)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_17_0.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">%matplotlib inline</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">train=cv2.imread(<span class=\"string\">'./images/baboon200_rotated.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">query=cv2.imread(<span class=\"string\">'./images/baboon.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sift=cv2.xfeatures2d.SIFT_create()</span><br><span class=\"line\">kp1,des1=sift.detectAndCompute(train,<span class=\"literal\">None</span>)</span><br><span class=\"line\">kp2,des2=sift.detectAndCompute(query,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># find the keypoints and descriptors with SIFT</span></span><br><span class=\"line\">kp1, des1 = sift.detectAndCompute(train,<span class=\"literal\">None</span>)</span><br><span class=\"line\">kp2, des2 = sift.detectAndCompute(query,<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># FLANN parameters</span></span><br><span class=\"line\">FLANN_INDEX_KDTREE = <span class=\"number\">1</span></span><br><span class=\"line\">index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = <span class=\"number\">5</span>)</span><br><span class=\"line\">search_params = dict(checks=<span class=\"number\">50</span>) <span class=\"comment\"># or pass empty dictionary</span></span><br><span class=\"line\"></span><br><span class=\"line\">flann = cv2.FlannBasedMatcher(index_params,search_params)</span><br><span class=\"line\"></span><br><span class=\"line\">matches = flann.knnMatch(des1,des2,k=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Need to draw only good matches, so create a mask</span></span><br><span class=\"line\">matchesMask = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(matches))]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ratio test as per Lowe's paper</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,(m,n) <span class=\"keyword\">in</span> enumerate(matches):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#如果第一个邻近距离比第二个邻近距离的0.7倍小，则保留</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> m.distance &lt; <span class=\"number\">0.7</span>*n.distance:</span><br><span class=\"line\">        matchesMask[i]=[<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">draw_params = dict(matchColor = (<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">                   singlePointColor = (<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>),</span><br><span class=\"line\">                   matchesMask = matchesMask,</span><br><span class=\"line\">                   flags = <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">img3 = cv2.drawMatchesKnn(train,kp1,query,kp2,matches,<span class=\"literal\">None</span>,**draw_params)</span><br><span class=\"line\">plt.imshow(img3)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/06/23/OpenCV学习笔记三：特征检测和图像检索/output_18_0.png\"></p>\n</the>"},{"title":"pyecharts数据可视化","date":"2019-11-10T06:33:01.000Z","_content":"\n\n\n# 什么是pyecharts\npyecharts 是一个用于生成 Echarts 图表的类库。   \necharts 是百度开源的一个数据可视化 JS 库，主要用于数据可视化。pyecharts 是一个用于生成 Echarts 图表的类库。实际上就是 Echarts 与 Python 的对接。  \n使用 pyecharts 可以生成独立的网页，也可以在 flask , Django 中集成使用。\n\n* pyecharts/pyecharts: 🎨 Python Echarts Plotting Library  \nhttps://github.com/pyecharts/pyecharts\n\n* 简介 - pyecharts - A Python Echarts Plotting Library  \nhttps://pyecharts.org/#/zh-cn/intro\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 安装\n``` shell\npip install pyecharts\n```\n\n\n``` python\nimport pyecharts\npyecharts.__version__\n```\n    '1.5.1'\n\n\n\n# 使用方法\n``` python\nchart_object = Type()       # 初始化具体类型图表\nchart_object.add()          # 添加图表的数据和设置各种配置项\nchart_object.show_config()  # 打印所有配置项\nchart_object.render()       # 生成 .html 文件；支持 path 参数，设置文件保存位置，如 render(r\"e:my_first_chart.html\")，文件用浏览器打开。\n```\n\n默认的编码类型为 UTF-8。\n\n\n# 示例\n\n## Bar（柱状图/条形图）\n\n### 生成html\n\n\n``` python\nfrom pyecharts.charts import Bar\nfrom pyecharts import options as opts\n\n# V1 版本开始支持链式调用\nbar = (\n    Bar()\n    .add_xaxis([\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"])\n    .add_yaxis(\"商家A\", [114, 55, 27, 101, 125, 27, 105])\n    .add_yaxis(\"商家B\", [57, 134, 137, 129, 145, 60, 49])\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"某商场销售情况\"))\n)\nbar.render()\n\n# 不习惯链式调用的开发者依旧可以单独调用方法\nbar = Bar()\nbar.add_xaxis([\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"])\nbar.add_yaxis(\"商家A\", [114, 55, 27, 101, 125, 27, 105])\nbar.add_yaxis(\"商家B\", [57, 134, 137, 129, 145, 60, 49])\nbar.set_global_opts(title_opts=opts.TitleOpts(title=\"某商场销售情况\"))\nbar.render()\n```\n\n\n\n\n    'C:\\\\Users\\\\Administrator\\\\Desktop\\\\Python-BaseTutorial-master\\\\render.html'\n\n\n\n### 在 jupyter notebook 中显示 \n\n\n```python\nbar.render_notebook()\n```\n\n<img src='pyecharts数据可视化\\bar.png'>\n\n\n\n### 生成图片\n\n#### 安装：使用 pyecharts-snapshot插件\n1. npm install -g phantomjs-prebuilt\n2. 安装 Nodejs 环境\n3. pip install pyecharts-snapshot\n\n\n\n```python\n# from snapshot_selenium import snapshot as driver\nfrom snapshot_phantomjs import snapshot as driver\n\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Bar\nfrom pyecharts.render import make_snapshot\n\n\ndef bar_chart() -> Bar:\n    c = (\n        Bar()\n        .add_xaxis([\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"])\n        .add_yaxis(\"商家A\", [114, 55, 27, 101, 125, 27, 105])\n        .add_yaxis(\"商家B\", [57, 134, 137, 129, 145, 60, 49])\n        .reversal_axis()\n        .set_series_opts(label_opts=opts.LabelOpts(position=\"right\"))\n        .set_global_opts(title_opts=opts.TitleOpts(title=\"Bar-测试渲染图片\"))\n    )\n    return c\n\n# 需要安装 snapshot-selenium 或者 snapshot-phantomjs\nmake_snapshot(driver, bar_chart().render(), \"bar.png\")\n```\n\n## Pie（饼图）\n\n\n```python\nfrom pyecharts.charts import Pie\nfrom pyecharts import options as opts\n\nkey = [\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"]\nval = [114, 55, 27, 101, 125, 27, 105]\n\npie = (\n    Pie()\n    .add(\"\", [list(z) for z in zip(key, val)])\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"某商场销售情况\"))\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{b}: {c}({d}%)\"))\n)\n\npie.render_notebook()\n\n# make_snapshot(driver, pie.render(), \"pie.png\")  # 保存图片\n```\n\n<!-- <img src='pyecharts数据可视化\\pie.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n        <div id=\"dc6bc23d60bd4973916b962be084b2a3\" style=\"width:900px; height:500px;\"></div>\n        <script>\n            require(['echarts'], function(echarts) {\n                var chart_dc6bc23d60bd4973916b962be084b2a3 = echarts.init(\n                    document.getElementById('dc6bc23d60bd4973916b962be084b2a3'), 'white', {renderer: 'canvas'});\n                var option_dc6bc23d60bd4973916b962be084b2a3 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"pie\",\n                            \"clockwise\": true,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u886c\\u886b\",\n                                    \"value\": 114\n                                },\n                                {\n                                    \"name\": \"\\u6bdb\\u8863\",\n                                    \"value\": 55\n                                },\n                                {\n                                    \"name\": \"\\u9886\\u5e26\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u88e4\\u5b50\",\n                                    \"value\": 101\n                                },\n                                {\n                                    \"name\": \"\\u98ce\\u8863\",\n                                    \"value\": 125\n                                },\n                                {\n                                    \"name\": \"\\u9ad8\\u8ddf\\u978b\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u889c\\u5b50\",\n                                    \"value\": 105\n                                }\n                            ],\n                            \"radius\": [\n                                \"0%\",\n                                \"75%\"\n                            ],\n                            \"center\": [\n                                \"50%\",\n                                \"50%\"\n                            ],\n                            \"label\": {\n                                \"show\": true,\n                                \"position\": \"top\",\n                                \"margin\": 8,\n                                \"formatter\": \"{b}: {c}({d}%)\"\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"\\u886c\\u886b\",\n                                \"\\u6bdb\\u8863\",\n                                \"\\u9886\\u5e26\",\n                                \"\\u88e4\\u5b50\",\n                                \"\\u98ce\\u8863\",\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                \"\\u889c\\u5b50\"\n                            ],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"\\u67d0\\u5546\\u573a\\u9500\\u552e\\u60c5\\u51b5\"\n                        }\n                    ]\n                };\n                chart_dc6bc23d60bd4973916b962be084b2a3.setOption(option_dc6bc23d60bd4973916b962be084b2a3);\n            });\n        </script>\n    </body>\n</html>\n\n\n## Line (折线图)\n\n\n``` python\nfrom pyecharts.charts import Line\nfrom pyecharts import options as opts\n\nkey = [\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"]\nvalues1 = [134, 35, 67, 171, 105, 17, 115]\nvalues2 = [114, 55, 27, 101, 125, 27, 105]\n\n\nline = (\n    Line()\n    .add_xaxis(key)\n    .add_yaxis(\"商家A\", values1)\n    .add_yaxis(\"商家B\", values2)\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"Line-销售情况\"))\n)\n\nline.render_notebook()\n\n# make_snapshot(driver, line.render(), \"line.png\")  # 保存图片\n```\n\n\n<!-- <img src='pyecharts数据可视化\\line.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n    <div id=\"ab9ae8ad29ab4c04a6669abb9806d43f\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573902998482\">\n        <div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\">\n            <canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\">\n            </canvas>\n        </div>\n    </div>\n    <script>\n        require(['echarts'], function(echarts) {\n            var chart_ab9ae8ad29ab4c04a6669abb9806d43f = echarts.init(\n                document.getElementById('ab9ae8ad29ab4c04a6669abb9806d43f'), 'white', {renderer: 'canvas'});\n            var option_ab9ae8ad29ab4c04a6669abb9806d43f = {\n                \"animation\": true,\n                \"animationThreshold\": 2000,\n                \"animationDuration\": 1000,\n                \"animationEasing\": \"cubicOut\",\n                \"animationDelay\": 0,\n                \"animationDurationUpdate\": 300,\n                \"animationEasingUpdate\": \"cubicOut\",\n                \"animationDelayUpdate\": 0,\n                \"color\": [\n                    \"#c23531\",\n                    \"#2f4554\",\n                    \"#61a0a8\",\n                    \"#d48265\",\n                    \"#749f83\",\n                    \"#ca8622\",\n                    \"#bda29a\",\n                    \"#6e7074\",\n                    \"#546570\",\n                    \"#c4ccd3\",\n                    \"#f05b72\",\n                    \"#ef5b9c\",\n                    \"#f47920\",\n                    \"#905a3d\",\n                    \"#fab27b\",\n                    \"#2a5caa\",\n                    \"#444693\",\n                    \"#726930\",\n                    \"#b2d235\",\n                    \"#6d8346\",\n                    \"#ac6767\",\n                    \"#1d953f\",\n                    \"#6950a1\",\n                    \"#918597\"\n                ],\n                \"series\": [\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6A\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                134\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                35\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                67\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                171\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                105\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                17\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                115\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    },\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6B\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                114\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                55\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                27\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                101\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                125\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                27\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                105\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    }\n                ],\n                \"legend\": [\n                    {\n                        \"data\": [\n                            \"\\u5546\\u5bb6A\",\n                            \"\\u5546\\u5bb6B\"\n                        ],\n                        \"selected\": {\n                            \"\\u5546\\u5bb6A\": true,\n                            \"\\u5546\\u5bb6B\": true\n                        },\n                        \"show\": true\n                    }\n                ],\n                \"tooltip\": {\n                    \"show\": true,\n                    \"trigger\": \"item\",\n                    \"triggerOn\": \"mousemove|click\",\n                    \"axisPointer\": {\n                        \"type\": \"line\"\n                    },\n                    \"textStyle\": {\n                        \"fontSize\": 14\n                    },\n                    \"borderWidth\": 0\n                },\n                \"xAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        },\n                        \"data\": [\n                            \"\\u886c\\u886b\",\n                            \"\\u6bdb\\u8863\",\n                            \"\\u9886\\u5e26\",\n                            \"\\u88e4\\u5b50\",\n                            \"\\u98ce\\u8863\",\n                            \"\\u9ad8\\u8ddf\\u978b\",\n                            \"\\u889c\\u5b50\"\n                        ]\n                    }\n                ],\n                \"yAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        }\n                    }\n                ],\n                \"title\": [\n                    {\n                        \"text\": \"Line-\\u9500\\u552e\\u60c5\\u51b5\"\n                    }\n                ]\n            };\n            chart_ab9ae8ad29ab4c04a6669abb9806d43f.setOption(option_ab9ae8ad29ab4c04a6669abb9806d43f);\n        });\n    </script>\n</html>\n\n\n## WordCloud（词云图）\n\n``` python\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Page, WordCloud\n\nwords = [\n    (\"Sam S Club\", 10000),\n    (\"Macys\", 6181),\n    (\"Amy Schumer\", 4386),\n    (\"Jurassic World\", 4055),\n    (\"Charter Communications\", 2467),\n    (\"Chick Fil A\", 2244),\n    (\"Planet Fitness\", 1868),\n    (\"Pitch Perfect\", 1484),\n    (\"Express\", 1112),\n    (\"Home\", 865),\n    (\"Johnny Depp\", 847),\n    (\"Lena Dunham\", 582),\n    (\"Lewis Hamilton\", 555),\n    (\"KXAN\", 550),\n    (\"Mary Ellen Mark\", 462),\n    (\"Farrah Abraham\", 366),\n    (\"Rita Ora\", 360),\n    (\"Serena Williams\", 282),\n    (\"NCAA baseball tournament\", 273),\n    (\"Point Break\", 265),\n]\n\nwordcloud = (\n    WordCloud()\n#     .add(\"\", words, word_size_range=[20, 100])\n    .add(\"\", words, word_size_range=[20, 100], shape=\"diamond\")    # 词云图的形状可以通过shape参数来选择\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"WordCloud-示例\"))\n)\n\nwordcloud.render_notebook()\n\n# make_snapshot(driver, wordcloud.render(), \"wordcloud.png\")  # 保存图片\n```\n\n<!-- <img src='pyecharts数据可视化\\wordcloud.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'echarts-wordcloud':'https://assets.pyecharts.org/assets/echarts-wordcloud.min'\n                }\n            });\n        </script>\n        <div id=\"a8dfa3633fb840cfb128c12639f5de2c\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573903933739\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div style=\"position: absolute; display: none; border-style: solid; white-space: nowrap; z-index: 9999999; transition: left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; background-color: rgba(50, 50, 50, 0.7); border-width: 0px; border-color: rgb(51, 51, 51); border-radius: 4px; color: rgb(255, 255, 255); font: 14px/21px &quot;Microsoft YaHei&quot;; padding: 5px; left: 565px; top: 167px; pointer-events: none;\"><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:rgb(127,21,19);\"></span>Lewis Hamilton: 555</div></div>\n        <script>\n            require(['echarts', 'echarts-wordcloud'], function(echarts) {\n                var chart_a8dfa3633fb840cfb128c12639f5de2c = echarts.init(\n                    document.getElementById('a8dfa3633fb840cfb128c12639f5de2c'), 'white', {renderer: 'canvas'});\n                var option_a8dfa3633fb840cfb128c12639f5de2c = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"wordCloud\",\n                            \"shape\": \"diamond\",\n                            \"rotationRange\": [\n                                0,\n                                0\n                            ],\n                            \"rotationStep\": 45,\n                            \"girdSize\": 20,\n                            \"sizeRange\": [\n                                20,\n                                100\n                            ],\n                            \"data\": [\n                                {\n                                    \"name\": \"Sam S Club\",\n                                    \"value\": 10000,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(96,98,41)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Macys\",\n                                    \"value\": 6181,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(64,68,59)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Amy Schumer\",\n                                    \"value\": 4386,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(128,147,58)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Jurassic World\",\n                                    \"value\": 4055,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(136,117,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Charter Communications\",\n                                    \"value\": 2467,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(93,92,51)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Chick Fil A\",\n                                    \"value\": 2244,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(5,46,60)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Planet Fitness\",\n                                    \"value\": 1868,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(32,83,135)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Pitch Perfect\",\n                                    \"value\": 1484,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,109,154)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Express\",\n                                    \"value\": 1112,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(140,65,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Home\",\n                                    \"value\": 865,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(29,95,2)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Johnny Depp\",\n                                    \"value\": 847,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(12,141,132)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lena Dunham\",\n                                    \"value\": 582,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(21,112,93)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lewis Hamilton\",\n                                    \"value\": 555,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(127,21,19)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"KXAN\",\n                                    \"value\": 550,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(36,92,90)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Mary Ellen Mark\",\n                                    \"value\": 462,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(52,63,149)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Farrah Abraham\",\n                                    \"value\": 366,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(41,132,54)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Rita Ora\",\n                                    \"value\": 360,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,77,18)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Serena Williams\",\n                                    \"value\": 282,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(7,40,156)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"NCAA baseball tournament\",\n                                    \"value\": 273,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(117,2,101)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Point Break\",\n                                    \"value\": 265,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,53,94)\"\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"WordCloud-\\u57fa\\u672c\\u793a\\u4f8b\"\n                        }\n                    ]\n                };\n                chart_a8dfa3633fb840cfb128c12639f5de2c.setOption(option_a8dfa3633fb840cfb128c12639f5de2c);\n            });\n        </script>\n    </body>\n</html>\n\n\n\n## Geo（地图）\n\n``` python\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Geo, Page\nfrom pyecharts.faker import Collector, Faker\nfrom pyecharts.globals import ChartType, SymbolType\n\ngeo_line =  (\n        Geo()\n        .add_schema(maptype=\"china\")\n        .add(\n            \"destination\",\n            [(\"广州\", 55), (\"北京\", 66), (\"杭州\", 77), (\"重庆\", 88)],\n            type_=ChartType.EFFECT_SCATTER,\n            color=\"blue\",\n        )\n        .add(\n            \"geo\",\n            [(\"广州\", \"上海\"), (\"广州\", \"北京\"), (\"广州\", \"杭州\"), (\"广州\", \"重庆\")],\n            type_=ChartType.LINES,\n            effect_opts=opts.EffectOpts(\n                symbol=SymbolType.ARROW, symbol_size=6, color=\"blue\"\n            ),\n            linestyle_opts=opts.LineStyleOpts(curve=0.3),\n        )\n        .set_series_opts(label_opts=opts.LabelOpts(is_show=False))\n        .set_global_opts(title_opts=opts.TitleOpts(title=\"Geo-Lines\"))\n    )\n\ngeo_line.render_notebook()\n```\n\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"77369bcb5d9b43849d3d710b0c5af18d\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574061446221\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas><canvas data-zr-dom-id=\"zr_3\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_77369bcb5d9b43849d3d710b0c5af18d = echarts.init(\n                    document.getElementById('77369bcb5d9b43849d3d710b0c5af18d'), 'white', {renderer: 'canvas'});\n                var option_77369bcb5d9b43849d3d710b0c5af18d = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"blue\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        55\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        66\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        77\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u91cd\\u5e86\",\n                                    \"value\": [\n                                        106.551556,\n                                        29.563009,\n                                        88\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        },\n                        {\n                            \"type\": \"lines\",\n                            \"name\": \"geo\",\n                            \"coordinateSystem\": \"geo\",\n                            \"zlevel\": 3,\n                            \"effect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4,\n                                \"color\": \"blue\",\n                                \"symbol\": \"arrow\",\n                                \"symbolSize\": 6\n                            },\n                            \"symbol\": [\n                                \"none\",\n                                \"arrow\"\n                            ],\n                            \"polyline\": false,\n                            \"large\": false,\n                            \"largeThreshold\": 2000,\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u4e0a\\u6d77\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            121.473701,\n                                            31.230416\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u5317\\u4eac\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            116.407526,\n                                            39.90403\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u676d\\u5dde\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            120.19,\n                                            30.26\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u91cd\\u5e86\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            106.551556,\n                                            29.563009\n                                        ]\n                                    ]\n                                }\n                            ],\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0.3,\n                                \"type\": \"solid\"\n                            },\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\",\n                                \"geo\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true,\n                                \"geo\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-Lines\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"emphasis\": {}\n                    }\n                };\n                chart_77369bcb5d9b43849d3d710b0c5af18d.setOption(option_77369bcb5d9b43849d3d710b0c5af18d);\n            });\n        </script>\n    </body>\n</html>\n","source":"_posts/pyecharts数据可视化.md","raw":"---\ntitle: pyecharts数据可视化\ndate: 2019-11-10 14:33:01\ntags:\n - import\n---\n\n\n\n# 什么是pyecharts\npyecharts 是一个用于生成 Echarts 图表的类库。   \necharts 是百度开源的一个数据可视化 JS 库，主要用于数据可视化。pyecharts 是一个用于生成 Echarts 图表的类库。实际上就是 Echarts 与 Python 的对接。  \n使用 pyecharts 可以生成独立的网页，也可以在 flask , Django 中集成使用。\n\n* pyecharts/pyecharts: 🎨 Python Echarts Plotting Library  \nhttps://github.com/pyecharts/pyecharts\n\n* 简介 - pyecharts - A Python Echarts Plotting Library  \nhttps://pyecharts.org/#/zh-cn/intro\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 安装\n``` shell\npip install pyecharts\n```\n\n\n``` python\nimport pyecharts\npyecharts.__version__\n```\n    '1.5.1'\n\n\n\n# 使用方法\n``` python\nchart_object = Type()       # 初始化具体类型图表\nchart_object.add()          # 添加图表的数据和设置各种配置项\nchart_object.show_config()  # 打印所有配置项\nchart_object.render()       # 生成 .html 文件；支持 path 参数，设置文件保存位置，如 render(r\"e:my_first_chart.html\")，文件用浏览器打开。\n```\n\n默认的编码类型为 UTF-8。\n\n\n# 示例\n\n## Bar（柱状图/条形图）\n\n### 生成html\n\n\n``` python\nfrom pyecharts.charts import Bar\nfrom pyecharts import options as opts\n\n# V1 版本开始支持链式调用\nbar = (\n    Bar()\n    .add_xaxis([\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"])\n    .add_yaxis(\"商家A\", [114, 55, 27, 101, 125, 27, 105])\n    .add_yaxis(\"商家B\", [57, 134, 137, 129, 145, 60, 49])\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"某商场销售情况\"))\n)\nbar.render()\n\n# 不习惯链式调用的开发者依旧可以单独调用方法\nbar = Bar()\nbar.add_xaxis([\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"])\nbar.add_yaxis(\"商家A\", [114, 55, 27, 101, 125, 27, 105])\nbar.add_yaxis(\"商家B\", [57, 134, 137, 129, 145, 60, 49])\nbar.set_global_opts(title_opts=opts.TitleOpts(title=\"某商场销售情况\"))\nbar.render()\n```\n\n\n\n\n    'C:\\\\Users\\\\Administrator\\\\Desktop\\\\Python-BaseTutorial-master\\\\render.html'\n\n\n\n### 在 jupyter notebook 中显示 \n\n\n```python\nbar.render_notebook()\n```\n\n<img src='pyecharts数据可视化\\bar.png'>\n\n\n\n### 生成图片\n\n#### 安装：使用 pyecharts-snapshot插件\n1. npm install -g phantomjs-prebuilt\n2. 安装 Nodejs 环境\n3. pip install pyecharts-snapshot\n\n\n\n```python\n# from snapshot_selenium import snapshot as driver\nfrom snapshot_phantomjs import snapshot as driver\n\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Bar\nfrom pyecharts.render import make_snapshot\n\n\ndef bar_chart() -> Bar:\n    c = (\n        Bar()\n        .add_xaxis([\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"])\n        .add_yaxis(\"商家A\", [114, 55, 27, 101, 125, 27, 105])\n        .add_yaxis(\"商家B\", [57, 134, 137, 129, 145, 60, 49])\n        .reversal_axis()\n        .set_series_opts(label_opts=opts.LabelOpts(position=\"right\"))\n        .set_global_opts(title_opts=opts.TitleOpts(title=\"Bar-测试渲染图片\"))\n    )\n    return c\n\n# 需要安装 snapshot-selenium 或者 snapshot-phantomjs\nmake_snapshot(driver, bar_chart().render(), \"bar.png\")\n```\n\n## Pie（饼图）\n\n\n```python\nfrom pyecharts.charts import Pie\nfrom pyecharts import options as opts\n\nkey = [\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"]\nval = [114, 55, 27, 101, 125, 27, 105]\n\npie = (\n    Pie()\n    .add(\"\", [list(z) for z in zip(key, val)])\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"某商场销售情况\"))\n    .set_series_opts(label_opts=opts.LabelOpts(formatter=\"{b}: {c}({d}%)\"))\n)\n\npie.render_notebook()\n\n# make_snapshot(driver, pie.render(), \"pie.png\")  # 保存图片\n```\n\n<!-- <img src='pyecharts数据可视化\\pie.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n        <div id=\"dc6bc23d60bd4973916b962be084b2a3\" style=\"width:900px; height:500px;\"></div>\n        <script>\n            require(['echarts'], function(echarts) {\n                var chart_dc6bc23d60bd4973916b962be084b2a3 = echarts.init(\n                    document.getElementById('dc6bc23d60bd4973916b962be084b2a3'), 'white', {renderer: 'canvas'});\n                var option_dc6bc23d60bd4973916b962be084b2a3 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"pie\",\n                            \"clockwise\": true,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u886c\\u886b\",\n                                    \"value\": 114\n                                },\n                                {\n                                    \"name\": \"\\u6bdb\\u8863\",\n                                    \"value\": 55\n                                },\n                                {\n                                    \"name\": \"\\u9886\\u5e26\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u88e4\\u5b50\",\n                                    \"value\": 101\n                                },\n                                {\n                                    \"name\": \"\\u98ce\\u8863\",\n                                    \"value\": 125\n                                },\n                                {\n                                    \"name\": \"\\u9ad8\\u8ddf\\u978b\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u889c\\u5b50\",\n                                    \"value\": 105\n                                }\n                            ],\n                            \"radius\": [\n                                \"0%\",\n                                \"75%\"\n                            ],\n                            \"center\": [\n                                \"50%\",\n                                \"50%\"\n                            ],\n                            \"label\": {\n                                \"show\": true,\n                                \"position\": \"top\",\n                                \"margin\": 8,\n                                \"formatter\": \"{b}: {c}({d}%)\"\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"\\u886c\\u886b\",\n                                \"\\u6bdb\\u8863\",\n                                \"\\u9886\\u5e26\",\n                                \"\\u88e4\\u5b50\",\n                                \"\\u98ce\\u8863\",\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                \"\\u889c\\u5b50\"\n                            ],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"\\u67d0\\u5546\\u573a\\u9500\\u552e\\u60c5\\u51b5\"\n                        }\n                    ]\n                };\n                chart_dc6bc23d60bd4973916b962be084b2a3.setOption(option_dc6bc23d60bd4973916b962be084b2a3);\n            });\n        </script>\n    </body>\n</html>\n\n\n## Line (折线图)\n\n\n``` python\nfrom pyecharts.charts import Line\nfrom pyecharts import options as opts\n\nkey = [\"衬衫\", \"毛衣\", \"领带\", \"裤子\", \"风衣\", \"高跟鞋\", \"袜子\"]\nvalues1 = [134, 35, 67, 171, 105, 17, 115]\nvalues2 = [114, 55, 27, 101, 125, 27, 105]\n\n\nline = (\n    Line()\n    .add_xaxis(key)\n    .add_yaxis(\"商家A\", values1)\n    .add_yaxis(\"商家B\", values2)\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"Line-销售情况\"))\n)\n\nline.render_notebook()\n\n# make_snapshot(driver, line.render(), \"line.png\")  # 保存图片\n```\n\n\n<!-- <img src='pyecharts数据可视化\\line.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n    <div id=\"ab9ae8ad29ab4c04a6669abb9806d43f\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573902998482\">\n        <div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\">\n            <canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\">\n            </canvas>\n        </div>\n    </div>\n    <script>\n        require(['echarts'], function(echarts) {\n            var chart_ab9ae8ad29ab4c04a6669abb9806d43f = echarts.init(\n                document.getElementById('ab9ae8ad29ab4c04a6669abb9806d43f'), 'white', {renderer: 'canvas'});\n            var option_ab9ae8ad29ab4c04a6669abb9806d43f = {\n                \"animation\": true,\n                \"animationThreshold\": 2000,\n                \"animationDuration\": 1000,\n                \"animationEasing\": \"cubicOut\",\n                \"animationDelay\": 0,\n                \"animationDurationUpdate\": 300,\n                \"animationEasingUpdate\": \"cubicOut\",\n                \"animationDelayUpdate\": 0,\n                \"color\": [\n                    \"#c23531\",\n                    \"#2f4554\",\n                    \"#61a0a8\",\n                    \"#d48265\",\n                    \"#749f83\",\n                    \"#ca8622\",\n                    \"#bda29a\",\n                    \"#6e7074\",\n                    \"#546570\",\n                    \"#c4ccd3\",\n                    \"#f05b72\",\n                    \"#ef5b9c\",\n                    \"#f47920\",\n                    \"#905a3d\",\n                    \"#fab27b\",\n                    \"#2a5caa\",\n                    \"#444693\",\n                    \"#726930\",\n                    \"#b2d235\",\n                    \"#6d8346\",\n                    \"#ac6767\",\n                    \"#1d953f\",\n                    \"#6950a1\",\n                    \"#918597\"\n                ],\n                \"series\": [\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6A\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                134\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                35\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                67\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                171\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                105\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                17\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                115\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    },\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6B\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                114\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                55\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                27\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                101\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                125\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                27\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                105\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    }\n                ],\n                \"legend\": [\n                    {\n                        \"data\": [\n                            \"\\u5546\\u5bb6A\",\n                            \"\\u5546\\u5bb6B\"\n                        ],\n                        \"selected\": {\n                            \"\\u5546\\u5bb6A\": true,\n                            \"\\u5546\\u5bb6B\": true\n                        },\n                        \"show\": true\n                    }\n                ],\n                \"tooltip\": {\n                    \"show\": true,\n                    \"trigger\": \"item\",\n                    \"triggerOn\": \"mousemove|click\",\n                    \"axisPointer\": {\n                        \"type\": \"line\"\n                    },\n                    \"textStyle\": {\n                        \"fontSize\": 14\n                    },\n                    \"borderWidth\": 0\n                },\n                \"xAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        },\n                        \"data\": [\n                            \"\\u886c\\u886b\",\n                            \"\\u6bdb\\u8863\",\n                            \"\\u9886\\u5e26\",\n                            \"\\u88e4\\u5b50\",\n                            \"\\u98ce\\u8863\",\n                            \"\\u9ad8\\u8ddf\\u978b\",\n                            \"\\u889c\\u5b50\"\n                        ]\n                    }\n                ],\n                \"yAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        }\n                    }\n                ],\n                \"title\": [\n                    {\n                        \"text\": \"Line-\\u9500\\u552e\\u60c5\\u51b5\"\n                    }\n                ]\n            };\n            chart_ab9ae8ad29ab4c04a6669abb9806d43f.setOption(option_ab9ae8ad29ab4c04a6669abb9806d43f);\n        });\n    </script>\n</html>\n\n\n## WordCloud（词云图）\n\n``` python\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Page, WordCloud\n\nwords = [\n    (\"Sam S Club\", 10000),\n    (\"Macys\", 6181),\n    (\"Amy Schumer\", 4386),\n    (\"Jurassic World\", 4055),\n    (\"Charter Communications\", 2467),\n    (\"Chick Fil A\", 2244),\n    (\"Planet Fitness\", 1868),\n    (\"Pitch Perfect\", 1484),\n    (\"Express\", 1112),\n    (\"Home\", 865),\n    (\"Johnny Depp\", 847),\n    (\"Lena Dunham\", 582),\n    (\"Lewis Hamilton\", 555),\n    (\"KXAN\", 550),\n    (\"Mary Ellen Mark\", 462),\n    (\"Farrah Abraham\", 366),\n    (\"Rita Ora\", 360),\n    (\"Serena Williams\", 282),\n    (\"NCAA baseball tournament\", 273),\n    (\"Point Break\", 265),\n]\n\nwordcloud = (\n    WordCloud()\n#     .add(\"\", words, word_size_range=[20, 100])\n    .add(\"\", words, word_size_range=[20, 100], shape=\"diamond\")    # 词云图的形状可以通过shape参数来选择\n    .set_global_opts(title_opts=opts.TitleOpts(title=\"WordCloud-示例\"))\n)\n\nwordcloud.render_notebook()\n\n# make_snapshot(driver, wordcloud.render(), \"wordcloud.png\")  # 保存图片\n```\n\n<!-- <img src='pyecharts数据可视化\\wordcloud.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'echarts-wordcloud':'https://assets.pyecharts.org/assets/echarts-wordcloud.min'\n                }\n            });\n        </script>\n        <div id=\"a8dfa3633fb840cfb128c12639f5de2c\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573903933739\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div style=\"position: absolute; display: none; border-style: solid; white-space: nowrap; z-index: 9999999; transition: left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; background-color: rgba(50, 50, 50, 0.7); border-width: 0px; border-color: rgb(51, 51, 51); border-radius: 4px; color: rgb(255, 255, 255); font: 14px/21px &quot;Microsoft YaHei&quot;; padding: 5px; left: 565px; top: 167px; pointer-events: none;\"><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:rgb(127,21,19);\"></span>Lewis Hamilton: 555</div></div>\n        <script>\n            require(['echarts', 'echarts-wordcloud'], function(echarts) {\n                var chart_a8dfa3633fb840cfb128c12639f5de2c = echarts.init(\n                    document.getElementById('a8dfa3633fb840cfb128c12639f5de2c'), 'white', {renderer: 'canvas'});\n                var option_a8dfa3633fb840cfb128c12639f5de2c = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"wordCloud\",\n                            \"shape\": \"diamond\",\n                            \"rotationRange\": [\n                                0,\n                                0\n                            ],\n                            \"rotationStep\": 45,\n                            \"girdSize\": 20,\n                            \"sizeRange\": [\n                                20,\n                                100\n                            ],\n                            \"data\": [\n                                {\n                                    \"name\": \"Sam S Club\",\n                                    \"value\": 10000,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(96,98,41)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Macys\",\n                                    \"value\": 6181,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(64,68,59)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Amy Schumer\",\n                                    \"value\": 4386,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(128,147,58)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Jurassic World\",\n                                    \"value\": 4055,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(136,117,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Charter Communications\",\n                                    \"value\": 2467,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(93,92,51)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Chick Fil A\",\n                                    \"value\": 2244,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(5,46,60)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Planet Fitness\",\n                                    \"value\": 1868,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(32,83,135)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Pitch Perfect\",\n                                    \"value\": 1484,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,109,154)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Express\",\n                                    \"value\": 1112,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(140,65,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Home\",\n                                    \"value\": 865,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(29,95,2)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Johnny Depp\",\n                                    \"value\": 847,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(12,141,132)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lena Dunham\",\n                                    \"value\": 582,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(21,112,93)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lewis Hamilton\",\n                                    \"value\": 555,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(127,21,19)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"KXAN\",\n                                    \"value\": 550,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(36,92,90)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Mary Ellen Mark\",\n                                    \"value\": 462,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(52,63,149)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Farrah Abraham\",\n                                    \"value\": 366,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(41,132,54)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Rita Ora\",\n                                    \"value\": 360,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,77,18)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Serena Williams\",\n                                    \"value\": 282,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(7,40,156)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"NCAA baseball tournament\",\n                                    \"value\": 273,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(117,2,101)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Point Break\",\n                                    \"value\": 265,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,53,94)\"\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"WordCloud-\\u57fa\\u672c\\u793a\\u4f8b\"\n                        }\n                    ]\n                };\n                chart_a8dfa3633fb840cfb128c12639f5de2c.setOption(option_a8dfa3633fb840cfb128c12639f5de2c);\n            });\n        </script>\n    </body>\n</html>\n\n\n\n## Geo（地图）\n\n``` python\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Geo, Page\nfrom pyecharts.faker import Collector, Faker\nfrom pyecharts.globals import ChartType, SymbolType\n\ngeo_line =  (\n        Geo()\n        .add_schema(maptype=\"china\")\n        .add(\n            \"destination\",\n            [(\"广州\", 55), (\"北京\", 66), (\"杭州\", 77), (\"重庆\", 88)],\n            type_=ChartType.EFFECT_SCATTER,\n            color=\"blue\",\n        )\n        .add(\n            \"geo\",\n            [(\"广州\", \"上海\"), (\"广州\", \"北京\"), (\"广州\", \"杭州\"), (\"广州\", \"重庆\")],\n            type_=ChartType.LINES,\n            effect_opts=opts.EffectOpts(\n                symbol=SymbolType.ARROW, symbol_size=6, color=\"blue\"\n            ),\n            linestyle_opts=opts.LineStyleOpts(curve=0.3),\n        )\n        .set_series_opts(label_opts=opts.LabelOpts(is_show=False))\n        .set_global_opts(title_opts=opts.TitleOpts(title=\"Geo-Lines\"))\n    )\n\ngeo_line.render_notebook()\n```\n\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"77369bcb5d9b43849d3d710b0c5af18d\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574061446221\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas><canvas data-zr-dom-id=\"zr_3\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_77369bcb5d9b43849d3d710b0c5af18d = echarts.init(\n                    document.getElementById('77369bcb5d9b43849d3d710b0c5af18d'), 'white', {renderer: 'canvas'});\n                var option_77369bcb5d9b43849d3d710b0c5af18d = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"blue\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        55\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        66\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        77\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u91cd\\u5e86\",\n                                    \"value\": [\n                                        106.551556,\n                                        29.563009,\n                                        88\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        },\n                        {\n                            \"type\": \"lines\",\n                            \"name\": \"geo\",\n                            \"coordinateSystem\": \"geo\",\n                            \"zlevel\": 3,\n                            \"effect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4,\n                                \"color\": \"blue\",\n                                \"symbol\": \"arrow\",\n                                \"symbolSize\": 6\n                            },\n                            \"symbol\": [\n                                \"none\",\n                                \"arrow\"\n                            ],\n                            \"polyline\": false,\n                            \"large\": false,\n                            \"largeThreshold\": 2000,\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u4e0a\\u6d77\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            121.473701,\n                                            31.230416\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u5317\\u4eac\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            116.407526,\n                                            39.90403\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u676d\\u5dde\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            120.19,\n                                            30.26\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u91cd\\u5e86\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            106.551556,\n                                            29.563009\n                                        ]\n                                    ]\n                                }\n                            ],\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0.3,\n                                \"type\": \"solid\"\n                            },\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\",\n                                \"geo\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true,\n                                \"geo\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-Lines\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"emphasis\": {}\n                    }\n                };\n                chart_77369bcb5d9b43849d3d710b0c5af18d.setOption(option_77369bcb5d9b43849d3d710b0c5af18d);\n            });\n        </script>\n    </body>\n</html>\n","slug":"pyecharts数据可视化","published":1,"updated":"2020-01-05T19:13:24.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7an50fc006u4cvjk73tcl1s","content":"<h1 id=\"什么是pyecharts\"><a href=\"#什么是pyecharts\" class=\"headerlink\" title=\"什么是pyecharts\"></a>什么是pyecharts</h1><p>pyecharts 是一个用于生成 Echarts 图表的类库。<br>echarts 是百度开源的一个数据可视化 JS 库，主要用于数据可视化。pyecharts 是一个用于生成 Echarts 图表的类库。实际上就是 Echarts 与 Python 的对接。<br>使用 pyecharts 可以生成独立的网页，也可以在 flask , Django 中集成使用。</p>\n<ul>\n<li><p>pyecharts/pyecharts: 🎨 Python Echarts Plotting Library<br><a href=\"https://github.com/pyecharts/pyecharts\" target=\"_blank\" rel=\"noopener\">https://github.com/pyecharts/pyecharts</a></p>\n</li>\n<li><p>简介 - pyecharts - A Python Echarts Plotting Library<br><a href=\"https://pyecharts.org/#/zh-cn/intro\" target=\"_blank\" rel=\"noopener\">https://pyecharts.org/#/zh-cn/intro</a></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<the rest of contents | 余下全文>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyecharts</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pyecharts</span><br><span class=\"line\">pyecharts.__version__</span><br></pre></td></tr></table></figure>\n<pre><code>&#39;1.5.1&#39;\n</code></pre><h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chart_object = Type()       <span class=\"comment\"># 初始化具体类型图表</span></span><br><span class=\"line\">chart_object.add()          <span class=\"comment\"># 添加图表的数据和设置各种配置项</span></span><br><span class=\"line\">chart_object.show_config()  <span class=\"comment\"># 打印所有配置项</span></span><br><span class=\"line\">chart_object.render()       <span class=\"comment\"># 生成 .html 文件；支持 path 参数，设置文件保存位置，如 render(r\"e:my_first_chart.html\")，文件用浏览器打开。</span></span><br></pre></td></tr></table></figure>\n<p>默认的编码类型为 UTF-8。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><h2 id=\"Bar（柱状图-条形图）\"><a href=\"#Bar（柱状图-条形图）\" class=\"headerlink\" title=\"Bar（柱状图/条形图）\"></a>Bar（柱状图/条形图）</h2><h3 id=\"生成html\"><a href=\"#生成html\" class=\"headerlink\" title=\"生成html\"></a>生成html</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Bar</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># V1 版本开始支持链式调用</span></span><br><span class=\"line\">bar = (</span><br><span class=\"line\">    Bar()</span><br><span class=\"line\">    .add_xaxis([<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>])</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家A\"</span>, [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>])</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家B\"</span>, [<span class=\"number\">57</span>, <span class=\"number\">134</span>, <span class=\"number\">137</span>, <span class=\"number\">129</span>, <span class=\"number\">145</span>, <span class=\"number\">60</span>, <span class=\"number\">49</span>])</span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"某商场销售情况\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\">bar.render()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不习惯链式调用的开发者依旧可以单独调用方法</span></span><br><span class=\"line\">bar = Bar()</span><br><span class=\"line\">bar.add_xaxis([<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>])</span><br><span class=\"line\">bar.add_yaxis(<span class=\"string\">\"商家A\"</span>, [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>])</span><br><span class=\"line\">bar.add_yaxis(<span class=\"string\">\"商家B\"</span>, [<span class=\"number\">57</span>, <span class=\"number\">134</span>, <span class=\"number\">137</span>, <span class=\"number\">129</span>, <span class=\"number\">145</span>, <span class=\"number\">60</span>, <span class=\"number\">49</span>])</span><br><span class=\"line\">bar.set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"某商场销售情况\"</span>))</span><br><span class=\"line\">bar.render()</span><br></pre></td></tr></table></figure>\n<pre><code>&#39;C:\\\\Users\\\\Administrator\\\\Desktop\\\\Python-BaseTutorial-master\\\\render.html&#39;\n</code></pre><h3 id=\"在-jupyter-notebook-中显示\"><a href=\"#在-jupyter-notebook-中显示\" class=\"headerlink\" title=\"在 jupyter notebook 中显示\"></a>在 jupyter notebook 中显示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bar.render_notebook()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/10/pyecharts数据可视化/bar.png\"></p>\n<h3 id=\"生成图片\"><a href=\"#生成图片\" class=\"headerlink\" title=\"生成图片\"></a>生成图片</h3><h4 id=\"安装：使用-pyecharts-snapshot插件\"><a href=\"#安装：使用-pyecharts-snapshot插件\" class=\"headerlink\" title=\"安装：使用 pyecharts-snapshot插件\"></a>安装：使用 pyecharts-snapshot插件</h4><ol>\n<li>npm install -g phantomjs-prebuilt</li>\n<li>安装 Nodejs 环境</li>\n<li>pip install pyecharts-snapshot</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># from snapshot_selenium import snapshot as driver</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> snapshot_phantomjs <span class=\"keyword\">import</span> snapshot <span class=\"keyword\">as</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Bar</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.render <span class=\"keyword\">import</span> make_snapshot</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar_chart</span><span class=\"params\">()</span> -&gt; Bar:</span></span><br><span class=\"line\">    c = (</span><br><span class=\"line\">        Bar()</span><br><span class=\"line\">        .add_xaxis([<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>])</span><br><span class=\"line\">        .add_yaxis(<span class=\"string\">\"商家A\"</span>, [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>])</span><br><span class=\"line\">        .add_yaxis(<span class=\"string\">\"商家B\"</span>, [<span class=\"number\">57</span>, <span class=\"number\">134</span>, <span class=\"number\">137</span>, <span class=\"number\">129</span>, <span class=\"number\">145</span>, <span class=\"number\">60</span>, <span class=\"number\">49</span>])</span><br><span class=\"line\">        .reversal_axis()</span><br><span class=\"line\">        .set_series_opts(label_opts=opts.LabelOpts(position=<span class=\"string\">\"right\"</span>))</span><br><span class=\"line\">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"Bar-测试渲染图片\"</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要安装 snapshot-selenium 或者 snapshot-phantomjs</span></span><br><span class=\"line\">make_snapshot(driver, bar_chart().render(), <span class=\"string\">\"bar.png\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Pie（饼图）\"><a href=\"#Pie（饼图）\" class=\"headerlink\" title=\"Pie（饼图）\"></a>Pie（饼图）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Pie</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\">key = [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">val = [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">pie = (</span><br><span class=\"line\">    Pie()</span><br><span class=\"line\">    .add(<span class=\"string\">\"\"</span>, [list(z) <span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> zip(key, val)])</span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"某商场销售情况\"</span>))</span><br><span class=\"line\">    .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class=\"string\">\"&#123;b&#125;: &#123;c&#125;(&#123;d&#125;%)\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">pie.render_notebook()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make_snapshot(driver, pie.render(), \"pie.png\")  # 保存图片</span></span><br></pre></td></tr></table></figure>\n<!-- <img src='pyecharts数据可视化\\pie.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n        <div id=\"dc6bc23d60bd4973916b962be084b2a3\" style=\"width:900px; height:500px;\"></div>\n        <script>\n            require(['echarts'], function(echarts) {\n                var chart_dc6bc23d60bd4973916b962be084b2a3 = echarts.init(\n                    document.getElementById('dc6bc23d60bd4973916b962be084b2a3'), 'white', {renderer: 'canvas'});\n                var option_dc6bc23d60bd4973916b962be084b2a3 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"pie\",\n                            \"clockwise\": true,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u886c\\u886b\",\n                                    \"value\": 114\n                                },\n                                {\n                                    \"name\": \"\\u6bdb\\u8863\",\n                                    \"value\": 55\n                                },\n                                {\n                                    \"name\": \"\\u9886\\u5e26\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u88e4\\u5b50\",\n                                    \"value\": 101\n                                },\n                                {\n                                    \"name\": \"\\u98ce\\u8863\",\n                                    \"value\": 125\n                                },\n                                {\n                                    \"name\": \"\\u9ad8\\u8ddf\\u978b\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u889c\\u5b50\",\n                                    \"value\": 105\n                                }\n                            ],\n                            \"radius\": [\n                                \"0%\",\n                                \"75%\"\n                            ],\n                            \"center\": [\n                                \"50%\",\n                                \"50%\"\n                            ],\n                            \"label\": {\n                                \"show\": true,\n                                \"position\": \"top\",\n                                \"margin\": 8,\n                                \"formatter\": \"{b}: {c}({d}%)\"\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"\\u886c\\u886b\",\n                                \"\\u6bdb\\u8863\",\n                                \"\\u9886\\u5e26\",\n                                \"\\u88e4\\u5b50\",\n                                \"\\u98ce\\u8863\",\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                \"\\u889c\\u5b50\"\n                            ],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"\\u67d0\\u5546\\u573a\\u9500\\u552e\\u60c5\\u51b5\"\n                        }\n                    ]\n                };\n                chart_dc6bc23d60bd4973916b962be084b2a3.setOption(option_dc6bc23d60bd4973916b962be084b2a3);\n            });\n        </script>\n    </body>\n</html>\n\n\n<h2 id=\"Line-折线图\"><a href=\"#Line-折线图\" class=\"headerlink\" title=\"Line (折线图)\"></a>Line (折线图)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Line</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\">key = [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">values1 = [<span class=\"number\">134</span>, <span class=\"number\">35</span>, <span class=\"number\">67</span>, <span class=\"number\">171</span>, <span class=\"number\">105</span>, <span class=\"number\">17</span>, <span class=\"number\">115</span>]</span><br><span class=\"line\">values2 = [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">line = (</span><br><span class=\"line\">    Line()</span><br><span class=\"line\">    .add_xaxis(key)</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家A\"</span>, values1)</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家B\"</span>, values2)</span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"Line-销售情况\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">line.render_notebook()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make_snapshot(driver, line.render(), \"line.png\")  # 保存图片</span></span><br></pre></td></tr></table></figure>\n<!-- <img src='pyecharts数据可视化\\line.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n    <div id=\"ab9ae8ad29ab4c04a6669abb9806d43f\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573902998482\">\n        <div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\">\n            <canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\">\n            </canvas>\n        </div>\n    </div>\n    <script>\n        require(['echarts'], function(echarts) {\n            var chart_ab9ae8ad29ab4c04a6669abb9806d43f = echarts.init(\n                document.getElementById('ab9ae8ad29ab4c04a6669abb9806d43f'), 'white', {renderer: 'canvas'});\n            var option_ab9ae8ad29ab4c04a6669abb9806d43f = {\n                \"animation\": true,\n                \"animationThreshold\": 2000,\n                \"animationDuration\": 1000,\n                \"animationEasing\": \"cubicOut\",\n                \"animationDelay\": 0,\n                \"animationDurationUpdate\": 300,\n                \"animationEasingUpdate\": \"cubicOut\",\n                \"animationDelayUpdate\": 0,\n                \"color\": [\n                    \"#c23531\",\n                    \"#2f4554\",\n                    \"#61a0a8\",\n                    \"#d48265\",\n                    \"#749f83\",\n                    \"#ca8622\",\n                    \"#bda29a\",\n                    \"#6e7074\",\n                    \"#546570\",\n                    \"#c4ccd3\",\n                    \"#f05b72\",\n                    \"#ef5b9c\",\n                    \"#f47920\",\n                    \"#905a3d\",\n                    \"#fab27b\",\n                    \"#2a5caa\",\n                    \"#444693\",\n                    \"#726930\",\n                    \"#b2d235\",\n                    \"#6d8346\",\n                    \"#ac6767\",\n                    \"#1d953f\",\n                    \"#6950a1\",\n                    \"#918597\"\n                ],\n                \"series\": [\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6A\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                134\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                35\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                67\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                171\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                105\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                17\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                115\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    },\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6B\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                114\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                55\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                27\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                101\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                125\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                27\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                105\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    }\n                ],\n                \"legend\": [\n                    {\n                        \"data\": [\n                            \"\\u5546\\u5bb6A\",\n                            \"\\u5546\\u5bb6B\"\n                        ],\n                        \"selected\": {\n                            \"\\u5546\\u5bb6A\": true,\n                            \"\\u5546\\u5bb6B\": true\n                        },\n                        \"show\": true\n                    }\n                ],\n                \"tooltip\": {\n                    \"show\": true,\n                    \"trigger\": \"item\",\n                    \"triggerOn\": \"mousemove|click\",\n                    \"axisPointer\": {\n                        \"type\": \"line\"\n                    },\n                    \"textStyle\": {\n                        \"fontSize\": 14\n                    },\n                    \"borderWidth\": 0\n                },\n                \"xAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        },\n                        \"data\": [\n                            \"\\u886c\\u886b\",\n                            \"\\u6bdb\\u8863\",\n                            \"\\u9886\\u5e26\",\n                            \"\\u88e4\\u5b50\",\n                            \"\\u98ce\\u8863\",\n                            \"\\u9ad8\\u8ddf\\u978b\",\n                            \"\\u889c\\u5b50\"\n                        ]\n                    }\n                ],\n                \"yAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        }\n                    }\n                ],\n                \"title\": [\n                    {\n                        \"text\": \"Line-\\u9500\\u552e\\u60c5\\u51b5\"\n                    }\n                ]\n            };\n            chart_ab9ae8ad29ab4c04a6669abb9806d43f.setOption(option_ab9ae8ad29ab4c04a6669abb9806d43f);\n        });\n    </script>\n</body></html>\n\n\n<h2 id=\"WordCloud（词云图）\"><a href=\"#WordCloud（词云图）\" class=\"headerlink\" title=\"WordCloud（词云图）\"></a>WordCloud（词云图）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Page, WordCloud</span><br><span class=\"line\"></span><br><span class=\"line\">words = [</span><br><span class=\"line\">    (<span class=\"string\">\"Sam S Club\"</span>, <span class=\"number\">10000</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Macys\"</span>, <span class=\"number\">6181</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Amy Schumer\"</span>, <span class=\"number\">4386</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Jurassic World\"</span>, <span class=\"number\">4055</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Charter Communications\"</span>, <span class=\"number\">2467</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Chick Fil A\"</span>, <span class=\"number\">2244</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Planet Fitness\"</span>, <span class=\"number\">1868</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Pitch Perfect\"</span>, <span class=\"number\">1484</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Express\"</span>, <span class=\"number\">1112</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Home\"</span>, <span class=\"number\">865</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Johnny Depp\"</span>, <span class=\"number\">847</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Lena Dunham\"</span>, <span class=\"number\">582</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Lewis Hamilton\"</span>, <span class=\"number\">555</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"KXAN\"</span>, <span class=\"number\">550</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Mary Ellen Mark\"</span>, <span class=\"number\">462</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Farrah Abraham\"</span>, <span class=\"number\">366</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Rita Ora\"</span>, <span class=\"number\">360</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Serena Williams\"</span>, <span class=\"number\">282</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"NCAA baseball tournament\"</span>, <span class=\"number\">273</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Point Break\"</span>, <span class=\"number\">265</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">wordcloud = (</span><br><span class=\"line\">    WordCloud()</span><br><span class=\"line\"><span class=\"comment\">#     .add(\"\", words, word_size_range=[20, 100])</span></span><br><span class=\"line\">    .add(<span class=\"string\">\"\"</span>, words, word_size_range=[<span class=\"number\">20</span>, <span class=\"number\">100</span>], shape=<span class=\"string\">\"diamond\"</span>)    <span class=\"comment\"># 词云图的形状可以通过shape参数来选择</span></span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"WordCloud-示例\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">wordcloud.render_notebook()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make_snapshot(driver, wordcloud.render(), \"wordcloud.png\")  # 保存图片</span></span><br></pre></td></tr></table></figure>\n<!-- <img src='pyecharts数据可视化\\wordcloud.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'echarts-wordcloud':'https://assets.pyecharts.org/assets/echarts-wordcloud.min'\n                }\n            });\n        </script>\n        <div id=\"a8dfa3633fb840cfb128c12639f5de2c\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573903933739\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div style=\"position: absolute; display: none; border-style: solid; white-space: nowrap; z-index: 9999999; transition: left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; background-color: rgba(50, 50, 50, 0.7); border-width: 0px; border-color: rgb(51, 51, 51); border-radius: 4px; color: rgb(255, 255, 255); font: 14px/21px &quot;Microsoft YaHei&quot;; padding: 5px; left: 565px; top: 167px; pointer-events: none;\"><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:rgb(127,21,19);\"></span>Lewis Hamilton: 555</div></div>\n        <script>\n            require(['echarts', 'echarts-wordcloud'], function(echarts) {\n                var chart_a8dfa3633fb840cfb128c12639f5de2c = echarts.init(\n                    document.getElementById('a8dfa3633fb840cfb128c12639f5de2c'), 'white', {renderer: 'canvas'});\n                var option_a8dfa3633fb840cfb128c12639f5de2c = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"wordCloud\",\n                            \"shape\": \"diamond\",\n                            \"rotationRange\": [\n                                0,\n                                0\n                            ],\n                            \"rotationStep\": 45,\n                            \"girdSize\": 20,\n                            \"sizeRange\": [\n                                20,\n                                100\n                            ],\n                            \"data\": [\n                                {\n                                    \"name\": \"Sam S Club\",\n                                    \"value\": 10000,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(96,98,41)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Macys\",\n                                    \"value\": 6181,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(64,68,59)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Amy Schumer\",\n                                    \"value\": 4386,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(128,147,58)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Jurassic World\",\n                                    \"value\": 4055,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(136,117,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Charter Communications\",\n                                    \"value\": 2467,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(93,92,51)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Chick Fil A\",\n                                    \"value\": 2244,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(5,46,60)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Planet Fitness\",\n                                    \"value\": 1868,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(32,83,135)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Pitch Perfect\",\n                                    \"value\": 1484,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,109,154)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Express\",\n                                    \"value\": 1112,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(140,65,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Home\",\n                                    \"value\": 865,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(29,95,2)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Johnny Depp\",\n                                    \"value\": 847,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(12,141,132)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lena Dunham\",\n                                    \"value\": 582,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(21,112,93)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lewis Hamilton\",\n                                    \"value\": 555,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(127,21,19)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"KXAN\",\n                                    \"value\": 550,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(36,92,90)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Mary Ellen Mark\",\n                                    \"value\": 462,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(52,63,149)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Farrah Abraham\",\n                                    \"value\": 366,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(41,132,54)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Rita Ora\",\n                                    \"value\": 360,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,77,18)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Serena Williams\",\n                                    \"value\": 282,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(7,40,156)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"NCAA baseball tournament\",\n                                    \"value\": 273,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(117,2,101)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Point Break\",\n                                    \"value\": 265,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,53,94)\"\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"WordCloud-\\u57fa\\u672c\\u793a\\u4f8b\"\n                        }\n                    ]\n                };\n                chart_a8dfa3633fb840cfb128c12639f5de2c.setOption(option_a8dfa3633fb840cfb128c12639f5de2c);\n            });\n        </script>\n    </body>\n</html>\n\n\n\n<h2 id=\"Geo（地图）\"><a href=\"#Geo（地图）\" class=\"headerlink\" title=\"Geo（地图）\"></a>Geo（地图）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Geo, Page</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.faker <span class=\"keyword\">import</span> Collector, Faker</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.globals <span class=\"keyword\">import</span> ChartType, SymbolType</span><br><span class=\"line\"></span><br><span class=\"line\">geo_line =  (</span><br><span class=\"line\">        Geo()</span><br><span class=\"line\">        .add_schema(maptype=<span class=\"string\">\"china\"</span>)</span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            <span class=\"string\">\"destination\"</span>,</span><br><span class=\"line\">            [(<span class=\"string\">\"广州\"</span>, <span class=\"number\">55</span>), (<span class=\"string\">\"北京\"</span>, <span class=\"number\">66</span>), (<span class=\"string\">\"杭州\"</span>, <span class=\"number\">77</span>), (<span class=\"string\">\"重庆\"</span>, <span class=\"number\">88</span>)],</span><br><span class=\"line\">            type_=ChartType.EFFECT_SCATTER,</span><br><span class=\"line\">            color=<span class=\"string\">\"blue\"</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            <span class=\"string\">\"geo\"</span>,</span><br><span class=\"line\">            [(<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"上海\"</span>), (<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"北京\"</span>), (<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"杭州\"</span>), (<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"重庆\"</span>)],</span><br><span class=\"line\">            type_=ChartType.LINES,</span><br><span class=\"line\">            effect_opts=opts.EffectOpts(</span><br><span class=\"line\">                symbol=SymbolType.ARROW, symbol_size=<span class=\"number\">6</span>, color=<span class=\"string\">\"blue\"</span></span><br><span class=\"line\">            ),</span><br><span class=\"line\">            linestyle_opts=opts.LineStyleOpts(curve=<span class=\"number\">0.3</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class=\"literal\">False</span>))</span><br><span class=\"line\">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"Geo-Lines\"</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">geo_line.render_notebook()</span><br></pre></td></tr></table></figure>\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"77369bcb5d9b43849d3d710b0c5af18d\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574061446221\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas><canvas data-zr-dom-id=\"zr_3\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_77369bcb5d9b43849d3d710b0c5af18d = echarts.init(\n                    document.getElementById('77369bcb5d9b43849d3d710b0c5af18d'), 'white', {renderer: 'canvas'});\n                var option_77369bcb5d9b43849d3d710b0c5af18d = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"blue\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        55\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        66\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        77\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u91cd\\u5e86\",\n                                    \"value\": [\n                                        106.551556,\n                                        29.563009,\n                                        88\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        },\n                        {\n                            \"type\": \"lines\",\n                            \"name\": \"geo\",\n                            \"coordinateSystem\": \"geo\",\n                            \"zlevel\": 3,\n                            \"effect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4,\n                                \"color\": \"blue\",\n                                \"symbol\": \"arrow\",\n                                \"symbolSize\": 6\n                            },\n                            \"symbol\": [\n                                \"none\",\n                                \"arrow\"\n                            ],\n                            \"polyline\": false,\n                            \"large\": false,\n                            \"largeThreshold\": 2000,\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u4e0a\\u6d77\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            121.473701,\n                                            31.230416\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u5317\\u4eac\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            116.407526,\n                                            39.90403\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u676d\\u5dde\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            120.19,\n                                            30.26\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u91cd\\u5e86\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            106.551556,\n                                            29.563009\n                                        ]\n                                    ]\n                                }\n                            ],\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0.3,\n                                \"type\": \"solid\"\n                            },\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\",\n                                \"geo\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true,\n                                \"geo\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-Lines\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"emphasis\": {}\n                    }\n                };\n                chart_77369bcb5d9b43849d3d710b0c5af18d.setOption(option_77369bcb5d9b43849d3d710b0c5af18d);\n            });\n        </script>\n    <script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>\n</the>","site":{"data":{}},"excerpt":"<h1 id=\"什么是pyecharts\"><a href=\"#什么是pyecharts\" class=\"headerlink\" title=\"什么是pyecharts\"></a>什么是pyecharts</h1><p>pyecharts 是一个用于生成 Echarts 图表的类库。<br>echarts 是百度开源的一个数据可视化 JS 库，主要用于数据可视化。pyecharts 是一个用于生成 Echarts 图表的类库。实际上就是 Echarts 与 Python 的对接。<br>使用 pyecharts 可以生成独立的网页，也可以在 flask , Django 中集成使用。</p>\n<ul>\n<li><p>pyecharts/pyecharts: 🎨 Python Echarts Plotting Library<br><a href=\"https://github.com/pyecharts/pyecharts\" target=\"_blank\" rel=\"noopener\">https://github.com/pyecharts/pyecharts</a></p>\n</li>\n<li><p>简介 - pyecharts - A Python Echarts Plotting Library<br><a href=\"https://pyecharts.org/#/zh-cn/intro\" target=\"_blank\" rel=\"noopener\">https://pyecharts.org/#/zh-cn/intro</a></p>\n</li>\n</ul>","more":"<the rest of contents | 余下全文>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyecharts</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pyecharts</span><br><span class=\"line\">pyecharts.__version__</span><br></pre></td></tr></table></figure>\n<pre><code>&#39;1.5.1&#39;\n</code></pre><h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chart_object = Type()       <span class=\"comment\"># 初始化具体类型图表</span></span><br><span class=\"line\">chart_object.add()          <span class=\"comment\"># 添加图表的数据和设置各种配置项</span></span><br><span class=\"line\">chart_object.show_config()  <span class=\"comment\"># 打印所有配置项</span></span><br><span class=\"line\">chart_object.render()       <span class=\"comment\"># 生成 .html 文件；支持 path 参数，设置文件保存位置，如 render(r\"e:my_first_chart.html\")，文件用浏览器打开。</span></span><br></pre></td></tr></table></figure>\n<p>默认的编码类型为 UTF-8。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><h2 id=\"Bar（柱状图-条形图）\"><a href=\"#Bar（柱状图-条形图）\" class=\"headerlink\" title=\"Bar（柱状图/条形图）\"></a>Bar（柱状图/条形图）</h2><h3 id=\"生成html\"><a href=\"#生成html\" class=\"headerlink\" title=\"生成html\"></a>生成html</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Bar</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># V1 版本开始支持链式调用</span></span><br><span class=\"line\">bar = (</span><br><span class=\"line\">    Bar()</span><br><span class=\"line\">    .add_xaxis([<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>])</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家A\"</span>, [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>])</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家B\"</span>, [<span class=\"number\">57</span>, <span class=\"number\">134</span>, <span class=\"number\">137</span>, <span class=\"number\">129</span>, <span class=\"number\">145</span>, <span class=\"number\">60</span>, <span class=\"number\">49</span>])</span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"某商场销售情况\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\">bar.render()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不习惯链式调用的开发者依旧可以单独调用方法</span></span><br><span class=\"line\">bar = Bar()</span><br><span class=\"line\">bar.add_xaxis([<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>])</span><br><span class=\"line\">bar.add_yaxis(<span class=\"string\">\"商家A\"</span>, [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>])</span><br><span class=\"line\">bar.add_yaxis(<span class=\"string\">\"商家B\"</span>, [<span class=\"number\">57</span>, <span class=\"number\">134</span>, <span class=\"number\">137</span>, <span class=\"number\">129</span>, <span class=\"number\">145</span>, <span class=\"number\">60</span>, <span class=\"number\">49</span>])</span><br><span class=\"line\">bar.set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"某商场销售情况\"</span>))</span><br><span class=\"line\">bar.render()</span><br></pre></td></tr></table></figure>\n<pre><code>&#39;C:\\\\Users\\\\Administrator\\\\Desktop\\\\Python-BaseTutorial-master\\\\render.html&#39;\n</code></pre><h3 id=\"在-jupyter-notebook-中显示\"><a href=\"#在-jupyter-notebook-中显示\" class=\"headerlink\" title=\"在 jupyter notebook 中显示\"></a>在 jupyter notebook 中显示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bar.render_notebook()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/10/pyecharts数据可视化/bar.png\"></p>\n<h3 id=\"生成图片\"><a href=\"#生成图片\" class=\"headerlink\" title=\"生成图片\"></a>生成图片</h3><h4 id=\"安装：使用-pyecharts-snapshot插件\"><a href=\"#安装：使用-pyecharts-snapshot插件\" class=\"headerlink\" title=\"安装：使用 pyecharts-snapshot插件\"></a>安装：使用 pyecharts-snapshot插件</h4><ol>\n<li>npm install -g phantomjs-prebuilt</li>\n<li>安装 Nodejs 环境</li>\n<li>pip install pyecharts-snapshot</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># from snapshot_selenium import snapshot as driver</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> snapshot_phantomjs <span class=\"keyword\">import</span> snapshot <span class=\"keyword\">as</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Bar</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.render <span class=\"keyword\">import</span> make_snapshot</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar_chart</span><span class=\"params\">()</span> -&gt; Bar:</span></span><br><span class=\"line\">    c = (</span><br><span class=\"line\">        Bar()</span><br><span class=\"line\">        .add_xaxis([<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>])</span><br><span class=\"line\">        .add_yaxis(<span class=\"string\">\"商家A\"</span>, [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>])</span><br><span class=\"line\">        .add_yaxis(<span class=\"string\">\"商家B\"</span>, [<span class=\"number\">57</span>, <span class=\"number\">134</span>, <span class=\"number\">137</span>, <span class=\"number\">129</span>, <span class=\"number\">145</span>, <span class=\"number\">60</span>, <span class=\"number\">49</span>])</span><br><span class=\"line\">        .reversal_axis()</span><br><span class=\"line\">        .set_series_opts(label_opts=opts.LabelOpts(position=<span class=\"string\">\"right\"</span>))</span><br><span class=\"line\">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"Bar-测试渲染图片\"</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要安装 snapshot-selenium 或者 snapshot-phantomjs</span></span><br><span class=\"line\">make_snapshot(driver, bar_chart().render(), <span class=\"string\">\"bar.png\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Pie（饼图）\"><a href=\"#Pie（饼图）\" class=\"headerlink\" title=\"Pie（饼图）\"></a>Pie（饼图）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Pie</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\">key = [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">val = [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">pie = (</span><br><span class=\"line\">    Pie()</span><br><span class=\"line\">    .add(<span class=\"string\">\"\"</span>, [list(z) <span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> zip(key, val)])</span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"某商场销售情况\"</span>))</span><br><span class=\"line\">    .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class=\"string\">\"&#123;b&#125;: &#123;c&#125;(&#123;d&#125;%)\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">pie.render_notebook()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make_snapshot(driver, pie.render(), \"pie.png\")  # 保存图片</span></span><br></pre></td></tr></table></figure>\n<!-- <img src='pyecharts数据可视化\\pie.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n        <div id=\"dc6bc23d60bd4973916b962be084b2a3\" style=\"width:900px; height:500px;\"></div>\n        <script>\n            require(['echarts'], function(echarts) {\n                var chart_dc6bc23d60bd4973916b962be084b2a3 = echarts.init(\n                    document.getElementById('dc6bc23d60bd4973916b962be084b2a3'), 'white', {renderer: 'canvas'});\n                var option_dc6bc23d60bd4973916b962be084b2a3 = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"pie\",\n                            \"clockwise\": true,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u886c\\u886b\",\n                                    \"value\": 114\n                                },\n                                {\n                                    \"name\": \"\\u6bdb\\u8863\",\n                                    \"value\": 55\n                                },\n                                {\n                                    \"name\": \"\\u9886\\u5e26\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u88e4\\u5b50\",\n                                    \"value\": 101\n                                },\n                                {\n                                    \"name\": \"\\u98ce\\u8863\",\n                                    \"value\": 125\n                                },\n                                {\n                                    \"name\": \"\\u9ad8\\u8ddf\\u978b\",\n                                    \"value\": 27\n                                },\n                                {\n                                    \"name\": \"\\u889c\\u5b50\",\n                                    \"value\": 105\n                                }\n                            ],\n                            \"radius\": [\n                                \"0%\",\n                                \"75%\"\n                            ],\n                            \"center\": [\n                                \"50%\",\n                                \"50%\"\n                            ],\n                            \"label\": {\n                                \"show\": true,\n                                \"position\": \"top\",\n                                \"margin\": 8,\n                                \"formatter\": \"{b}: {c}({d}%)\"\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"\\u886c\\u886b\",\n                                \"\\u6bdb\\u8863\",\n                                \"\\u9886\\u5e26\",\n                                \"\\u88e4\\u5b50\",\n                                \"\\u98ce\\u8863\",\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                \"\\u889c\\u5b50\"\n                            ],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"\\u67d0\\u5546\\u573a\\u9500\\u552e\\u60c5\\u51b5\"\n                        }\n                    ]\n                };\n                chart_dc6bc23d60bd4973916b962be084b2a3.setOption(option_dc6bc23d60bd4973916b962be084b2a3);\n            });\n        </script>\n    </body>\n</html>\n\n\n<h2 id=\"Line-折线图\"><a href=\"#Line-折线图\" class=\"headerlink\" title=\"Line (折线图)\"></a>Line (折线图)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Line</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\">key = [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"毛衣\"</span>, <span class=\"string\">\"领带\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"风衣\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">values1 = [<span class=\"number\">134</span>, <span class=\"number\">35</span>, <span class=\"number\">67</span>, <span class=\"number\">171</span>, <span class=\"number\">105</span>, <span class=\"number\">17</span>, <span class=\"number\">115</span>]</span><br><span class=\"line\">values2 = [<span class=\"number\">114</span>, <span class=\"number\">55</span>, <span class=\"number\">27</span>, <span class=\"number\">101</span>, <span class=\"number\">125</span>, <span class=\"number\">27</span>, <span class=\"number\">105</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">line = (</span><br><span class=\"line\">    Line()</span><br><span class=\"line\">    .add_xaxis(key)</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家A\"</span>, values1)</span><br><span class=\"line\">    .add_yaxis(<span class=\"string\">\"商家B\"</span>, values2)</span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"Line-销售情况\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">line.render_notebook()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make_snapshot(driver, line.render(), \"line.png\")  # 保存图片</span></span><br></pre></td></tr></table></figure>\n<!-- <img src='pyecharts数据可视化\\line.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min'\n                }\n            });\n        </script>\n    <div id=\"ab9ae8ad29ab4c04a6669abb9806d43f\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573902998482\">\n        <div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\">\n            <canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\">\n            </canvas>\n        </div>\n    </div>\n    <script>\n        require(['echarts'], function(echarts) {\n            var chart_ab9ae8ad29ab4c04a6669abb9806d43f = echarts.init(\n                document.getElementById('ab9ae8ad29ab4c04a6669abb9806d43f'), 'white', {renderer: 'canvas'});\n            var option_ab9ae8ad29ab4c04a6669abb9806d43f = {\n                \"animation\": true,\n                \"animationThreshold\": 2000,\n                \"animationDuration\": 1000,\n                \"animationEasing\": \"cubicOut\",\n                \"animationDelay\": 0,\n                \"animationDurationUpdate\": 300,\n                \"animationEasingUpdate\": \"cubicOut\",\n                \"animationDelayUpdate\": 0,\n                \"color\": [\n                    \"#c23531\",\n                    \"#2f4554\",\n                    \"#61a0a8\",\n                    \"#d48265\",\n                    \"#749f83\",\n                    \"#ca8622\",\n                    \"#bda29a\",\n                    \"#6e7074\",\n                    \"#546570\",\n                    \"#c4ccd3\",\n                    \"#f05b72\",\n                    \"#ef5b9c\",\n                    \"#f47920\",\n                    \"#905a3d\",\n                    \"#fab27b\",\n                    \"#2a5caa\",\n                    \"#444693\",\n                    \"#726930\",\n                    \"#b2d235\",\n                    \"#6d8346\",\n                    \"#ac6767\",\n                    \"#1d953f\",\n                    \"#6950a1\",\n                    \"#918597\"\n                ],\n                \"series\": [\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6A\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                134\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                35\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                67\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                171\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                105\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                17\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                115\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    },\n                    {\n                        \"type\": \"line\",\n                        \"name\": \"\\u5546\\u5bb6B\",\n                        \"connectNulls\": false,\n                        \"symbolSize\": 4,\n                        \"showSymbol\": true,\n                        \"smooth\": false,\n                        \"step\": false,\n                        \"data\": [\n                            [\n                                \"\\u886c\\u886b\",\n                                114\n                            ],\n                            [\n                                \"\\u6bdb\\u8863\",\n                                55\n                            ],\n                            [\n                                \"\\u9886\\u5e26\",\n                                27\n                            ],\n                            [\n                                \"\\u88e4\\u5b50\",\n                                101\n                            ],\n                            [\n                                \"\\u98ce\\u8863\",\n                                125\n                            ],\n                            [\n                                \"\\u9ad8\\u8ddf\\u978b\",\n                                27\n                            ],\n                            [\n                                \"\\u889c\\u5b50\",\n                                105\n                            ]\n                        ],\n                        \"hoverAnimation\": true,\n                        \"label\": {\n                            \"show\": true,\n                            \"position\": \"top\",\n                            \"margin\": 8\n                        },\n                        \"lineStyle\": {\n                            \"width\": 1,\n                            \"opacity\": 1,\n                            \"curveness\": 0,\n                            \"type\": \"solid\"\n                        },\n                        \"areaStyle\": {\n                            \"opacity\": 0\n                        }\n                    }\n                ],\n                \"legend\": [\n                    {\n                        \"data\": [\n                            \"\\u5546\\u5bb6A\",\n                            \"\\u5546\\u5bb6B\"\n                        ],\n                        \"selected\": {\n                            \"\\u5546\\u5bb6A\": true,\n                            \"\\u5546\\u5bb6B\": true\n                        },\n                        \"show\": true\n                    }\n                ],\n                \"tooltip\": {\n                    \"show\": true,\n                    \"trigger\": \"item\",\n                    \"triggerOn\": \"mousemove|click\",\n                    \"axisPointer\": {\n                        \"type\": \"line\"\n                    },\n                    \"textStyle\": {\n                        \"fontSize\": 14\n                    },\n                    \"borderWidth\": 0\n                },\n                \"xAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        },\n                        \"data\": [\n                            \"\\u886c\\u886b\",\n                            \"\\u6bdb\\u8863\",\n                            \"\\u9886\\u5e26\",\n                            \"\\u88e4\\u5b50\",\n                            \"\\u98ce\\u8863\",\n                            \"\\u9ad8\\u8ddf\\u978b\",\n                            \"\\u889c\\u5b50\"\n                        ]\n                    }\n                ],\n                \"yAxis\": [\n                    {\n                        \"show\": true,\n                        \"scale\": false,\n                        \"nameLocation\": \"end\",\n                        \"nameGap\": 15,\n                        \"gridIndex\": 0,\n                        \"inverse\": false,\n                        \"offset\": 0,\n                        \"splitNumber\": 5,\n                        \"minInterval\": 0,\n                        \"splitLine\": {\n                            \"show\": false,\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0,\n                                \"type\": \"solid\"\n                            }\n                        }\n                    }\n                ],\n                \"title\": [\n                    {\n                        \"text\": \"Line-\\u9500\\u552e\\u60c5\\u51b5\"\n                    }\n                ]\n            };\n            chart_ab9ae8ad29ab4c04a6669abb9806d43f.setOption(option_ab9ae8ad29ab4c04a6669abb9806d43f);\n        });\n    </script>\n</body></html>\n\n\n<h2 id=\"WordCloud（词云图）\"><a href=\"#WordCloud（词云图）\" class=\"headerlink\" title=\"WordCloud（词云图）\"></a>WordCloud（词云图）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Page, WordCloud</span><br><span class=\"line\"></span><br><span class=\"line\">words = [</span><br><span class=\"line\">    (<span class=\"string\">\"Sam S Club\"</span>, <span class=\"number\">10000</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Macys\"</span>, <span class=\"number\">6181</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Amy Schumer\"</span>, <span class=\"number\">4386</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Jurassic World\"</span>, <span class=\"number\">4055</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Charter Communications\"</span>, <span class=\"number\">2467</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Chick Fil A\"</span>, <span class=\"number\">2244</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Planet Fitness\"</span>, <span class=\"number\">1868</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Pitch Perfect\"</span>, <span class=\"number\">1484</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Express\"</span>, <span class=\"number\">1112</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Home\"</span>, <span class=\"number\">865</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Johnny Depp\"</span>, <span class=\"number\">847</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Lena Dunham\"</span>, <span class=\"number\">582</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Lewis Hamilton\"</span>, <span class=\"number\">555</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"KXAN\"</span>, <span class=\"number\">550</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Mary Ellen Mark\"</span>, <span class=\"number\">462</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Farrah Abraham\"</span>, <span class=\"number\">366</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Rita Ora\"</span>, <span class=\"number\">360</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Serena Williams\"</span>, <span class=\"number\">282</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"NCAA baseball tournament\"</span>, <span class=\"number\">273</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Point Break\"</span>, <span class=\"number\">265</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">wordcloud = (</span><br><span class=\"line\">    WordCloud()</span><br><span class=\"line\"><span class=\"comment\">#     .add(\"\", words, word_size_range=[20, 100])</span></span><br><span class=\"line\">    .add(<span class=\"string\">\"\"</span>, words, word_size_range=[<span class=\"number\">20</span>, <span class=\"number\">100</span>], shape=<span class=\"string\">\"diamond\"</span>)    <span class=\"comment\"># 词云图的形状可以通过shape参数来选择</span></span><br><span class=\"line\">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"WordCloud-示例\"</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">wordcloud.render_notebook()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># make_snapshot(driver, wordcloud.render(), \"wordcloud.png\")  # 保存图片</span></span><br></pre></td></tr></table></figure>\n<!-- <img src='pyecharts数据可视化\\wordcloud.png'> -->\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'echarts-wordcloud':'https://assets.pyecharts.org/assets/echarts-wordcloud.min'\n                }\n            });\n        </script>\n        <div id=\"a8dfa3633fb840cfb128c12639f5de2c\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1573903933739\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: pointer;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div style=\"position: absolute; display: none; border-style: solid; white-space: nowrap; z-index: 9999999; transition: left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; background-color: rgba(50, 50, 50, 0.7); border-width: 0px; border-color: rgb(51, 51, 51); border-radius: 4px; color: rgb(255, 255, 255); font: 14px/21px &quot;Microsoft YaHei&quot;; padding: 5px; left: 565px; top: 167px; pointer-events: none;\"><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:rgb(127,21,19);\"></span>Lewis Hamilton: 555</div></div>\n        <script>\n            require(['echarts', 'echarts-wordcloud'], function(echarts) {\n                var chart_a8dfa3633fb840cfb128c12639f5de2c = echarts.init(\n                    document.getElementById('a8dfa3633fb840cfb128c12639f5de2c'), 'white', {renderer: 'canvas'});\n                var option_a8dfa3633fb840cfb128c12639f5de2c = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"wordCloud\",\n                            \"shape\": \"diamond\",\n                            \"rotationRange\": [\n                                0,\n                                0\n                            ],\n                            \"rotationStep\": 45,\n                            \"girdSize\": 20,\n                            \"sizeRange\": [\n                                20,\n                                100\n                            ],\n                            \"data\": [\n                                {\n                                    \"name\": \"Sam S Club\",\n                                    \"value\": 10000,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(96,98,41)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Macys\",\n                                    \"value\": 6181,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(64,68,59)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Amy Schumer\",\n                                    \"value\": 4386,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(128,147,58)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Jurassic World\",\n                                    \"value\": 4055,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(136,117,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Charter Communications\",\n                                    \"value\": 2467,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(93,92,51)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Chick Fil A\",\n                                    \"value\": 2244,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(5,46,60)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Planet Fitness\",\n                                    \"value\": 1868,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(32,83,135)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Pitch Perfect\",\n                                    \"value\": 1484,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,109,154)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Express\",\n                                    \"value\": 1112,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(140,65,98)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Home\",\n                                    \"value\": 865,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(29,95,2)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Johnny Depp\",\n                                    \"value\": 847,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(12,141,132)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lena Dunham\",\n                                    \"value\": 582,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(21,112,93)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Lewis Hamilton\",\n                                    \"value\": 555,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(127,21,19)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"KXAN\",\n                                    \"value\": 550,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(36,92,90)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Mary Ellen Mark\",\n                                    \"value\": 462,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(52,63,149)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Farrah Abraham\",\n                                    \"value\": 366,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(41,132,54)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Rita Ora\",\n                                    \"value\": 360,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,77,18)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Serena Williams\",\n                                    \"value\": 282,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(7,40,156)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"NCAA baseball tournament\",\n                                    \"value\": 273,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(117,2,101)\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"name\": \"Point Break\",\n                                    \"value\": 265,\n                                    \"textStyle\": {\n                                        \"normal\": {\n                                            \"color\": \"rgb(22,53,94)\"\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [],\n                            \"selected\": {},\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"WordCloud-\\u57fa\\u672c\\u793a\\u4f8b\"\n                        }\n                    ]\n                };\n                chart_a8dfa3633fb840cfb128c12639f5de2c.setOption(option_a8dfa3633fb840cfb128c12639f5de2c);\n            });\n        </script>\n    </body>\n</html>\n\n\n\n<h2 id=\"Geo（地图）\"><a href=\"#Geo（地图）\" class=\"headerlink\" title=\"Geo（地图）\"></a>Geo（地图）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Geo, Page</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.faker <span class=\"keyword\">import</span> Collector, Faker</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.globals <span class=\"keyword\">import</span> ChartType, SymbolType</span><br><span class=\"line\"></span><br><span class=\"line\">geo_line =  (</span><br><span class=\"line\">        Geo()</span><br><span class=\"line\">        .add_schema(maptype=<span class=\"string\">\"china\"</span>)</span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            <span class=\"string\">\"destination\"</span>,</span><br><span class=\"line\">            [(<span class=\"string\">\"广州\"</span>, <span class=\"number\">55</span>), (<span class=\"string\">\"北京\"</span>, <span class=\"number\">66</span>), (<span class=\"string\">\"杭州\"</span>, <span class=\"number\">77</span>), (<span class=\"string\">\"重庆\"</span>, <span class=\"number\">88</span>)],</span><br><span class=\"line\">            type_=ChartType.EFFECT_SCATTER,</span><br><span class=\"line\">            color=<span class=\"string\">\"blue\"</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .add(</span><br><span class=\"line\">            <span class=\"string\">\"geo\"</span>,</span><br><span class=\"line\">            [(<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"上海\"</span>), (<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"北京\"</span>), (<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"杭州\"</span>), (<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"重庆\"</span>)],</span><br><span class=\"line\">            type_=ChartType.LINES,</span><br><span class=\"line\">            effect_opts=opts.EffectOpts(</span><br><span class=\"line\">                symbol=SymbolType.ARROW, symbol_size=<span class=\"number\">6</span>, color=<span class=\"string\">\"blue\"</span></span><br><span class=\"line\">            ),</span><br><span class=\"line\">            linestyle_opts=opts.LineStyleOpts(curve=<span class=\"number\">0.3</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class=\"literal\">False</span>))</span><br><span class=\"line\">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class=\"string\">\"Geo-Lines\"</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">geo_line.render_notebook()</span><br></pre></td></tr></table></figure>\n<html>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n    <body>\n        <script>\n            require.config({\n                paths: {\n                    'echarts':'https://assets.pyecharts.org/assets/echarts.min', 'china':'https://assets.pyecharts.org/assets/maps/china'\n                }\n            });\n        </script>\n        <div id=\"77369bcb5d9b43849d3d710b0c5af18d\" style=\"width: 900px; height: 500px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative;\" _echarts_instance_=\"ec_1574061446221\"><div style=\"position: relative; overflow: hidden; width: 900px; height: 500px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;\"><canvas data-zr-dom-id=\"zr_0\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas><canvas data-zr-dom-id=\"zr_3\" width=\"900\" height=\"500\" style=\"position: absolute; left: 0px; top: 0px; width: 900px; height: 500px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;\"></canvas></div><div></div></div>\n        <script>\n            require(['echarts', 'china'], function(echarts) {\n                var chart_77369bcb5d9b43849d3d710b0c5af18d = echarts.init(\n                    document.getElementById('77369bcb5d9b43849d3d710b0c5af18d'), 'white', {renderer: 'canvas'});\n                var option_77369bcb5d9b43849d3d710b0c5af18d = {\n                    \"animation\": true,\n                    \"animationThreshold\": 2000,\n                    \"animationDuration\": 1000,\n                    \"animationEasing\": \"cubicOut\",\n                    \"animationDelay\": 0,\n                    \"animationDurationUpdate\": 300,\n                    \"animationEasingUpdate\": \"cubicOut\",\n                    \"animationDelayUpdate\": 0,\n                    \"color\": [\n                        \"blue\",\n                        \"#c23531\",\n                        \"#2f4554\",\n                        \"#61a0a8\",\n                        \"#d48265\",\n                        \"#749f83\",\n                        \"#ca8622\",\n                        \"#bda29a\",\n                        \"#6e7074\",\n                        \"#546570\",\n                        \"#c4ccd3\",\n                        \"#f05b72\",\n                        \"#ef5b9c\",\n                        \"#f47920\",\n                        \"#905a3d\",\n                        \"#fab27b\",\n                        \"#2a5caa\",\n                        \"#444693\",\n                        \"#726930\",\n                        \"#b2d235\",\n                        \"#6d8346\",\n                        \"#ac6767\",\n                        \"#1d953f\",\n                        \"#6950a1\",\n                        \"#918597\"\n                    ],\n                    \"series\": [\n                        {\n                            \"type\": \"effectScatter\",\n                            \"name\": \"destination\",\n                            \"coordinateSystem\": \"geo\",\n                            \"showEffectOn\": \"render\",\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            },\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde\",\n                                    \"value\": [\n                                        113.23,\n                                        23.16,\n                                        55\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5317\\u4eac\",\n                                    \"value\": [\n                                        116.407526,\n                                        39.90403,\n                                        66\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u676d\\u5dde\",\n                                    \"value\": [\n                                        120.19,\n                                        30.26,\n                                        77\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u91cd\\u5e86\",\n                                    \"value\": [\n                                        106.551556,\n                                        29.563009,\n                                        88\n                                    ]\n                                }\n                            ],\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            }\n                        },\n                        {\n                            \"type\": \"lines\",\n                            \"name\": \"geo\",\n                            \"coordinateSystem\": \"geo\",\n                            \"zlevel\": 3,\n                            \"effect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4,\n                                \"color\": \"blue\",\n                                \"symbol\": \"arrow\",\n                                \"symbolSize\": 6\n                            },\n                            \"symbol\": [\n                                \"none\",\n                                \"arrow\"\n                            ],\n                            \"polyline\": false,\n                            \"large\": false,\n                            \"largeThreshold\": 2000,\n                            \"symbolSize\": 12,\n                            \"data\": [\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u4e0a\\u6d77\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            121.473701,\n                                            31.230416\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u5317\\u4eac\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            116.407526,\n                                            39.90403\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u676d\\u5dde\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            120.19,\n                                            30.26\n                                        ]\n                                    ]\n                                },\n                                {\n                                    \"name\": \"\\u5e7f\\u5dde->\\u91cd\\u5e86\",\n                                    \"coords\": [\n                                        [\n                                            113.23,\n                                            23.16\n                                        ],\n                                        [\n                                            106.551556,\n                                            29.563009\n                                        ]\n                                    ]\n                                }\n                            ],\n                            \"lineStyle\": {\n                                \"width\": 1,\n                                \"opacity\": 1,\n                                \"curveness\": 0.3,\n                                \"type\": \"solid\"\n                            },\n                            \"label\": {\n                                \"show\": false,\n                                \"position\": \"top\",\n                                \"margin\": 8\n                            },\n                            \"rippleEffect\": {\n                                \"show\": true,\n                                \"brushType\": \"stroke\",\n                                \"scale\": 2.5,\n                                \"period\": 4\n                            }\n                        }\n                    ],\n                    \"legend\": [\n                        {\n                            \"data\": [\n                                \"destination\",\n                                \"geo\"\n                            ],\n                            \"selected\": {\n                                \"destination\": true,\n                                \"geo\": true\n                            },\n                            \"show\": true\n                        }\n                    ],\n                    \"tooltip\": {\n                        \"show\": true,\n                        \"trigger\": \"item\",\n                        \"triggerOn\": \"mousemove|click\",\n                        \"axisPointer\": {\n                            \"type\": \"line\"\n                        },\n                        \"formatter\": function (params) {        return params.name + ' : ' + params.value[2];    },\n                        \"textStyle\": {\n                            \"fontSize\": 14\n                        },\n                        \"borderWidth\": 0\n                    },\n                    \"title\": [\n                        {\n                            \"text\": \"Geo-Lines\"\n                        }\n                    ],\n                    \"geo\": {\n                        \"map\": \"china\",\n                        \"roam\": true,\n                        \"emphasis\": {}\n                    }\n                };\n                chart_77369bcb5d9b43849d3d710b0c5af18d.setOption(option_77369bcb5d9b43849d3d710b0c5af18d);\n            });\n        </script>\n    <script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":400,\"height\":800},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>\n</the>"}],"PostAsset":[{"_id":"source/_posts/Hexo：yilia主题下添加live2d看板动画/01.png","slug":"01.png","post":"ck7an506v000c4cvjevkm7vfu","modified":1,"renderable":0},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/01.jpg","slug":"01.jpg","post":"ck7an507w002h4cvj9tm20e1w","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人一：摄像头标定/001.jpg","slug":"001.jpg","post":"ck7an5095004j4cvjxx97s5qu","modified":1,"renderable":0},{"_id":"source/_posts/门禁人脸检测和识别四：keras人脸表情分类/model.png","slug":"model.png","post":"ck7an509n005c4cvja6w4t4to","modified":1,"renderable":0},{"_id":"source/_posts/随笔_日常练琴/0.png","slug":"0.png","post":"ck7an50bl006m4cvjynti6xos","modified":1,"renderable":0},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/02.png","slug":"02.png","post":"ck7an506t000b4cvj9ro7h2go","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_13_0.png","slug":"output_13_0.png","post":"ck7an50bw006q4cvjbfuitlv4","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_2_0.png","slug":"output_2_0.png","post":"ck7an50bw006q4cvjbfuitlv4","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/output_4_0.png","slug":"output_4_0.png","post":"ck7an50af005q4cvjf5ql8892","modified":1,"renderable":0},{"_id":"source/_posts/Ubuntu-16-04-python3-5-编译caffe/001.jpg","slug":"001.jpg","post":"ck7an507e001c4cvjvov304r0","modified":1,"renderable":0},{"_id":"source/_posts/Hexo：yilia主题下添加相册功能/0.png","post":"ck7an5070000g4cvj0wb68cst","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Jetson-Nano-使用记录/001.png","post":"ck7an5075000t4cvjlwiwsl8z","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录四：python加载运行OpenCL/001.png","post":"ck7an5077000y4cvjam6flssi","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/Scikit-Learn学习笔记/machine_learning_map.png","slug":"machine_learning_map.png","post":"ck7an507a00144cvj1niippfn","modified":1,"renderable":0},{"_id":"source/_posts/loomo多服务机器人开发/设计思路-201905.png","slug":"设计思路-201905.png","post":"ck7an507g001g4cvjh78hr0zi","modified":1,"renderable":0},{"_id":"source/_posts/selenium自动化测试/001.png","post":"ck7an507h001j4cvjvqlheh8p","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/tkinter学习笔记/color.png","slug":"color.png","post":"ck7an507j001n4cvjfqte8y5v","modified":1,"renderable":0},{"_id":"source/_posts/晚安/001.png","slug":"001.png","post":"ck7an507s00284cvjy9e8cae5","modified":1,"renderable":0},{"_id":"source/_posts/桌面冰球机器人/001.gif","slug":"001.gif","post":"ck7an507u002e4cvjtta6gxz3","modified":1,"renderable":0},{"_id":"source/_posts/Hexo：Hello Hexo/000.png","post":"ck7an506o00084cvj1rm382hw","slug":"000.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo：Hello Hexo/001.png","post":"ck7an506o00084cvj1rm382hw","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录/00.png","post":"ck7an5071000j4cvjsai6elj4","slug":"00.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录/01.png","post":"ck7an5071000j4cvjsai6elj4","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/使用VSCode编写LaTeX/00.png","post":"ck7an507m001u4cvj4k5nmjjp","slug":"00.png","modified":1,"renderable":1},{"_id":"source/_posts/使用VSCode编写LaTeX/01.png","post":"ck7an507m001u4cvj4k5nmjjp","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/使用dlib的imglab工具制作训练集与测试/00.png","slug":"00.png","post":"ck7an507n001w4cvjxauk4qii","modified":1,"renderable":0},{"_id":"source/_posts/使用dlib的imglab工具制作训练集与测试/01.png","slug":"01.png","post":"ck7an507n001w4cvjxauk4qii","modified":1,"renderable":0},{"_id":"source/_posts/元胞自动机/01.png","post":"ck7an507p00204cvjv317k5b4","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/元胞自动机/02.png","post":"ck7an507p00204cvjv317k5b4","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/奥比中光ORBBEC-3D体感摄像头/000.png","post":"ck7an507q00244cvj7fqn9cym","slug":"000.png","modified":1,"renderable":1},{"_id":"source/_posts/奥比中光ORBBEC-3D体感摄像头/001.png","slug":"001.png","post":"ck7an507q00244cvj7fqn9cym","modified":1,"renderable":0},{"_id":"source/_posts/眼动追踪推荐眼镜/00.png","slug":"00.png","post":"ck7an507x002k4cvj14t8xwsd","modified":1,"renderable":0},{"_id":"source/_posts/眼动追踪推荐眼镜/detect.gif","slug":"detect.gif","post":"ck7an507x002k4cvj14t8xwsd","modified":1,"renderable":0},{"_id":"source/_posts/Pixar-Lamp/001.jpg","post":"ck7an5076000w4cvjzqlgpgxz","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp/设计思路-201905.png","slug":"设计思路-201905.png","post":"ck7an5076000w4cvjzqlgpgxz","modified":1,"renderable":0},{"_id":"source/_posts/Pixar-Lamp/设计思路.png","slug":"设计思路.png","post":"ck7an5076000w4cvjzqlgpgxz","modified":1,"renderable":0},{"_id":"source/_posts/作业检查机器人/000.jpg","post":"ck7an507j001o4cvjhiojrgkn","slug":"000.jpg","modified":1,"renderable":1},{"_id":"source/_posts/作业检查机器人/001.png","slug":"001.png","post":"ck7an507j001o4cvjhiojrgkn","modified":1,"renderable":0},{"_id":"source/_posts/作业检查机器人/002.png","slug":"002.png","post":"ck7an507j001o4cvjhiojrgkn","modified":1,"renderable":0},{"_id":"source/_posts/win10-python37-安装dlib19-17/00.png","post":"ck7an507l001s4cvj6rwy8qod","slug":"00.png","modified":1,"renderable":1},{"_id":"source/_posts/win10-python37-安装dlib19-17/01.png","post":"ck7an507l001s4cvj6rwy8qod","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/win10-python37-安装dlib19-17/02.png","post":"ck7an507l001s4cvj6rwy8qod","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3/01.png","post":"ck7an507t002c4cvjeurbmhb8","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3/02.png","post":"ck7an507t002c4cvjeurbmhb8","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/树莓派3b 编译安装OpenCV-4.0.0 for Python3/03.png","post":"ck7an507t002c4cvjeurbmhb8","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/00.png","post":"ck7an506t000b4cvj9ro7h2go","slug":"00.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/01.png","post":"ck7an506t000b4cvj9ro7h2go","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo：yilia主题下添加Subnav导航图标/03.png","post":"ck7an506t000b4cvj9ro7h2go","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/01.png","post":"ck7an5074000r4cvjnyalxogk","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/02.png","post":"ck7an5074000r4cvjnyalxogk","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/03.png","post":"ck7an5074000r4cvjnyalxogk","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录二：编译安装opencv4-0-0/04.png","post":"ck7an5074000r4cvjnyalxogk","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/01.png","post":"ck7an5072000n4cvjv0ntsu0a","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/02.png","post":"ck7an5072000n4cvjv0ntsu0a","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/03.png","post":"ck7an5072000n4cvjv0ntsu0a","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/04.png","post":"ck7an5072000n4cvjv0ntsu0a","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/Hikey970使用记录三：USB转串口驱动安装/05.png","post":"ck7an5072000n4cvjv0ntsu0a","slug":"05.png","modified":1,"renderable":1},{"_id":"source/_posts/leapmotion使用记录/000.png","slug":"000.png","post":"ck7an507f001f4cvj7sjzsbzm","modified":1,"renderable":0},{"_id":"source/_posts/leapmotion使用记录/001.png","post":"ck7an507f001f4cvj7sjzsbzm","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/leapmotion使用记录/002.png","post":"ck7an507f001f4cvj7sjzsbzm","slug":"002.png","modified":1,"renderable":1},{"_id":"source/_posts/leapmotion使用记录/003.png","post":"ck7an507f001f4cvj7sjzsbzm","slug":"003.png","modified":1,"renderable":1},{"_id":"source/_posts/leapmotion使用记录/Leap Motion JavaScript Sample.png","post":"ck7an507f001f4cvj7sjzsbzm","slug":"Leap Motion JavaScript Sample.png","modified":1,"renderable":1},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/00.png","post":"ck7an507w002h4cvj9tm20e1w","slug":"00.png","modified":1,"renderable":1},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/02.png","post":"ck7an507w002h4cvj9tm20e1w","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/03.png","post":"ck7an507w002h4cvj9tm20e1w","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/04.png","post":"ck7an507w002h4cvj9tm20e1w","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/05.png","post":"ck7an507w002h4cvj9tm20e1w","slug":"05.png","modified":1,"renderable":1},{"_id":"source/_posts/眼动追踪推荐眼镜一：硬件篇/06.png","post":"ck7an507w002h4cvj9tm20e1w","slug":"06.png","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/00.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"00.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/01.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"01.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/02.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"02.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/03.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"03.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/04.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"04.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/05.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"05.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/06.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"06.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/07.jpg","slug":"07.jpg","post":"ck7an506k00054cvj7cgdwjnq","modified":1,"renderable":0},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/08.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"08.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/09.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"09.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/10.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/11.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/12.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/13.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"13.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FDM3D打印电吉他琴体，制作电吉他/14.jpg","post":"ck7an506k00054cvj7cgdwjnq","slug":"14.jpg","modified":1,"renderable":1},{"_id":"source/_posts/象棋残局机器人二：透射变换/001.jpg","post":"ck7an5092004g4cvjj7ftkyll","slug":"001.jpg","modified":1,"renderable":1},{"_id":"source/_posts/象棋残局机器人五：象棋棋子分类模型/001.jpg","slug":"001.jpg","post":"ck7an5098004o4cvjynsj21y1","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人四：策略/001.png","post":"ck7an509e004v4cvjy84bgwlf","slug":"001.png","modified":1,"renderable":1},{"_id":"source/_posts/门禁人脸检测和识别/demo.gif","slug":"demo.gif","post":"ck7an509j00544cvjuxp2rtue","modified":1,"renderable":0},{"_id":"source/_posts/简单手势分类器/01.png","post":"ck7an508x004b4cvjo4fok48b","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/简单手势分类器/02.png","slug":"02.png","post":"ck7an508x004b4cvjo4fok48b","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人三：分类模型retrain/001.png","slug":"001.png","post":"ck7an5097004m4cvjd1bj1oqo","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人三：分类模型retrain/002.png","slug":"002.png","post":"ck7an5097004m4cvjd1bj1oqo","modified":1,"renderable":0},{"_id":"source/_posts/天猫精灵，开灯/1.png","post":"ck7an50b600604cvj27pw1r1k","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/天猫精灵，开灯/2.png","post":"ck7an50b600604cvj27pw1r1k","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/象棋残局机器人一：摄像头标定/002.png","slug":"002.png","post":"ck7an5095004j4cvjxx97s5qu","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人一：摄像头标定/003.png","slug":"003.png","post":"ck7an5095004j4cvjxx97s5qu","modified":1,"renderable":0},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/00.gif","slug":"00.gif","post":"ck7an509d004t4cvjbbpie9dx","modified":1,"renderable":0},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/01.png","post":"ck7an509d004t4cvjbbpie9dx","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/02.png","post":"ck7an509d004t4cvjbbpie9dx","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/门禁Arduino下位机通信与舵机控制/03.png","post":"ck7an509d004t4cvjbbpie9dx","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/象棋残局机器人/01.png","slug":"01.png","post":"ck7an508z004d4cvjt2afwakp","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人/02.png","post":"ck7an508z004d4cvjt2afwakp","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/象棋残局机器人/demo1.gif","slug":"demo1.gif","post":"ck7an508z004d4cvjt2afwakp","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人/demo2.gif","slug":"demo2.gif","post":"ck7an508z004d4cvjt2afwakp","modified":1,"renderable":0},{"_id":"source/_posts/象棋残局机器人/demo3.gif","slug":"demo3.gif","post":"ck7an508z004d4cvjt2afwakp","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/Histograms of Oriented Gradients for Human Detection.png","post":"ck7an50af005q4cvjf5ql8892","slug":"Histograms of Oriented Gradients for Human Detection.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/hog01.jpg","post":"ck7an50af005q4cvjf5ql8892","slug":"hog01.jpg","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/hog02.jpg","post":"ck7an50af005q4cvjf5ql8892","slug":"hog02.jpg","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记四：目标检测与识别/output_5_1.png","post":"ck7an50af005q4cvjf5ql8892","slug":"output_5_1.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_10_0.png","post":"ck7an50ae005o4cvjjg7oth9g","slug":"output_10_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_12_0.png","post":"ck7an50ae005o4cvjjg7oth9g","slug":"output_12_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_15_0.png","post":"ck7an50ae005o4cvjjg7oth9g","slug":"output_15_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_17_0.png","post":"ck7an50ae005o4cvjjg7oth9g","slug":"output_17_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_4_0.png","post":"ck7an50ae005o4cvjjg7oth9g","slug":"output_4_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_6_0.png","post":"ck7an50ae005o4cvjjg7oth9g","slug":"output_6_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记二：图像处理/output_8_0.png","post":"ck7an50ae005o4cvjjg7oth9g","slug":"output_8_0.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/01.jpg","post":"ck7an50at005t4cvjbifsqobd","slug":"01.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/02.jpg","post":"ck7an50at005t4cvjbifsqobd","slug":"02.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_0_1.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_0_1.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_0_3.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_0_3.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_0_5.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_0_5.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_10_1.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_10_1.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_12_1.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_12_1.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_12_2.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_12_2.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_13_0.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_13_0.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_33_0.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_33_0.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_3_1.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_3_1.png","modified":1,"renderable":1},{"_id":"source/_posts/Pixar-Lamp二：ST-GCN动作识别/output_5_1.png","post":"ck7an50at005t4cvjbifsqobd","slug":"output_5_1.png","modified":1,"renderable":1},{"_id":"source/_posts/空间博弈与matplotlib绘制gif动图/01.png","post":"ck7an50bi006g4cvjczjzv5wg","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/空间博弈与matplotlib绘制gif动图/02.gif","post":"ck7an50bi006g4cvjczjzv5wg","slug":"02.gif","modified":1,"renderable":1},{"_id":"source/_posts/空间博弈与matplotlib绘制gif动图/03.gif","slug":"03.gif","post":"ck7an50bi006g4cvjczjzv5wg","modified":1,"renderable":0},{"_id":"source/_posts/空间博弈演化/02.png","slug":"02.png","post":"ck7an50bk006i4cvj196wt8nb","modified":1,"renderable":0},{"_id":"source/_posts/空间博弈演化/03.png","post":"ck7an50bk006i4cvj196wt8nb","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/空间博弈演化/04.png","post":"ck7an50bk006i4cvj196wt8nb","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/空间博弈演化/05.png","post":"ck7an50bk006i4cvj196wt8nb","slug":"05.png","modified":1,"renderable":1},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/P_Trangle.png","post":"ck7an50bk006k4cvjbppcb9hp","slug":"P_Trangle.png","modified":1,"renderable":1},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/Trangle.png","post":"ck7an50bk006k4cvjbppcb9hp","slug":"Trangle.png","modified":1,"renderable":1},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/opencv-delaunay-vornoi-subdiv-example.png","slug":"opencv-delaunay-vornoi-subdiv-example.png","post":"ck7an50bk006k4cvjbppcb9hp","modified":1,"renderable":0},{"_id":"source/_posts/门禁人脸检测和识别三：Delaunay三角剖分和Voronoi图/output_4_0.png","post":"ck7an50bk006k4cvjbppcb9hp","slug":"output_4_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/DOG Pyramid.jpg","post":"ck7an50bw006q4cvjbfuitlv4","slug":"DOG Pyramid.jpg","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/FAST_samples.png","post":"ck7an50bw006q4cvjbfuitlv4","slug":"FAST_samples.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_11_0.png","post":"ck7an50bw006q4cvjbfuitlv4","slug":"output_11_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_16_0.png","post":"ck7an50bw006q4cvjbfuitlv4","slug":"output_16_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_17_0.png","slug":"output_17_0.png","post":"ck7an50bw006q4cvjbfuitlv4","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_18_0.png","slug":"output_18_0.png","post":"ck7an50bw006q4cvjbfuitlv4","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_3_2.png","post":"ck7an50bw006q4cvjbfuitlv4","slug":"output_3_2.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_5_0.png","post":"ck7an50bw006q4cvjbfuitlv4","slug":"output_5_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_7_1.png","post":"ck7an50bw006q4cvjbfuitlv4","slug":"output_7_1.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/output_9_0.png","post":"ck7an50bw006q4cvjbfuitlv4","slug":"output_9_0.png","modified":1,"renderable":1},{"_id":"source/_posts/OpenCV学习笔记三：特征检测和图像检索/sift_local_extrema.jpg","post":"ck7an50bw006q4cvjbfuitlv4","slug":"sift_local_extrema.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pyecharts数据可视化/bar.png","post":"ck7an50fc006u4cvjk73tcl1s","slug":"bar.png","modified":1,"renderable":1},{"_id":"source/_posts/pyecharts数据可视化/line.png","post":"ck7an50fc006u4cvjk73tcl1s","slug":"line.png","modified":1,"renderable":1},{"_id":"source/_posts/pyecharts数据可视化/pie.png","post":"ck7an50fc006u4cvjk73tcl1s","slug":"pie.png","modified":1,"renderable":1},{"_id":"source/_posts/pyecharts数据可视化/wordcloud.png","post":"ck7an50fc006u4cvjk73tcl1s","slug":"wordcloud.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ck7an506d00014cvjtv441jm6","tag_id":"ck7an506h00034cvjlpwk0xiz","_id":"ck7an506y000f4cvjxi3742jp"},{"post_id":"ck7an506d00014cvjtv441jm6","tag_id":"ck7an506m00074cvjt479h9tx","_id":"ck7an5070000h4cvjp53bq7bx"},{"post_id":"ck7an506d00014cvjtv441jm6","tag_id":"ck7an506s000a4cvj23zqldi2","_id":"ck7an5071000k4cvjymdripxt"},{"post_id":"ck7an506g00024cvjs0qey3b5","tag_id":"ck7an506x000d4cvjbi6xryu5","_id":"ck7an5072000m4cvj33jnfsl9"},{"post_id":"ck7an506j00044cvjycwgxqd3","tag_id":"ck7an5071000i4cvjivszthtz","_id":"ck7an5073000p4cvjxoyt5q5i"},{"post_id":"ck7an506k00054cvj7cgdwjnq","tag_id":"ck7an5073000o4cvjwpna2iep","_id":"ck7an5077000x4cvj4x5q5p2v"},{"post_id":"ck7an506k00054cvj7cgdwjnq","tag_id":"ck7an5075000s4cvjg4yqexee","_id":"ck7an5078000z4cvj1evbw2tl"},{"post_id":"ck7an506l00064cvjnx3dbcwh","tag_id":"ck7an5076000v4cvjino94568","_id":"ck7an507900124cvjdhesl40g"},{"post_id":"ck7an506o00084cvj1rm382hw","tag_id":"ck7an507800104cvjxq6fiha3","_id":"ck7an507b00164cvjbdm2pw44"},{"post_id":"ck7an506r00094cvjdw2kou26","tag_id":"ck7an507800104cvjxq6fiha3","_id":"ck7an507d001a4cvjgua1wn2n"},{"post_id":"ck7an506t000b4cvj9ro7h2go","tag_id":"ck7an507800104cvjxq6fiha3","_id":"ck7an507f001e4cvjejf8opqg"},{"post_id":"ck7an506v000c4cvjevkm7vfu","tag_id":"ck7an507800104cvjxq6fiha3","_id":"ck7an507h001i4cvja4hz6lf4"},{"post_id":"ck7an506y000e4cvjoofsf7ez","tag_id":"ck7an507800104cvjxq6fiha3","_id":"ck7an507j001m4cvjqkjwzmh3"},{"post_id":"ck7an5070000g4cvj0wb68cst","tag_id":"ck7an507800104cvjxq6fiha3","_id":"ck7an507k001q4cvj1g145m5z"},{"post_id":"ck7an5071000j4cvjsai6elj4","tag_id":"ck7an507k001p4cvj7rlumg5j","_id":"ck7an507m001v4cvj1yw3243e"},{"post_id":"ck7an5072000l4cvjnwr2m0b3","tag_id":"ck7an507k001p4cvj7rlumg5j","_id":"ck7an507o001z4cvjvkwp7j6h"},{"post_id":"ck7an5072000n4cvjv0ntsu0a","tag_id":"ck7an507k001p4cvj7rlumg5j","_id":"ck7an507q00234cvjki6ptw0s"},{"post_id":"ck7an5074000r4cvjnyalxogk","tag_id":"ck7an507k001p4cvj7rlumg5j","_id":"ck7an507s00274cvjv5adsxbn"},{"post_id":"ck7an5075000u4cvjdrrzq97j","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an507t002b4cvjju2vvg2z"},{"post_id":"ck7an5076000w4cvjzqlgpgxz","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an507v002f4cvjlmn5n672"},{"post_id":"ck7an5077000y4cvjam6flssi","tag_id":"ck7an507u002d4cvjfuagqtmr","_id":"ck7an507x002j4cvj28x29m6v"},{"post_id":"ck7an507800114cvj6uo9brtg","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an507x002m4cvj2xpesgya"},{"post_id":"ck7an507900134cvjwoe0684s","tag_id":"ck7an507x002l4cvj08birlau","_id":"ck7an507y002o4cvjd4k6xlyv"},{"post_id":"ck7an507a00144cvj1niippfn","tag_id":"ck7an507y002n4cvj4eq1h9vi","_id":"ck7an507y002r4cvjkeq8liuq"},{"post_id":"ck7an507a00144cvj1niippfn","tag_id":"ck7an507y002p4cvjzi9w94ta","_id":"ck7an507y002s4cvj4cttc8fn"},{"post_id":"ck7an507c00174cvjwyieopu1","tag_id":"ck7an507y002q4cvjeydirznm","_id":"ck7an507z002u4cvj5wavdpyb"},{"post_id":"ck7an507c00184cvjkdhek6s5","tag_id":"ck7an507y002t4cvj1xfel3x4","_id":"ck7an507z002w4cvj6i76w9k6"},{"post_id":"ck7an507d001b4cvj16hpz9rz","tag_id":"ck7an507z002v4cvjphyvxrli","_id":"ck7an507z002y4cvjixoc8vf3"},{"post_id":"ck7an507f001f4cvj7sjzsbzm","tag_id":"ck7an507z002x4cvjzd50dlzc","_id":"ck7an508300324cvjviv1m7t6"},{"post_id":"ck7an507f001f4cvj7sjzsbzm","tag_id":"ck7an507z002z4cvjdqgtcpfr","_id":"ck7an508400334cvj1mruvn52"},{"post_id":"ck7an507f001f4cvj7sjzsbzm","tag_id":"ck7an508000304cvjzz2rz372","_id":"ck7an508400354cvjxkwv9x9a"},{"post_id":"ck7an507g001g4cvjh78hr0zi","tag_id":"ck7an508000314cvj10koj6yc","_id":"ck7an508500384cvjla256jq1"},{"post_id":"ck7an507g001g4cvjh78hr0zi","tag_id":"ck7an508400344cvjeusa4cj3","_id":"ck7an508500394cvji5trr3zs"},{"post_id":"ck7an507g001g4cvjh78hr0zi","tag_id":"ck7an508400364cvjtcreqxoj","_id":"ck7an5086003b4cvjmlqzg9kj"},{"post_id":"ck7an507h001j4cvjvqlheh8p","tag_id":"ck7an507y002n4cvj4eq1h9vi","_id":"ck7an5086003c4cvjs0w0adjd"},{"post_id":"ck7an507i001k4cvj2j2j00br","tag_id":"ck7an5085003a4cvjbfyns97r","_id":"ck7an5086003e4cvjygp5to59"},{"post_id":"ck7an507j001n4cvjfqte8y5v","tag_id":"ck7an5086003d4cvjskvkkiuq","_id":"ck7an5088003h4cvjcbmcqkwl"},{"post_id":"ck7an507j001n4cvjfqte8y5v","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an5088003i4cvjex4zy692"},{"post_id":"ck7an507j001o4cvjhiojrgkn","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an5089003l4cvjmyu44a85"},{"post_id":"ck7an507j001o4cvjhiojrgkn","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an5089003m4cvjp0qmp4io"},{"post_id":"ck7an507l001s4cvj6rwy8qod","tag_id":"ck7an5088003k4cvj5vx9anpb","_id":"ck7an5089003o4cvj01ibleqy"},{"post_id":"ck7an507m001u4cvj4k5nmjjp","tag_id":"ck7an5089003n4cvjpb58tr6l","_id":"ck7an508a003q4cvjd1c11zox"},{"post_id":"ck7an507n001w4cvjxauk4qii","tag_id":"ck7an5088003k4cvj5vx9anpb","_id":"ck7an508a003s4cvjsfdtve3z"},{"post_id":"ck7an507p00204cvjv317k5b4","tag_id":"ck7an508a003r4cvj888n5we8","_id":"ck7an508b003u4cvjuwpl0u6j"},{"post_id":"ck7an507q00224cvjfzkqz29c","tag_id":"ck7an508b003t4cvjs8d6o7kz","_id":"ck7an508c003x4cvjb1tkcoop"},{"post_id":"ck7an507q00224cvjfzkqz29c","tag_id":"ck7an508b003v4cvjepfdtxfn","_id":"ck7an508c003y4cvje9vrg69k"},{"post_id":"ck7an507r00264cvjb1mex8j6","tag_id":"ck7an508b003w4cvjr8r4h3wx","_id":"ck7an508c00404cvj43pz32ww"},{"post_id":"ck7an507t002a4cvj9l0cyzom","tag_id":"ck7an508c003z4cvjis5sap5w","_id":"ck7an508d00424cvjtmkusba7"},{"post_id":"ck7an507t002c4cvjeurbmhb8","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an508d00444cvj7gu6reng"},{"post_id":"ck7an507t002c4cvjeurbmhb8","tag_id":"ck7an508c003z4cvjis5sap5w","_id":"ck7an508d00454cvjglr33p8m"},{"post_id":"ck7an507t002c4cvjeurbmhb8","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an508d00464cvj9sicqbry"},{"post_id":"ck7an507u002e4cvjtta6gxz3","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an508d00474cvjum5v0l9r"},{"post_id":"ck7an507u002e4cvjtta6gxz3","tag_id":"ck7an508d00434cvjl4n23lbc","_id":"ck7an508d00484cvjiel2ajzo"},{"post_id":"ck7an5092004g4cvjj7ftkyll","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an5095004i4cvjs2l0z2up"},{"post_id":"ck7an508x004b4cvjo4fok48b","tag_id":"ck7an508c003z4cvjis5sap5w","_id":"ck7an5097004l4cvjgn45lf4u"},{"post_id":"ck7an508x004b4cvjo4fok48b","tag_id":"ck7an5092004f4cvjnmguqizo","_id":"ck7an5098004n4cvjhpps3afs"},{"post_id":"ck7an508x004b4cvjo4fok48b","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an509b004q4cvju2p535cb"},{"post_id":"ck7an508x004b4cvjo4fok48b","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an509d004s4cvjbkq8g6ce"},{"post_id":"ck7an5095004j4cvjxx97s5qu","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an509e004u4cvju4081r3e"},{"post_id":"ck7an508z004d4cvjt2afwakp","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an509f004w4cvjv60pj0lv"},{"post_id":"ck7an508z004d4cvjt2afwakp","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an509h004z4cvjo9av9sn7"},{"post_id":"ck7an508z004d4cvjt2afwakp","tag_id":"ck7an5096004k4cvj9zvo5dpu","_id":"ck7an509i00514cvjpszs3hmw"},{"post_id":"ck7an5097004m4cvjd1bj1oqo","tag_id":"ck7an507x002l4cvj08birlau","_id":"ck7an509j00534cvjbgwmfzm4"},{"post_id":"ck7an5097004m4cvjd1bj1oqo","tag_id":"ck7an509b004p4cvjmv3olrot","_id":"ck7an509k00554cvjgbc6jpoc"},{"post_id":"ck7an509h00504cvj8lra75ew","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an509l00574cvj3omaj8gv"},{"post_id":"ck7an509e004v4cvjy84bgwlf","tag_id":"ck7an509h004y4cvjtq0r4u1i","_id":"ck7an509m00594cvj1t8qok6x"},{"post_id":"ck7an509j00544cvjuxp2rtue","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an509n005b4cvj0u6ppc13"},{"post_id":"ck7an509j00544cvjuxp2rtue","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an509o005e4cvjixvw8xtc"},{"post_id":"ck7an509l00584cvj0mba8e0l","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an509q005g4cvjhays5ao6"},{"post_id":"ck7an509m005a4cvjl5jarank","tag_id":"ck7an509o005d4cvjm04ljswz","_id":"ck7an50a2005k4cvjuspdvvor"},{"post_id":"ck7an509n005c4cvja6w4t4to","tag_id":"ck7an509r005j4cvjba6btkf1","_id":"ck7an50af005p4cvj6qt8jjlz"},{"post_id":"ck7an50ae005o4cvjjg7oth9g","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an50at005s4cvj6z321xfs"},{"post_id":"ck7an509p005f4cvji0t7bvin","tag_id":"ck7an50ae005n4cvjvc6dxrg0","_id":"ck7an50au005u4cvjkr7p5u1g"},{"post_id":"ck7an50af005q4cvjf5ql8892","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an50b4005w4cvjzhugy95l"},{"post_id":"ck7an509q005h4cvjwj2hiaps","tag_id":"ck7an50ag005r4cvjk7enfqxf","_id":"ck7an50b6005z4cvj20co7j0a"},{"post_id":"ck7an509r005i4cvj1iz77aoj","tag_id":"ck7an50ag005r4cvjk7enfqxf","_id":"ck7an50b700634cvjdmzj6sn1"},{"post_id":"ck7an50a2005l4cvj4r3zmh1l","tag_id":"ck7an50ag005r4cvjk7enfqxf","_id":"ck7an50b800654cvjdi7aibfi"},{"post_id":"ck7an50au005v4cvjetug2tbr","tag_id":"ck7an50b800644cvj83q8xpva","_id":"ck7an50b800674cvj08xptcr8"},{"post_id":"ck7an50b4005y4cvjli0t6p4n","tag_id":"ck7an507s00294cvjijtn2ypn","_id":"ck7an50b800694cvjpcbufxvi"},{"post_id":"ck7an50b4005y4cvjli0t6p4n","tag_id":"ck7an50b800664cvjaixq08pz","_id":"ck7an50b9006a4cvj907yrbcc"},{"post_id":"ck7an50b600604cvj27pw1r1k","tag_id":"ck7an508b003t4cvjs8d6o7kz","_id":"ck7an50b9006c4cvj831j1j9l"},{"post_id":"ck7an50b600604cvj27pw1r1k","tag_id":"ck7an508b003v4cvjepfdtxfn","_id":"ck7an50b9006d4cvjzpprp537"},{"post_id":"ck7an50b600604cvj27pw1r1k","tag_id":"ck7an50b800684cvjcx0arh18","_id":"ck7an50b9006e4cvjucyu8eiz"},{"post_id":"ck7an50b600604cvj27pw1r1k","tag_id":"ck7an50b9006b4cvjlbyxwpyd","_id":"ck7an50b9006f4cvjr5ntuihl"},{"post_id":"ck7an50bi006g4cvjczjzv5wg","tag_id":"ck7an508a003r4cvj888n5we8","_id":"ck7an50bk006j4cvjmm1pv8km"},{"post_id":"ck7an50bk006i4cvj196wt8nb","tag_id":"ck7an508a003r4cvj888n5we8","_id":"ck7an50bl006l4cvjnhimb38t"},{"post_id":"ck7an50bk006k4cvjbppcb9hp","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an50bm006n4cvjfiv7jasa"},{"post_id":"ck7an50bl006m4cvjynti6xos","tag_id":"ck7an50ag005r4cvjk7enfqxf","_id":"ck7an50bv006p4cvjhzisjqey"},{"post_id":"ck7an50bm006o4cvjbz8i500p","tag_id":"ck7an50ag005r4cvjk7enfqxf","_id":"ck7an50c4006r4cvjr7ujcvzl"},{"post_id":"ck7an50bw006q4cvjbfuitlv4","tag_id":"ck7an507r00254cvjbvobatft","_id":"ck7an50cf006s4cvjyvbjdvyk"},{"post_id":"ck7an50fc006u4cvjk73tcl1s","tag_id":"ck7an507y002n4cvj4eq1h9vi","_id":"ck7an50fe006v4cvjtd7kwouw"}],"Tag":[{"name":"lua","_id":"ck7an506h00034cvjlpwk0xiz"},{"name":"neat","_id":"ck7an506m00074cvjt479h9tx"},{"name":"Mario","_id":"ck7an506s000a4cvj23zqldi2"},{"name":"Arduino","_id":"ck7an506x000d4cvjbi6xryu5"},{"name":"brainfuck","_id":"ck7an5071000i4cvjivszthtz"},{"name":"3D打印","_id":"ck7an5073000o4cvjwpna2iep"},{"name":"吉他","_id":"ck7an5075000s4cvjg4yqexee"},{"name":"flask","_id":"ck7an5076000v4cvjino94568"},{"name":"hexo","_id":"ck7an507800104cvjxq6fiha3"},{"name":"Hikey970","_id":"ck7an507k001p4cvj7rlumg5j"},{"name":"opencv","_id":"ck7an507r00254cvjbvobatft"},{"name":"python","_id":"ck7an507s00294cvjijtn2ypn"},{"name":"pyopencl","_id":"ck7an507u002d4cvjfuagqtmr"},{"name":"tensorflow","_id":"ck7an507x002l4cvj08birlau"},{"name":"import","_id":"ck7an507y002n4cvj4eq1h9vi"},{"name":"sklearn","_id":"ck7an507y002p4cvjzi9w94ta"},{"name":"RL","_id":"ck7an507y002q4cvjeydirznm"},{"name":"git","_id":"ck7an507y002t4cvj1xfel3x4"},{"name":"-go","_id":"ck7an507z002v4cvjphyvxrli"},{"name":"leapmotion\\","_id":"ck7an507z002x4cvjzd50dlzc"},{"name":"js","_id":"ck7an507z002z4cvjdqgtcpfr"},{"name":"box2d","_id":"ck7an508000304cvjzz2rz372"},{"name":"loomo","_id":"ck7an508000314cvj10koj6yc"},{"name":"Android","_id":"ck7an508400344cvjeusa4cj3"},{"name":"机械手","_id":"ck7an508400364cvjtcreqxoj"},{"name":"web","_id":"ck7an5085003a4cvjbfyns97r"},{"name":"tkinter","_id":"ck7an5086003d4cvjskvkkiuq"},{"name":"dlib","_id":"ck7an5088003k4cvj5vx9anpb"},{"name":"Latex","_id":"ck7an5089003n4cvjpb58tr6l"},{"name":"数模","_id":"ck7an508a003r4cvj888n5we8"},{"name":"天猫精灵","_id":"ck7an508b003t4cvjs8d6o7kz"},{"name":"esp8266","_id":"ck7an508b003v4cvjepfdtxfn"},{"name":"today is a happy day","_id":"ck7an508b003w4cvjr8r4h3wx"},{"name":"raspberry","_id":"ck7an508c003z4cvjis5sap5w"},{"name":"arduino","_id":"ck7an508d00434cvjl4n23lbc"},{"name":"tf","_id":"ck7an5092004f4cvjnmguqizo"},{"name":"alphazero","_id":"ck7an5096004k4cvj9zvo5dpu"},{"name":"迁移学习","_id":"ck7an509b004p4cvjmv3olrot"},{"name":"AlphaZero","_id":"ck7an509h004y4cvjtq0r4u1i"},{"name":"Flask","_id":"ck7an509o005d4cvjm04ljswz"},{"name":"keras","_id":"ck7an509r005j4cvjba6btkf1"},{"name":"docker","_id":"ck7an50ae005n4cvjvc6dxrg0"},{"name":"随笔","_id":"ck7an50ag005r4cvjk7enfqxf"},{"name":"yolo","_id":"ck7an50b800644cvj83q8xpva"},{"name":"jupyter notebook","_id":"ck7an50b800664cvjaixq08pz"},{"name":"php","_id":"ck7an50b800684cvjcx0arh18"},{"name":"mysql","_id":"ck7an50b9006b4cvjlbyxwpyd"}]}}